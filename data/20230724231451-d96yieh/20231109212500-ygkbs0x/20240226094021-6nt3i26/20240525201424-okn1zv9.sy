{"ID":"20240525201424-okn1zv9","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f4a7","id":"20240525201424-okn1zv9","title":"API语法","type":"doc","updated":"20240525213501"},"Children":[{"ID":"20240525201424-la246sp","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240525201424-la246sp","updated":"20240525201449"},"Children":[{"Type":"NodeText","Data":"概述"}]},{"ID":"20240525201455-l4fmti9","Type":"NodeParagraph","Properties":{"id":"20240525201455-l4fmti9","updated":"20240525201455"},"Children":[{"Type":"NodeText","Data":"api 是 go-zero 自研的领域特性语言（下文称 api 语言 或 api 描述语言），旨在实现人性化的基础描述语言，作为生成 HTTP 服务最基本的描述语言。"}]},{"ID":"20240525201455-ffw8l6r","Type":"NodeParagraph","Properties":{"id":"20240525201455-ffw8l6r","updated":"20240525201455"},"Children":[{"Type":"NodeText","Data":"api 领域特性语言包含语法版本，info 块，结构体声明，服务描述等几大块语法组成，其中结构体和 Golang 结构体 语法几乎一样，只是移出了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"struct"},{"Type":"NodeText","Data":"​ 关键字。"}]},{"ID":"20240525201502-qq52yys","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240525201502-qq52yys","updated":"20240525201506"},"Children":[{"Type":"NodeText","Data":"快速入门"}]},{"ID":"20240525201506-krgaj7x","Type":"NodeParagraph","Properties":{"id":"20240525201506-krgaj7x","updated":"20240525202828"},"Children":[{"Type":"NodeText","Data":"本次仅以demo的形式快速介绍API 文件的写法，详细的写法示例可参考 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://go-zero.dev/docs/reference","TextMarkTextContent":"《API 定义完整示例》"},{"Type":"NodeText","Data":"，详细 api 语法规范可参考 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://go-zero.dev/docs/tutorials","TextMarkTextContent":"《API 规范》"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240525202838-75sbf1n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525202838-75sbf1n","updated":"20240525202838"},"Children":[{"Type":"NodeText","Data":"示例 1. 编写最简单的 ping 路由服务"}]},{"ID":"20240525202843-gfapq6a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525202843-gfapq6a","updated":"20240525202852"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\n// 定义 HTTP 服务\nservice foo {\n    get /ping\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525202903-lnfqhal","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525202903-lnfqhal","updated":"20240525202903"},"Children":[{"Type":"NodeText","Data":"示例 2. 编写一个登录接口 api 文件"}]},{"ID":"20240525202905-igfygzf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525202905-igfygzf","updated":"20240525213411"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype (\n    // 定义登录接口的请求体\n    LoginReq {\n        Username string `json:\"username\"`\n        Password string `json:\"password\"`\n    }\n    // 定义登录接口的响应体\n    LoginResp {\n        Id       int64  `json:\"id\"`\n        Name     string `json:\"name\"`\n        Token    string `json:\"token\"`\n        ExpireAt string `json:\"expireAt\"`\n    }\n)\n\n// 定义 HTTP 服务\n// 微服务名称为 user，生成的代码目录和配置文件将和 user 值相关\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法\n    @handler Login\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/login\n    // 请求体为 LoginReq\n    // 响应体为 LoginResp，响应体必须有 returns 关键字修饰\n    post /user/login (LoginReq) returns (LoginResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525213359-ycpw8t0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525213359-ycpw8t0","updated":"20240525213359"},"Children":[{"Type":"NodeText","Data":"示例 3. 编写简单的用户服务 api 文件"}]},{"ID":"20240525213400-q3segnb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525213400-q3segnb","updated":"20240525213407"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype (\n    // 定义登录接口的 json 请求体\n    LoginReq {\n        Username string `json:\"username\"`\n        Password string `json:\"password\"`\n    }\n    // 定义登录接口的 json 响应体\n    LoginResp {\n        Id       int64  `json:\"id\"`\n        Name     string `json:\"name\"`\n        Token    string `json:\"token\"`\n        ExpireAt string `json:\"expireAt\"`\n    }\n)\n\ntype (\n    // 定义获取用户信息的 json 请求体\n    GetUserInfoReq {\n        Id int64 `json:\"id\"`\n    }\n    // 定义获取用户信息的 json 响应体\n    GetUserInfoResp {\n        Id   int64  `json:\"id\"`\n        Name string `json:\"name\"`\n        Desc string `json:\"desc\"`\n    }\n    // 定义更新用户信息的 json 请求体\n    UpdateUserInfoReq {\n        Id   int64  `json:\"id\"`\n        Name string `json:\"name\"`\n        Desc string `json:\"desc\"`\n    }\n)\n\n// 定义 HTTP 服务\n// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：\n// 1. 路由分组\n// 2. 中间件声明\n// 3. 路由前缀\n// 4. 超时配置\n// 5. jwt 鉴权开关\n// 所有声明仅对当前 service 中的路由有效\n@server (\n    // 代表当前 service 代码块下的路由生成代码时都会被放到 login 目录下\n    group: login\n    // 定义路由前缀为 \"/v1\"\n    prefix: /v1\n)\n// 微服务名称为 user，生成的代码目录和配置文件将和 user 值相关\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler login\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/login\n    // 请求体为 LoginReq\n    // 响应体为 LoginResp，响应体必须有 returns 关键字修饰\n    post /user/login (LoginReq) returns (LoginResp)\n}\n\n// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：\n// 1. 路由分组\n// 2. 中间件声明\n// 3. 路由前缀\n// 4. 超时配置\n// 5. jwt 鉴权开关\n// 所有声明仅对当前 service 中的路由有效\n@server (\n    // 代表当前 service 代码块下的所有路由均需要 jwt 鉴权\n    // goctl 生成代码时会将当前 service 代码块下的接口\n    // 信息添加上 jwt 相关代码，Auth 值为 jwt 密钥，过期\n    // 等信息配置的 golang 结构体名称\n    jwt: Auth\n    // 代表当前 service 代码块下的路由生成代码时都会被放到 user 目录下\n    group: user\n    // 定义路由前缀为 \"/v1\"\n    prefix: /v1\n)\n// 注意，定义多个 service 代码块时，服务名称必须一致，因此这里的服务名称必须\n// 和上文的 service 名称一样，为 user 服务。\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler getUserInfo\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/info\n    // 请求体为 GetUserInfoReq\n    // 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰\n    post /user/info (GetUserInfoReq) returns (GetUserInfoResp)\n\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler updateUserInfo\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/info/update\n    // 请求体为 UpdateUserInfoReq\n    // 由于不需要响应体，因此可以忽略不写\n    post /user/info/update (UpdateUserInfoReq)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525213421-oojb6cw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525213421-oojb6cw","updated":"20240525213421"},"Children":[{"Type":"NodeText","Data":"示例 4. 编写带有中间件的 api 服务"}]},{"ID":"20240525213424-8hagh6j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525213424-8hagh6j","updated":"20240525213427"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype GetUserInfoReq {\n    Id int64 `json:\"id\"`\n}\n\ntype GetUserInfoResp {\n    Id   int64  `json:\"id\"`\n    Name string `json:\"name\"`\n    Desc string `json:\"desc\"`\n}\n\n// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：\n// 1. 路由分组\n// 2. 中间件声明\n// 3. 路由前缀\n// 4. 超时配置\n// 5. jwt 鉴权开关\n// 所有声明仅对当前 service 中的路由有效\n@server (\n    // 定义一个鉴权控制的中间件，多个中间件以英文逗号,分割，如 Middleware1,Middleware2,中间件按声明顺序执行\n    middleware: AuthInterceptor\n)\n// 定义一个名称为 user 的服务\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler getUserInfo\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/info\n    // 请求体为 GetUserInfoReq\n    // 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰\n    post /user/info (GetUserInfoReq) returns (GetUserInfoResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525213431-vlk9fzc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525213431-vlk9fzc","updated":"20240525213431"},"Children":[{"Type":"NodeText","Data":"示例 5. 编写带有超时配置的 api 服务"}]},{"ID":"20240525213432-r171tqw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525213432-r171tqw","updated":"20240525213439"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype GetUserInfoReq {\n    Id int64 `json:\"id\"`\n}\n\ntype GetUserInfoResp {\n    Id   int64  `json:\"id\"`\n    Name string `json:\"name\"`\n    Desc string `json:\"desc\"`\n}\n\n// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：\n// 1. 路由分组\n// 2. 中间件声明\n// 3. 路由前缀\n// 4. 超时配置\n// 5. jwt 鉴权开关\n// 所有声明仅对当前 service 中的路由有效\n@server (\n    // 定义一个超时时长为 3 秒的超时配置，这里可填写为 time.Duration 的字符串形式，详情可参考 \n    // https://pkg.go.dev/time#Duration.String\n    timeout: 3s\n)\n// 定义一个名称为 user 的服务\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler getUserInfo\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/info\n    // 请求体为 GetUserInfoReq\n    // 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰\n    post /user/info (GetUserInfoReq) returns (GetUserInfoResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525213444-m03j6xk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525213444-m03j6xk","updated":"20240525213444"},"Children":[{"Type":"NodeText","Data":"示例 6. 结构体引用"}]},{"ID":"20240525213445-ecg5dur","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525213445-ecg5dur","updated":"20240525213451"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype Base {\n    Code int    `json:\"code\"`\n    Msg  string `json:\"msg\"`\n}\n\ntype UserInfo {\n    Id   int64  `json:\"id\"`\n    Name string `json:\"name\"`\n    Desc string `json:\"desc\"`\n}\n\ntype GetUserInfoReq {\n    Id int64 `json:\"id\"`\n}\n\ntype GetUserInfoResp {\n    // api 支持匿名结构体嵌套，也支持结构体引用\n    Base\n    Data UserInfo `json:\"data\"`\n}\n\n// 定义一个名称为 user 的服务\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler getUserInfo\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/info\n    // 请求体为 GetUserInfoReq\n    // 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰\n    post /user/info (GetUserInfoReq) returns (GetUserInfoResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525213457-6zju0rx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525213457-6zju0rx","updated":"20240525213457"},"Children":[{"Type":"NodeText","Data":"示例 7. 控制最大请求体控制的 api 服务"}]},{"ID":"20240525213458-6ac74i6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525213458-6ac74i6","updated":"20240525213501"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype GetUserInfoReq {\n    Id int64 `json:\"id\"`\n}\n\ntype GetUserInfoResp {\n    Id   int64  `json:\"id\"`\n    Name string `json:\"name\"`\n    Desc string `json:\"desc\"`\n}\n\n// @server 语法块主要用于控制对 HTTP 服务生成时 meta 信息，目前支持功能有：\n// 1. 路由分组\n// 2. 中间件声明\n// 3. 路由前缀\n// 4. 超时配置\n// 5. jwt 鉴权开关\n// 所有声明仅对当前 service 中的路由有效\n@server (\n    // 定义一个请求体限制在 1MB 以内的请求，goctl \u003e= 1.5.0 版本支持\n    maxBytes: 1048576\n)\n// 定义一个名称为 user 的服务\nservice user {\n    // 定义 http.HandleFunc 转换的 go 文件名称及方法，每个接口都会跟一个 handler\n    @handler getUserInfo\n    // 定义接口\n    // 请求方法为 post\n    // 路由为 /user/info\n    // 请求体为 GetUserInfoReq\n    // 响应体为 GetUserInfoResp，响应体必须有 returns 关键字修饰\n    post /user/info (GetUserInfoReq) returns (GetUserInfoResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}