{"ID":"20240525220258-v4602ha","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3b8","id":"20240525220258-v4602ha","title":"API规范","type":"doc","updated":"20240526163318"},"Children":[{"ID":"20240525222323-t7n5n0e","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240525222323-t7n5n0e","updated":"20240525222323"},"Children":[{"Type":"NodeText","Data":"概述"}]},{"ID":"20240525222329-wq9adc0","Type":"NodeParagraph","Properties":{"id":"20240525222329-wq9adc0","updated":"20240525222329"},"Children":[{"Type":"NodeText","Data":"api 是 go-zero 自研的领域特性语言（下文称 api 语言 或 api 描述语言），旨在实现人性化的基础描述语言，作为生成 HTTP 服务最基本的描述语言。"}]},{"ID":"20240525222329-qy7vudb","Type":"NodeParagraph","Properties":{"id":"20240525222329-qy7vudb","updated":"20240525222329"},"Children":[{"Type":"NodeText","Data":"api 领域特性语言包含语法版本，info 块，结构体声明，服务描述等几大块语法组成，其中结构体和 Golang 结构体 语法几乎一样，只是移除了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"struct"},{"Type":"NodeText","Data":"​ 关键字。"}]},{"ID":"20240525222333-c88n3kv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240525222333-c88n3kv","updated":"20240525222333"},"Children":[{"Type":"NodeText","Data":"目标"}]},{"ID":"20240525222337-vsnxfdj","Type":"NodeList","ListData":{},"Properties":{"id":"20240525222337-vsnxfdj","updated":"20240525222337"},"Children":[{"ID":"20240525222337-3kh88p7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240525222337-3kh88p7","updated":"20240525222337"},"Children":[{"ID":"20240525222337-g9wk19w","Type":"NodeParagraph","Properties":{"id":"20240525222337-g9wk19w","updated":"20240525222337"},"Children":[{"Type":"NodeText","Data":"学习成本低"}]}]},{"ID":"20240525222337-c51wock","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240525222337-c51wock","updated":"20240525222337"},"Children":[{"ID":"20240525222337-yltluab","Type":"NodeParagraph","Properties":{"id":"20240525222337-yltluab","updated":"20240525222337"},"Children":[{"Type":"NodeText","Data":"可读性强"}]}]},{"ID":"20240525222337-9brgno3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240525222337-9brgno3","updated":"20240525222337"},"Children":[{"ID":"20240525222337-a8fhgpe","Type":"NodeParagraph","Properties":{"id":"20240525222337-a8fhgpe","updated":"20240525222337"},"Children":[{"Type":"NodeText","Data":"扩展自由"}]}]},{"ID":"20240525222337-2b5vgqn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240525222337-2b5vgqn","updated":"20240525222337"},"Children":[{"ID":"20240525222337-8kqsdg8","Type":"NodeParagraph","Properties":{"id":"20240525222337-8kqsdg8","updated":"20240525222337"},"Children":[{"Type":"NodeText","Data":"HTTP 服务一键生成"}]}]},{"ID":"20240525222337-xfhk1yf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240525222337-xfhk1yf","updated":"20240525222337"},"Children":[{"ID":"20240525222337-smdxko9","Type":"NodeParagraph","Properties":{"id":"20240525222337-smdxko9","updated":"20240525222337"},"Children":[{"Type":"NodeText","Data":"编写一个 api 文件，生成多种语言代码服务"}]}]}]},{"ID":"20240525222344-6em2qh4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240525222344-6em2qh4","updated":"20240525222344"},"Children":[{"Type":"NodeText","Data":"语法标记符号"}]},{"ID":"20240525222347-ytrjo72","Type":"NodeParagraph","Properties":{"id":"20240525222347-ytrjo72","updated":"20240525222347"},"Children":[{"Type":"NodeText","Data":"api 语法是使用 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://zh.m.wikipedia.org/zh-sg/%E6%89%A9%E5%B1%95%E5%B7%B4%E7%A7%91%E6%96%AF%E8%8C%83%E5%BC%8F","TextMarkTextContent":"扩展巴科斯范式（EBNF）"},{"Type":"NodeText","Data":" 来描述的，在扩展巴科斯范式中指定"}]},{"ID":"20240525222348-55phadr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525222348-55phadr","updated":"20240525222354"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"Syntax      = { Production } .\nProduction  = production_name \"=\" [ Expression ] \".\" .\nExpression  = Term { \"|\" Term } .\nTerm        = Factor { Factor } .\nFactor      = production_name | token [ \"…\" token ] | Group | Option | Repetition .\nGroup       = \"(\" Expression \")\" .\nOption      = \"[\" Expression \"]\" .\nRepetition  = \"{\" Expression \"}\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525222353-ns4amkx","Type":"NodeParagraph","Properties":{"id":"20240525222353-ns4amkx","updated":"20240525222358"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Production"},{"Type":"NodeText","Data":"​ 由 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Term"},{"Type":"NodeText","Data":"​ 和如下操作符组成，如下操作符优先级递增："}]},{"ID":"20240525222359-bmfcw4z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525222359-bmfcw4z","updated":"20240525222403"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"|   alternation\n()  grouping\n[]  option (0 or 1 times)\n{}  repetition (0 to n times)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525222409-51mt0xc","Type":"NodeParagraph","Properties":{"id":"20240525222409-51mt0xc","updated":"20240525222409"},"Children":[{"Type":"NodeText","Data":"形式 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"a...b"},{"Type":"NodeText","Data":"​ 表示从 a 到 b 的一组字符作为替代，如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"0...9"},{"Type":"NodeText","Data":"​ 代表 0 到 9 的有效数值。"}]},{"ID":"20240525222410-61rt37y","Type":"NodeParagraph","Properties":{"id":"20240525222410-61rt37y","updated":"20240525222415"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"."},{"Type":"NodeText","Data":"​ 表示 ENBF 的终结符号。"}]},{"ID":"20240525222420-un7l7qo","Type":"NodeBlockquote","Properties":{"id":"20240525222420-un7l7qo","updated":"20240525222423"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240525222423-8dljosb","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240525222423-8dljosb","updated":"20240525222423"},"Children":[{"Type":"NodeText","Data":"注意"}]},{"ID":"20240525222423-kf7q89c","Type":"NodeParagraph","Properties":{"id":"20240525222423-kf7q89c","updated":"20240525222424"},"Children":[{"Type":"NodeText","Data":"产生式的名称如果为小写，则代表终结 token，驼峰式的产生式名称则为非终结符 token，如："}]},{"ID":"20240525222423-p7ku35x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525222423-p7ku35x","updated":"20240525222424"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"ZWJuZg=="},{"Type":"NodeCodeBlockCode","Data":"// 终结 token\nnumber = \"0\"...\"9\" .\nlower_letter = \"a\"...\"z\" .\n\n// 非终结 token\nDataType = TypeLit | TypeGroup .\nTypeLit  = TypeAlias | TypeStruct .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]},{"ID":"20240525222443-iz3rfyc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240525222443-iz3rfyc","updated":"20240525222443"},"Children":[{"Type":"NodeText","Data":"源代码表示"}]},{"ID":"20240525222447-4gf3sm7","Type":"NodeParagraph","Properties":{"id":"20240525222447-4gf3sm7","updated":"20240525222447"},"Children":[{"Type":"NodeText","Data":"源代码表示是用来描述 api 语法的最基础元素。"}]},{"ID":"20240525222452-5c7r26l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525222452-5c7r26l","updated":"20240525222452"},"Children":[{"Type":"NodeText","Data":"字符"}]},{"ID":"20240525222452-v9crf60","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525222452-v9crf60","updated":"20240525222459"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"newline        = /* 代表换行符， Unicode 值为 U+000A */ .\nunicode_char   = /* 除换行符 newline 外的其他 Unicode 字符 */ .\nunicode_letter = /* 字母 a...z|A...Z Unicode */ .\nunicode_digit  = /* 数值 0...9 Unicode */ .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240525222503-4f06ibj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240525222503-4f06ibj","updated":"20240525222503"},"Children":[{"Type":"NodeText","Data":"字母和数字"}]},{"ID":"20240525232534-nzakfjx","Type":"NodeParagraph","Properties":{"id":"20240525232534-nzakfjx","updated":"20240525232534"},"Children":[{"Type":"NodeText","Data":"下划线字符 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_"},{"Type":"NodeText","Data":"​ (U+005F) 被视为小写字母。"}]},{"ID":"20240525232536-r6utr5v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240525232536-r6utr5v","updated":"20240525232538"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"letter        = \"A\"...\"Z\" | \"a\"...\"z\" | \"_\" .\ndecimal_digit = \"0\" … \"9\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162439-drb90uy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526162439-drb90uy","updated":"20240526162439"},"Children":[{"Type":"NodeText","Data":"抽象语法树"}]},{"ID":"20240526162443-whx5gdu","Type":"NodeParagraph","Properties":{"id":"20240526162443-whx5gdu","updated":"20240526162443"},"Children":[{"Type":"NodeText","Data":"抽象语法树（"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"bstract "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"S"},{"Type":"NodeText","Data":"yntax "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"T"},{"Type":"NodeText","Data":"ree，AST），或简称语法树（Syntax tree），是源代码语法结构的一种抽象表示。它以树状的形式表现编程语言的语法结构，树上的每个节点都表示源代码中的一种结构。之所以说语法是“抽象”的，是因为这里的语法并不会表示出真实语法中出现的每个细节。比如，嵌套括号被隐含在树的结构中，并没有以节点的形式呈现；而类似于 if-condition-then 这样的条件跳转语句，可以使用带有三个分支的节点来表示。"}]},{"ID":"20240526162443-iviqhnn","Type":"NodeParagraph","Properties":{"id":"20240526162443-iviqhnn","updated":"20240526162443"},"Children":[{"Type":"NodeText","Data":"抽象语法树是代码的树形表示。它们是编译器工作方式的基本组成部分。当编译器转换一些代码时，基本上有以下步骤："}]},{"ID":"20240526162443-v45x279","Type":"NodeList","ListData":{},"Properties":{"id":"20240526162443-v45x279","updated":"20240526162443"},"Children":[{"ID":"20240526162443-k1pak3q","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526162443-k1pak3q","updated":"20240526162443"},"Children":[{"ID":"20240526162443-i346vyf","Type":"NodeParagraph","Properties":{"id":"20240526162443-i346vyf","updated":"20240526162443"},"Children":[{"Type":"NodeText","Data":"词法分析（Lexical Analysis）"}]}]},{"ID":"20240526162443-5g3zdc1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526162443-5g3zdc1","updated":"20240526162443"},"Children":[{"ID":"20240526162443-3np9pp0","Type":"NodeParagraph","Properties":{"id":"20240526162443-3np9pp0","updated":"20240526162443"},"Children":[{"Type":"NodeText","Data":"语法分析（Syntax Analysis）"}]}]},{"ID":"20240526162443-xng6x0z","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526162443-xng6x0z","updated":"20240526162443"},"Children":[{"ID":"20240526162443-bj3v8gc","Type":"NodeParagraph","Properties":{"id":"20240526162443-bj3v8gc","updated":"20240526162443"},"Children":[{"Type":"NodeText","Data":"代码生成（Code Generation）"}]}]}]},{"ID":"20240526162452-uqj6l2t","Type":"NodeParagraph","Properties":{"id":"20240526162452-uqj6l2t","updated":"20240526162452"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240526162452-li8rrem.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240526162457-ga3e2js","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526162457-ga3e2js","updated":"20240526162457"},"Children":[{"Type":"NodeText","Data":"词法分析"}]},{"ID":"20240526162501-3mvgfql","Type":"NodeParagraph","Properties":{"id":"20240526162501-3mvgfql","updated":"20240526162501"},"Children":[{"Type":"NodeText","Data":"词法分析（Lexical Analysis）是计算机科学中将字符序列转换为记号（token）序列的过程。进行词法分析的程序或者函数叫作词法分析器（lexical analyzer，简称 lexer），也叫扫描器（scanner）。词法分析器一般以函数的形式存在，供语法分析器调用。"}]},{"ID":"20240526162501-jsekthe","Type":"NodeParagraph","Properties":{"id":"20240526162501-jsekthe","updated":"20240526162501"},"Children":[{"Type":"NodeText","Data":"在 api 语言中，词法分析是将字符转换为词法元素序列的过程，其中词法元素包括 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"注释"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Token"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240526162504-7osilmn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240526162504-7osilmn","updated":"20240526162504"},"Children":[{"Type":"NodeText","Data":"词法元素"}]},{"ID":"20240526162508-26nuspx","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526162508-26nuspx","updated":"20240526162508"},"Children":[{"Type":"NodeText","Data":"注释"}]},{"ID":"20240526162513-yarl7cu","Type":"NodeParagraph","Properties":{"id":"20240526162513-yarl7cu","updated":"20240526162508"},"Children":[{"Type":"NodeText","Data":"在 api 领域特性语言中有 2 种格式："}]},{"ID":"20240526162513-6ymcj1n","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526162513-6ymcj1n","updated":"20240526162522"},"Children":[{"ID":"20240526162513-42t96kd","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526162513-42t96kd","updated":"20240526162522"},"Children":[{"ID":"20240526162513-xgr2kxr","Type":"NodeParagraph","Properties":{"id":"20240526162513-xgr2kxr","updated":"20240526162513"},"Children":[{"Type":"NodeText","Data":"单行注释以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"//"},{"Type":"NodeText","Data":"​ 开始，行尾结束。"}]},{"ID":"20240526162517-kkcef9p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162517-kkcef9p","updated":"20240526162522"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 这是一个单行注释示例\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526162523-x6n3rj6","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526162523-x6n3rj6","updated":"20240526162534"},"Children":[{"ID":"20240526162529-mvv81xo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526162529-mvv81xo","updated":"20240526162534"},"Children":[{"ID":"20240526162529-nhkhjdw","Type":"NodeParagraph","Properties":{"id":"20240526162529-nhkhjdw","updated":"20240526162529"},"Children":[{"Type":"NodeText","Data":"多行注释（文档注释）以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/*"},{"Type":"NodeText","Data":"​ 开始，以第一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"*/"},{"Type":"NodeText","Data":"​ 结束。"}]},{"ID":"20240526162530-b3nlw98","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162530-b3nlw98","updated":"20240526162534"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"/*这是在同意行内的文档注释*/\n/*\n这是在多行的文档注释\n*/\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526162539-y5mxpph","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526162539-y5mxpph","updated":"20240526162539"},"Children":[{"Type":"NodeText","Data":"Token"}]},{"ID":"20240526162542-sp2gzi9","Type":"NodeParagraph","Properties":{"id":"20240526162542-sp2gzi9","updated":"20240526162542"},"Children":[{"Type":"NodeText","Data":"Token 是组成节点的最基本元素，由 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"标识符（identifier）"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"关键字（keyword）"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"运算符（operator）"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"标点符号（punctuation）"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"字面量（literal）"},{"Type":"NodeText","Data":"​组成，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"空白符（White space）"},{"Type":"NodeText","Data":"​一般由"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"空格（U+0020）"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"水平制表符（U+0009）"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"回车符（U+000D）"},{"Type":"NodeText","Data":"​和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"换行符（U+000A）"},{"Type":"NodeText","Data":"​组成，在 api 语言中，Token 不包含 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"运算符（operator）"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240526162550-6hvkdcq","Type":"NodeParagraph","Properties":{"id":"20240526162550-6hvkdcq","updated":"20240526162550"},"Children":[{"Type":"NodeText","Data":"Token 的 Golang 结构体定义为："}]},{"ID":"20240526162550-7srrwkm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162550-7srrwkm","updated":"20240526162601"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Token struct {\n    Type     Type\n    Text     string\n    Position Position\n}\n\ntype Position struct {\n    Filename string\n    Line     int\n    Column   int\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162603-4n27iza","Type":"NodeParagraph","Properties":{"id":"20240526162603-4n27iza","updated":"20240526162610"},"Children":[{"Type":"NodeText","Data":"如 api 语句 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"syntax=\u0026quot;v1\u0026quot;"},{"Type":"NodeText","Data":"​，其词法化后的为："}]},{"ID":"20240526162610-7zviemv","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"min-width: 60px;|min-width: 60px;","id":"20240526162610-7zviemv","updated":"20240526162639"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"文本"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"类型"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"syntax"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"标识符"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"操作符"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"\"v1\""}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"字符串"}]}]}]},{"ID":"20240526162646-u1gkqkr","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526162646-u1gkqkr","updated":"20240526162647"},"Children":[{"Type":"NodeText","Data":"ID 标识符"}]},{"ID":"20240526162653-kd5w78w","Type":"NodeParagraph","Properties":{"id":"20240526162653-kd5w78w","updated":"20240526162701"},"Children":[{"Type":"NodeText","Data":"ID 标识符一般是结构体，变量，类型等的名称实体，ID 标识符一般有 1 到 n 个字母和数字组成，且开头必须为字母（记住上文提到的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_"},{"Type":"NodeText","Data":"​ 也被当做小写字母看待），其 EBNF 表示法为："}]},{"ID":"20240526162702-3yy9vwh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162702-3yy9vwh","updated":"20240526162706"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"identifier = letter { letter | unicode_digit } .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162707-qxhlep4","Type":"NodeParagraph","Properties":{"id":"20240526162707-qxhlep4","updated":"20240526162709"},"Children":[{"Type":"NodeText","Data":"ID 标识符示例："}]},{"ID":"20240526162710-s81y793","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162710-s81y793","updated":"20240526162714"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"a\n_a1\nGoZero\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162715-qof2y7v","Type":"NodeParagraph","Properties":{"id":"20240526162715-qof2y7v","updated":"20240526162719"},"Children":[{"Type":"NodeText","Data":"有些 ID 标识符是预先定义的，api 沿用了 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://go.dev/ref/spec#Predeclared_identifiers","TextMarkTextContent":"Golang 预定义 ID 标识符"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20240526162719-pf65dln","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162719-pf65dln","updated":"20240526162723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"预定义类型:\n    any bool byte comparable\n    complex64 complex128 error float32 float64\n    int int8 int16 int32 int64 rune string\n    uint uint8 uint16 uint32 uint64 uintptr\n\n预定义常量:\n    true false iota\n\n零值:\n    nil\n\n预定义函数:\n    append cap close complex copy delete imag len\n    make new panic print println real recover\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162728-bjwze0h","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240526162728-bjwze0h","updated":"20240526162728"},"Children":[{"Type":"NodeText","Data":"关键字"}]},{"ID":"20240526162728-j98oyzp","Type":"NodeParagraph","Properties":{"id":"20240526162728-j98oyzp","updated":"20240526162728"},"Children":[{"Type":"NodeText","Data":"关键字是一些特殊的 ID 标识符，是系统保留字，api 的关键字沿用了 Golang 关键字，结构体中不得使用 Golang 关键字作为标识符。"}]},{"ID":"20240526162728-g0vuo3c","Type":"NodeParagraph","Properties":{"id":"20240526162728-g0vuo3c","updated":"20240526162728"},"Children":[{"Type":"NodeText","Data":"Golang 关键字"}]},{"ID":"20240526162733-67iyas7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162733-67iyas7","updated":"20240526162735"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"break        default      func         interface    select\ncase         defer        go           map          struct\nchan         else         goto         package      switch\nconst        fallthrough  if           range        type\ncontinue     for          import       return       var\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162741-bu9bhl5","Type":"NodeHeading","HeadingLevel":6,"Properties":{"id":"20240526162741-bu9bhl5","updated":"20240526162741"},"Children":[{"Type":"NodeText","Data":"标点符号"}]},{"ID":"20240526162741-0tjletw","Type":"NodeParagraph","Properties":{"id":"20240526162741-0tjletw","updated":"20240526162742"},"Children":[{"Type":"NodeText","Data":"标点符号可以用于对 Token、表达式做分割、分组，以下是 api 语言中的标点符号："}]},{"ID":"20240526162741-ay8qrii","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162741-ay8qrii","updated":"20240526162744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"-    ,    (    )\n*    .    [    ]\n/    ;    {    }\n=    :    ,    ;\n...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162756-xanoukc","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526162756-xanoukc","updated":"20240526162800"},"Children":[{"Type":"NodeText","Data":"字符串"}]},{"ID":"20240526162751-laf5rh7","Type":"NodeParagraph","Properties":{"id":"20240526162751-laf5rh7","updated":"20240526162800"},"Children":[{"Type":"NodeText","Data":"字符串字面量是由一组字符序列组成的常量。在 api 中沿用了 Golang 的字符串，有 2 种形式： 原始字符串（raw string）和普通符串（双引号字符串）。"}]},{"ID":"20240526162751-49xbu7z","Type":"NodeParagraph","Properties":{"id":"20240526162751-49xbu7z","updated":"20240526162800"},"Children":[{"Type":"NodeText","Data":"原始字符串的字符序列在两个反引号之间，除反引号外，任何字符都可以出现，如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"foo"},{"Type":"NodeText","Data":"​；"}]},{"ID":"20240526162751-r2u8v3l","Type":"NodeParagraph","Properties":{"id":"20240526162751-r2u8v3l","updated":"20240526162800"},"Children":[{"Type":"NodeText","Data":"普通字符串的字符序列在两个双引号之间，除双引号外，任何字符都可以出现，如 \"foo\"。"}]},{"ID":"20240526162803-715uj1k","Type":"NodeBlockquote","Properties":{"id":"20240526162803-715uj1k","updated":"20240526162809"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240526162809-adz3g25","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526162809-adz3g25","updated":"20240526162809"},"Children":[{"Type":"NodeText","Data":"注意"}]},{"ID":"20240526162809-fk4gjxh","Type":"NodeParagraph","Properties":{"id":"20240526162809-fk4gjxh","updated":"20240526162809"},"Children":[{"Type":"NodeText","Data":"在 api 语言中，双引号字符串不支持 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\\\u0026quot;"},{"Type":"NodeText","Data":"​ 来实现字符串转义。"}]}]},{"ID":"20240526162810-vnddpbr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162810-vnddpbr","updated":"20240526162819"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"string_lit             = raw_string_lit | interpreted_string_lit .\nraw_string_lit         = \"`\" { unicode_char | newline } \"`\" .\ninterpreted_string_lit = `\"` { unicode_value | byte_value } `\"` .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162824-7fj6dkg","Type":"NodeParagraph","Properties":{"id":"20240526162824-7fj6dkg","updated":"20240526162824"},"Children":[{"Type":"NodeText","Data":"字符串示例："}]},{"ID":"20240526162826-t2iseuy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162826-t2iseuy","updated":"20240526162827"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 原始字符串\n``\n`foo`\n`bar`\n`json:\"baz\"`\n\n// 普通字符串\n\"\"\n\"foo\"\n\"bar\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162832-nwm20jl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526162832-nwm20jl","updated":"20240526162832"},"Children":[{"Type":"NodeText","Data":"语法分析"}]},{"ID":"20240526162832-teh59p8","Type":"NodeParagraph","Properties":{"id":"20240526162832-teh59p8","updated":"20240526162906"},"Children":[{"Type":"NodeText","Data":"语法分析（Syntax Analysis）又叫语法解析，这个过程是将词法元素转换为树的过程，而语法树一般由节点（Node）、表达式（Expression）、语句（Statement）组成，语法解析的过程除了词汇转换成树外，还需要完成语义分析"}]},{"ID":"20240526162910-zn1dxw2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240526162910-zn1dxw2","updated":"20240526162910"},"Children":[{"Type":"NodeText","Data":"节点"}]},{"ID":"20240526162910-le9pawz","Type":"NodeParagraph","Properties":{"id":"20240526162910-le9pawz","updated":"20240526162910"},"Children":[{"Type":"NodeText","Data":"节点（Node）是 Token 的变体，是一个接口类型，是组成表达式、语句的基本元素，其在 Golang 中的结构体定义为："}]},{"ID":"20240526162911-8eujoyu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162911-8eujoyu","updated":"20240526162916"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Node represents a node in the AST.\ntype Node interface {\n    // Pos returns the position of the first character belonging to the node.\n    Pos() token.Position\n    // End returns the position of the first character immediately after the node.\n    End() token.Position\n    // Format returns the node's text after format.\n    Format(...string) string\n    // HasHeadCommentGroup returns true if the node has head comment group.\n    HasHeadCommentGroup() bool\n    // HasLeadingCommentGroup returns true if the node has leading comment group.\n    HasLeadingCommentGroup() bool\n    // CommentGroup returns the node's head comment group and leading comment group.\n    CommentGroup() (head, leading CommentGroup)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162921-b794ma3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240526162921-b794ma3","updated":"20240526162921"},"Children":[{"Type":"NodeText","Data":"表达式"}]},{"ID":"20240526162931-ujzl2rf","Type":"NodeParagraph","Properties":{"id":"20240526162931-ujzl2rf","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"表达式（Expression）是组成语句的基本元素，可以理解为一个句子中的 “短语”，在 api 语言中包含的表达式如下："}]},{"ID":"20240526162931-2u07v80","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526162931-2u07v80","updated":"20240526162931"},"Children":[{"ID":"20240526162931-iqsjqp7","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526162931-iqsjqp7","updated":"20240526162931"},"Children":[{"ID":"20240526162931-lohtqdk","Type":"NodeParagraph","Properties":{"id":"20240526162931-lohtqdk","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"数据类型表达式"}]}]},{"ID":"20240526162931-ferxa8k","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526162931-ferxa8k","updated":"20240526162931"},"Children":[{"ID":"20240526162931-1ylhinl","Type":"NodeParagraph","Properties":{"id":"20240526162931-1ylhinl","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"结构体中的 field 表达式"}]}]},{"ID":"20240526162931-83c1n6p","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240526162931-83c1n6p","updated":"20240526162931"},"Children":[{"ID":"20240526162931-mo33wql","Type":"NodeParagraph","Properties":{"id":"20240526162931-mo33wql","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"key-value 表达式"}]}]},{"ID":"20240526162931-6srxdzo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240526162931-6srxdzo","updated":"20240526162931"},"Children":[{"ID":"20240526162931-toz1ju8","Type":"NodeParagraph","Properties":{"id":"20240526162931-toz1ju8","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"服务声明表达式"}]}]},{"ID":"20240526162931-fn6bc9z","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240526162931-fn6bc9z","updated":"20240526162931"},"Children":[{"ID":"20240526162931-n208263","Type":"NodeParagraph","Properties":{"id":"20240526162931-n208263","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"HTTP 请求/响应体表达式"}]}]},{"ID":"20240526162931-wz2sj9k","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20240526162931-wz2sj9k","updated":"20240526162931"},"Children":[{"ID":"20240526162931-l9j2ccd","Type":"NodeParagraph","Properties":{"id":"20240526162931-l9j2ccd","updated":"20240526162931"},"Children":[{"Type":"NodeText","Data":"HTTP 路由表达式"}]}]}]},{"ID":"20240526162932-dgqkq0q","Type":"NodeParagraph","Properties":{"id":"20240526162932-dgqkq0q","updated":"20240526162935"},"Children":[{"Type":"NodeText","Data":"在 api 中 Golang 的结构体定义为："}]},{"ID":"20240526162936-3d1ncr7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162936-3d1ncr7","updated":"20240526162940"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Expr represents an expression in the AST.\ntype Expr interface {\n    Node\n    exprNode()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162948-02ccu1t","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240526162948-02ccu1t","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"语句"}]},{"ID":"20240526162948-pc852e8","Type":"NodeParagraph","Properties":{"id":"20240526162948-pc852e8","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"语句（Statement）是组成抽象语法树的基本元素，抽象语法树可以理解成一篇文章，而语句是组成文章的多条句子，在 api 语言中包含语句如下："}]},{"ID":"20240526162948-wou15is","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526162948-wou15is","updated":"20240526162948"},"Children":[{"ID":"20240526162948-yak565m","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526162948-yak565m","updated":"20240526162948"},"Children":[{"ID":"20240526162948-83l9u7n","Type":"NodeParagraph","Properties":{"id":"20240526162948-83l9u7n","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"@doc 语句"}]}]},{"ID":"20240526162948-3gtfqyv","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526162948-3gtfqyv","updated":"20240526162948"},"Children":[{"ID":"20240526162948-44i5txq","Type":"NodeParagraph","Properties":{"id":"20240526162948-44i5txq","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"@handler 语句"}]}]},{"ID":"20240526162948-cmkmdq5","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240526162948-cmkmdq5","updated":"20240526162948"},"Children":[{"ID":"20240526162948-d5yjdlc","Type":"NodeParagraph","Properties":{"id":"20240526162948-d5yjdlc","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"@server 语句"}]}]},{"ID":"20240526162948-z0j7pw2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240526162948-z0j7pw2","updated":"20240526162948"},"Children":[{"ID":"20240526162948-2dsm6jn","Type":"NodeParagraph","Properties":{"id":"20240526162948-2dsm6jn","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"HTTP 服务的请求/响应体语句"}]}]},{"ID":"20240526162948-1ifu1z2","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240526162948-1ifu1z2","updated":"20240526162948"},"Children":[{"ID":"20240526162948-nbb7hb4","Type":"NodeParagraph","Properties":{"id":"20240526162948-nbb7hb4","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"注释语句"}]}]},{"ID":"20240526162948-magbii9","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20240526162948-magbii9","updated":"20240526162948"},"Children":[{"ID":"20240526162948-24mcn6q","Type":"NodeParagraph","Properties":{"id":"20240526162948-24mcn6q","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"import 语句"}]}]},{"ID":"20240526162948-zzbzxyf","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ny4=","Num":7},"Properties":{"id":"20240526162948-zzbzxyf","updated":"20240526162948"},"Children":[{"ID":"20240526162948-3t2upvu","Type":"NodeParagraph","Properties":{"id":"20240526162948-3t2upvu","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"info 语句"}]}]},{"ID":"20240526162948-vs4gsgy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"OC4=","Num":8},"Properties":{"id":"20240526162948-vs4gsgy","updated":"20240526162948"},"Children":[{"ID":"20240526162948-34972gm","Type":"NodeParagraph","Properties":{"id":"20240526162948-34972gm","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"HTTP 路由语句"}]}]},{"ID":"20240526162948-sb6gukk","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"OS4=","Num":9},"Properties":{"id":"20240526162948-sb6gukk","updated":"20240526162948"},"Children":[{"ID":"20240526162948-n28yxzk","Type":"NodeParagraph","Properties":{"id":"20240526162948-n28yxzk","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"HTTP 服务声明语句"}]}]},{"ID":"20240526162948-kk0zhgy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MTAu","Num":10},"Properties":{"id":"20240526162948-kk0zhgy","updated":"20240526162948"},"Children":[{"ID":"20240526162948-zw3v0eu","Type":"NodeParagraph","Properties":{"id":"20240526162948-zw3v0eu","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"syntax 语句"}]}]},{"ID":"20240526162948-01svxgf","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MTEu","Num":11},"Properties":{"id":"20240526162948-01svxgf","updated":"20240526162948"},"Children":[{"ID":"20240526162948-3d5wzo0","Type":"NodeParagraph","Properties":{"id":"20240526162948-3d5wzo0","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"结构体语句"}]}]}]},{"ID":"20240526162948-z7cc888","Type":"NodeParagraph","Properties":{"id":"20240526162948-z7cc888","updated":"20240526162948"},"Children":[{"Type":"NodeText","Data":"在 api 中 Golang 的结构体定义为："}]},{"ID":"20240526162949-8nm0d75","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526162949-8nm0d75","updated":"20240526162954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Stmt represents a statement in the AST.\ntype Stmt interface {\n    Node\n    stmtNode()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526162958-9rjcd85","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526162958-9rjcd85","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"代码生成"}]},{"ID":"20240526162958-5zv7nrt","Type":"NodeParagraph","Properties":{"id":"20240526162958-5zv7nrt","updated":"20240526162959"},"Children":[{"Type":"NodeText","Data":"我们一旦有了抽象语法树，就可以通过它来打印或者生成不同的代码了，在 api 抽象语法树行成后，可以支持："}]},{"ID":"20240526162958-2yyfs3f","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526162958-2yyfs3f","updated":"20240526162959"},"Children":[{"ID":"20240526162958-44onrmp","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526162958-44onrmp","updated":"20240526162958"},"Children":[{"ID":"20240526162958-imqi5vy","Type":"NodeParagraph","Properties":{"id":"20240526162958-imqi5vy","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"打印 AST"}]}]},{"ID":"20240526162958-vow8uxi","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526162958-vow8uxi","updated":"20240526162958"},"Children":[{"ID":"20240526162958-5sna5re","Type":"NodeParagraph","Properties":{"id":"20240526162958-5sna5re","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"api 语言格式化"}]}]},{"ID":"20240526162958-p4gsjo4","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240526162958-p4gsjo4","updated":"20240526162958"},"Children":[{"ID":"20240526162958-a2kf2jr","Type":"NodeParagraph","Properties":{"id":"20240526162958-a2kf2jr","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"Golang HTTP 服务生成"}]}]},{"ID":"20240526162958-cy92j91","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240526162958-cy92j91","updated":"20240526162958"},"Children":[{"ID":"20240526162958-j8ckwub","Type":"NodeParagraph","Properties":{"id":"20240526162958-j8ckwub","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"Typescript 代码生成"}]}]},{"ID":"20240526162958-yz2a95b","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240526162958-yz2a95b","updated":"20240526162958"},"Children":[{"ID":"20240526162958-6nmsi3o","Type":"NodeParagraph","Properties":{"id":"20240526162958-6nmsi3o","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"Dart 代码生成"}]}]},{"ID":"20240526162958-8ib2yi0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20240526162958-8ib2yi0","updated":"20240526162958"},"Children":[{"ID":"20240526162958-br9e5mq","Type":"NodeParagraph","Properties":{"id":"20240526162958-br9e5mq","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"Kotlin 代码生成"}]}]}]},{"ID":"20240526162958-gcepcab","Type":"NodeParagraph","Properties":{"id":"20240526162958-gcepcab","updated":"20240526162959"},"Children":[{"Type":"NodeText","Data":"除此之外，还可以根据 AST 进行扩展，比如插件："}]},{"ID":"20240526162958-eafiyyo","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526162958-eafiyyo","updated":"20240526162959"},"Children":[{"ID":"20240526162958-tneswx6","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526162958-tneswx6","updated":"20240526162958"},"Children":[{"ID":"20240526162958-r05lnlo","Type":"NodeParagraph","Properties":{"id":"20240526162958-r05lnlo","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"goctl-go-compact"}]}]},{"ID":"20240526162958-1w9d3ii","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526162958-1w9d3ii","updated":"20240526162958"},"Children":[{"ID":"20240526162958-o54wsjf","Type":"NodeParagraph","Properties":{"id":"20240526162958-o54wsjf","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"goctl-swagger"}]}]},{"ID":"20240526162958-zmk2kmr","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240526162958-zmk2kmr","updated":"20240526162958"},"Children":[{"ID":"20240526162958-cilq9s9","Type":"NodeParagraph","Properties":{"id":"20240526162958-cilq9s9","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"goctl-php"}]}]}]},{"ID":"20240526162958-8bfvibi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526162958-8bfvibi","updated":"20240526162958"},"Children":[{"Type":"NodeText","Data":"api 语法标记"}]},{"ID":"20240526163003-vxlx2il","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163003-vxlx2il","updated":"20240526163008"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"api = SyntaxStmt | InfoStmt | { ImportStmt } | { TypeStmt } | { ServiceStmt } .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163013-fpnujln","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526163013-fpnujln","updated":"20240526163013"},"Children":[{"Type":"NodeText","Data":"syntax 语句"}]},{"ID":"20240526163013-tf1xa1a","Type":"NodeParagraph","Properties":{"id":"20240526163013-tf1xa1a","updated":"20240526163014"},"Children":[{"Type":"NodeText","Data":"syntax 语句用于标记 api 语言的版本，不同的版本可能语法结构有所不同，随着版本的提升会做不断的优化，当前版本为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"v1"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240526163013-kkwo8ms","Type":"NodeParagraph","Properties":{"id":"20240526163013-kkwo8ms","updated":"20240526163015"},"Children":[{"Type":"NodeText","Data":"syntax 的 EBNF 表示为："}]},{"ID":"20240526163015-5vqcvwo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163015-5vqcvwo","updated":"20240526163022"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"SyntaxStmt = \"syntax\" \"=\" \"v1\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163021-8fd924e","Type":"NodeParagraph","Properties":{"id":"20240526163021-8fd924e","updated":"20240526163025"},"Children":[{"Type":"NodeText","Data":"syntax 语法写法示例："}]},{"ID":"20240526163026-rcqc6t0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163026-rcqc6t0","updated":"20240526163030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163034-gk8er2m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526163034-gk8er2m","updated":"20240526163034"},"Children":[{"Type":"NodeText","Data":"info 语句"}]},{"ID":"20240526163034-6tfe8pc","Type":"NodeParagraph","Properties":{"id":"20240526163034-6tfe8pc","updated":"20240526163035"},"Children":[{"Type":"NodeText","Data":"info 语句是 api 语言的 meta 信息，其仅用于对当前 api 文件进行描述，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"暂"},{"Type":"NodeText","Data":"不参与代码生成，其和注释还是有一些区别，注释一般是依附某个 syntax 语句存在，而 info 语句是用于描述整个 api 信息的，当然，不排除在将来会参与到代码生成里面来，info 语句的 EBNF 表示为："}]},{"ID":"20240526163037-y13ft1h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163037-y13ft1h","updated":"20240526163039"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"InfoStmt         = \"info\" \"(\" { InfoKeyValueExpr } \")\" .\nInfoKeyValueExpr = InfoKeyLit [ interpreted_string_lit ] .\nInfoKeyLit       = identifier \":\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163042-z3hp35a","Type":"NodeParagraph","Properties":{"id":"20240526163042-z3hp35a","updated":"20240526163042"},"Children":[{"Type":"NodeText","Data":"info 语句写法示例："}]},{"ID":"20240526163043-x7whx9z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163043-x7whx9z","updated":"20240526163047"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 不包含 key-value 的 info 块\ninfo ()\n\n// 包含 key-value 的 info 块\ninfo (\n    foo: \"bar\"\n    bar:\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163051-2zfkcuw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526163051-2zfkcuw","updated":"20240526163051"},"Children":[{"Type":"NodeText","Data":"import 语句"}]},{"ID":"20240526163051-wu2jbee","Type":"NodeParagraph","Properties":{"id":"20240526163051-wu2jbee","updated":"20240526163051"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"import"},{"Type":"NodeText","Data":"​ 语句是在 api 中引入其他 api 文件的语法块，其支持相对/绝对路径，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不支持"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"package"},{"Type":"NodeText","Data":"​ 的设计，其 EBNF 表示为："}]},{"ID":"20240526163053-md3d0r8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163053-md3d0r8","updated":"20240526163057"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"ImportStmt        = ImportLiteralStmt | ImportGroupStmt .\nImportLiteralStmt = \"import\" interpreted_string_lit .\nImportGroupStmt   = \"import\" \"(\" { interpreted_string_lit } \")\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163057-wmlf0tu","Type":"NodeParagraph","Properties":{"id":"20240526163057-wmlf0tu","updated":"20240526163101"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"import"},{"Type":"NodeText","Data":"​ 语句写法示例："}]},{"ID":"20240526163103-pv79dsw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163103-pv79dsw","updated":"20240526163104"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 单行 import\nimport \"foo\"\nimport \"/path/to/file\"\n\n// import 组\nimport ()\nimport (\n    \"bar\"\n    \"relative/to/file\"\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163112-riyxa85","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526163112-riyxa85","updated":"20240526163112"},"Children":[{"Type":"NodeText","Data":"数据类型"}]},{"ID":"20240526163112-vaor3wv","Type":"NodeParagraph","Properties":{"id":"20240526163112-vaor3wv","updated":"20240526163112"},"Children":[{"Type":"NodeText","Data":"api 中的数据类型基本沿用了 Golang 的数据类型，用于对 rest 服务的请求/响应体结构的描述，其 EBNF 表示为："}]},{"ID":"20240526163116-4hkej7h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163116-4hkej7h","updated":"20240526163117"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"TypeStmt          = TypeLiteralStmt | TypeGroupStmt .\nTypeLiteralStmt   = \"type\" TypeExpr .\nTypeGroupStmt     = \"type\" \"(\" { TypeExpr } \")\" .\nTypeExpr          = identifier [ \"=\" ] DataType .\nDataType          = AnyDataType | ArrayDataType | BaseDataType |\n                    InterfaceDataType | MapDataType | PointerDataType |\n                    SliceDataType | StructDataType .\nAnyDataType       = \"any\" .\nArrayDataType     = \"[\" { decimal_digit } \"]\" DataType .\nBaseDataType      = \"bool\"    | \"uint8\"     | \"uint16\"     | \"uint32\" | \"uint64\"  |\n                    \"int8\"    | \"int16\"     | \"int32\"      | \"int64\"  | \"float32\" |\n                    \"float64\" | \"complex64\" | \"complex128\" | \"string\" | \"int\"     |\n                    \"uint\"    | \"uintptr\"   | \"byte\"       | \"rune\"   | \"any\"     | .\n\nInterfaceDataType = \"interface{}\" .\nMapDataType       = \"map\" \"[\" DataType \"]\" DataType .\nPointerDataType   = \"*\" DataType .\nSliceDataType     = \"[\" \"]\" DataType .\nStructDataType    = \"{\" { ElemExpr } \"}\" .\nElemExpr          = [ ElemNameExpr ]  DataType [ Tag ].\nElemNameExpr      = identifier { \",\" identifier } .\nTag               = raw_string_lit .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163121-k2oe10k","Type":"NodeParagraph","Properties":{"id":"20240526163121-k2oe10k","updated":"20240526163121"},"Children":[{"Type":"NodeText","Data":"数据类型写法示例："}]},{"ID":"20240526163122-c9s7fvu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163122-c9s7fvu","updated":"20240526163131"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 别名类型 [1]\ntype Int int\ntype Integer = int\n\n// 空结构体\ntype Foo {}\n\n// 单个结构体\ntype Bar {\n    Foo int               `json:\"foo\"`\n    Bar bool              `json:\"bar\"`\n    Baz []string          `json:\"baz\"`\n    Qux map[string]string `json:\"qux\"`\n}\n\ntype Baz {\n    Bar    `json:\"baz\"`\n    // 结构体内嵌 [2]\n    Qux {\n        Foo string `json:\"foo\"`\n        Bar bool   `json:\"bar\"`\n    } `json:\"baz\"`\n}\n\n// 空结构体组\ntype ()\n\n// 结构体组\ntype (\n    Int int\n    Integer = int\n    Bar {\n        Foo int               `json:\"foo\"`\n        Bar bool              `json:\"bar\"`\n        Baz []string          `json:\"baz\"`\n        Qux map[string]string `json:\"qux\"`\n    }\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163136-3wjg574","Type":"NodeBlockquote","Properties":{"id":"20240526163136-3wjg574","updated":"20240526163137"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240526163137-20o2uoc","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526163137-20o2uoc","updated":"20240526163137"},"Children":[{"Type":"NodeText","Data":"注意"}]},{"ID":"20240526163137-91y2tw2","Type":"NodeParagraph","Properties":{"id":"20240526163137-91y2tw2","updated":"20240526163137"},"Children":[{"Type":"NodeText","Data":"[1] 虽然语法上支持别名，但是在语义分析时会对别名进行拦截，这或在将来进行放开。"}]},{"ID":"20240526163137-0idclrt","Type":"NodeParagraph","Properties":{"id":"20240526163137-0idclrt","updated":"20240526163137"},"Children":[{"Type":"NodeText","Data":"[2] 虽然语法上支持结构体内嵌，但是在语义分析时会对别名进行拦截，这或在将来进行放开。"}]},{"ID":"20240526163137-lpdhw5c","Type":"NodeParagraph","Properties":{"id":"20240526163137-lpdhw5c","updated":"20240526163137"},"Children":[{"Type":"NodeText","Data":"除此之外："}]},{"ID":"20240526163137-3v1b5si","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526163137-3v1b5si","updated":"20240526163137"},"Children":[{"ID":"20240526163137-47vux4t","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526163137-47vux4t","updated":"20240526163137"},"Children":[{"ID":"20240526163137-ehqqq00","Type":"NodeParagraph","Properties":{"id":"20240526163137-ehqqq00","updated":"20240526163137"},"Children":[{"Type":"NodeText","Data":"目前 api 语法中虽然支持了数组的语法，但是在语义分析时会对数组进行拦截，目前建议用切片替代，这或在将来放开。"}]}]},{"ID":"20240526163137-i5tvsqq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526163137-i5tvsqq","updated":"20240526163137"},"Children":[{"ID":"20240526163137-nwm9df0","Type":"NodeParagraph","Properties":{"id":"20240526163137-nwm9df0","updated":"20240526163137"},"Children":[{"Type":"NodeText","Data":"不支持 package 设计，如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"time.Time"},{"Type":"NodeText","Data":"​。"}]}]}]}]},{"ID":"20240526163142-m7edpon","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526163142-m7edpon","updated":"20240526163142"},"Children":[{"Type":"NodeText","Data":"service 语句"}]},{"ID":"20240526163142-jqp29kv","Type":"NodeParagraph","Properties":{"id":"20240526163142-jqp29kv","updated":"20240526163143"},"Children":[{"Type":"NodeText","Data":"service 语句是对 HTTP 服务的直观描述，包含请求 handler，请求方法，请求路由，请求体，响应体，jwt 开关，中间件声明等定义。"}]},{"ID":"20240526163142-slkhbkb","Type":"NodeParagraph","Properties":{"id":"20240526163142-slkhbkb","updated":"20240526163143"},"Children":[{"Type":"NodeText","Data":"其 EBNF 表示为："}]},{"ID":"20240526163146-9rte4el","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163146-9rte4el","updated":"20240526163147"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"ServiceStmt     = [ AtServerStmt ] \"service\" ServiceNameExpr \"(\"\n                  { ServiceItemStmt } \")\" .\nServiceNameExpr = identifier [ \"-api\" ] .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163151-0bherp6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240526163151-0bherp6","updated":"20240526163151"},"Children":[{"Type":"NodeText","Data":"@server 语句"}]},{"ID":"20240526163151-8bokub0","Type":"NodeParagraph","Properties":{"id":"20240526163151-8bokub0","updated":"20240526163152"},"Children":[{"Type":"NodeText","Data":"@server 语句是对一个服务语句的 meta 信息描述，其对应特性包含但不限于："}]},{"ID":"20240526163151-wrxo49a","Type":"NodeList","ListData":{},"Properties":{"id":"20240526163151-wrxo49a","updated":"20240526163152"},"Children":[{"ID":"20240526163151-tobgmbr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526163151-tobgmbr","updated":"20240526163151"},"Children":[{"ID":"20240526163151-2yfma69","Type":"NodeParagraph","Properties":{"id":"20240526163151-2yfma69","updated":"20240526163151"},"Children":[{"Type":"NodeText","Data":"jwt 开关"}]}]},{"ID":"20240526163151-pk4ti5j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526163151-pk4ti5j","updated":"20240526163151"},"Children":[{"ID":"20240526163151-ose7zjb","Type":"NodeParagraph","Properties":{"id":"20240526163151-ose7zjb","updated":"20240526163151"},"Children":[{"Type":"NodeText","Data":"中间件"}]}]},{"ID":"20240526163151-yzeesme","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526163151-yzeesme","updated":"20240526163151"},"Children":[{"ID":"20240526163151-sh3v56f","Type":"NodeParagraph","Properties":{"id":"20240526163151-sh3v56f","updated":"20240526163151"},"Children":[{"Type":"NodeText","Data":"路由分组"}]}]},{"ID":"20240526163151-dfau3yj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526163151-dfau3yj","updated":"20240526163151"},"Children":[{"ID":"20240526163151-c8bct1g","Type":"NodeParagraph","Properties":{"id":"20240526163151-c8bct1g","updated":"20240526163151"},"Children":[{"Type":"NodeText","Data":"路由前缀"}]}]}]},{"ID":"20240526163151-wvopego","Type":"NodeParagraph","Properties":{"id":"20240526163151-wvopego","updated":"20240526163152"},"Children":[{"Type":"NodeText","Data":"@server 的 EBNF 表示为："}]},{"ID":"20240526163152-abvk4dl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163152-abvk4dl","updated":"20240526163157"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"AtServerStmt     = \"@server\" \"(\" {  AtServerKVExpr } \")\" .\nAtServerKVExpr   = AtServerKeyLit [ AtServerValueLit ] .\nAtServerKeyLit   = identifier \":\" .\nAtServerValueLit = PathLit | identifier { \",\" identifier } .\nPathLit          = `\"` { \"/\" { identifier | \"-\" identifier} } `\"` .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163158-objjseb","Type":"NodeParagraph","Properties":{"id":"20240526163158-objjseb","updated":"20240526163200"},"Children":[{"Type":"NodeText","Data":"@server 写法示例："}]},{"ID":"20240526163201-1npf02s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163201-1npf02s","updated":"20240526163206"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 空内容\n@server()\n\n// 有内容\n@server (\n    // jwt 声明\n    // 如果 key 固定为 “jwt:”，则代表开启 jwt 鉴权声明\n    // value 则为配置文件的结构体名称\n    jwt: Auth\n\n    // 路由前缀\n    // 如果 key 固定为 “prefix:”\n    // 则代表路由前缀声明，value 则为具体的路由前缀值，字符串中没让必须以 / 开头\n    prefix: /v1\n\n    // 路由分组\n    // 如果 key 固定为 “group:”，则代表路由分组声明\n    // value 则为具体分组名称，在 goctl生成代码后会根据此值进行文件夹分组\n    group: Foo\n\n    // 中间件\n    // 如果 key 固定为 middleware:”，则代表中间件声明\n    // value 则为具体中间件函数名称，在 goctl生成代码后会根据此值进生成对应的中间件函数\n    middleware: AuthInterceptor\n\n    // 超时控制\n    // 如果 key 固定为  timeout:”，则代表超时配置\n    // value 则为具体中duration，在 goctl生成代码后会根据此值进生成对应的超时配置\n    timeout: 3s\n\n    // 其他 key-value，除上述几个内置 key 外，其他 key-value\n    // 也可以在作为 annotation 信息传递给 goctl 及其插件，但就\n    // 目前来看，goctl 并未使用。\n    foo: bar\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163212-zuyq2qc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240526163212-zuyq2qc","updated":"20240526163212"},"Children":[{"Type":"NodeText","Data":"服务条目"}]},{"ID":"20240526163212-hme7krk","Type":"NodeParagraph","Properties":{"id":"20240526163212-hme7krk","updated":"20240526163212"},"Children":[{"Type":"NodeText","Data":"服务条目（ServiceItemStmt）是对单个 HTTP 请求的描述，包括 @doc 语句，handler 语句，路由语句信息，其 EBNF 表示为："}]},{"ID":"20240526163213-ozjlod7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163213-ozjlod7","updated":"20240526163217"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"ServiceItemStmt = [ AtDocStmt ] AtHandlerStmt RouteStmt .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163221-caqcfoo","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526163221-caqcfoo","updated":"20240526163221"},"Children":[{"Type":"NodeText","Data":"@doc 语句"}]},{"ID":"20240526163221-l6qo666","Type":"NodeParagraph","Properties":{"id":"20240526163221-l6qo666","updated":"20240526163221"},"Children":[{"Type":"NodeText","Data":"@doc 语句是对单个路由的 meta 信息描述，一般为 key-value 值，可以传递给 goctl 及其插件来进行扩展生成，其 EBNF 表示为："}]},{"ID":"20240526163222-4n83sk1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163222-4n83sk1","updated":"20240526163226"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"AtDocStmt        = AtDocLiteralStmt | AtDocGroupStmt .\nAtDocLiteralStmt = \"@doc\" interpreted_string_lit .\nAtDocGroupStmt   = \"@doc\" \"(\" { AtDocKVExpr } \")\" .\nAtDocKVExpr      = AtServerKeyLit  interpreted_string_lit .\nAtServerKeyLit   = identifier \":\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163227-yumh3o7","Type":"NodeParagraph","Properties":{"id":"20240526163227-yumh3o7","updated":"20240526163230"},"Children":[{"Type":"NodeText","Data":"@doc 写法示例："}]},{"ID":"20240526163232-al3ygh8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163232-al3ygh8","updated":"20240526163233"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 单行 @doc\n@doc \"foo\"\n\n// 空 @doc 组\n@doc ()\n\n// 有内容的 @doc 组\n@doc (\n    foo: \"bar\"\n    bar: \"baz\"\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163237-9j8bixg","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526163237-9j8bixg","updated":"20240526163237"},"Children":[{"Type":"NodeText","Data":"@handler 语句"}]},{"ID":"20240526163237-sxypmij","Type":"NodeParagraph","Properties":{"id":"20240526163237-sxypmij","updated":"20240526163237"},"Children":[{"Type":"NodeText","Data":"@handler 语句是对单个路由的 handler 信息控制，主要用于生成 golang http.HandleFunc 的实现转换方法，其 EBNF 表示为："}]},{"ID":"20240526163240-jio6iv1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163240-jio6iv1","updated":"20240526163241"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"AtHandlerStmt = \"@handler\" identifier .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163244-xt8ydd5","Type":"NodeParagraph","Properties":{"id":"20240526163244-xt8ydd5","updated":"20240526163245"},"Children":[{"Type":"NodeText","Data":"@handler 写法示例："}]},{"ID":"20240526163246-mj8rjnl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163246-mj8rjnl","updated":"20240526163250"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"@handler foo\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163255-53imrag","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526163255-53imrag","updated":"20240526163255"},"Children":[{"Type":"NodeText","Data":"路由语句"}]},{"ID":"20240526163255-utlthfk","Type":"NodeParagraph","Properties":{"id":"20240526163255-utlthfk","updated":"20240526163255"},"Children":[{"Type":"NodeText","Data":"路由语句是对单此 HTTP 请求的具体描述，包括请求方法，请求路径，请求体，响应体信息，其 EBNF 表示为："}]},{"ID":"20240526163256-1lzv848","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163256-1lzv848","updated":"20240526163300"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"RouteStmt = Method PathExpr [ BodyStmt ] [ \"returns\" ] [ BodyStmt ].\nMethod    = \"get\"     | \"head\"    | \"post\" | \"put\" | \"patch\" | \"delete\" |\n            \"connect\" | \"options\" | \"trace\" .\nPathExpr  = \"/\" identifier { ( \"-\" identifier ) | ( \":\" identifier) } .\nBodyStmt  = \"(\" identifier \")\" .\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163306-nmt6bml","Type":"NodeParagraph","Properties":{"id":"20240526163306-nmt6bml","updated":"20240526163306"},"Children":[{"Type":"NodeText","Data":"路由语句写法示例："}]},{"ID":"20240526163306-4m3y2av","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163306-4m3y2av","updated":"20240526163306"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 没有请求体和响应体的写法\nget /ping\n\n// 只有请求体的写法\nget /foo (foo)\n\n// 只有响应体的写法\npost /foo returns (foo)\n\n// 有请求体和响应体的写法\npost /foo (foo) returns (bar)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163306-l16oheo","Type":"NodeParagraph","Properties":{"id":"20240526163306-l16oheo","updated":"20240526163306"},"Children":[{"Type":"NodeText","Data":"service 写法示例"}]},{"ID":"20240526163306-smn7x68","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526163306-smn7x68","updated":"20240526163306"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 带 @server 的写法\n@server (\n    prefix: /v1\n    group: Login\n)\nservice user {\n    @doc \"登录\"\n    @handler login\n    post /user/login (LoginReq) returns (LoginResp)\n\n    @handler getUserInfo\n    get /user/info/:id (GetUserInfoReq) returns (GetUserInfoResp)\n}\n@server (\n    prefix: /v1\n    middleware: AuthInterceptor\n)\nservice user {\n    @doc \"登录\"\n    @handler login\n    post /user/login (LoginReq) returns (LoginResp)\n\n    @handler getUserInfo\n    get /user/info/:id (GetUserInfoReq) returns (GetUserInfoResp)\n}\n\n\n// 不带 @server 的写法\nservice user {\n    @doc \"登录\"\n    @handler login\n    post /user/login (LoginReq) returns (LoginResp)\n\n    @handler getUserInfo\n    get /user/info/:id (GetUserInfoReq) returns (GetUserInfoResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526163318-54wukit","Type":"NodeParagraph","Properties":{"id":"20240526163318-54wukit"}}]}