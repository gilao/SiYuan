{"ID":"20240526233549-z82amo1","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f37d-fe0f","id":"20240526233549-z82amo1","title":"服务分组","type":"doc","updated":"20240526233631"},"Children":[{"ID":"20240526233631-l0tz5hd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526233631-l0tz5hd","updated":"20240526233631"},"Children":[{"Type":"NodeText","Data":"概述"}]},{"ID":"20240526233631-cpsahuj","Type":"NodeParagraph","Properties":{"id":"20240526233631-cpsahuj","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"在 go-zero 中，我们通过 api 语言来声明 HTTP 服务，然后通过 goctl 生成 HTTP 服务代码，在之前我们系统性的介绍了 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://go-zero.dev/docs/tutorials","TextMarkTextContent":"API 规范"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240526233631-aro9j5e","Type":"NodeParagraph","Properties":{"id":"20240526233631-aro9j5e","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"在 HTTP 服务开发中，随着业务的发展，我们的服务接口会越来越多，生成的代码文件(handler，logic 文件等)也会越来越多，这时候我们需要将一些生成的代码文件按照一定维度进行文件夹聚合，以便于开发和维护。"}]},{"ID":"20240526233631-jnjia9y","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526233631-jnjia9y","updated":"20240526233631"},"Children":[{"Type":"NodeText","Data":"服务分组"}]},{"ID":"20240526233631-3t2nihy","Type":"NodeParagraph","Properties":{"id":"20240526233631-3t2nihy","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"假设我们有一个用户服务，我们有多个接口如下："}]},{"ID":"20240526233631-moaojpg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526233631-moaojpg","updated":"20240526233632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dW5kZWZpbmVk"},{"Type":"NodeCodeBlockCode","Data":"https://example.com/v1/user/login\nhttps://example.com/v1/user/info\nhttps://example.com/v1/user/info/update\nhttps://example.com/v1/user/list\n\nhttps://example.com/v1/user/role/list\nhttps://example.com/v1/user/role/update\nhttps://example.com/v1/user/role/info\nhttps://example.com/v1/user/role/add\nhttps://example.com/v1/user/role/delete\n\nhttps://example.com/v1/user/class/list\nhttps://example.com/v1/user/class/update\nhttps://example.com/v1/user/class/info\nhttps://example.com/v1/user/class/add\nhttps://example.com/v1/user/class/delete\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526233631-d8xbepa","Type":"NodeParagraph","Properties":{"id":"20240526233631-d8xbepa","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"我们首先来看一下在不进行分组的情况下 api 语言的写法："}]},{"ID":"20240526233631-s90q1hy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526233631-s90q1hy","updated":"20240526233632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype (\n    UserLoginReq{}\n    UserInfoReq{}\n    UserLoginResp{}\n    UserInfoResp{}\n    UserInfoUpdateReq{}\n    UserInfoUpdateResp{}\n)\n\ntype (\n    UserRoleReq{}\n    UserRoleResp{}\n    UserRoleUpdateReq{}\n    UserRoleUpdateResp{}\n    UserRoleAddReq{}\n    UserRoleAddResp{}\n    UserRoleDeleteReq{}\n    UserRoleDeleteResp{}\n)\n\ntype (\n    UserClassReq{}\n    UserClassResp{}\n    UserClassUpdateReq{}\n    UserClassUpdateResp{}\n    UserClassAddReq{}\n    UserClassAddResp{}\n    UserClassDeleteReq{}\n    UserClassDeleteResp{}\n)\n@server(\n    prefix: /v1\n)\nservice user-api {\n    @handler UserLogin\n    post /user/login (UserLoginReq) returns (UserLoginResp)\n\n    @handler UserInfo\n    post /user/info (UserInfoReq) returns (UserInfoResp)\n\n    @handler UserInfoUpdate\n    post /user/info/update (UserInfoUpdateReq) returns (UserInfoUpdateResp)\n\n    @handler UserList\n    get /user/list returns ([]UserInfoResp)\n\n    @handler UserRoleList\n    get /user/role/list returns ([]UserRoleResp)\n\n    @handler UserRoleUpdate\n    get /user/role/update (UserRoleUpdateReq) returns (UserRoleUpdateResp)\n\n    @handler UserRoleInfo\n    get /user/role/info (UserRoleReq) returns (UserRoleResp)\n\n    @handler UserRoleAdd\n    get /user/role/add (UserRoleAddReq) returns (UserRoleAddResp)\n\n    @handler UserRoleDelete\n    get /user/role/delete (UserRoleDeleteReq) returns (UserRoleDeleteResp)\n\n    @handler UserClassList\n    get /user/class/list returns ([]UserClassResp)\n\n    @handler UserClassUpdate\n    get /user/class/update (UserClassUpdateReq) returns (UserClassUpdateResp)\n\n    @handler UserClassInfo\n    get /user/class/info (UserClassReq) returns (UserClassResp)\n\n    @handler UserClassAdd\n    get /user/class/add (UserClassAddReq) returns (UserClassAddResp)\n\n    @handler UserClassDelete\n    get /user/class/delete (UserClassDeleteReq) returns (UserClassDeleteResp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526233631-mqig9jv","Type":"NodeParagraph","Properties":{"id":"20240526233631-mqig9jv","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"在不分组的情况下生成的代码目录结构如下："}]},{"ID":"20240526233631-y4po451","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526233631-y4po451","updated":"20240526233632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA=="},{"Type":"NodeCodeBlockCode","Data":".\n├── etc\n│   └── user-api.yaml\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── handler\n│   │   ├── routes.go\n│   │   ├── userclassaddhandler.go\n│   │   ├── userclassdeletehandler.go\n│   │   ├── userclassinfohandler.go\n│   │   ├── userclasslisthandler.go\n│   │   ├── userclassupdatehandler.go\n│   │   ├── userinfohandler.go\n│   │   ├── userinfoupdatehandler.go\n│   │   ├── userlisthandler.go\n│   │   ├── userloginhandler.go\n│   │   ├── userroleaddhandler.go\n│   │   ├── userroledeletehandler.go\n│   │   ├── userroleinfohandler.go\n│   │   ├── userrolelisthandler.go\n│   │   └── userroleupdatehandler.go\n│   ├── logic\n│   │   ├── userclassaddlogic.go\n│   │   ├── userclassdeletelogic.go\n│   │   ├── userclassinfologic.go\n│   │   ├── serclasslistlogic.go\n│   │   ├── userclassupdatelogic.go\n│   │   ├── userinfologic.go\n│   │   ├── userinfoupdatelogic.go\n│   │   ├── userlistlogic.go\n│   │   ├── userloginlogic.go\n│   │   ├── userroleaddlogic.go\n│   │   ├── userroledeletelogic.go\n│   │   ├── userroleinfologic.go\n│   │   ├── userrolelistlogic.go\n│   │   └── userroleupdatelogic.go\n│   ├── svc\n│   │   └── servicecontext.go\n│   └── types\n│       └── types.go\n├── user.api\n└── user.go\n\n7 directories, 35 files\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526233631-s8o7vxn","Type":"NodeParagraph","Properties":{"id":"20240526233631-s8o7vxn","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"由于我们没有进行分组，所以生成的代码中handler 和 logic 目录下的文件是全部揉在一起的，这样的目录结构在项目中不太好管理和阅读，接下来我们按照 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"user"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"role"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"class"},{"Type":"NodeText","Data":"​ 来进行分组，在 api 语言中，我们可以通过在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"@server"},{"Type":"NodeText","Data":"​ 语句块中使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"group"},{"Type":"NodeText","Data":"​ 关键字来进行分组，分组的语法如下："}]},{"ID":"20240526233631-9dzwxdn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526233631-9dzwxdn","updated":"20240526233632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype (\n    UserLoginReq  {}\n    UserInfoReq  {}\n    UserLoginResp  {}\n    UserInfoResp  {}\n    UserInfoUpdateReq  {}\n    UserInfoUpdateResp  {}\n)\n\ntype (\n    UserRoleReq  {}\n    UserRoleResp  {}\n    UserRoleUpdateReq  {}\n    UserRoleUpdateResp  {}\n    UserRoleAddReq  {}\n    UserRoleAddResp  {}\n    UserRoleDeleteReq  {}\n    UserRoleDeleteResp  {}\n)\n\ntype (\n    UserClassReq  {}\n    UserClassResp  {}\n    UserClassUpdateReq  {}\n    UserClassUpdateResp  {}\n    UserClassAddReq  {}\n    UserClassAddResp  {}\n    UserClassDeleteReq  {}\n    UserClassDeleteResp  {}\n)\n\n@server (\n    prefix: /v1\n    group:  user\n)\nservice user-api {\n    @handler UserLogin\n    post /user/login (UserLoginReq) returns (UserLoginResp)\n\n    @handler UserInfo\n    post /user/info (UserInfoReq) returns (UserInfoResp)\n\n    @handler UserInfoUpdate\n    post /user/info/update (UserInfoUpdateReq) returns (UserInfoUpdateResp)\n\n    @handler UserList\n    get /user/list returns ([]UserInfoResp)\n}\n\n@server (\n    prefix: /v1\n    group:  role\n)\nservice user-api {\n    @handler UserRoleList\n    get /user/role/list returns ([]UserRoleResp)\n\n    @handler UserRoleUpdate\n    get /user/role/update (UserRoleUpdateReq) returns (UserRoleUpdateResp)\n\n    @handler UserRoleInfo\n    get /user/role/info (UserRoleReq) returns (UserRoleResp)\n\n    @handler UserRoleAdd\n    get /user/role/add (UserRoleAddReq) returns (UserRoleAddResp)\n\n    @handler UserRoleDelete\n    get /user/role/delete (UserRoleDeleteReq) returns (UserRoleDeleteResp)\n}\n\n@server (\n    prefix: /v1\n    group:  class\n)\nservice user-api {\n    @handler UserClassList\n    get /user/class/list returns ([]UserClassResp)\n\n    @handler UserClassUpdate\n    get /user/class/update (UserClassUpdateReq) returns (UserClassUpdateResp)\n\n    @handler UserClassInfo\n    get /user/class/info (UserClassReq) returns (UserClassResp)\n\n    @handler UserClassAdd\n    get /user/class/add (UserClassAddReq) returns (UserClassAddResp)\n\n    @handler UserClassDelete\n    get /user/class/delete (UserClassDeleteReq) returns (UserClassDeleteResp)\n}\n\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526233631-pvdwu9u","Type":"NodeParagraph","Properties":{"id":"20240526233631-pvdwu9u","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"我们再来看一下分组后的代码生成目录结构："}]},{"ID":"20240526233631-xjyda1v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526233631-xjyda1v","updated":"20240526233632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA=="},{"Type":"NodeCodeBlockCode","Data":".\n├── etc\n│   └── user-api.yaml\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── handler\n│   │   ├── class\n│   │   │   ├── userclassaddhandler.go\n│   │   │   ├── userclassdeletehandler.go\n│   │   │   ├── userclassinfohandler.go\n│   │   │   ├── userclasslisthandler.go\n│   │   │   └── userclassupdatehandler.go\n│   │   ├── role\n│   │   │   ├── userroleaddhandler.go\n│   │   │   ├── userroledeletehandler.go\n│   │   │   ├── userroleinfohandler.go\n│   │   │   ├── userrolelisthandler.go\n│   │   │   └── userroleupdatehandler.go\n│   │   ├── routes.go\n│   │   └── user\n│   │       ├── userinfohandler.go\n│   │       ├── userinfoupdatehandler.go\n│   │       ├── userlisthandler.go\n│   │       └── userloginhandler.go\n│   ├── logic\n│   │   ├── class\n│   │   │   ├── userclassaddlogic.go\n│   │   │   ├── userclassdeletelogic.go\n│   │   │   ├── userclassinfologic.go\n│   │   │   ├── userclassupdatelogic.go\n│   │   │   └── usersclaslistlogic.go\n│   │   ├── role\n│   │   │   ├── userroleaddlogic.go\n│   │   │   ├── userroledeletelogic.go\n│   │   │   ├── userroleinfologic.go\n│   │   │   ├── userrolelistlogic.go\n│   │   │   └── userroleupdatelogic.go\n│   │   └── user\n│   │       ├── userinfologic.go\n│   │       ├── userinfoupdatelogic.go\n│   │       ├── userlistlogic.go\n│   │       └── userloginlogic.go\n│   ├── svc\n│   │   └── servicecontext.go\n│   └── types\n│       └── types.go\n├── user.api\n└── user.go\n\n13 directories, 35 files\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526233631-80nzk64","Type":"NodeParagraph","Properties":{"id":"20240526233631-80nzk64","updated":"20240526233632"},"Children":[{"Type":"NodeText","Data":"通过分组，我们可以很方便的将不同的业务逻辑分组到不同的目录下，这样可以很方便的管理不同的业务逻辑。"}]}]}