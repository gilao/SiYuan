{"ID":"20240526234719-79qpyvt","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f9c2","id":"20240526234719-79qpyvt","title":"中间件声明","type":"doc","updated":"20240526234926"},"Children":[{"ID":"20240526234751-ty7e196","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526234751-ty7e196","updated":"20240526234751"},"Children":[{"Type":"NodeText","Data":"中间件声明"}]},{"ID":"20240526234751-tw2xx3e","Type":"NodeParagraph","Properties":{"id":"20240526234751-tw2xx3e","updated":"20240526234752"},"Children":[{"Type":"NodeText","Data":"假设我们有一个用户服务，我们需要将 user-agent 信息存入到 context 信息中，然后在 logic 层根据 user-agent 做业务处理，我们可以通过 api 语言来声明中间件， 在 api 语言中，我们可以通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"middleware"},{"Type":"NodeText","Data":"​ 关键字来声明中间件，中间件的声明格式如下："}]},{"ID":"20240526234751-vfd23j6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526234751-vfd23j6","updated":"20240526234752"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"v1\"\n\ntype UserInfoRequest {\n    Id int64 `path:\"id\"`\n}\ntype UserInfoResponse {\n    Id   int64  `json:\"id\"`\n    Name string `json:\"name\"`\n    Age  int32  `json:\"age\"`\n}\n\n@server(\n    // 通过 middileware 关键字声明中间件，多个中间件以英文逗号分割，如 UserAgentMiddleware,LogMiddleware\n    middleware: UserAgentMiddleware\n)\nservice user {\n    @handler userinfo\n    get /user/info/:id (UserInfoRequest) returns (UserInfoResponse)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526234751-l5xgj8p","Type":"NodeParagraph","Properties":{"id":"20240526234751-l5xgj8p","updated":"20240526234752"},"Children":[{"Type":"NodeText","Data":"在上面的例子中，我们声明了一个中间件 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UserAgentMiddleware"},{"Type":"NodeText","Data":"​，然后在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"@server"},{"Type":"NodeText","Data":"​ 中通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"middileware"},{"Type":"NodeText","Data":"​ 关键字来声明中间件。 我们来看一下生成的中间件代码："}]},{"ID":"20240526234751-tgaom6v","Type":"NodeParagraph","Properties":{"id":"20240526234751-tgaom6v","updated":"20240526234752"},"Children":[{"Type":"NodeText","Data":"目录结构"}]},{"ID":"20240526234751-c01126b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526234751-c01126b","updated":"20240526234752"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA=="},{"Type":"NodeCodeBlockCode","Data":".\n├── etc\n│   └── user.yaml\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── handler\n│   │   ├── routes.go\n│   │   └── userinfohandler.go\n│   ├── logic\n│   │   └── userinfologic.go\n│   ├── middleware # 中间件目录\n│   │   └── useragentmiddleware.go\n│   ├── svc\n│   │   └── servicecontext.go\n│   └── types\n│       └── types.go\n├── user.api\n└── user.go\n\n8 directories, 10 files\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526234751-wohjfo5","Type":"NodeParagraph","Properties":{"id":"20240526234751-wohjfo5","updated":"20240526234752"},"Children":[{"Type":"NodeText","Data":"中间件代码(未填充逻辑)"}]},{"ID":"20240526234804-njltld4","Type":"NodeList","ListData":{},"Properties":{"id":"20240526234804-njltld4","updated":"20240526234829"},"Children":[{"ID":"20240526234809-eq0ypgi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526234809-eq0ypgi","updated":"20240526234829"},"Children":[{"ID":"20240526234809-rkjjo47","Type":"NodeParagraph","Properties":{"id":"20240526234809-rkjjo47","updated":"20240526234823"},"Children":[{"Type":"NodeText","Data":"useragentmiddleware.go"}]},{"ID":"20240526234823-n8koytb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526234823-n8koytb","updated":"20240526234829"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package middleware\n\nimport \"net/http\"\n\ntype UserAgentMiddleware struct {\n}\n\nfunc NewUserAgentMiddleware() *UserAgentMiddleware {\n    return \u0026UserAgentMiddleware{}\n}\n\nfunc (m *UserAgentMiddleware) Handle(next http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        // TODO generate middleware implement function, delete after code implementation\n\n        // Passthrough to next handler if need\n        next(w, r)\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526234831-1cvnr23","Type":"NodeList","ListData":{},"Properties":{"id":"20240526234831-1cvnr23","updated":"20240526234856"},"Children":[{"ID":"20240526234832-fb128mf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526234832-fb128mf","updated":"20240526234856"},"Children":[{"ID":"20240526234832-zqdgtk6","Type":"NodeParagraph","Properties":{"id":"20240526234832-zqdgtk6","updated":"20240526234845"},"Children":[{"Type":"NodeText","Data":"servicecontext.go"}]},{"ID":"20240526234848-9fh0zxs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526234848-9fh0zxs","updated":"20240526234856"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package svc\n\nimport (\n    \"demo/user/internal/config\"\n    \"demo/user/internal/middleware\"\n    \"github.com/zeromicro/go-zero/rest\"\n)\n\ntype ServiceContext struct {\n    Config              config.Config\n    UserAgentMiddleware rest.Middleware\n}\n\nfunc NewServiceContext(c config.Config) *ServiceContext {\n    return \u0026ServiceContext{\n        Config:              c,\n        UserAgentMiddleware: middleware.NewUserAgentMiddleware().Handle,\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526234856-wjakmbv","Type":"NodeList","ListData":{},"Properties":{"id":"20240526234856-wjakmbv","updated":"20240526234912"},"Children":[{"ID":"20240526234900-tetxkgr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526234900-tetxkgr","updated":"20240526234912"},"Children":[{"ID":"20240526234900-ek8mb1n","Type":"NodeParagraph","Properties":{"id":"20240526234900-ek8mb1n","updated":"20240526234905"},"Children":[{"Type":"NodeText","Data":"routes.go"}]},{"ID":"20240526234906-rnk9ozo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526234906-rnk9ozo","updated":"20240526234912"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Code generated by goctl. DO NOT EDIT.\npackage handler\n\nimport (\n    \"net/http\"\n\n    \"demo/user/internal/svc\"\n\n    \"github.com/zeromicro/go-zero/rest\"\n)\n\nfunc RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {\n    server.AddRoutes(\n        rest.WithMiddlewares(\n            []rest.Middleware{serverCtx.UserAgentMiddleware},\n            []rest.Route{\n                {\n                    Method:  http.MethodGet,\n                    Path:    \"/user/info/:id\",\n                    Handler: userinfoHandler(serverCtx),\n                },\n            }...,\n        ),\n    )\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526234926-6v07mlv","Type":"NodeParagraph","Properties":{"id":"20240526234926-6v07mlv","updated":"20240526234926"},"Children":[{"Type":"NodeText","Data":"你可以看到，中间件的代码是通过 goctl 自动生成的，中间件的代码是一个结构体，结构体中有一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handle"},{"Type":"NodeText","Data":"​ 方法，这个方法是中间件的核心方法，这个方法接收一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.HandlerFunc"},{"Type":"NodeText","Data":"​ 类型的参数，然后返回一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.HandlerFunc"},{"Type":"NodeText","Data":"​ 类型的参数，这个方法的作用是对请求进行处理，然后将请求传递给下一个中间件或者 handler。"}]},{"ID":"20240526234926-94db269","Type":"NodeParagraph","Properties":{"id":"20240526234926-94db269","updated":"20240526234926"},"Children":[{"Type":"NodeText","Data":"你可以在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handle"},{"Type":"NodeText","Data":"​ 方法中对请求进行处理，比如鉴权，日志记录等等，然后将请求传递给下一个中间件或者 handler。"}]},{"ID":"20240526234926-ofs76w9","Type":"NodeParagraph","Properties":{"id":"20240526234926-ofs76w9","updated":"20240526234926"},"Children":[{"Type":"NodeText","Data":"如上需求例子，我们可以在中间件中将 header 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"User-Agent"},{"Type":"NodeText","Data":"​ 信息存到 context中，中间件实现如下："}]},{"ID":"20240526234926-cwbcauo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526234926-cwbcauo","updated":"20240526234926"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package middleware\n\nimport (\n    \"context\"\n    \"net/http\"\n)\n\ntype UserAgentMiddleware struct {\n}\n\nfunc NewUserAgentMiddleware() *UserAgentMiddleware {\n    return \u0026UserAgentMiddleware{}\n}\n\nfunc (m *UserAgentMiddleware) Handle(next http.HandlerFunc) http.HandlerFunc {\n    return func(w http.ResponseWriter, r *http.Request) {\n        val := r.Header.Get(\"User-Agent\")\n        reqCtx := r.Context()\n        ctx := context.WithValue(reqCtx, \"User-Agent\", val)\n        newReq := r.WithContext(ctx)\n        next(w, newReq)\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}