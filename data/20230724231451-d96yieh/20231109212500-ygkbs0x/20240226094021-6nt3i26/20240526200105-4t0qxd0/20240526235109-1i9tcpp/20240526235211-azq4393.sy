{"ID":"20240526235211-azq4393","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f95d","id":"20240526235211-azq4393","title":"服务分组","type":"doc","updated":"20240526235249"},"Children":[{"ID":"20240526235234-xv4222h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526235234-xv4222h","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"概述"}]},{"ID":"20240526235234-617td1x","Type":"NodeParagraph","Properties":{"id":"20240526235234-617td1x","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"go-zero 采用 gRPC 进行服务间的通信，我们通过 proto 文件来定义服务的接口，但是在实际的开发中，我们可能会有多个服务，如果不对服务进行文件分组，那么 goctl 生成的代码将会是一个大的文件夹，这样会导致代码的可维护性变差，因此服务分组可以提高代码的可读性和可维护性。"}]},{"ID":"20240526235234-8fjzdet","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526235234-8fjzdet","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"服务分组"}]},{"ID":"20240526235234-x7b1xki","Type":"NodeParagraph","Properties":{"id":"20240526235234-x7b1xki","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"在 go-zero 中，我们通过在 proto 文件中以 service 为维度来进行文件分组，我们可以在 proto 文件中定义多个 service，每个 service 都会生成一个独立的文件夹，这样就可以将不同的服务进行分组，从而提高代码的可读性和可维护性。"}]},{"ID":"20240526235234-hm5zj4f","Type":"NodeParagraph","Properties":{"id":"20240526235234-hm5zj4f","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"除了 proto 文件中定义了 service 外，分组与否还需要在 goctl 中控制，生成带分组或者不带分组的代码取决于开发者，我们通过示例来演示一下。"}]},{"ID":"20240526235234-5mfth25","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526235234-5mfth25","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"不带分组"}]},{"ID":"20240526235234-dhsbjxi","Type":"NodeParagraph","Properties":{"id":"20240526235234-dhsbjxi","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"假设我们有一个 proto 文件，如下："}]},{"ID":"20240526235234-e7a56le","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526235234-e7a56le","updated":"20240526235234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHJvdG9idWY="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"proto3\";\n\npackage user;\n\noption go_package = \"github.com/example/user\";\n\nmessage LoginReq{}\nmessage LoginResp{}\nmessage UserInfoReq{}\nmessage UserInfoResp{}\nmessage UserInfoUpdateReq{}\nmessage UserInfoUpdateResp{}\nmessage UserListReq{}\nmessage UserListResp{}\n\nmessage UserRoleListReq{}\nmessage UserRoleListResp{}\nmessage UserRoleUpdateReq{}\nmessage UserRoleUpdateResp{}\nmessage UserRoleInfoReq{}\nmessage UserRoleInfoResp{}\nmessage UserRoleAddReq{}\nmessage UserRoleAddResp{}\nmessage UserRoleDeleteReq{}\nmessage UserRoleDeleteResp{}\n\n\nmessage UserClassListReq{}\nmessage UserClassListResp{}\nmessage UserClassUpdateReq{}\nmessage UserClassUpdateResp{}\nmessage UserClassInfoReq{}\nmessage UserClassInfoResp{}\nmessage UserClassAddReq{}\nmessage UserClassAddResp{}\nmessage UserClassDeleteReq{}\nmessage UserClassDeleteResp{}\n\nservice UserService{\n  rpc Login (LoginReq) returns (LoginResp);\n  rpc UserInfo (UserInfoReq) returns (UserInfoResp);\n  rpc UserInfoUpdate (UserInfoUpdateReq) returns (UserInfoUpdateResp);\n  rpc UserList (UserListReq) returns (UserListResp);\n\n  rpc UserRoleList (UserRoleListReq) returns (UserRoleListResp);\n  rpc UserRoleUpdate (UserRoleUpdateReq) returns (UserRoleUpdateResp);\n  rpc UserRoleInfo (UserRoleInfoReq) returns (UserRoleInfoResp);\n  rpc UserRoleAdd (UserRoleAddReq) returns (UserRoleAddResp);\n  rpc UserRoleDelete (UserRoleDeleteReq) returns (UserRoleDeleteResp);\n\n  rpc UserClassList (UserClassListReq) returns (UserClassListResp);\n  rpc UserClassUpdate (UserClassUpdateReq) returns (UserClassUpdateResp);\n  rpc UserClassInfo (UserClassInfoReq) returns (UserClassInfoResp);\n  rpc UserClassAdd (UserClassAddReq) returns (UserClassAddResp);\n  rpc UserClassDelete (UserClassDeleteReq) returns (UserClassDeleteResp);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526235234-g13vmv8","Type":"NodeParagraph","Properties":{"id":"20240526235234-g13vmv8","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"我们来看一下不分组的情况下，goctl 生成的代码结构："}]},{"ID":"20240526235234-gn87arq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526235234-gn87arq","updated":"20240526235234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA=="},{"Type":"NodeCodeBlockCode","Data":"$ goctl rpc protoc user.proto --go_out=. --go-grpc_out=. --zrpc_out=.\n$ tree\n.\n├── etc\n│   └── user.yaml\n├── github.com\n│   └── example\n│       └── user\n│           ├── user.pb.go\n│           └── user_grpc.pb.go\n├── go.mod\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── logic\n│   │   ├── loginlogic.go\n│   │   ├── userclassaddlogic.go\n│   │   ├── userclassdeletelogic.go\n│   │   ├── userclassinfologic.go\n│   │   ├── userclasslistlogic.go\n│   │   ├── userclassupdatelogic.go\n│   │   ├── userinfologic.go\n│   │   ├── userinfoupdatelogic.go\n│   │   ├── userlistlogic.go\n│   │   ├── userroleaddlogic.go\n│   │   ├── userroledeletelogic.go\n│   │   ├── userroleinfologic.go\n│   │   ├── userrolelistlogic.go\n│   │   └── userroleupdatelogic.go\n│   ├── server\n│   │   └── userserviceserver.go\n│   └── svc\n│       └── servicecontext.go\n├── user.go\n├── user.proto\n└── userservice\n    └── userservice.go\n\n10 directories, 24 files\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526235234-avtzyaa","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20240526235234-avtzyaa","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"温馨提示"}]},{"ID":"20240526235234-wbchqvh","Type":"NodeParagraph","Properties":{"id":"20240526235234-wbchqvh","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"在不进行分组的情况下，不支持在 proto 文件中定义多个 service，否则会报错。"}]},{"ID":"20240526235234-9ov04wz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240526235234-9ov04wz","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"带分组"}]},{"ID":"20240526235234-desck2v","Type":"NodeParagraph","Properties":{"id":"20240526235234-desck2v","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"首先，我们需要在 proto 文件中定义多个 service，如下："}]},{"ID":"20240526235234-4dntpsb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526235234-4dntpsb","updated":"20240526235234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHJvdG9idWY="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"proto3\";\n\npackage user;\n\noption go_package = \"github.com/example/user\";\n\nmessage LoginReq{}\nmessage LoginResp{}\nmessage UserInfoReq{}\nmessage UserInfoResp{}\nmessage UserInfoUpdateReq{}\nmessage UserInfoUpdateResp{}\nmessage UserListReq{}\nmessage UserListResp{}\nservice UserService{\n  rpc Login (LoginReq) returns (LoginResp);\n  rpc UserInfo (UserInfoReq) returns (UserInfoResp);\n  rpc UserInfoUpdate (UserInfoUpdateReq) returns (UserInfoUpdateResp);\n  rpc UserList (UserListReq) returns (UserListResp);\n}\n\nmessage UserRoleListReq{}\nmessage UserRoleListResp{}\nmessage UserRoleUpdateReq{}\nmessage UserRoleUpdateResp{}\nmessage UserRoleInfoReq{}\nmessage UserRoleInfoResp{}\nmessage UserRoleAddReq{}\nmessage UserRoleAddResp{}\nmessage UserRoleDeleteReq{}\nmessage UserRoleDeleteResp{}\nservice UserRoleService{\n  rpc UserRoleList (UserRoleListReq) returns (UserRoleListResp);\n  rpc UserRoleUpdate (UserRoleUpdateReq) returns (UserRoleUpdateResp);\n  rpc UserRoleInfo (UserRoleInfoReq) returns (UserRoleInfoResp);\n  rpc UserRoleAdd (UserRoleAddReq) returns (UserRoleAddResp);\n  rpc UserRoleDelete (UserRoleDeleteReq) returns (UserRoleDeleteResp);\n}\n\nmessage UserClassListReq{}\nmessage UserClassListResp{}\nmessage UserClassUpdateReq{}\nmessage UserClassUpdateResp{}\nmessage UserClassInfoReq{}\nmessage UserClassInfoResp{}\nmessage UserClassAddReq{}\nmessage UserClassAddResp{}\nmessage UserClassDeleteReq{}\nmessage UserClassDeleteResp{}\nservice UserClassService{\n  rpc UserClassList (UserClassListReq) returns (UserClassListResp);\n  rpc UserClassUpdate (UserClassUpdateReq) returns (UserClassUpdateResp);\n  rpc UserClassInfo (UserClassInfoReq) returns (UserClassInfoResp);\n  rpc UserClassAdd (UserClassAddReq) returns (UserClassAddResp);\n  rpc UserClassDelete (UserClassDeleteReq) returns (UserClassDeleteResp);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526235234-67pnclz","Type":"NodeParagraph","Properties":{"id":"20240526235234-67pnclz","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"我们来看一下带分组的情况下，goctl 生成的代码结构："}]},{"ID":"20240526235234-1kerjp3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526235234-1kerjp3","updated":"20240526235234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA=="},{"Type":"NodeCodeBlockCode","Data":"# 通过 -m 指定 goctl 生成分组的代码\n$ goctl rpc protoc user.proto --go_out=. --go-grpc_out=. --zrpc_out=. -m\n$ tree\n.\n├── client\n│   ├── userclassservice\n│   │   └── userclassservice.go\n│   ├── userroleservice\n│   │   └── userroleservice.go\n│   └── userservice\n│       └── userservice.go\n├── etc\n│   └── user.yaml\n├── github.com\n│   └── example\n│       └── user\n│           ├── user.pb.go\n│           └── user_grpc.pb.go\n├── go.mod\n├── internal\n│   ├── config\n│   │   └── config.go\n│   ├── logic\n│   │   ├── userclassservice\n│   │   │   ├── userclassaddlogic.go\n│   │   │   ├── userclassdeletelogic.go\n│   │   │   ├── userclassinfologic.go\n│   │   │   ├── userclasslistlogic.go\n│   │   │   └── userclassupdatelogic.go\n│   │   ├── userroleservice\n│   │   │   ├── userroleaddlogic.go\n│   │   │   ├── userroledeletelogic.go\n│   │   │   ├── userroleinfologic.go\n│   │   │   ├── userrolelistlogic.go\n│   │   │   └── userroleupdatelogic.go\n│   │   └── userservice\n│   │       ├── loginlogic.go\n│   │       ├── userinfologic.go\n│   │       ├── userinfoupdatelogic.go\n│   │       └── userlistlogic.go\n│   ├── server\n│   │   ├── userclassservice\n│   │   │   └── userclassserviceserver.go\n│   │   ├── userroleservice\n│   │   │   └── userroleserviceserver.go\n│   │   └── userservice\n│   │       └── userserviceserver.go\n│   └── svc\n│       └── servicecontext.go\n├── user.go\n└── user.proto\n\n19 directories, 28 files\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526235234-tdzlj1v","Type":"NodeParagraph","Properties":{"id":"20240526235234-tdzlj1v","updated":"20240526235234"},"Children":[{"Type":"NodeText","Data":"通过目录结构我们可以看出，logic、server、client 目录都会根据 service 进行分组。"}]},{"ID":"20240526235211-xy6el2q","Type":"NodeParagraph","Properties":{"id":"20240526235211-xy6el2q","updated":"20240526235234"}}]}