{"ID":"20240526192539-oxtp223","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f9c8","id":"20240526192539-oxtp223","title":"Mongo 数据库操作","type":"doc","updated":"20240526195021"},"Children":[{"ID":"20240526192610-kgzzpe1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526192610-kgzzpe1","updated":"20240526192610"},"Children":[{"Type":"NodeText","Data":"概述"}]},{"ID":"20240526192610-d3rjn8q","Type":"NodeParagraph","Properties":{"id":"20240526192610-d3rjn8q","updated":"20240526192610"},"Children":[{"Type":"NodeText","Data":"通过 mongodb 的 uri 创建个可用的 mongodb 数据库连接。"}]},{"ID":"20240526192716-nsjastr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526192716-nsjastr","updated":"20240526192716"},"Children":[{"Type":"NodeText","Data":"创建数据库连接"}]},{"ID":"20240526192716-mc2ghzj","Type":"NodeParagraph","Properties":{"id":"20240526192716-mc2ghzj","updated":"20240526192716"},"Children":[{"Type":"NodeText","Data":"数据库的连接创建提供了两个方法，"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/zeromicro/go-zero/blob/master/core/stores/mon/model.go#L40","TextMarkTextContent":"MustNewModel"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/zeromicro/go-zero/blob/master/core/stores/mon/model.go#L50","TextMarkTextContent":"NewModel"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240526192740-3iu96c1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526192740-3iu96c1","updated":"20240526192740"},"Children":[{"Type":"NodeText","Data":"方法说明"}]},{"ID":"20240526192748-6ig9bpa","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526192748-6ig9bpa","updated":"20240526192804"},"Children":[{"ID":"20240526192751-dw9ovi1","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526192751-dw9ovi1","updated":"20240526192804"},"Children":[{"ID":"20240526192751-c47n8vp","Type":"NodeParagraph","Properties":{"id":"20240526192751-c47n8vp","updated":"20240526192758"},"Children":[{"Type":"NodeText","Data":"MustNewModel"}]},{"ID":"20240526192759-oscqkru","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526192759-oscqkru","updated":"20240526192804"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    MustNewModel func(uri, db, collection string, opts ...Option) *Model \n说明: \n    1. 当 mongodb 连接创建存在问题时，会直接进退退出，输出错误日志。\n    2. 当 db 和 collection 不存在时，会创建 db 和 collection。\n入参:\n    1. uri: mongodb uri (example: mongodb://\u003cuser\u003e:\u003cpassword\u003e@\u003chost\u003e:\u003cport\u003e)\n    2. db: 数据库名\n    3. collection: 集合名\n返回值:\n    1. *Model: 连接管理对象\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526194736-ndfqk3u","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526194736-ndfqk3u","updated":"20240526194752"},"Children":[{"ID":"20240526194741-fnyiwj5","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526194741-fnyiwj5","updated":"20240526194752"},"Children":[{"ID":"20240526194741-4oztpoq","Type":"NodeParagraph","Properties":{"id":"20240526194741-4oztpoq","updated":"20240526194744"},"Children":[{"Type":"NodeText","Data":"NewModel"}]},{"ID":"20240526194745-rlbyc8k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526194745-rlbyc8k","updated":"20240526194752"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    NewModel func(uri, db, collection string, opts ...Option) (*Model, error)\n说明: \n    1. 当 db 和 collection 不存在时，会创建 db 和 collection。\n入参:\n    1. uri: mongodb uri (example: mongodb://\u003cuser\u003e:\u003cpassword\u003e@\u003chost\u003e:\u003cport\u003e)\n    2. db: 数据库名\n    3. collection: 集合名\n返回值:\n    1. *Model: 连接管理对象\n    2. error: 创建错误\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526194832-wtl8uuo","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240526194832-wtl8uuo","updated":"20240526194840"},"Children":[{"Type":"NodeText","Data":"基本CURD"}]},{"ID":"20240526194848-dl93k37","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526194848-dl93k37","updated":"20240526194848"},"Children":[{"Type":"NodeText","Data":"新增"}]},{"ID":"20240526194851-t8lxfac","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526194851-t8lxfac","updated":"20240526194904"},"Children":[{"ID":"20240526194853-nzp1k29","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526194853-nzp1k29","updated":"20240526194904"},"Children":[{"ID":"20240526194853-k5wsj97","Type":"NodeParagraph","Properties":{"id":"20240526194853-k5wsj97","updated":"20240526194858"},"Children":[{"Type":"NodeText","Data":"InsertOne"}]},{"ID":"20240526194859-2mxtfrp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526194859-2mxtfrp","updated":"20240526194904"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    InsertOne func(ctx context.Context, document interface{}, opts ...*mopt.InsertOneOptions) (\n            *mongo.InsertOneResult, error) \n说明: \n    1. 新增单个文档记录。\n入参:\n    1. ctx: context\n    2. document: 记录信息\n    3. opts: 操作选项\n返回值:\n    1. *mongo.InsertOneResult: 新增结果，包含新增记录的 _id\n    2. error: 执行结果\n\n示例:\ntype User struct {\n    ID primitive.ObjectID `bson:\"_id,omitempty\" json:\"id,omitempty\"`\n    // TODO: Fill your own fields\n    UpdateAt time.Time `bson:\"updateAt,omitempty\" json:\"updateAt,omitempty\"`\n    CreateAt time.Time `bson:\"createAt,omitempty\" json:\"createAt,omitempty\"`\n}\n\nfunc (m *defaultUserModel) Insert(ctx context.Context, data *User) error {\n    if data.ID.IsZero() {\n        data.ID = primitive.NewObjectID()\n        data.CreateAt = time.Now()\n        data.UpdateAt = time.Now()\n    }\n\n    _, err := m.conn.InsertOne(ctx, data)\n    return err\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526194909-9xdmutv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526194909-9xdmutv","updated":"20240526194909"},"Children":[{"Type":"NodeText","Data":"更新"}]},{"ID":"20240526194911-h3mb69s","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526194911-h3mb69s","updated":"20240526194925"},"Children":[{"ID":"20240526194914-crow3cs","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526194914-crow3cs","updated":"20240526194925"},"Children":[{"ID":"20240526194914-9y719s1","Type":"NodeParagraph","Properties":{"id":"20240526194914-9y719s1","updated":"20240526194919"},"Children":[{"Type":"NodeText","Data":"ReplaceOne"}]},{"ID":"20240526194920-e2jv4hv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526194920-e2jv4hv","updated":"20240526194925"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    ReplaceOne func(ctx context.Context, filter, replacement interface{},\n            opts ...*mopt.ReplaceOptions) (*mongo.UpdateResult, error)\n说明: \n    1. 更新单个文档记录。\n入参:\n    1. ctx: context\n    2. filter: 过滤条件\n    3. replacement: 更新记录\n    4. opts: 操作选项\n返回值:\n    1. *mongo.ReplaceOptions: 更新结果，包含更新的 _id, 匹配的数量等信息\n    2. error: 执行结果\n\n示例:\ntype User struct {\n    ID primitive.ObjectID `bson:\"_id,omitempty\" json:\"id,omitempty\"`\n    // TODO: Fill your own fields\n    UpdateAt time.Time `bson:\"updateAt,omitempty\" json:\"updateAt,omitempty\"`\n    CreateAt time.Time `bson:\"createAt,omitempty\" json:\"createAt,omitempty\"`\n}\n\nfunc (m *defaultUserModel) Update(ctx context.Context, data *User) error {\n    data.UpdateAt = time.Now()\n\n    _, err := m.conn.ReplaceOne(ctx, bson.M{\"_id\": data.ID}, data)\n    return err\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526194930-arb0oax","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526194930-arb0oax","updated":"20240526194930"},"Children":[{"Type":"NodeText","Data":"查询"}]},{"ID":"20240526194930-6s8r8gg","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526194930-6s8r8gg","updated":"20240526194939"},"Children":[{"ID":"20240526194932-7hb6w02","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526194932-7hb6w02","updated":"20240526194939"},"Children":[{"ID":"20240526194932-okc9958","Type":"NodeParagraph","Properties":{"id":"20240526194932-okc9958","updated":"20240526194935"},"Children":[{"Type":"NodeText","Data":"FindOne"}]},{"ID":"20240526194935-ackln8c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526194935-ackln8c","updated":"20240526194939"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    FindOne func(ctx context.Context, v, filter interface{}, opts ...*mopt.FindOneOptions) error \n说明: \n    1. 查询单个文档记录。\n入参:\n    1. ctx: context\n    2. v: 查询结果\n    2. filter: 过滤条件\n    3. opts: 操作选项\n返回值:\n    1. error: 执行结果\n\n示例:\ntype User struct {\n    ID primitive.ObjectID `bson:\"_id,omitempty\" json:\"id,omitempty\"`\n    // TODO: Fill your own fields\n    UpdateAt time.Time `bson:\"updateAt,omitempty\" json:\"updateAt,omitempty\"`\n    CreateAt time.Time `bson:\"createAt,omitempty\" json:\"createAt,omitempty\"`\n}\n\nfunc (m *defaultUserModel) FindOne(ctx context.Context, id string) (*User, error) {\n    oid, err := primitive.ObjectIDFromHex(id)\n    if err != nil {\n        return nil, ErrInvalidObjectId\n    }\n\n    var data User\n\n    err = m.conn.FindOne(ctx, \u0026data, bson.M{\"_id\": oid})\n    switch err {\n    case nil:\n        return \u0026data, nil\n    case mon.ErrNotFound:\n        return nil, ErrNotFound\n    default:\n        return nil, err\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526194942-7gqfjm0","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526194942-7gqfjm0","updated":"20240526194949"},"Children":[{"ID":"20240526194943-pri6alt","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240526194943-pri6alt","updated":"20240526194949"},"Children":[{"ID":"20240526194944-t1df89j","Type":"NodeParagraph","Properties":{"id":"20240526194944-t1df89j","updated":"20240526194945"},"Children":[{"Type":"NodeText","Data":"Find"}]},{"ID":"20240526194945-2kkj1ub","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526194945-2kkj1ub","updated":"20240526194949"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    Find func(ctx context.Context, v, filter interface{}, opts ...*mopt.FindOptions) error \n说明: \n    1. 查询单个文档记录。\n入参:\n    1. ctx: context\n    2. v: 查询结果(数组指针)\n    2. filter: 过滤条件\n    3. opts: 操作选项\n返回值:\n    1. error: 执行结果\n\n示例:\ntype User struct {\n    ID primitive.ObjectID `bson:\"_id,omitempty\" json:\"id,omitempty\"`\n    // TODO: Fill your own fields\n    UpdateAt time.Time `bson:\"updateAt,omitempty\" json:\"updateAt,omitempty\"`\n    CreateAt time.Time `bson:\"createAt,omitempty\" json:\"createAt,omitempty\"`\n}\n\nfunc (m *defaultUserModel) Find(ctx context.Context, id string) ([]*User, error) {\n    oid, err := primitive.ObjectIDFromHex(id)\n    if err != nil {\n        return nil, ErrInvalidObjectId\n    }\n\n    var data []*User\n\n    err = m.conn.Find(ctx, \u0026data, bson.M{\"_id\": oid})\n    return data, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526194952-9htl4kk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526194952-9htl4kk","updated":"20240526194956"},"Children":[{"Type":"NodeText","Data":"删除"}]},{"ID":"20240526194956-1efrivx","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240526194956-1efrivx","updated":"20240526195005"},"Children":[{"ID":"20240526194957-ronxqig","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240526194957-ronxqig","updated":"20240526195005"},"Children":[{"ID":"20240526194957-3jqd0s9","Type":"NodeParagraph","Properties":{"id":"20240526194957-3jqd0s9","updated":"20240526195001"},"Children":[{"Type":"NodeText","Data":"DeleteOne"}]},{"ID":"20240526195001-xm8s8c8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526195001-xm8s8c8","updated":"20240526195005"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"函数签名: \n    DeleteOne func(ctx context.Context, filter interface{}, opts ...*mopt.DeleteOptions) (int64, error)\n说明: \n    1. 新增单个文档记录。\n入参:\n    1. ctx: context\n    2. filter: 过滤条件\n    3. opts: 操作选项\n返回值:\n    1. int64: 删除数量\n    2. error: 执行结果\n\n示例:\ntype User struct {\n    ID primitive.ObjectID `bson:\"_id,omitempty\" json:\"id,omitempty\"`\n    // TODO: Fill your own fields\n    UpdateAt time.Time `bson:\"updateAt,omitempty\" json:\"updateAt,omitempty\"`\n    CreateAt time.Time `bson:\"createAt,omitempty\" json:\"createAt,omitempty\"`\n}\n\nfunc (m *defaultUserModel) Delete(ctx context.Context, id string) error {\n    oid, err := primitive.ObjectIDFromHex(id)\n    if err != nil {\n        return ErrInvalidObjectId\n    }\n\n    _, err = m.conn.DeleteOne(ctx, bson.M{\"_id\": oid})\n    return err\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526195012-wt3kwyc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526195012-wt3kwyc","updated":"20240526195012"},"Children":[{"Type":"NodeText","Data":"完整 demo 实例"}]},{"ID":"20240526195013-s8xkgg9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526195013-s8xkgg9","updated":"20240526195021"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"time\"\n\n    \"go.mongodb.org/mongo-driver/bson\"\n    \"go.mongodb.org/mongo-driver/bson/primitive\"\n\n    \"github.com/zeromicro/go-zero/core/stores/mon\"\n)\n\ntype User struct {\n    ID       primitive.ObjectID `bson:\"_id,omitempty\" json:\"id,omitempty\"`\n    Username string             `bson:\"username,omitempty\" json:\"username,omitempty\"`\n    Password string             `bson:\"password,omitempty\" json:\"password,omitempty\"`\n    UpdateAt time.Time          `bson:\"updateAt,omitempty\" json:\"updateAt,omitempty\"`\n    CreateAt time.Time          `bson:\"createAt,omitempty\" json:\"createAt,omitempty\"`\n}\n\nfunc main() {\n    conn := mon.MustNewModel(\"mongodb://\u003cuser\u003e:\u003cpassword\u003e@\u003chost\u003e:\u003cport\u003e\", \"db\", \"collection\")\n    ctx := context.Background()\n    u := \u0026User{\n        ID:       primitive.ObjectID{},\n        Username: \"username\",\n        Password: \"password\",\n        UpdateAt: time.Now(),\n        CreateAt: time.Now(),\n    }\n    // insert one\n    _, err := conn.InsertOne(ctx, u)\n    if err != nil {\n        panic(err)\n    }\n\n    // 查询\n    var newUser User\n    err = conn.FindOne(ctx, \u0026newUser, bson.M{\"_id\": u.ID})\n    if err != nil {\n        panic(err)\n    }\n\n    // 更新\n    newUser.Username = \"newUsername\"\n    _, err = conn.ReplaceOne(ctx, bson.M{\"_id\": newUser.ID}, newUser)\n    if err != nil {\n        panic(err)\n    }\n\n    // 删除\n    _, err = conn.DeleteOne(ctx, bson.M{\"_id\": newUser.ID})\n    if err != nil {\n        panic(err)\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}