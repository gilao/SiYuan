{"ID":"20240526190851-sbd7p39","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3ac","id":"20240526190851-sbd7p39","title":"gRPC Server 开发","type":"doc","updated":"20240526191013"},"Children":[{"ID":"20240526190937-nriee8e","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526190937-nriee8e","updated":"20240526190937"},"Children":[{"Type":"NodeText","Data":"概述"}]},{"ID":"20240526190937-el3dn1h","Type":"NodeParagraph","Properties":{"id":"20240526190937-el3dn1h","updated":"20240526190937"},"Children":[{"Type":"NodeText","Data":"本文将介绍如何快速开发一个 rpc server 服务。"}]},{"ID":"20240526190937-n350hyp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240526190937-n350hyp","updated":"20240526190937"},"Children":[{"Type":"NodeText","Data":"示例"}]},{"ID":"20240526190937-5693rux","Type":"NodeParagraph","Properties":{"id":"20240526190937-5693rux","updated":"20240526190937"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"准备工作"}]},{"ID":"20240526190937-f42lfx8","Type":"NodeParagraph","Properties":{"id":"20240526190937-f42lfx8","updated":"20240526190937"},"Children":[{"Type":"NodeText","Data":"首先我们执行如下命令生成一个 proto 文件及其 pb 文件。"}]},{"ID":"20240526190937-zg7ic1b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526190937-zg7ic1b","updated":"20240526190937"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA=="},{"Type":"NodeCodeBlockCode","Data":"# 创建 demo 服务目录\n$ mkdir demo \u0026\u0026 cd demo\n# go mod 初始化\n$ go mod init demo\n# 生成 greet.proto 文件\n$ goctl rpc -o greet.proto\n# 生 pb.go 文件\n$ protoc greet.proto --go_out=. --go-grpc_out=.\n# 创建 server 目录\n$ mkdir server \u0026\u0026 cd server\n# 新增配置文件\n$ mkdir etc \u0026\u0026 cd etc\n$ touch greet-server.yaml\n# 新增 server.go 文件\n$ touch server.go\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240526190937-vgsqgy6","Type":"NodeParagraph","Properties":{"id":"20240526190937-vgsqgy6","updated":"20240526190937"},"Children":[{"Type":"NodeText","Data":"yaml 配置内容及 server.go 代码如下"}]},{"ID":"20240526190945-sx58m2d","Type":"NodeList","ListData":{},"Properties":{"id":"20240526190945-sx58m2d","updated":"20240526191003"},"Children":[{"ID":"20240526190946-wvxvt9c","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526190946-wvxvt9c","updated":"20240526191003"},"Children":[{"ID":"20240526190946-ongsmae","Type":"NodeParagraph","Properties":{"id":"20240526190946-ongsmae","updated":"20240526190954"},"Children":[{"Type":"NodeText","Data":"etc/greet-server.yaml"}]},{"ID":"20240526190955-eije6pv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526190955-eije6pv","updated":"20240526191003"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"Name: greet.rpc\nListenOn: 127.0.0.1:8080\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]},{"ID":"20240526191003-t1g129b","Type":"NodeList","ListData":{},"Properties":{"id":"20240526191003-t1g129b","updated":"20240526191013"},"Children":[{"ID":"20240526191004-mui8fv2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240526191004-mui8fv2","updated":"20240526191013"},"Children":[{"ID":"20240526191004-rat9fwy","Type":"NodeParagraph","Properties":{"id":"20240526191004-rat9fwy","updated":"20240526191007"},"Children":[{"Type":"NodeText","Data":"server.go"}]},{"ID":"20240526191008-b41ybqv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240526191008-b41ybqv","updated":"20240526191013"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    var serverConf zrpc.RpcServerConf\n    conf.MustLoad(\"etc/greet-server.yaml\", \u0026serverConf)\n    s := zrpc.MustNewServer(serverConf, func(server *grpc.Server) {\n        greet.RegisterGreetServer(server, \u0026exampleServer{})\n    })\n  \n    defer s.Stop()\n    s.Start()\n}\n\ntype exampleServer struct {\n    greet.UnimplementedGreetServer\n}\n\nfunc (e *exampleServer) Ping(ctx context.Context, request *greet.Request) (*greet.Response, error) {\n    // fill your logic here\n    return \u0026greet.Response{}, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}]}]}