{"ID":"20231117110857-3f98wrq","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f378","id":"20231117110857-3f98wrq","tags":"公众号-路多辛","title":"Web 开发中 route 和router 有什么区别","updated":"20231117153452"},"Children":[{"ID":"20231117110935-00zdxs6","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117110935-00zdxs6","updated":"20231117110935"},"Children":[{"Type":"NodeText","Data":"什么是路由？"}]},{"ID":"20231117110935-ks5zv3r","Type":"NodeParagraph","Properties":{"id":"20231117110935-ks5zv3r","updated":"20231117110953"},"Children":[{"Type":"NodeText","Data":"在 Web 开发中，会经常和路由打交道，可能有的同学并没有仔细思考过到底什么是路由。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"路由是根据用户请求的 URL 来确定返回给用户的内容或页面的技术，即将 HTTP 请求映射到相应的处理代码，使得用户能够通过访问不同的 URL 来获取正确的页面或功能。"},{"Type":"NodeText","Data":"在 Web 应用程序中，有很多不同的页面和功能需要通过不同的 URL 进行访问，这就需要通过路由来将 HTTP 请求映射到相应的处理代码上。借助路由，开发者可以创建出更加灵活和可维护的 Web 应用程序，提高应用程序的质量和安全性。"}]},{"ID":"20231117110937-xcvhu8m","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117110937-xcvhu8m","updated":"20231117111356"},"Children":[{"Type":"NodeText","Data":"route  与 router 的基本区别"}]},{"ID":"20231117111420-k2r1fnj","Type":"NodeParagraph","Properties":{"id":"20231117111420-k2r1fnj","updated":"20231117111420"},"Children":[{"Type":"NodeText","Data":"在日常开发中，在表示路由的时候，想必很多同学都纠结过到底使用 route 还是 router。 这两个词虽然看起来和听起来都很相似，但代表着不同的概念。"}]},{"ID":"20231117111420-gycgtes","Type":"NodeParagraph","Properties":{"id":"20231117111420-gycgtes","updated":"20231117111607"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"route 通常指的是应用程序中的一个路由规则，定义了 URL 模式与应用程序中的特定行为之间的映射。"},{"Type":"NodeText","Data":"简单来说，"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"},"TextMarkType":"text strong","TextMarkTextContent":"是一个 URL 路径与处理这个路径请求的代码之间的关系。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"},{"Type":"NodeText","Data":"当用户访问特定的 URL 时，route 决定了应该呈现哪个视图或组件，或者执行哪个控制器的哪个动作。例如，在一个博客应用中，可能会有一个 route 将 /post/list 映射到显示所有博客的动作。route 通常包含了路径模式、处理函数（如控制器动作）、中间件等。可以是静态的（如/about）或动态的（如 /post/:id，其中 :id 是一个变量）。"}]},{"ID":"20231117111420-pyow1xv","Type":"NodeParagraph","Properties":{"id":"20231117111420-pyow1xv","updated":"20231117111626"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"router 是一种机制，通常是一个对象或一个库，负责监听浏览器地址的变化，解析 URL，并根据定义好的 route 规则分发请求到相应的处理逻辑。router 决定了应用程序如何响应用户的请求，管理着所有的 route 规则，并在用户访问某个 URL 时，决定使用哪个 route 规则来处理这个请求。"},{"Type":"NodeText","Data":"router 通常提供了定义 route 的接口、导航控制（如前进、后退、重定向）、路由守卫（如权限验证）、路由嵌套等高级功能。在现代前端框架中，router 还负责处理浏览器历史记录和状态管理。"}]},{"ID":"20231117153452-w9dxo7x","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231117153452-w9dxo7x","updated":"20231117153452"},"Children":[{"Type":"NodeText","Data":"以 Gin 框架看 route 和 router"}]},{"ID":"20231117153452-mrt2t9p","Type":"NodeParagraph","Properties":{"id":"20231117153452-mrt2t9p","updated":"20231117153452"},"Children":[{"Type":"NodeText","Data":"接下来以 Golang 框架 Gin 为例，来理解下 route 和 router的不同。"}]},{"ID":"20231117153452-8badkyo","Type":"NodeParagraph","Properties":{"id":"20231117153452-8badkyo","updated":"20231117153452"},"Children":[{"Type":"NodeText","Data":"从上文我们已经知道 route 是指 URL 路径和用来处理该路径请求的函数之间的映射关系。在Gin中，一个路由由 HTTP 请求方式、路径和处理该路径请求的处理函数组成。例如，以定义一个处理 GET 请求的 /login 路径的路由，代码如下："}]},{"ID":"20231117153452-abs6kps","Type":"NodeParagraph","Properties":{"id":"20231117153452-abs6kps"}}]}