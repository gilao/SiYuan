{"ID":"20230724231423-uwlia3c","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231423-uwlia3c","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724231423-uwlia3c\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724231424-qbh7v4v\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724231553-36yhco3\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724231424-qbh7v4v\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","title":"runtime","updated":"20230724231423"},"Children":[{"ID":"20230724231424-qbh7v4v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231424-qbh7v4v","updated":"20230724231424"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"runtime"}]},{"ID":"20230724231425-ljm3lxx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231425-ljm3lxx","updated":"20230724231425"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import \"runtime\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231426-cc7u91x","Type":"NodeParagraph","Properties":{"id":"20230724231426-cc7u91x","updated":"20230724231426"},"Children":[{"Type":"NodeText","Data":"runtime包提供和go运行时环境的互操作，如控制go程的函数。它也包括用于reflect包的低层次类型信息；参见reflect报的文档获取运行时类型系统的可编程接口。"}]},{"ID":"20230724231427-5i3w2yg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231427-5i3w2yg","updated":"20230724231427"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Environment Variables"}]},{"ID":"20230724231428-kzqc3e7","Type":"NodeParagraph","Properties":{"id":"20230724231428-kzqc3e7","updated":"20230724231428"},"Children":[{"Type":"NodeText","Data":"下面的环境变量（$name或%name%，这依赖于主机的操作系统）控制go程序的运行时行为。它们的含义和用法可能在各发行版之间改变。"}]},{"ID":"20230724231429-fudpyo6","Type":"NodeParagraph","Properties":{"id":"20230724231429-fudpyo6","updated":"20230724231429"},"Children":[{"Type":"NodeText","Data":"环境变量GOGC设置最初的垃圾收集目标百分比。当新申请的数据和前次垃圾收集剩下的存活数据的比率达到该百分比时，就会触发垃圾收集。默认GOGC=100。设置GOGC=off 会完全关闭垃圾收集。runtime/debug包的SetGCPercent函数允许在运行时修改该百分比。参见http://golang.org/pkg/runtime/debug/#SetGCPercent"}]},{"ID":"20230724231430-6sohdz4","Type":"NodeParagraph","Properties":{"id":"20230724231430-6sohdz4","updated":"20230724231430"},"Children":[{"Type":"NodeText","Data":"环境变量GODEBUG控制运行时的debug输出。GODEBUG的值是逗号分隔的name=val对。支持的name如下："}]},{"ID":"20230724231431-fq0i1fb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231431-fq0i1fb","updated":"20230724231431"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"allocfreetrace: 设置其为1，会导致每次分配都会被记录剖面，会记录每一个对象的分配、释放\n  及其堆栈踪迹。\nefence: 设置其为1，会导致分配器运行模式为：每个对象申请在独立的页和地址，且永不循环利用。\ngctrace: 设置其为1，会导致垃圾收集器每次收集都向标准错误输出写入单行的数据，概述收集的总\n  内存的大小和暂停的总时间长度。设置其为2，会写入同样的概述，但也会写入每次收集的两个数据。\ngcdead: 设置其为1，会导致垃圾收集器摧毁任何它认为已经死掉的执行堆栈。\nschedtrace: 设置其为X，会导致调度程序每隔X毫秒输出单行信息到标准错误输出，概述调度状态。\nscheddetail: 设置schedtrace为X并设置其为1，会导致调度程序每隔X毫秒输出详细的多行信息，\n  描述调度、进程、线程和go程的状态。\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231432-fr1acc3","Type":"NodeParagraph","Properties":{"id":"20230724231432-fr1acc3","updated":"20230724231432"},"Children":[{"Type":"NodeText","Data":"环境变量GOMAXPROCS限制可以同时运行用户层次的go代码的操作系统进程数。没有对代表go代码的、可以在系统调用中阻塞的go程数的限制；那些阻塞的go程不与GOMAXPROCS限制冲突。本包的GOMAXPROCS函数可以查询和修改该限制。"}]},{"ID":"20230724231433-5owmf0p","Type":"NodeParagraph","Properties":{"id":"20230724231433-5owmf0p","updated":"20230724231433"},"Children":[{"Type":"NodeText","Data":"环境变量GOTRACEBACK控制当go程序因为不能恢复的panic或不期望的运行时情况失败时的输出。失败的程序默认会打印所有现存go程的堆栈踪迹（省略运行时系统中的函数），然后以状态码2退出。如果GOTRACEBACK为0，会完全忽略所有go程的堆栈踪迹。如果GOTRACEBACK为1，会采用默认行为。如果GOTRACEBACK为2，会打印所有现存go程包括运行时函数的堆栈踪迹。如果GOTRACEBACK为crash，会打印所有现存go程包括运行时函数的堆栈踪迹，并且如果可能会采用操作系统特定的方式崩溃，而不是退出。例如，在Unix系统里，程序会释放SIGABRT信号以触发核心信息转储。"}]},{"ID":"20230724231434-7q9tdxg","Type":"NodeParagraph","Properties":{"id":"20230724231434-7q9tdxg","updated":"20230724231434"},"Children":[{"Type":"NodeText","Data":"环境变量GOARCH、GOOS、GOPATH和GOROOT构成完整的go环境变量集合。它们影响go程序的构建（参见http://golang.org/cmd/go andhttp://golang.org/pkg/go/build）。"}]},{"ID":"20230724231435-7h9zvbw","Type":"NodeParagraph","Properties":{"id":"20230724231435-7h9zvbw","updated":"20230724231435"},"Children":[{"Type":"NodeText","Data":"GOARCH、GOOS和GOROOT在编译时被记录并可用本包的常量和函数获取，但它们不会影响运行时环境。"}]},{"ID":"20230724231436-ageyraw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231436-ageyraw","updated":"20230724231436"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Constants"}]},{"ID":"20230724231437-0x7kavg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231437-0x7kavg","updated":"20230724231437"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const Compiler = \"gc\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231438-on6m2v8","Type":"NodeParagraph","Properties":{"id":"20230724231438-on6m2v8","updated":"20230724231438"},"Children":[{"Type":"NodeText","Data":"Compiler是编译工具链的名字，工具链会构建可执行的二进制文件。已知的工具链是："}]},{"ID":"20230724231439-u8aq849","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231439-u8aq849","updated":"20230724231439"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"gc      The 5g/6g/8g compiler suite at code.google.com/p/go.\ngccgo   The gccgo front end, part of the GCC compiler suite.\nconst GOARCH string = theGoarch\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231440-mi3itoa","Type":"NodeParagraph","Properties":{"id":"20230724231440-mi3itoa","updated":"20230724231440"},"Children":[{"Type":"NodeText","Data":"GOARCH是可执行程序的目标处理器架构（将要在该架构的机器上执行）：386、amd64或arm。"}]},{"ID":"20230724231441-xtej75i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231441-xtej75i","updated":"20230724231441"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const GOOS string = theGoos\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231442-dmvzcp5","Type":"NodeParagraph","Properties":{"id":"20230724231442-dmvzcp5","updated":"20230724231442"},"Children":[{"Type":"NodeText","Data":"GOOS是可执行程序的目标操作系统（将要在该操作系统的机器上执行）：darwin、freebsd、linux等。"}]},{"ID":"20230724231443-9szfdgf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231443-9szfdgf","updated":"20230724231443"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Variables"}]},{"ID":"20230724231444-wz9hzwh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231444-wz9hzwh","updated":"20230724231444"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var MemProfileRate int = 512 * 1024\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231445-sab9twz","Type":"NodeParagraph","Properties":{"id":"20230724231445-sab9twz","updated":"20230724231445"},"Children":[{"Type":"NodeText","Data":"MemProfileRate控制会在内存profile里记录和报告的内存分配采样频率。内存profile记录器平均每分配MemProfileRate字节进行一次分配采样。"}]},{"ID":"20230724231446-hjmbbxn","Type":"NodeParagraph","Properties":{"id":"20230724231446-hjmbbxn","updated":"20230724231446"},"Children":[{"Type":"NodeText","Data":"要在profile里包含每一个申请的块，可以将MemProfileRate设为1。要完全关闭profile的记录，设置本变量为0。"}]},{"ID":"20230724231447-gme6yrc","Type":"NodeParagraph","Properties":{"id":"20230724231447-gme6yrc","updated":"20230724231447"},"Children":[{"Type":"NodeText","Data":"处理内存profile的工具假设profile记录速度在整个程序的生命期是固定的，并等于当前值。修改内存profile的程序应该只进行一次，且尽可能早的修改（例如，在main函数的开始处）。"}]},{"ID":"20230724231448-cyilet3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231448-cyilet3","updated":"20230724231448"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/error.go?name=release#8","TextMarkTextContent":"Error"}]},{"ID":"20230724231449-i81zum8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231449-i81zum8","updated":"20230724231449"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Error interface {\n    error\n    // RuntimeError是一个无操作的函数，仅用于区别运行时错误和普通错误。\n    // 具有RuntimeError方法的错误类型就是运行时错误类型。\n    RuntimeError()\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231450-jdl7ncm","Type":"NodeParagraph","Properties":{"id":"20230724231450-jdl7ncm","updated":"20230724231450"},"Children":[{"Type":"NodeText","Data":"Error接口用来识别运行时错误。"}]},{"ID":"20230724231451-klla5lg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231451-klla5lg","updated":"20230724231451"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/error.go?name=release#19","TextMarkTextContent":"TypeAssertionError"}]},{"ID":"20230724231452-8ksl0rh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231452-8ksl0rh","updated":"20230724231452"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type TypeAssertionError struct {\n    // 内含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231453-e50g5ea","Type":"NodeParagraph","Properties":{"id":"20230724231453-e50g5ea","updated":"20230724231453"},"Children":[{"Type":"NodeText","Data":"TypeAssertionError表示一次失败的类型断言。"}]},{"ID":"20230724231454-j5utjq8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231454-j5utjq8","updated":"20230724231454"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*TypeAssertionError) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/error.go?name=release#28","TextMarkTextContent":"Error"}]},{"ID":"20230724231455-wsh8nap","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231455-wsh8nap","updated":"20230724231455"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (e *TypeAssertionError) Error() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231456-hzivy1y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231456-hzivy1y","updated":"20230724231456"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*TypeAssertionError) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/error.go?name=release#26","TextMarkTextContent":"RuntimeError"}]},{"ID":"20230724231457-1l7dchr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231457-1l7dchr","updated":"20230724231457"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (*TypeAssertionError) RuntimeError()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231458-ea61cb6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231458-ea61cb6","updated":"20230724231458"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#184","TextMarkTextContent":"GOROOT"}]},{"ID":"20230724231459-rnaaebi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231459-rnaaebi","updated":"20230724231459"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func GOROOT() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231460-ro33e1q","Type":"NodeParagraph","Properties":{"id":"20230724231460-ro33e1q","updated":"20230724231460"},"Children":[{"Type":"NodeText","Data":"GOROOT返回Go的根目录。如果存在GOROOT环境变量，返回该变量的值；否则，返回创建Go时的根目录。"}]},{"ID":"20230724231461-j90o6le","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231461-j90o6le","updated":"20230724231461"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#195","TextMarkTextContent":"Version"}]},{"ID":"20230724231462-p0baq4v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231462-p0baq4v","updated":"20230724231462"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Version() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231463-op6nwj4","Type":"NodeParagraph","Properties":{"id":"20230724231463-op6nwj4","updated":"20230724231463"},"Children":[{"Type":"NodeText","Data":"返回Go的版本字符串。它要么是递交的hash和创建时的日期；要么是发行标签如\"go1.3\"。"}]},{"ID":"20230724231464-f4hd1x6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231464-f4hd1x6","updated":"20230724231464"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#27","TextMarkTextContent":"NumCPU"}]},{"ID":"20230724231465-f0ds68q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231465-f0ds68q","updated":"20230724231465"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func NumCPU() int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231466-m6jxu6p","Type":"NodeParagraph","Properties":{"id":"20230724231466-m6jxu6p","updated":"20230724231466"},"Children":[{"Type":"NodeText","Data":"NumCPU返回本地机器的逻辑CPU个数。"}]},{"ID":"20230724231467-6llsv99","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231467-6llsv99","updated":"20230724231467"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#24","TextMarkTextContent":"GOMAXPROCS"}]},{"ID":"20230724231468-et99x72","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231468-et99x72","updated":"20230724231468"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func GOMAXPROCS(n int) int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231469-ilpnf5l","Type":"NodeParagraph","Properties":{"id":"20230724231469-ilpnf5l","updated":"20230724231469"},"Children":[{"Type":"NodeText","Data":"GOMAXPROCS设置可同时执行的最大CPU数，并返回先前的设置。 若 n \u003c 1，它就不会更改当前设置。本地机器的逻辑CPU数可通过 NumCPU 查询。本函数在调度程序优化后会去掉。"}]},{"ID":"20230724231470-23d7wu8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231470-23d7wu8","updated":"20230724231470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#141","TextMarkTextContent":"SetCPUProfileRate"}]},{"ID":"20230724231471-ngvixzj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231471-ngvixzj","updated":"20230724231471"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func SetCPUProfileRate(hz int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231472-oumo4bc","Type":"NodeParagraph","Properties":{"id":"20230724231472-oumo4bc","updated":"20230724231472"},"Children":[{"Type":"NodeText","Data":"SetCPUProfileRate设置CPU profile记录的速率为平均每秒hz次。如果hz\u003c=0，SetCPUProfileRate会关闭profile的记录。如果记录器在执行，该速率必须在关闭之后才能修改。"}]},{"ID":"20230724231473-6wgbdjr","Type":"NodeParagraph","Properties":{"id":"20230724231473-6wgbdjr","updated":"20230724231473"},"Children":[{"Type":"NodeText","Data":"绝大多数使用者应使用runtime/pprof包或testing包的-test.cpuprofile选项而非直接使用SetCPUProfileRate。"}]},{"ID":"20230724231474-ariuamp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231474-ariuamp","updated":"20230724231474"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#132","TextMarkTextContent":"CPUProfile"}]},{"ID":"20230724231475-4g4hr0m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231475-4g4hr0m","updated":"20230724231475"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func CPUProfile() []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231476-hizka5e","Type":"NodeParagraph","Properties":{"id":"20230724231476-hizka5e","updated":"20230724231476"},"Children":[{"Type":"NodeText","Data":"CPUProfile返回二进制CPU profile堆栈跟踪数据的下一个chunk，函数会阻塞直到该数据可用。 如果profile的记录被关闭，且在记录器开着的时候积累的profile数据都被返回了，CPUProfile会返回nil。调用者在再次调用本函数之前应先保存返回的数据。"}]},{"ID":"20230724231477-x5i4jsu","Type":"NodeParagraph","Properties":{"id":"20230724231477-x5i4jsu","updated":"20230724231477"},"Children":[{"Type":"NodeText","Data":"绝大多数使用者应使用 runtime/pprof包或testing包的-test.cpuprofile选项而非直接使用 CPUProfile。"}]},{"ID":"20230724231478-4ttq1ak","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231478-4ttq1ak","updated":"20230724231478"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/mem.go?name=release#75","TextMarkTextContent":"GC"}]},{"ID":"20230724231479-vizwj8z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231479-vizwj8z","updated":"20230724231479"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func GC()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231480-s8g6n9u","Type":"NodeParagraph","Properties":{"id":"20230724231480-s8g6n9u","updated":"20230724231480"},"Children":[{"Type":"NodeText","Data":"GC执行一次垃圾回收。"}]},{"ID":"20230724231481-769of2u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231481-769of2u","updated":"20230724231481"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#177","TextMarkTextContent":"SetFinalizer"}]},{"ID":"20230724231482-2jeg7e9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231482-2jeg7e9","updated":"20230724231482"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func SetFinalizer(x, f interface{})\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231483-c4has0j","Type":"NodeParagraph","Properties":{"id":"20230724231483-c4has0j","updated":"20230724231483"},"Children":[{"Type":"NodeText","Data":"SetFinalizer将x的终止器设置为f。当垃圾收集器发现一个不能接触的（即引用计数为零，程序中不能再直接或间接访问该对象）具有终止器的块时，它会清理该关联（对象到终止器）并在独立go程调用f(x)。这使x再次可以接触，但没有了绑定的终止器。如果SetFinalizer没有被再次调用，下一次垃圾收集器将视x为不可接触的，并释放x。"}]},{"ID":"20230724231484-0y3iiso","Type":"NodeParagraph","Properties":{"id":"20230724231484-0y3iiso","updated":"20230724231484"},"Children":[{"Type":"NodeText","Data":"SetFinalizer(x, nil)会清理任何绑定到x的终止器。"}]},{"ID":"20230724231485-wu3ubfw","Type":"NodeParagraph","Properties":{"id":"20230724231485-wu3ubfw","updated":"20230724231485"},"Children":[{"Type":"NodeText","Data":"参数x必须是一个指向通过new申请的对象的指针，或者通过对复合字面值取址得到的指针。参数f必须是一个函数，它接受单个可以直接用x类型值赋值的参数，也可以有任意个被忽略的返回值。如果这两条任一条不被满足，本函数就会中断程序。"}]},{"ID":"20230724231486-rz73112","Type":"NodeParagraph","Properties":{"id":"20230724231486-rz73112","updated":"20230724231486"},"Children":[{"Type":"NodeText","Data":"终止器会按依赖顺序执行：如果A指向B，两者都有终止器，且它们无法从其它方面接触，只有A的终止器执行；A被释放后，B的终止器就可以执行。如果一个循环结构包含一个具有终止器的块，该循环不能保证会被当垃圾收集，终止器也不能保证会执行；因为没有尊重依赖关系的顺序。"}]},{"ID":"20230724231487-vw6y83l","Type":"NodeParagraph","Properties":{"id":"20230724231487-vw6y83l","updated":"20230724231487"},"Children":[{"Type":"NodeText","Data":"x的终止器会在x变为不可接触之后的任意时间被调度执行。不保证终止器会在程序退出前执行，因此一般终止器只用于在长期运行的程序中释放关联到某对象的非内存资源。例如，当一个程序丢弃一个os.File对象时没有调用其Close方法，该os.File对象可以使用终止器去关闭对应的操作系统文件描述符。但依靠终止器去刷新内存中的I/O缓冲如bufio.Writer是错误的，因为缓冲不会在程序退出时被刷新。"}]},{"ID":"20230724231488-vbch5f4","Type":"NodeParagraph","Properties":{"id":"20230724231488-vbch5f4","updated":"20230724231488"},"Children":[{"Type":"NodeText","Data":"如果*x的大小为0字节，不保证终止器会执行。"}]},{"ID":"20230724231489-f2qbueb","Type":"NodeParagraph","Properties":{"id":"20230724231489-f2qbueb","updated":"20230724231489"},"Children":[{"Type":"NodeText","Data":"一个程序会有单独一个go程顺序执行所有的终止器。如果一个终止器必须运行较长时间，它应该在内部另开go程执行该任务。"}]},{"ID":"20230724231490-gygniy0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231490-gygniy0","updated":"20230724231490"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/mem.go?name=release#13","TextMarkTextContent":"MemStats"}]},{"ID":"20230724231491-qkskwo6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231491-qkskwo6","updated":"20230724231491"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type MemStats struct {\n    // 一般统计\n    Alloc      uint64 // 已申请且仍在使用的字节数\n    TotalAlloc uint64 // 已申请的总字节数（已释放的部分也算在内）\n    Sys        uint64 // 从系统中获取的字节数（下面XxxSys之和）\n    Lookups    uint64 // 指针查找的次数\n    Mallocs    uint64 // 申请内存的次数\n    Frees      uint64 // 释放内存的次数\n    // 主分配堆统计\n    HeapAlloc    uint64 // 已申请且仍在使用的字节数\n    HeapSys      uint64 // 从系统中获取的字节数\n    HeapIdle     uint64 // 闲置span中的字节数\n    HeapInuse    uint64 // 非闲置span中的字节数\n    HeapReleased uint64 // 释放到系统的字节数\n    HeapObjects  uint64 // 已分配对象的总个数\n    // L低层次、大小固定的结构体分配器统计，Inuse为正在使用的字节数，Sys为从系统获取的字节数\n    StackInuse  uint64 // 引导程序的堆栈\n    StackSys    uint64\n    MSpanInuse  uint64 // mspan结构体\n    MSpanSys    uint64\n    MCacheInuse uint64 // mcache结构体\n    MCacheSys   uint64\n    BuckHashSys uint64 // profile桶散列表\n    GCSys       uint64 // GC元数据\n    OtherSys    uint64 // 其他系统申请\n    // 垃圾收集器统计\n    NextGC       uint64 // 会在HeapAlloc字段到达该值（字节数）时运行下次GC\n    LastGC       uint64 // 上次运行的绝对时间（纳秒）\n    PauseTotalNs uint64\n    PauseNs      [256]uint64 // 近期GC暂停时间的循环缓冲，最近一次在[(NumGC+255)%256]\n    NumGC        uint32\n    EnableGC     bool\n    DebugGC      bool\n    // 每次申请的字节数的统计，61是C代码中的尺寸分级数\n    BySize [61]struct {\n        Size    uint32\n        Mallocs uint64\n        Frees   uint64\n    }\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231492-y0an0qb","Type":"NodeParagraph","Properties":{"id":"20230724231492-y0an0qb","updated":"20230724231492"},"Children":[{"Type":"NodeText","Data":"MemStats记录内存申请和分配的统计信息。"}]},{"ID":"20230724231493-zc73by9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231493-zc73by9","updated":"20230724231493"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/mem.go?name=release#72","TextMarkTextContent":"ReadMemStats"}]},{"ID":"20230724231494-oyg2x7z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231494-oyg2x7z","updated":"20230724231494"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func ReadMemStats(m *MemStats)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231495-h5v5z2j","Type":"NodeParagraph","Properties":{"id":"20230724231495-h5v5z2j","updated":"20230724231495"},"Children":[{"Type":"NodeText","Data":"ReadMemStats将内存申请和分配的统计信息填写进m。"}]},{"ID":"20230724231496-5l9k2m9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231496-5l9k2m9","updated":"20230724231496"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#53","TextMarkTextContent":"MemProfileRecord"}]},{"ID":"20230724231497-rkfr9jx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231497-rkfr9jx","updated":"20230724231497"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type MemProfileRecord struct {\n    AllocBytes, FreeBytes     int64       // 申请和释放的字节数\n    AllocObjects, FreeObjects int64       // 申请和释放的对象数\n    Stack0                    [32]uintptr // 该记录的调用栈踪迹，以第一个零值成员截止\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231498-q6c8jkd","Type":"NodeParagraph","Properties":{"id":"20230724231498-q6c8jkd","updated":"20230724231498"},"Children":[{"Type":"NodeText","Data":"MemProfileRecord用于描述某个调用栈序列申请和释放的活动对象等信息。"}]},{"ID":"20230724231499-axg09xj","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231499-axg09xj","updated":"20230724231499"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*MemProfileRecord) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#60","TextMarkTextContent":"InUseBytes"}]},{"ID":"20230724231500-cxn2yxh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231500-cxn2yxh","updated":"20230724231500"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (r *MemProfileRecord) InUseBytes() int64\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231501-zxmsne6","Type":"NodeParagraph","Properties":{"id":"20230724231501-zxmsne6","updated":"20230724231501"},"Children":[{"Type":"NodeText","Data":"InUseBytes返回正在使用的字节数（AllocBytes – FreeBytes）"}]},{"ID":"20230724231502-36ildgn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231502-36ildgn","updated":"20230724231502"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*MemProfileRecord) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#63","TextMarkTextContent":"InUseObjects"}]},{"ID":"20230724231503-s0djt45","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231503-s0djt45","updated":"20230724231503"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (r *MemProfileRecord) InUseObjects() int64\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231504-of3pk8w","Type":"NodeParagraph","Properties":{"id":"20230724231504-of3pk8w","updated":"20230724231504"},"Children":[{"Type":"NodeText","Data":"InUseObjects返回正在使用的对象数（AllocObjects - FreeObjects）"}]},{"ID":"20230724231505-w34pq8q","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231505-w34pq8q","updated":"20230724231505"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*MemProfileRecord) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#69","TextMarkTextContent":"Stack"}]},{"ID":"20230724231506-bf96ce1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231506-bf96ce1","updated":"20230724231506"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (r *MemProfileRecord) Stack() []uintptr\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231507-vl1uqmq","Type":"NodeParagraph","Properties":{"id":"20230724231507-vl1uqmq","updated":"20230724231507"},"Children":[{"Type":"NodeText","Data":"Stack返回关联至此记录的调用栈踪迹，即r.Stack0的前缀。"}]},{"ID":"20230724231508-emtlium","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231508-emtlium","updated":"20230724231508"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#90","TextMarkTextContent":"MemProfile"}]},{"ID":"20230724231509-v8fkufb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231509-v8fkufb","updated":"20230724231509"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func MemProfile(p []MemProfileRecord, inuseZero bool) (n int, ok bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231510-f4bc0vk","Type":"NodeParagraph","Properties":{"id":"20230724231510-f4bc0vk","updated":"20230724231510"},"Children":[{"Type":"NodeText","Data":"MemProfile返回当前内存profile中的记录数n。若len(p)\u003e=n，MemProfile会将此分析报告复制到p中并返回(n, true)；如果len(p)\u003cn，MemProfile则不会更改p，而只返回(n, false)。"}]},{"ID":"20230724231511-c7ni631","Type":"NodeParagraph","Properties":{"id":"20230724231511-c7ni631","updated":"20230724231511"},"Children":[{"Type":"NodeText","Data":"如果inuseZero为真，该profile就会包含无效分配记录（其中r.AllocBytes\u003e0，而r.AllocBytes==r.FreeBytes。这些内存都是被申请后又释放回运行时环境的）。"}]},{"ID":"20230724231512-iq7f1ma","Type":"NodeParagraph","Properties":{"id":"20230724231512-iq7f1ma","updated":"20230724231512"},"Children":[{"Type":"NodeText","Data":"大多数调用者应当使用runtime/pprof包或testing包的-test.memprofile标记，而非直接调用MemProfile。"}]},{"ID":"20230724231513-7bymeyy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231513-7bymeyy","updated":"20230724231513"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#8","TextMarkTextContent":"Breakpoint"}]},{"ID":"20230724231514-didlxrc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231514-didlxrc","updated":"20230724231514"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Breakpoint()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231515-dk9ooqy","Type":"NodeParagraph","Properties":{"id":"20230724231515-dk9ooqy","updated":"20230724231515"},"Children":[{"Type":"NodeText","Data":"Breakpoint执行一个断点陷阱。"}]},{"ID":"20230724231516-117iv4t","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231516-117iv4t","updated":"20230724231516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#172","TextMarkTextContent":"Stack"}]},{"ID":"20230724231517-y0wvwvg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231517-y0wvwvg","updated":"20230724231517"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Stack(buf []byte, all bool) int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231518-m6q21eg","Type":"NodeParagraph","Properties":{"id":"20230724231518-m6q21eg","updated":"20230724231518"},"Children":[{"Type":"NodeText","Data":"Stack将调用其的go程的调用栈踪迹格式化后写入到buf中并返回写入的字节数。若all为true，函数会在写入当前go程的踪迹信息后，将其它所有go程的调用栈踪迹都格式化写入到buf中。"}]},{"ID":"20230724231519-z9z8hl8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231519-z9z8hl8","updated":"20230724231519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#95","TextMarkTextContent":"Caller"}]},{"ID":"20230724231520-tyeuuga","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231520-tyeuuga","updated":"20230724231520"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Caller(skip int) (pc uintptr, file string, line int, ok bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231521-hjhktcg","Type":"NodeParagraph","Properties":{"id":"20230724231521-hjhktcg","updated":"20230724231521"},"Children":[{"Type":"NodeText","Data":"Caller报告当前go程调用栈所执行的函数的文件和行号信息。实参skip为上溯的栈帧数，0表示Caller的调用者（Caller所在的调用栈）。（由于历史原因，skip的意思在Caller和Callers中并不相同。）函数的返回值为调用栈标识符、文件名、该调用在文件中的行号。如果无法获得信息，ok会被设为false。"}]},{"ID":"20230724231522-ru2bu06","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231522-ru2bu06","updated":"20230724231522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#102","TextMarkTextContent":"Callers"}]},{"ID":"20230724231523-kmki5zs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231523-kmki5zs","updated":"20230724231523"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Callers(skip int, pc []uintptr) int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231524-al3vitp","Type":"NodeParagraph","Properties":{"id":"20230724231524-al3vitp","updated":"20230724231524"},"Children":[{"Type":"NodeText","Data":"函数把当前go程调用栈上的调用栈标识符填入切片pc中，返回写入到pc中的项数。实参skip为开始在pc中记录之前所要跳过的栈帧数，0表示Callers自身的调用栈，1表示Callers所在的调用栈。返回写入p的项数。"}]},{"ID":"20230724231525-os0ogm0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231525-os0ogm0","updated":"20230724231525"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#93","TextMarkTextContent":"StackRecord"}]},{"ID":"20230724231526-vtk9nwu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231526-vtk9nwu","updated":"20230724231526"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type StackRecord struct {\n    Stack0 [32]uintptr // 该记录的调用栈踪迹，以第一个零值成员截止\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231527-5kwvm34","Type":"NodeParagraph","Properties":{"id":"20230724231527-5kwvm34","updated":"20230724231527"},"Children":[{"Type":"NodeText","Data":"StackRecord描述单条调用栈。"}]},{"ID":"20230724231528-0r4mjho","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231528-0r4mjho","updated":"20230724231528"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*StackRecord) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#99","TextMarkTextContent":"Stack"}]},{"ID":"20230724231529-i4jiuyy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231529-i4jiuyy","updated":"20230724231529"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (r *StackRecord) Stack() []uintptr\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231530-g5w72ab","Type":"NodeParagraph","Properties":{"id":"20230724231530-g5w72ab","updated":"20230724231530"},"Children":[{"Type":"NodeText","Data":"Stack返回与记录相关联的调用栈踪迹，即r.Stack0的前缀。"}]},{"ID":"20230724231531-d8f97ps","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231531-d8f97ps","updated":"20230724231531"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#104","TextMarkTextContent":"Func"}]},{"ID":"20230724231532-0b66h5i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231532-0b66h5i","updated":"20230724231532"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Func struct {\n    // 内含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231533-0ghpats","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231533-0ghpats","updated":"20230724231533"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#110","TextMarkTextContent":"FuncForPC"}]},{"ID":"20230724231534-lik21lo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231534-lik21lo","updated":"20230724231534"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func FuncForPC(pc uintptr) *Func\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231535-dwtjvv8","Type":"NodeParagraph","Properties":{"id":"20230724231535-dwtjvv8","updated":"20230724231535"},"Children":[{"Type":"NodeText","Data":"FuncForPC返回一个表示调用栈标识符pc对应的调用栈的*Func；如果该调用栈标识符没有对应的调用栈，函数会返回nil。每一个调用栈必然是对某个函数的调用。"}]},{"ID":"20230724231536-z9z4osg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231536-z9z4osg","updated":"20230724231536"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Func) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#113","TextMarkTextContent":"Name"}]},{"ID":"20230724231537-hk6bbvp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231537-hk6bbvp","updated":"20230724231537"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (f *Func) Name() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231538-1ebcfw9","Type":"NodeParagraph","Properties":{"id":"20230724231538-1ebcfw9","updated":"20230724231538"},"Children":[{"Type":"NodeText","Data":"Name返回该调用栈所调用的函数的名字。"}]},{"ID":"20230724231539-vptj61d","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231539-vptj61d","updated":"20230724231539"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Func) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#126","TextMarkTextContent":"FileLine"}]},{"ID":"20230724231540-qkxd3n2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231540-qkxd3n2","updated":"20230724231540"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (f *Func) FileLine(pc uintptr) (file string, line int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231541-o681rjl","Type":"NodeParagraph","Properties":{"id":"20230724231541-o681rjl","updated":"20230724231541"},"Children":[{"Type":"NodeText","Data":"FileLine返回该调用栈所调用的函数的源代码文件名和行号。如果pc不是f内的调用栈标识符，结果是不精确的。"}]},{"ID":"20230724231542-zy7jpru","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231542-zy7jpru","updated":"20230724231542"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Func) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#118","TextMarkTextContent":"Entry"}]},{"ID":"20230724231543-d18w8g7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231543-d18w8g7","updated":"20230724231543"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (f *Func) Entry() uintptr\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231544-9mndnt7","Type":"NodeParagraph","Properties":{"id":"20230724231544-9mndnt7","updated":"20230724231544"},"Children":[{"Type":"NodeText","Data":"Entry返回该调用栈的调用栈标识符。"}]},{"ID":"20230724231545-n6bnowu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231545-n6bnowu","updated":"20230724231545"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#30","TextMarkTextContent":"NumCgoCall"}]},{"ID":"20230724231546-v16vy45","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231546-v16vy45","updated":"20230724231546"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func NumCgoCall() int64\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231547-7vdse31","Type":"NodeParagraph","Properties":{"id":"20230724231547-7vdse31","updated":"20230724231547"},"Children":[{"Type":"NodeText","Data":"NumCgoCall返回当前进程执行的cgo调用次数。"}]},{"ID":"20230724231548-22swea1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231548-22swea1","updated":"20230724231548"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#33","TextMarkTextContent":"NumGoroutine"}]},{"ID":"20230724231549-g58n19f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231549-g58n19f","updated":"20230724231549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func NumGoroutine() int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231550-plas0ow","Type":"NodeParagraph","Properties":{"id":"20230724231550-plas0ow","updated":"20230724231550"},"Children":[{"Type":"NodeText","Data":"NumGoroutine返回当前存在的Go程数。"}]},{"ID":"20230724231551-59y2es1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231551-59y2es1","updated":"20230724231551"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#87","TextMarkTextContent":"Goexit"}]},{"ID":"20230724231552-r9a0bbu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231552-r9a0bbu","updated":"20230724231552"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Goexit()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231553-36yhco3","Type":"NodeParagraph","Properties":{"id":"20230724231553-36yhco3","updated":"20230724231553"},"Children":[{"Type":"NodeText","Data":"Goexit终止调用它的go程。其它go程不会受影响。Goexit会在终止该go程前执行所有defer的函数。"}]},{"ID":"20230724231554-5iuonbh","Type":"NodeParagraph","Properties":{"id":"20230724231554-5iuonbh","updated":"20230724231554"},"Children":[{"Type":"NodeText","Data":"在程序的main go程调用本函数，会终结该go程，而不会让main返回。因为main函数没有返回，程序会继续执行其它的go程。如果所有其它go程都退出了，程序就会崩溃。"}]},{"ID":"20230724231555-g1awnck","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231555-g1awnck","updated":"20230724231555"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/extern.go?name=release#78","TextMarkTextContent":"Gosched"}]},{"ID":"20230724231556-euhroo9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231556-euhroo9","updated":"20230724231556"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Gosched()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231557-p4tmz83","Type":"NodeParagraph","Properties":{"id":"20230724231557-p4tmz83","updated":"20230724231557"},"Children":[{"Type":"NodeText","Data":"Gosched使当前go程放弃处理器，以让其它go程运行。它不会挂起当前go程，因此当前go程未来会恢复执行。"}]},{"ID":"20230724231558-1xnd7f9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231558-1xnd7f9","updated":"20230724231558"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#122","TextMarkTextContent":"GoroutineProfile"}]},{"ID":"20230724231559-mspcdcd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231559-mspcdcd","updated":"20230724231559"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func GoroutineProfile(p []StackRecord) (n int, ok bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231560-31lubce","Type":"NodeParagraph","Properties":{"id":"20230724231560-31lubce","updated":"20230724231560"},"Children":[{"Type":"NodeText","Data":"GoroutineProfile返回活跃go程的堆栈profile中的记录个数。若len(p) \u003e= n，函数就会将profile中的记录复制到p中并返回(n, true)。若len(p) \u003c n，则不会修改p，而只返回(n, false)。"}]},{"ID":"20230724231561-gvj4abc","Type":"NodeParagraph","Properties":{"id":"20230724231561-gvj4abc","updated":"20230724231561"},"Children":[{"Type":"NodeText","Data":"绝大多数调用者应当使用runtime/pprof包，而非直接调用GoroutineProfile。"}]},{"ID":"20230724231562-fa29h61","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231562-fa29h61","updated":"20230724231562"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#13","TextMarkTextContent":"LockOSThread"}]},{"ID":"20230724231563-0w46mh1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231563-0w46mh1","updated":"20230724231563"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func LockOSThread()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231564-w2pmhxj","Type":"NodeParagraph","Properties":{"id":"20230724231564-w2pmhxj","updated":"20230724231564"},"Children":[{"Type":"NodeText","Data":"将调用的go程绑定到它当前所在的操作系统线程。除非调用的go程退出或调用UnlockOSThread，否则它将总是在该线程中执行，而其它go程则不能进入该线程。"}]},{"ID":"20230724231565-vacpdhi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231565-vacpdhi","updated":"20230724231565"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#17","TextMarkTextContent":"UnlockOSThread"}]},{"ID":"20230724231566-umlab1i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231566-umlab1i","updated":"20230724231566"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func UnlockOSThread()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231567-7oym3u0","Type":"NodeParagraph","Properties":{"id":"20230724231567-7oym3u0","updated":"20230724231567"},"Children":[{"Type":"NodeText","Data":"将调用的go程解除和它绑定的操作系统线程。若调用的go程未调用LockOSThread，UnlockOSThread不做操作。"}]},{"ID":"20230724231568-hj4beqo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231568-hj4beqo","updated":"20230724231568"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#114","TextMarkTextContent":"ThreadCreateProfile"}]},{"ID":"20230724231569-1cabhsm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231569-1cabhsm","updated":"20230724231569"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func ThreadCreateProfile(p []StackRecord) (n int, ok bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231570-loxgxvg","Type":"NodeParagraph","Properties":{"id":"20230724231570-loxgxvg","updated":"20230724231570"},"Children":[{"Type":"NodeText","Data":"返回线程创建profile中的记录个数。如果len(p)\u003e=n，本函数就会将profile中的记录复制到p中并返回(n, true)。若len(p)\u003cn，则不会更改p，而只返回(n, false)。"}]},{"ID":"20230724231571-9jfocs3","Type":"NodeParagraph","Properties":{"id":"20230724231571-9jfocs3","updated":"20230724231571"},"Children":[{"Type":"NodeText","Data":"绝大多数使用者应当使用runtime/pprof包，而非直接调用ThreadCreateProfile。"}]},{"ID":"20230724231572-9giudby","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231572-9giudby","updated":"20230724231572"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#153","TextMarkTextContent":"BlockProfileRecord"}]},{"ID":"20230724231573-zbsu96r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231573-zbsu96r","updated":"20230724231573"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type BlockProfileRecord struct {\n    Count  int64\n    Cycles int64\n    StackRecord\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231574-917t7wp","Type":"NodeParagraph","Properties":{"id":"20230724231574-917t7wp","updated":"20230724231574"},"Children":[{"Type":"NodeText","Data":"BlockProfileRecord用于描述某个调用栈序列发生的阻塞事件的信息。"}]},{"ID":"20230724231575-2xbqjx9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231575-2xbqjx9","updated":"20230724231575"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#149","TextMarkTextContent":"SetBlockProfileRate"}]},{"ID":"20230724231576-d16ft2u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231576-d16ft2u","updated":"20230724231576"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func SetBlockProfileRate(rate int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231577-87kg6d0","Type":"NodeParagraph","Properties":{"id":"20230724231577-87kg6d0","updated":"20230724231577"},"Children":[{"Type":"NodeText","Data":"SetBlockProfileRate控制阻塞profile记录go程阻塞事件的采样频率。对于一个阻塞事件，平均每阻塞rate纳秒，阻塞profile记录器就采集一份样本。"}]},{"ID":"20230724231578-u0gxj5j","Type":"NodeParagraph","Properties":{"id":"20230724231578-u0gxj5j","updated":"20230724231578"},"Children":[{"Type":"NodeText","Data":"要在profile中包括每一个阻塞事件，需传入rate=1；要完全关闭阻塞profile的记录，需传入rate\u003c=0。"}]},{"ID":"20230724231579-6x3uldk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231579-6x3uldk","updated":"20230724231579"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/runtime/debug.go?name=release#166","TextMarkTextContent":"BlockProfile"}]},{"ID":"20230724231580-lfpprxq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231580-lfpprxq","updated":"20230724231580"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func BlockProfile(p []BlockProfileRecord) (n int, ok bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231581-56uwef5","Type":"NodeParagraph","Properties":{"id":"20230724231581-56uwef5","updated":"20230724231581"},"Children":[{"Type":"NodeText","Data":"BlockProfile返回当前阻塞profile中的记录个数。如果len(p)\u003e=n，本函数就会将此profile中的记录复制到p中并返回(n, true)。如果len(p)\u003cn，本函数则不会修改p，而只返回(n, false)。"}]},{"ID":"20230724231582-zce5ybz","Type":"NodeParagraph","Properties":{"id":"20230724231582-zce5ybz","updated":"20230724231582"},"Children":[{"Type":"NodeText","Data":"绝大多数使用者应当使用runtime/pprof包或testing包的-test.blockprofile标记， 而非直接调用 BlockProfile。"}]}]}