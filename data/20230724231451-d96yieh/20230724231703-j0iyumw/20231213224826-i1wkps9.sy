{"ID":"20231213224826-i1wkps9","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f415","id":"20231213224826-i1wkps9","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231213224826-i1wkps9\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231213224900-o24b5sk\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231213225245-alrjb7k\u0026quot;,\u0026quot;scrollTop\u0026quot;:2347.333251953125,\u0026quot;focusId\u0026quot;:\u0026quot;20231213225250-ow50lvu\u0026quot;,\u0026quot;focusStart\u0026quot;:347,\u0026quot;focusEnd\u0026quot;:347\u0026#125;","title":"maps","updated":"20231213225259"},"Children":[{"ID":"20231213224900-o24b5sk","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213224900-o24b5sk","updated":"20231213225132"},"Children":[{"Type":"NodeText","Data":"Clone"}]},{"ID":"20231213224908-0vve7w0","Type":"NodeParagraph","Properties":{"id":"20231213224908-0vve7w0","updated":"20231213224908"},"Children":[{"Type":"NodeText","Data":"从函数的功能描述中可知，Clone 函数的原理是浅层克隆，"}]},{"ID":"20231213225040-htv0lbq","Type":"NodeParagraph","Properties":{"id":"20231213225040-htv0lbq","updated":"20231213225040"},"Children":[{"Type":"NodeText","Data":"那么修改克隆后的 map 任意 key 的 value 将有可能影响原 map 的 value。\n一个关键区别在于 value 是指针类型。从执行结果可以明显看出，"}]},{"ID":"20231213225042-fkm0i3f","Type":"NodeParagraph","Properties":{"id":"20231213225042-fkm0i3f","updated":"20231213225103"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果 m1 的 value 是指针类型，那么在对克隆后的 m2 中的任意 key 对应的 value 进行修改操作后，都会直接影响到 m1。"}]},{"ID":"20231213225050-ibx4zdz","Type":"NodeParagraph","Properties":{"id":"20231213225050-ibx4zdz","updated":"20231213225059"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这是因为 m1 和 m2 共享了同一组指向相同 Programmer 结构体的指针，\n因此对一个指针的修改会在两个 map 中都可见。"}]},{"ID":"20231213225106-a90qlei","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231213225106-a90qlei","updated":"20231213225122"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MapsClone() {\n\ttype IDCard struct {\n\t\tName string\n\t\tCity string\n\t}\n\tm1 := map[string]IDCard{\n\t\t\"id-card-01\": {Name: \"张三\", City: \"广州\"},\n\t\t\"id-card-02\": {Name: \"李四\", City: \"深圳\"},\n\t}\n\tm2 := maps.Clone(m1)\n\tfmt.Printf(\"m1: %v\\n\", m1)\n\tfmt.Printf(\"m2: %v\\n\", m2)\n\tcard := m2[\"id-card-02\"]\n\tcard.City = \"珠海\"\n\tm2[\"id-card-02\"] = card\n\tfmt.Printf(\"m2 被修改后，m1: %v, %v\\n\", m1[\"id-card-01\"], m1[\"id-card-02\"])\n\tfmt.Printf(\"m2 被修改后，m2: %v, %v\\n\", m2[\"id-card-01\"], m2[\"id-card-02\"])\n\tm3 := map[string]*IDCard{\n\t\t\"id-card-01\": {Name: \"王五\", City: \"北京\"},\n\t\t\"id-card-02\": {Name: \"赵六\", City: \"上海\"},\n\t}\n\tfmt.Printf(\"m3: %v, %v\\n\", *m3[\"id-card-01\"], *m3[\"id-card-02\"])\n\tm4 := maps.Clone(m3)\n\tfmt.Printf(\"m4: %v, %v\\n\", *m4[\"id-card-01\"], *m4[\"id-card-02\"])\n\tm4[\"id-card-02\"].City = \"苏州\"\n\tfmt.Printf(\"m4 被修改后，m3: %v, %v\\n\", *m3[\"id-card-01\"], *m3[\"id-card-02\"])\n\tfmt.Printf(\"m4 被修改后，m4: %v, %v\\n\", *m4[\"id-card-01\"], *m4[\"id-card-02\"])\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231213224912-tfwtk23","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213224912-tfwtk23","updated":"20231213225138"},"Children":[{"Type":"NodeText","Data":"Copy"}]},{"ID":"20231213224913-hioohbg","Type":"NodeParagraph","Properties":{"id":"20231213224913-hioohbg","updated":"20231213224913"},"Children":[{"Type":"NodeText","Data":"Copy 函数接收两个 map 参数 dst 和 src，\n该函数的功能是复制 src 中的所有键值对到 dst 中，\n如果 dst 中包含 src 中的任意 key，则该 key 对应的 value 将会被覆盖。"}]},{"ID":"20231213225126-mc80l3n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231213225126-mc80l3n","updated":"20231213225150"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MapsCopy() {\n\tm1 := map[string]string{\"Name\": \"张三\", \"City\": \"深圳\"}\n\tm2 := map[string]string{\"City\": \"广州\", \"Phone\": \"123456789\"}\n\n\tmaps.Copy(m1, m2)\n\n\tfmt.Println(m1)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231213224922-26p7qky","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213224922-26p7qky","updated":"20231213224922"},"Children":[{"Type":"NodeText","Data":"DeleteFunc"}]},{"ID":"20231213225200-kipm2ov","Type":"NodeParagraph","Properties":{"id":"20231213225200-kipm2ov","updated":"20231213225200"},"Children":[{"Type":"NodeText","Data":"DeleteFunc 从 m 中删除 del 返回 true 的任何键/值对。"}]},{"ID":"20231213225203-fedckqo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231213225203-fedckqo","updated":"20231213225209"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MapsDeleteFunc() {\n\tm1 := map[int]string{1: \"张三\", 2: \"李四\", 3: \"王五\", 4: \"赵六\"}\n\tmaps.DeleteFunc(m1, func(k int, v string) bool {\n\t\treturn k%2 == 0\n\t})\n\tfmt.Println(m1)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231213224929-vc4fsvz","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213224929-vc4fsvz","updated":"20231213224929"},"Children":[{"Type":"NodeText","Data":"Equal"}]},{"ID":"20231213224931-mazo1le","Type":"NodeParagraph","Properties":{"id":"20231213224931-mazo1le","updated":"20231213224931"},"Children":[{"Type":"NodeText","Data":"Equal 函数接收两个 map 变量，函数的返回值为 bool 类型。\n该函数的功能是判断两个 map 是否包含相同的键值对，\n内部使用 "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":" 进行比较。\n注意：map 类型的 key 和 value 必须是 comparable 类型。"}]},{"ID":"20231213225213-ygpun3c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231213225213-ygpun3c","updated":"20231213225219"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MapsEqual() {\n\tm1 := map[int]int{0: 0, 1: 1, 2: 2}\n\tm2 := map[int]int{0: 0, 1: 1}\n\tm3 := map[int]int{0: 0, 1: 1, 2: 2}\n\n\tfmt.Println(maps.Equal(m1, m2)) // false\n\tfmt.Println(maps.Equal(m1, m3)) // true\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231213224932-sm0ltne","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213224932-sm0ltne","updated":"20231213225236"},"Children":[{"Type":"NodeText","Data":"EqualFunc"}]},{"ID":"20231213225236-sf5rosl","Type":"NodeParagraph","Properties":{"id":"20231213225236-sf5rosl","updated":"20231213225245"},"Children":[{"Type":"NodeText","Data":"EqualFunc 函数类似 Equal 函数，"}]},{"ID":"20231213225248-19bgokm","Type":"NodeParagraph","Properties":{"id":"20231213225248-19bgokm","updated":"20231213225248"},"Children":[{"Type":"NodeText","Data":"只不过是通过 eq 函数进行比较值，键仍使用 "},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeText","Data":"="}]},{"Type":"NodeText","Data":" 进行比较。"}]},{"ID":"20231213225248-np83vmk","Type":"NodeParagraph","Properties":{"id":"20231213225248-np83vmk","updated":"20231213225248"},"Children":[{"Type":"NodeText","Data":"注意： value 可以为任意类型（any）。"}]},{"ID":"20231213225250-ow50lvu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231213225250-ow50lvu","updated":"20231213225259"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MapsEqualFunc() {\n\tm1 := map[int]string{\n\t\t1:    \"one\",\n\t\t10:   \"Ten\",\n\t\t1000: \"THOUSAND\",\n\t}\n\tm2 := map[int][]byte{\n\t\t1:    []byte(\"One\"),\n\t\t10:   []byte(\"Ten\"),\n\t\t1000: []byte(\"Thousand\"),\n\t}\n\teq := maps.EqualFunc(m1, m2, func(v1 string, v2 []byte) bool {\n\t\treturn strings.ToLower(v1) == strings.ToLower(string(v2))\n\t})\n\tfmt.Println(eq)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231213225245-alrjb7k","Type":"NodeParagraph","Properties":{"id":"20231213225245-alrjb7k"}}]}