{"ID":"20240330164347-moo0h1z","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f985","id":"20240330164347-moo0h1z","title":"Go Java 全方位对比","updated":"20240401003425"},"Children":[{"ID":"20240330164400-6kazokp","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330164400-6kazokp","updated":"20240330164423"},"Children":[{"Type":"NodeText","Data":"语言背景"}]},{"ID":"20240330164428-lvonii4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240330164428-lvonii4","updated":"20240330164433"},"Children":[{"Type":"NodeText","Data":"Golang"}]},{"ID":"20240330164433-ikudaub","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240330164433-ikudaub","updated":"20240330164455"},"Children":[{"Type":"NodeText","Data":"Goolge 为什么要创建 Go"}]},{"ID":"20240330164538-qsy4e04","Type":"NodeList","ListData":{},"Properties":{"id":"20240330164538-qsy4e04","updated":"20240330164538"},"Children":[{"ID":"20240330164538-0ent0o5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164538-0ent0o5","updated":"20240330164538"},"Children":[{"ID":"20240330164538-xgjd4i0","Type":"NodeParagraph","Properties":{"id":"20240330164538-xgjd4i0","updated":"20240330164538"},"Children":[{"Type":"NodeText","Data":"计算机硬件技术更新频繁，性能提高很快。目前主流的编程语言发展明显落后于硬件，不能合理利用多核多 CPU 的优势提升软件系统性能。"}]}]},{"ID":"20240330164538-2p84jfw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164538-2p84jfw","updated":"20240330164538"},"Children":[{"ID":"20240330164538-4ve0v9l","Type":"NodeParagraph","Properties":{"id":"20240330164538-4ve0v9l","updated":"20240330164538"},"Children":[{"Type":"NodeText","Data":"软件系统复杂度越来越高，维护成本越来越高，目前缺乏一个足够简洁高效的编程语言。"}]}]},{"ID":"20240330164538-ciyttws","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164538-ciyttws","updated":"20240330164538"},"Children":[{"ID":"20240330164538-ey90kmq","Type":"NodeParagraph","Properties":{"id":"20240330164538-ey90kmq","updated":"20240330164538"},"Children":[{"Type":"NodeText","Data":"现有编程语言存在：风格不统一、计算能力不够、处理大并发不够好"}]}]},{"ID":"20240330164538-pulsti0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164538-pulsti0","updated":"20240330164538"},"Children":[{"ID":"20240330164538-k467qgp","Type":"NodeParagraph","Properties":{"id":"20240330164538-k467qgp","updated":"20240330164538"},"Children":[{"Type":"NodeText","Data":"企业运行维护很多 c/c++的项目，c/c++程序运行速度虽然很快，但是编译速度确很慢，同时还存在内存泄漏的一系列的困扰需要解决。"}]}]}]},{"ID":"20240330164347-x5su8yf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240330164347-x5su8yf","updated":"20240330164557"},"Children":[{"Type":"NodeText","Data":"Java"}]},{"ID":"20240330164615-3lcpkbj","Type":"NodeParagraph","Properties":{"id":"20240330164615-3lcpkbj","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"Java的发展历史可以追溯到20世纪90年代初，以下是Java的一些关键时刻和发展阶段："}]},{"ID":"20240330164615-b2jpp1g","Type":"NodeList","ListData":{},"Properties":{"id":"20240330164615-b2jpp1g","updated":"20240330164615"},"Children":[{"ID":"20240330164615-qkxjqyu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-qkxjqyu","updated":"20240330164615"},"Children":[{"ID":"20240330164615-r6ff0zu","Type":"NodeParagraph","Properties":{"id":"20240330164615-r6ff0zu","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"1991年：Oak 项目启动： James Gosling、Mike Sheridan和Patrick Naughton等Sun Microsystems的工程师开始了一个名为Oak的项目，旨在开发一种用于嵌入式系统的语言。"}]}]},{"ID":"20240330164615-fiishn1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-fiishn1","updated":"20240330164615"},"Children":[{"ID":"20240330164615-4tqtnth","Type":"NodeParagraph","Properties":{"id":"20240330164615-4tqtnth","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"1994年：Java 语言诞生： Oak 项目演变成了Java项目，该语言在Sun Microsystems的Java小组领导下于1995年5月正式发布。Java被设计成一种简单、面向对象、可移植、高性能的编程语言。"}]}]},{"ID":"20240330164615-b5losbw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-b5losbw","updated":"20240330164615"},"Children":[{"ID":"20240330164615-wrk0bqe","Type":"NodeParagraph","Properties":{"id":"20240330164615-wrk0bqe","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"1995年：公开发布： Java 1.0版本正式发布，引入了许多今天仍然存在的基本特性，例如Java虚拟机（JVM）和Applet技术。"}]}]},{"ID":"20240330164615-zk1jw32","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-zk1jw32","updated":"20240330164615"},"Children":[{"ID":"20240330164615-4xcg8sv","Type":"NodeParagraph","Properties":{"id":"20240330164615-4xcg8sv","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"1997年：Java 1.1发布： 引入内部类、JavaBean、RMI（远程方法调用）等特性，增强了语言的功能。"}]}]},{"ID":"20240330164615-iykck5g","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-iykck5g","updated":"20240330164615"},"Children":[{"ID":"20240330164615-1n170d6","Type":"NodeParagraph","Properties":{"id":"20240330164615-1n170d6","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"1998年：Java 2发布： Java 2（J2SE 1.2）发布，引入了Swing GUI工具包、集合框架、Java Naming and Directory Interface（JNDI）等重要特性。"}]}]},{"ID":"20240330164615-b9401hl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-b9401hl","updated":"20240330164615"},"Children":[{"ID":"20240330164615-nh0iv7v","Type":"NodeParagraph","Properties":{"id":"20240330164615-nh0iv7v","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2000年：Java 2 Enterprise Edition（J2EE）发布： 针对企业级应用程序开发推出，引入了Servlet、JSP（JavaServer Pages）等技术。"}]}]},{"ID":"20240330164615-68sygsi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-68sygsi","updated":"20240330164615"},"Children":[{"ID":"20240330164615-suxpmbk","Type":"NodeParagraph","Properties":{"id":"20240330164615-suxpmbk","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2004年：Java 5.0发布： 引入了重要的语言特性，如泛型、枚举、注解、自动装箱和拆箱、增强的for循环等。"}]}]},{"ID":"20240330164615-1us5ili","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-1us5ili","updated":"20240330164615"},"Children":[{"ID":"20240330164615-kz1oz5r","Type":"NodeParagraph","Properties":{"id":"20240330164615-kz1oz5r","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2006年：Java 6发布： 引入了Java虚拟机的更新、Scripting API、Java Compiler API等新特性。"}]}]},{"ID":"20240330164615-6a5z7vy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-6a5z7vy","updated":"20240330164615"},"Children":[{"ID":"20240330164615-n6bcod3","Type":"NodeParagraph","Properties":{"id":"20240330164615-n6bcod3","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2011年：Java 7发布： 引入了重要的语言特性，如try-with-resources语句、钻石操作符、字符串在switch语句中的支持等。"}]}]},{"ID":"20240330164615-tud33wu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-tud33wu","updated":"20240330164615"},"Children":[{"ID":"20240330164615-t1ukibm","Type":"NodeParagraph","Properties":{"id":"20240330164615-t1ukibm","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2014年：Java 8发布： 引入了Lambda表达式、Stream API、新的Date和Time API等重要特性，对语言和库进行了重大的升级。"}]}]},{"ID":"20240330164615-v33y3iu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-v33y3iu","updated":"20240330164615"},"Children":[{"ID":"20240330164615-7u1asqk","Type":"NodeParagraph","Properties":{"id":"20240330164615-7u1asqk","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2017年：Java 9发布： 引入了模块化系统、改进的Javadoc、集合工厂方法等新特性。"}]}]},{"ID":"20240330164615-ytwxbfk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-ytwxbfk","updated":"20240330164615"},"Children":[{"ID":"20240330164615-ofvcyxt","Type":"NodeParagraph","Properties":{"id":"20240330164615-ofvcyxt","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2018年：Java 10发布： 引入了局部变量类型推断、改进的垃圾回收器等新特性。"}]}]},{"ID":"20240330164615-v3i19rb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-v3i19rb","updated":"20240330164615"},"Children":[{"ID":"20240330164615-2yon2yj","Type":"NodeParagraph","Properties":{"id":"20240330164615-2yon2yj","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2019年：Java 11发布： 引入了HTTP Client API、局部变量类型推断的升级、动态类文件常量等新特性。此版本标志着Oracle对长期支持（LTS）版本的承诺。"}]}]},{"ID":"20240330164615-zer6131","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164615-zer6131","updated":"20240330164615"},"Children":[{"ID":"20240330164615-srvcm2c","Type":"NodeParagraph","Properties":{"id":"20240330164615-srvcm2c","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"2021年：Java 17发布： 作为一个长期支持（LTS）版本，引入了Sealed Classes、Pattern Matching for Switch、新的垃圾回收器等特性。"}]}]}]},{"ID":"20240330164615-gikxecy","Type":"NodeParagraph","Properties":{"id":"20240330164615-gikxecy","updated":"20240330164615"},"Children":[{"Type":"NodeText","Data":"Java的发展一直在持续进行，保持了与时俱进的态势。它在企业级应用、移动开发、大数据、云计算等领域都有着广泛的应用，成为世界上最受欢迎的编程语言之一。"}]},{"ID":"20240330164616-1f3xa0h","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330164616-1f3xa0h","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"语言特点"}]},{"ID":"20240330164721-wr2ioky","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240330164721-wr2ioky","updated":"20240330164738"},"Children":[{"Type":"NodeText","Data":"Go 语言的特点"}]},{"ID":"20240330164800-8ji2avx","Type":"NodeList","ListData":{},"Properties":{"id":"20240330164800-8ji2avx","updated":"20240330164738"},"Children":[{"ID":"20240330164800-b20jvo2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-b20jvo2","updated":"20240330164800"},"Children":[{"ID":"20240330164800-qg2en0p","Type":"NodeParagraph","Properties":{"id":"20240330164800-qg2en0p","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"Go 也是一种静态的编译型语言，语法和 C 相近，从 c 语言中继承了很多理念，包括表达式语法，控制结构，基础数据类型，调用参数传值，指针等等"}]}]},{"ID":"20240330164800-abimu7s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-abimu7s","updated":"20240330164800"},"Children":[{"ID":"20240330164800-l50e78y","Type":"NodeParagraph","Properties":{"id":"20240330164800-l50e78y","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"垃圾回收机制，内存自动回收"}]}]},{"ID":"20240330164800-likw0y9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-likw0y9","updated":"20240330164800"},"Children":[{"ID":"20240330164800-c9mjiri","Type":"NodeParagraph","Properties":{"id":"20240330164800-c9mjiri","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"天然并发【重要特点】"}]},{"ID":"20240330164800-qx29ekz","Type":"NodeList","ListData":{},"Properties":{"id":"20240330164800-qx29ekz","updated":"20240330164800"},"Children":[{"ID":"20240330164800-xcikcwp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-xcikcwp","updated":"20240330164800"},"Children":[{"ID":"20240330164800-bkrl1db","Type":"NodeParagraph","Properties":{"id":"20240330164800-bkrl1db","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"从语言层面支持并发，实现简单"}]}]},{"ID":"20240330164800-yierq06","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-yierq06","updated":"20240330164800"},"Children":[{"ID":"20240330164800-8gxmb9o","Type":"NodeParagraph","Properties":{"id":"20240330164800-8gxmb9o","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"goroutine，轻量级线程，可实现大并发处理，高效利用多核。"}]}]},{"ID":"20240330164800-sx2r1ov","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-sx2r1ov","updated":"20240330164800"},"Children":[{"ID":"20240330164800-8k0gzbz","Type":"NodeParagraph","Properties":{"id":"20240330164800-8k0gzbz","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"基于 CSP 并发模型（Communicating Sequential Processes,通讯顺序进程）实现"}]}]}]}]},{"ID":"20240330164800-pfvjat4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-pfvjat4","updated":"20240330164800"},"Children":[{"ID":"20240330164800-yyxzhba","Type":"NodeParagraph","Properties":{"id":"20240330164800-yyxzhba","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"吸收了管道通信机制，形成 go 语言特有的管道 channel，通过管道 channel，可以实现不同的 goroute 之间的相互通信"}]}]},{"ID":"20240330164800-en0s9yo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-en0s9yo","updated":"20240330164800"},"Children":[{"ID":"20240330164800-c7svk06","Type":"NodeParagraph","Properties":{"id":"20240330164800-c7svk06","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"函数返回多个值"}]}]},{"ID":"20240330164800-zltnqb5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164800-zltnqb5","updated":"20240330164800"},"Children":[{"ID":"20240330164800-5nlatxd","Type":"NodeParagraph","Properties":{"id":"20240330164800-5nlatxd","updated":"20240330164800"},"Children":[{"Type":"NodeText","Data":"新的创新：比如切片 slice，延时执行 defer 等"}]}]}]},{"ID":"20240330164810-c9nlh20","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240330164810-c9nlh20","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"Java 语言的特点"}]},{"ID":"20240330164821-1zjybxz","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330164821-1zjybxz","updated":"20240330164622"},"Children":[{"ID":"20240330164823-mk05oup","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240330164823-mk05oup","updated":"20240330164823"},"Children":[{"ID":"20240330164823-1ona1h9","Type":"NodeParagraph","Properties":{"id":"20240330164823-1ona1h9","updated":"20240330164825"},"Children":[{"Type":"NodeText","Data":"简单"}]}]}]},{"ID":"20240330164842-7vecl3z","Type":"NodeParagraph","Properties":{"id":"20240330164842-7vecl3z","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"Java 最初是为对家用电器进行集成控制而设计的一种语言，因此它必须简单明了。Java 语言的简单性主要体现在以下三个方面："}]},{"ID":"20240330164842-qsml523","Type":"NodeList","ListData":{},"Properties":{"id":"20240330164842-qsml523","updated":"20240330164622"},"Children":[{"ID":"20240330164842-n5ku9u4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164842-n5ku9u4","updated":"20240330164842"},"Children":[{"ID":"20240330164842-41josl2","Type":"NodeParagraph","Properties":{"id":"20240330164842-41josl2","updated":"20240330164842"},"Children":[{"Type":"NodeText","Data":"Java 的风格类似于 C++，因而 C++程序员是非常熟悉的。从某种意义上讲，Java 语言是 C 及 C++语言的一个变种，因此，C++程序员可以很快就掌握 Java 编程技术。"}]}]},{"ID":"20240330164842-y4hrus7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164842-y4hrus7","updated":"20240330164842"},"Children":[{"ID":"20240330164842-oszh60h","Type":"NodeParagraph","Properties":{"id":"20240330164842-oszh60h","updated":"20240330164842"},"Children":[{"Type":"NodeText","Data":"Java 摒弃了 C++中容易引发程序错误的地方，如指针和内存管理。"}]}]},{"ID":"20240330164842-1zmw2z4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330164842-1zmw2z4","updated":"20240330164842"},"Children":[{"ID":"20240330164842-vhkfe3h","Type":"NodeParagraph","Properties":{"id":"20240330164842-vhkfe3h","updated":"20240330164842"},"Children":[{"Type":"NodeText","Data":"Java 提供了丰富的类库。"}]}]}]},{"ID":"20240330164844-rstcsu5","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330164844-rstcsu5","updated":"20240330164622"},"Children":[{"ID":"20240330164846-xm5ir3a","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240330164846-xm5ir3a","updated":"20240330164846"},"Children":[{"ID":"20240330164846-j0372b9","Type":"NodeParagraph","Properties":{"id":"20240330164846-j0372b9","updated":"20240330164852"},"Children":[{"Type":"NodeText","Data":"面向对象"}]}]}]},{"ID":"20240330164852-22h28r2","Type":"NodeParagraph","Properties":{"id":"20240330164852-22h28r2","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"面向对象可以说是 Java 最重要的特性。Java 语言的设计完全是面向对象的，它不支持类似 C 语言那样的面向过程的程序设计技术。Java 支持静态和动态风格的代码继承及重用。单从面向对象的特性来看，Java 类似于 Small Talk，但其它特性、尤其是适用于分布式计算环境的特性远远超越了 Small Talk。"}]},{"ID":"20240330164911-4cy3sy2","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330164911-4cy3sy2","updated":"20240330164622"},"Children":[{"ID":"20240330164914-uugiub1","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240330164914-uugiub1","updated":"20240330164914"},"Children":[{"ID":"20240330164914-00dmfbr","Type":"NodeParagraph","Properties":{"id":"20240330164914-00dmfbr","updated":"20240330164923"},"Children":[{"Type":"NodeText","Data":"可移植"}]}]}]},{"ID":"20240330164929-sn8r8qs","Type":"NodeParagraph","Properties":{"id":"20240330164929-sn8r8qs","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"“一次编译，到处运行“的设计初衷，将代码编译为字节码后，即可运行在 JVM 虚拟机上。无视系统环境的差异。"}]},{"ID":"20240330164943-h82jf6u","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330164943-h82jf6u","updated":"20240330164622"},"Children":[{"ID":"20240330164947-4e2fad0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240330164947-4e2fad0","updated":"20240330164947"},"Children":[{"ID":"20240330164947-1bhqyhf","Type":"NodeParagraph","Properties":{"id":"20240330164947-1bhqyhf","updated":"20240330165118"},"Children":[{"Type":"NodeText","Data":"解释执行+ 即时翻译"}]}]}]},{"ID":"20240330165129-og0qp1m","Type":"NodeParagraph","Properties":{"id":"20240330165129-og0qp1m","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"在程序运行初始，是通过 JVM 中的解释器运行通过 javac(前端编译器)编译生成的 JVM 字节码,解释器会将我们的代码一句一句解释成机器可以识别的二进制代码来执行，可以认为是，解释一句，执行一句，效率较低"}]},{"ID":"20240330165129-rec2ja8","Type":"NodeParagraph","Properties":{"id":"20240330165129-rec2ja8","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"在程序运行期间，是通过及时编译器（JIT）把字节码转成机器码。JIT 及时编译在 JDK 1.7 以前主要是 HotSpot VM 的 C1、C2 编译器，在 JDK 1.7 开始后引入了分层编译，将 C1,C2 进行结合更好的提升程序的编译以及运行效率"}]},{"ID":"20240330165130-pjspmv0","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330165130-pjspmv0","updated":"20240330164622"},"Children":[{"ID":"20240330165133-zihxe56","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240330165133-zihxe56","updated":"20240330165133"},"Children":[{"ID":"20240330165133-2nvgiph","Type":"NodeParagraph","Properties":{"id":"20240330165133-2nvgiph","updated":"20240330165137"},"Children":[{"Type":"NodeText","Data":"动态编译"}]}]}]},{"ID":"20240330165213-lvyz5j6","Type":"NodeParagraph","Properties":{"id":"20240330165213-lvyz5j6","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"动态编译，简单来说就是在 Java 程序运行时编译源代码。"}]},{"ID":"20240330165213-0nebh2d","Type":"NodeParagraph","Properties":{"id":"20240330165213-0nebh2d","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"从 JDK1.6 开始，引入了 Java 代码重写过的编译器接口，使得我们可以在运行时编译 Java 源代码，然后再通过类加载器将编译好的类加载进 JVM,这种在运行时编译代码的操作就叫做动态编译。"}]},{"ID":"20240330165215-8s0off7","Type":"NodeParagraph","Properties":{"id":"20240330165215-8s0off7","updated":"20240330164622"}},{"ID":"20240330165215-4ux7p94","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330165215-4ux7p94","updated":"20240330164622"},"Children":[{"ID":"20240330165219-7bk6040","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ni4=","Num":6},"Properties":{"id":"20240330165219-7bk6040","updated":"20240330165219"},"Children":[{"ID":"20240330165219-ons3gt6","Type":"NodeParagraph","Properties":{"id":"20240330165219-ons3gt6","updated":"20240330165221"},"Children":[{"Type":"NodeText","Data":"多线程"}]}]}]},{"ID":"20240330165222-oukvm5y","Type":"NodeParagraph","Properties":{"id":"20240330165222-oukvm5y","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"Java 语言是多线程的，这也是 Java 语言的一大特性，它必须由 Thread 类和它的子类来创建。Java 支持多个线程同时执行，并提供多线程之间的同步机制。"}]},{"ID":"20240330165232-rsmteog","Type":"NodeParagraph","Properties":{"id":"20240330165232-rsmteog","updated":"20240330164622"}},{"ID":"20240330165254-yy7oao2","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330165254-yy7oao2","updated":"20240330164622"},"Children":[{"ID":"20240330165255-t7exbad","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Ny4=","Num":7},"Properties":{"id":"20240330165255-t7exbad","updated":"20240330165255"},"Children":[{"ID":"20240330165255-ilw5jeh","Type":"NodeParagraph","Properties":{"id":"20240330165255-ilw5jeh","updated":"20240330165258"},"Children":[{"Type":"NodeText","Data":"垃圾回收"}]}]}]},{"ID":"20240330165258-xrxrx83","Type":"NodeParagraph","Properties":{"id":"20240330165258-xrxrx83","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"java 语言支持多种垃圾回收机制，不需要开发者手动回收内存。其中包括 CMS，G1.ZGC"}]},{"ID":"20240330165459-rmd7jyp","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240330165459-rmd7jyp","updated":"20240330164622"},"Children":[{"ID":"20240330165502-w21y2kt","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"OC4=","Num":8},"Properties":{"id":"20240330165502-w21y2kt","updated":"20240330165502"},"Children":[{"ID":"20240330165502-4sp6c1g","Type":"NodeParagraph","Properties":{"id":"20240330165502-4sp6c1g","updated":"20240330165514"},"Children":[{"Type":"NodeText","Data":"注解"}]}]}]},{"ID":"20240330165525-oyiocuh","Type":"NodeParagraph","Properties":{"id":"20240330165525-oyiocuh","updated":"20240330164622"},"Children":[{"Type":"NodeText","Data":"Java 注解（Annotation）又称 Java 标注，是 JDK5.0 引入的一种注释机制。Java 语言中的类、方法、变量、参数和包等都可以被标注。和 Javadoc 不同，Java 标注可以通过反射获取标注内容。在编译器生成类文件时，标注可以被嵌入到字节码中"}]},{"ID":"20240330165527-1iclkn1","Type":"NodeParagraph","Properties":{"id":"20240330165527-1iclkn1","updated":"20240330164622"}},{"ID":"20240330165504-4378la6","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330165504-4378la6","updated":"20240330165618"},"Children":[{"Type":"NodeText","Data":"典型项目"}]},{"ID":"20240330165618-y6sbgz3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240330165618-y6sbgz3","updated":"20240330165622"},"Children":[{"Type":"NodeText","Data":"Golang"}]},{"ID":"20240330165622-lqe7v7o","Type":"NodeList","ListData":{},"Properties":{"id":"20240330165622-lqe7v7o","updated":"20240330165622"},"Children":[{"ID":"20240330165624-dpm8tdr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330165624-dpm8tdr","updated":"20240330165624"},"Children":[{"ID":"20240330165624-dchwhki","Type":"NodeParagraph","Properties":{"id":"20240330165624-dchwhki","updated":"20240330165627"},"Children":[{"Type":"NodeText","Data":"kubernete"}]}]}]},{"ID":"20240330165627-6z2abah","Type":"NodeParagraph","Properties":{"id":"20240330165627-6z2abah","updated":"20240330165622"},"Children":[{"Type":"NodeText","Data":"Kubernetes，也称为 K8s，是一个用于跨多个主机管理容器化应用程序的开源系统。它为应用程序的部署、维护和扩展提供了基本机制"}]},{"ID":"20240330165644-bio7y5i","Type":"NodeList","ListData":{},"Properties":{"id":"20240330165644-bio7y5i","updated":"20240330165622"},"Children":[{"ID":"20240330165646-fq9y2wz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330165646-fq9y2wz","updated":"20240330165646"},"Children":[{"ID":"20240330165646-8avqaay","Type":"NodeParagraph","Properties":{"id":"20240330165646-8avqaay","updated":"20240330165648"},"Children":[{"Type":"NodeText","Data":"Docker"}]}]}]},{"ID":"20240330165658-yj7c0ti","Type":"NodeParagraph","Properties":{"id":"20240330165658-yj7c0ti","updated":"20240330165622"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmoby%2Fmoby","TextMarkATitle":"https://github.com/moby/moby","TextMarkTextContent":"Docker"},{"Type":"NodeText","Data":" 用于开发应用、交付（shipping）应用、运行应用。Docker 允许用户将基础设施中的应用单独分割出来，形成更小的颗粒（容器），从而提高交付软件的速度"}]},{"ID":"20240330165700-a4yppbr","Type":"NodeList","ListData":{},"Properties":{"id":"20240330165700-a4yppbr","updated":"20240330165622"},"Children":[{"ID":"20240330165702-6rwymh1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330165702-6rwymh1","updated":"20240330165702"},"Children":[{"ID":"20240330165702-sbfeqth","Type":"NodeParagraph","Properties":{"id":"20240330165702-sbfeqth","updated":"20240330165705"},"Children":[{"Type":"NodeText","Data":"Etcd"}]}]}]},{"ID":"20240330165705-4ss5ga0","Type":"NodeParagraph","Properties":{"id":"20240330165705-4ss5ga0","updated":"20240330165622"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fetcd-io%2Fetcd","TextMarkATitle":"https://github.com/etcd-io/etcd","TextMarkTextContent":"Etcd"},{"Type":"NodeText","Data":" 是分布式系统中最关键数据的分布式可靠键值存储系统"}]},{"ID":"20240330165712-kudphpu","Type":"NodeList","ListData":{},"Properties":{"id":"20240330165712-kudphpu","updated":"20240330165622"},"Children":[{"ID":"20240330165714-t4q5q3o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330165714-t4q5q3o","updated":"20240330165714"},"Children":[{"ID":"20240330165714-686kdyj","Type":"NodeParagraph","Properties":{"id":"20240330165714-686kdyj","updated":"20240330165716"},"Children":[{"Type":"NodeText","Data":"Tidb"}]}]}]},{"ID":"20240330165717-hpsoexv","Type":"NodeParagraph","Properties":{"id":"20240330165717-hpsoexv","updated":"20240330165622"},"Children":[{"Type":"NodeText","Data":"Tidb 是一个开源的分布式SQL数据库，支持混合事务和分析处理HTAP 工作负载，它与MySQL兼容，具有水平可扩展性，强一致性和高可用性"}]},{"ID":"20240330165844-ywh1vyf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240330165844-ywh1vyf","updated":"20240330165858"},"Children":[{"Type":"NodeText","Data":"Java"}]},{"ID":"20240330165859-eepkocf","Type":"NodeList","ListData":{},"Properties":{"id":"20240330165859-eepkocf","updated":"20240330165903"},"Children":[{"ID":"20240330165903-8p1gbxh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330165903-8p1gbxh","updated":"20240330165903"},"Children":[{"ID":"20240330165903-ywaorbq","Type":"NodeParagraph","Properties":{"id":"20240330165903-ywaorbq","updated":"20240330165906"},"Children":[{"Type":"NodeText","Data":"Spring"}]}]}]},{"ID":"20240330165906-ccul80e","Type":"NodeParagraph","Properties":{"id":"20240330165906-ccul80e","updated":"20240330165949"},"Children":[{"Type":"NodeText","Data":"Spring 提供了Java编程语言以外的一切所需功能，用于为各种场景和体系结构创建企业应用程序"}]},{"ID":"20240330165951-fwnvunv","Type":"NodeList","ListData":{},"Properties":{"id":"20240330165951-fwnvunv","updated":"20240330165953"},"Children":[{"ID":"20240330165953-fxik85d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330165953-fxik85d","updated":"20240330165953"},"Children":[{"ID":"20240330165953-tj9mp06","Type":"NodeParagraph","Properties":{"id":"20240330165953-tj9mp06","updated":"20240330165958"},"Children":[{"Type":"NodeText","Data":"Spring boot"}]}]}]},{"ID":"20240330165959-31zlesh","Type":"NodeParagraph","Properties":{"id":"20240330165959-31zlesh","updated":"20240330170008"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fspring-projects%2Fspring-boot","TextMarkATitle":"https://github.com/spring-projects/spring-boot","TextMarkTextContent":"Spring Boot"},{"Type":"NodeText","Data":" 帮助您以最小的麻烦创建 Spring 驱动的产品级应用程序和服务。它对 Spring 平台有自己的看法，以便新用户和现有用户可以快速获得所需的部分"}]},{"ID":"20240330170009-ythh4id","Type":"NodeList","ListData":{},"Properties":{"id":"20240330170009-ythh4id","updated":"20240330170010"},"Children":[{"ID":"20240330170010-i0ldqs7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330170010-i0ldqs7","updated":"20240330170010"},"Children":[{"ID":"20240330170010-mw3ajdb","Type":"NodeParagraph","Properties":{"id":"20240330170010-mw3ajdb","updated":"20240330170015"},"Children":[{"Type":"NodeText","Data":"Elasticsearch"}]}]}]},{"ID":"20240330170016-y33wk25","Type":"NodeParagraph","Properties":{"id":"20240330170016-y33wk25","updated":"20240330170051"},"Children":[{"Type":"NodeText","Data":"Elasticsearch 是位于 Elastic Stack 核心的分布式RESTful 搜索和分析引擎"}]},{"ID":"20240330170051-kvk0dl5","Type":"NodeList","ListData":{},"Properties":{"id":"20240330170051-kvk0dl5","updated":"20240330170125"},"Children":[{"ID":"20240330170053-btg8x3p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330170053-btg8x3p","updated":"20240330170053"},"Children":[{"ID":"20240330170053-6k673gh","Type":"NodeParagraph","Properties":{"id":"20240330170053-6k673gh","updated":"20240330170055"},"Children":[{"Type":"NodeText","Data":"Dubbo"}]}]},{"ID":"20240330170056-lga59g5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240330170056-lga59g5","updated":"20240330170125"},"Children":[{"ID":"20240330170056-gf3ucee","Type":"NodeParagraph","Properties":{"id":"20240330170056-gf3ucee","updated":"20240330170125"},"Children":[{"Type":"NodeText","Data":"Apche Dobbo 是一个高性能，基于java开源的RPC框架"}]}]}]},{"ID":"20240330165232-r1myspl","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330165232-r1myspl","updated":"20240330170600"},"Children":[{"Type":"NodeText","Data":"编码"}]},{"ID":"20240330170601-tcfwrht","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330170601-tcfwrht","updated":"20240330170604"},"Children":[{"Type":"NodeText","Data":"关键字"}]},{"ID":"20240330170606-55r1ah1","Type":"NodeParagraph","Properties":{"id":"20240330170606-55r1ah1","updated":"20240330170615"},"Children":[{"Type":"NodeText","Data":"golang 有 25个关键字"}]},{"ID":"20240330170633-k3rjjh8","Type":"NodeParagraph","Properties":{"id":"20240330170633-k3rjjh8","updated":"20240330170633"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240330170633-cgbucju.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240330170634-egbo7ad","Type":"NodeParagraph","Properties":{"id":"20240330170634-egbo7ad","updated":"20240330170641"},"Children":[{"Type":"NodeText","Data":"java 有51 个关键字"}]},{"ID":"20240330170649-svphvm7","Type":"NodeParagraph","Properties":{"id":"20240330170649-svphvm7","updated":"20240330170649"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240330170649-24mfy6k.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240330170650-166jxxp","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330170650-166jxxp","updated":"20240330170735"},"Children":[{"Type":"NodeText","Data":"规约"}]},{"ID":"20240330170735-44g4pp7","Type":"NodeParagraph","Properties":{"id":"20240330170735-44g4pp7","updated":"20240330170910"},"Children":[{"Type":"NodeText","Data":"Golang 是一门严格的工程语言，主要体现在编码风格及可见域规则上，在 Java 中，允许多种编码风格共存，譬如以下两种方法声明，对于 Java 来说都是允许的："}]},{"ID":"20240330170911-p96ugcv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240330170911-p96ugcv","updated":"20240330171027"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"public string getString(Integer num) {\n  return num.toString();}\npublic String getString(integet num) {\n  return num.toString();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240330171030-5nqfbe3","Type":"NodeParagraph","Properties":{"id":"20240330171030-5nqfbe3","updated":"20240330171109"},"Children":[{"Type":"NodeText","Data":"在Golang 中则会是严格检查换行风格，如果出现上面的情况会直接提示编译错误"}]},{"ID":"20240330171109-kz9ogvn","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240330171109-kz9ogvn","updated":"20240330171121"},"Children":[{"Type":"NodeText","Data":"变量声明"}]},{"ID":"20240330171121-ru41lg7","Type":"NodeParagraph","Properties":{"id":"20240330171121-ru41lg7","updated":"20240331233527"},"Children":[{"Type":"NodeText","Data":"在 Java 中，变量可以声明了却不使用，而Golang中声明的变量必须被使用，否则需要使用_来替代掉变量名，表明该变量不会被使用到"}]},{"ID":"20240331233527-qg7r8a1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240331233527-qg7r8a1","updated":"20240331233622"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func getString(num int) string {\n  temp := num\n  _ := num\n  return strconv.Itoa(num)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240331233628-7lnd0fv","Type":"NodeParagraph","Properties":{"id":"20240331233628-7lnd0fv","updated":"20240331233720"},"Children":[{"Type":"NodeText","Data":"在 Golang中支持两种变量声明方式，方式2会有编译器自动推导类型，更简洁一些"}]},{"ID":"20240331233721-efeb9gm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240331233721-efeb9gm","updated":"20240331233737"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"方式1：var a string\n方式2： b := 1\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240331233739-0djih2c","Type":"NodeParagraph","Properties":{"id":"20240331233739-0djih2c","updated":"20240331235153"},"Children":[{"Type":"NodeText","Data":"在 Golang 中对于基本类型,声明即初始化；对于引用类型，声明则初始化为 nil，在 Java 中，如果在方法内部声明一个变量但不初始化，在使用时会出现编译错误："}]},{"ID":"20240331235153-j3n7ijm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240331235153-j3n7ijm","updated":"20240331235337"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YQ=="},{"Type":"NodeCodeBlockCode","Data":"public void solve() {\n  int num;\n  Object object;\n  System.out.println(num);\n  System.out.println(object)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240331235341-o4xw843","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240331235341-o4xw843","updated":"20240331235359"},"Children":[{"Type":"NodeText","Data":"可见域规则"}]},{"ID":"20240331235400-wd6ime1","Type":"NodeParagraph","Properties":{"id":"20240331235400-wd6ime1","updated":"20240331235535"},"Children":[{"Type":"NodeText","Data":"Java 对方法、变量及类的可见域规则是通过 private、protected、public 关键字来控制的，而 Golang 中控制可见域的方式只有一个，当字段首字母开头是大写时说明其是对外可见的、小写时只对包内成员可见。"}]},{"ID":"20240331235536-qax4e25","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240331235536-qax4e25","updated":"20240331235924"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func getString(num string) string {\n  return num\n}\n\nfunc GetString(num string) string {\n  return num\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240331235629-ml8cmyn","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240331235629-ml8cmyn","updated":"20240331235637"},"Children":[{"Type":"NodeText","Data":"参数传递"}]},{"ID":"20240331235647-jedd2l7","Type":"NodeParagraph","Properties":{"id":"20240331235647-jedd2l7","updated":"20240331235647"},"Children":[{"Type":"NodeText","Data":"在 java 中参数传递有两种，一种是引用传递，一种是值传递。而在 Golang 中一切均为值传递。"}]},{"ID":"20240331235647-bzb44at","Type":"NodeParagraph","Properties":{"id":"20240331235647-bzb44at","updated":"20240331235647"},"Children":[{"Type":"NodeText","Data":"例如数组在 Java 中是引用传递，当数组被当作参数传递到方法中，在方法内部对可以对数组中的内容修改。 在 Golang 中则会完全深度 copy 一份数组在方法中。"}]},{"ID":"20240331235647-pct1vfz","Type":"NodeParagraph","Properties":{"id":"20240331235647-pct1vfz","updated":"20240331235736"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"但是在 Golang 中有指针的概念，可以通过传递参数的指针来进行修改参数原有内容,但这种也是值传递，本质上是将指针的地址进行了深度 copy。相当于两个指针同时指向了参数的真正内存地址"}]},{"ID":"20240331235748-5zj5iri","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240331235748-5zj5iri","updated":"20240331235758"},"Children":[{"Type":"NodeText","Data":"结构体声明及使用"}]},{"ID":"20240331235808-gkv4y5e","Type":"NodeParagraph","Properties":{"id":"20240331235808-gkv4y5e","updated":"20240331235808"},"Children":[{"Type":"NodeText","Data":"在 Golang 中区别与 Java 最显著的一点是，Golang 不存在“类”这个概念，组织数据实体的结构在 Golang 中被称为结构体。函数可以脱离“类”而存在，函数可以依赖于结构体来调用或者依赖于包名调用。"}]},{"ID":"20240331235808-0ejm29t","Type":"NodeParagraph","Properties":{"id":"20240331235808-0ejm29t","updated":"20240331235808"},"Children":[{"Type":"NodeText","Data":"Golang 中的结构体放弃了继承、实现等多态概念，结构体之间可使用组合来达到复用方法或者字段的效果。"}]},{"ID":"20240331235808-1zq9ikg","Type":"NodeParagraph","Properties":{"id":"20240331235808-1zq9ikg","updated":"20240331235808"},"Children":[{"Type":"NodeText","Data":"要声明一个结构体只需使用 type + struct 关键字即可："}]},{"ID":"20240331235809-kg55vth","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240331235809-kg55vth","updated":"20240331235931"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Person struct {\n  Name string\n  Age int\n  id string\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401000016-d0ywa1y","Type":"NodeParagraph","Properties":{"id":"20240401000016-d0ywa1y","updated":"20240401000047"},"Children":[{"Type":"NodeText","Data":"要使用一个结构体也很简单，一般有以下几种方式去创建结构体："}]},{"ID":"20240401000047-1sy7ins","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401000047-1sy7ins","updated":"20240401000220"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"PersonPoint := new(entity.Person)\nperson1 := entity.Person{}\nperson2 := entity.Person{\n  Name: \"ARong\",\n  Age: 21,\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401000221-pcgzrtr","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401000221-pcgzrtr","updated":"20240401000227"},"Children":[{"Type":"NodeText","Data":"异常处理"}]},{"ID":"20240401000245-93ih9jg","Type":"NodeParagraph","Properties":{"id":"20240401000245-93ih9jg","updated":"20240401000245"},"Children":[{"Type":"NodeText","Data":"在 java 中通过 try catch 对异常进行处理，在 go 语言里是没有 try catch 的概念的，因为 try catch 会消耗更多资源，而且不管从 try 里面哪个地方跳出来，都是对代码正常结构的一种破坏。"}]},{"ID":"20240401000245-j33vbcg","Type":"NodeParagraph","Properties":{"id":"20240401000245-j33vbcg","updated":"20240401000245"},"Children":[{"Type":"NodeText","Data":"所以 go 语言的设计思想中主张如果一个函数可能出现异常，那么应该把异常作为返回值，没有异常就返回 nil 每次调用可能出现异常的函数时，都应该主动进行检查，并做出反应。"}]},{"ID":"20240401000245-mrsnyci","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401000245-mrsnyci","updated":"20240401000922"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Student struct {\n name string\n}\n\nfunc main() {\n  name, err := GetName(\u0026student{})\n  if err != nil {\n    fmt.Println(\"error\", err)\n    return\n  }\n  fmt.Println(name)\n}\n\nfunc GetName(s *Student) (string, error) {\n  if s.name == \"\" {\n    return \"\", errors.New(\"not found name\")\n  }\n  return \"Evan\",nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401000821-hbvr1bc","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401000821-hbvr1bc","updated":"20240401000937"},"Children":[{"Type":"NodeText","Data":"重写与重载"}]},{"ID":"20240401000937-7qpvevm","Type":"NodeParagraph","Properties":{"id":"20240401000937-7qpvevm","updated":"20240401000943"},"Children":[{"Type":"NodeText","Data":"在 Golang 中没有继承的概念，但是可以通过结构体组合的方式来达到“继承”的效果。"}]},{"ID":"20240401000943-xy6vgnw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401000943-xy6vgnw","updated":"20240401001120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Parent struct {\n  name string\n}\n\ntype Child struct {\n  Parent\n  name string\n}\n\nfunc (p *Parent) Name() string {\n  return p.name\n}\nfunc (c *Child) Name() string {\n  return c.Parent.Name()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401001131-k0gonpo","Type":"NodeParagraph","Properties":{"id":"20240401001131-k0gonpo","updated":"20240401001131"},"Children":[{"Type":"NodeText","Data":"重载也不如 java 那样灵活，在 java 中重载的要求是：在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。"}]},{"ID":"20240401001131-vhqpbqm","Type":"NodeParagraph","Properties":{"id":"20240401001131-vhqpbqm","updated":"20240401001131"},"Children":[{"Type":"NodeText","Data":"在 Golang 中可以通过接口来实现类似的效果，但是方法参数和返回值必须相同"}]},{"ID":"20240401001132-x8inru8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401001132-x8inru8","updated":"20240401001331"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Info interface {\n  Name() string\n}\ntype A struct {\n  name string\n}\ntype B struct {\n  firstName string\n  lastName string\n}\nfunc (a *A) Name() string {\n  return a.name\n}\nfunc(b *B) Name() string {\n  return b.firstName + b.lastName\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401001352-xxurwoz","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401001352-xxurwoz","updated":"20240401001359"},"Children":[{"Type":"NodeText","Data":"多线程"}]},{"ID":"20240401001359-yk6xy06","Type":"NodeParagraph","Properties":{"id":"20240401001359-yk6xy06","updated":"20240401001405"},"Children":[{"Type":"NodeText","Data":"在 java 中使用多线程，如果不考虑线程池的情况下，也需要继承 Thread 类或者实现 Runnable/Callable 接口，相对比较繁琐。"}]},{"ID":"20240401001408-0tbjndf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401001408-0tbjndf","updated":"20240401001613"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"public class Task extends Thread {\n  @oberride\n  public void run() {\n  }\n  public static void main(String[] args) {\n    new Task().start();\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401001630-9la4f1r","Type":"NodeParagraph","Properties":{"id":"20240401001630-9la4f1r","updated":"20240401001630"},"Children":[{"Type":"NodeText","Data":"如果考虑资源问题（例如线程启动太多可能会造成 CPU 上下文频繁切换，性能反而降低。线程创建太多也会大量消耗内存），还需要考虑通过线程池来创建线程 ，更加繁琐。"}]},{"ID":"20240401001630-xk0zz4w","Type":"NodeParagraph","Properties":{"id":"20240401001630-xk0zz4w","updated":"20240401001630"},"Children":[{"Type":"NodeText","Data":"而在 Golang 中，golang 通过自身的 GMP 调度机制，用户只需要使用 Go 关键字创建 goroutine 协程即可，协程非常轻量，每个协程的初始大小在 2kb 左右。"}]},{"ID":"20240401001630-c361hz1","Type":"NodeParagraph","Properties":{"id":"20240401001630-c361hz1","updated":"20240401001630"},"Children":[{"Type":"NodeText","Data":"协程(用户级线程)，这是对内核透明的，也就是系统并不知道有协程的存在，是完全由用户自己的程序进行调度的。在 golang 中通过 go 关键字开启协程，协程是属于用户态的减少了多线程情况下的 CPU 切换，在高并发场景下效果更好。"}]},{"ID":"20240401001630-6bnh1ab","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401001630-6bnh1ab","updated":"20240401001747"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n  for i := 0; i \u003c 100; i++ {\n    go func() {\n      fmt.Println(\"你好\")\n     }()\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401001631-h6evjai","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401001631-h6evjai","updated":"20240401001755"},"Children":[{"Type":"NodeText","Data":"垃圾回收"}]},{"ID":"20240401001812-1pu7skm","Type":"NodeParagraph","Properties":{"id":"20240401001812-1pu7skm","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"在 java 和 golang 中都有垃圾回收机制。常见的垃圾回收算法如下："}]},{"ID":"20240401001812-bwfr42c","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401001812-bwfr42c","updated":"20240401001812"},"Children":[{"ID":"20240401001812-e7x4fva","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401001812-e7x4fva","updated":"20240401001812"},"Children":[{"ID":"20240401001812-fjiw30r","Type":"NodeParagraph","Properties":{"id":"20240401001812-fjiw30r","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"标记-清除：从根变量开始遍历所有引用的对象，标记引用的对象，没有被标记的进行回收。"}]},{"ID":"20240401001812-g90v0sc","Type":"NodeList","ListData":{},"Properties":{"id":"20240401001812-g90v0sc","updated":"20240401001812"},"Children":[{"ID":"20240401001812-rcnsy51","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401001812-rcnsy51","updated":"20240401001812"},"Children":[{"ID":"20240401001812-6gz2u3f","Type":"NodeParagraph","Properties":{"id":"20240401001812-6gz2u3f","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"优点：算法简单。"}]}]},{"ID":"20240401001812-j5rg3ji","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401001812-j5rg3ji","updated":"20240401001812"},"Children":[{"ID":"20240401001812-0ytglyu","Type":"NodeParagraph","Properties":{"id":"20240401001812-0ytglyu","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"缺点：需要 STW，效率不稳定，内存空间碎片化。"}]}]}]}]},{"ID":"20240401001812-sn6tca7","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401001812-sn6tca7","updated":"20240401001812"},"Children":[{"ID":"20240401001812-vrz0os6","Type":"NodeParagraph","Properties":{"id":"20240401001812-vrz0os6","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"标记-复制：为了解决标记-清除算法面对大量可回收对象时执行效率低的问题，1969 年 Fenichel 提出了一种称为“半区复制”(Semispace Copying)的垃圾收集算法，它将可用内存按容量划分为大小相等的两块，每次只使用其中的一块。当这一块的内存用完了，就将还存活着 的对象复制到另外一块上面，然后再把已使用过的内存空间一次清理掉"}]},{"ID":"20240401001812-pfdhoni","Type":"NodeList","ListData":{},"Properties":{"id":"20240401001812-pfdhoni","updated":"20240401001812"},"Children":[{"ID":"20240401001812-x1ogc2b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401001812-x1ogc2b","updated":"20240401001812"},"Children":[{"ID":"20240401001812-atm5n3b","Type":"NodeParagraph","Properties":{"id":"20240401001812-atm5n3b","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"优点：实现简单，运行高效，没有碎片"}]}]},{"ID":"20240401001812-4wzi4xr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401001812-4wzi4xr","updated":"20240401001812"},"Children":[{"ID":"20240401001812-vbswtv4","Type":"NodeParagraph","Properties":{"id":"20240401001812-vbswtv4","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"缺点：空间浪费严重，可用内存缩小为原来一半"}]}]}]}]},{"ID":"20240401001812-c3dv32d","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240401001812-c3dv32d","updated":"20240401001812"},"Children":[{"ID":"20240401001812-2izdras","Type":"NodeParagraph","Properties":{"id":"20240401001812-2izdras","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"标记-整理：其中的标记过程仍然与“标记-清除”算法一样，但后续步骤不是直接对可回收对象进行清理，而是让所有存活的对象都向内存空间一端移动，然后直接清理掉边界以外的内存。"}]},{"ID":"20240401001812-658jb76","Type":"NodeList","ListData":{},"Properties":{"id":"20240401001812-658jb76","updated":"20240401001812"},"Children":[{"ID":"20240401001812-9oof2i7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401001812-9oof2i7","updated":"20240401001812"},"Children":[{"ID":"20240401001812-r5mun9o","Type":"NodeParagraph","Properties":{"id":"20240401001812-r5mun9o","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"优点：没有内存碎片"}]}]},{"ID":"20240401001812-g9gay1p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401001812-g9gay1p","updated":"20240401001812"},"Children":[{"ID":"20240401001812-fvpe5gj","Type":"NodeParagraph","Properties":{"id":"20240401001812-fvpe5gj","updated":"20240401001812"},"Children":[{"Type":"NodeText","Data":"缺点：部分场景不适合，如果进行回收时有大量存活对象，那么需要移动对象并更新所有引用，效率低下，因为这种操作需要 STW。"}]}]}]}]}]},{"ID":"20240401001815-xbgfoho","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401001815-xbgfoho","updated":"20240401001821"},"Children":[{"Type":"NodeText","Data":"Java"}]},{"ID":"20240401001839-blm4fn0","Type":"NodeParagraph","Properties":{"id":"20240401001839-blm4fn0","updated":"20240401001839"},"Children":[{"Type":"NodeText","Data":"在 java 中有 Serial,ParNew,CMS,G1,ZGC 多种垃圾收集器，其实 CMS,G1,ZGC 通过分代垃圾回收思想。将“朝生夕死”的对象和“经久不衰”的对象按照不同的内存区域区分开来。"}]},{"ID":"20240401001839-3ai8q0b","Type":"NodeParagraph","Properties":{"id":"20240401001839-3ai8q0b","updated":"20240401001839"},"Children":[{"Type":"NodeText","Data":"  其中 CMS 收集器是一款基于"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"标记-清除"},{"Type":"NodeText","Data":"算法实现的收集器（有碎片化问题），老年代则使用标记-整理算法实现。"}]},{"ID":"20240401001839-ltt38e4","Type":"NodeParagraph","Properties":{"id":"20240401001839-ltt38e4","updated":"20240401001839"},"Children":[{"Type":"NodeText","Data":"在 G1 收集器中 (1.7 引入，1.9 默认启用）,遵循分代收集理论设计，但是淡化了堆内存按照分代划分的概念，G1 不再坚持固定大小以及固定数量的分代区域划分，而是把连续的 Java 堆划分为多个大小相等的独立区域(Region)，每一个 Region 都可以根据需要，扮演新生代的 Eden 空间、Survivor 空间，或者老年代空间 ，而有了 Region 概念后，在回收过程中只需要把需要回收的 Region 中的存活对象复制到空 Region 中，然后清理掉整个旧 Region 空间。 相当于 G1 收集器是采用了"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"标记-复制+清除"},{"Type":"NodeText","Data":"的算法"}]},{"ID":"20240401001839-519po64","Type":"NodeParagraph","Properties":{"id":"20240401001839-519po64","updated":"20240401001839"},"Children":[{"Type":"NodeText","Data":"ZGC 收集器是一款基于 Region 内存布局的(与 G1 相同)，不设分代，使用了读屏障、染色指针和内存多重映射等技术来实现"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可并发的标记"},{"Type":"NodeText","Data":"算法的，以低延迟为首要目标的一款垃圾收集器"}]},{"ID":"20240401001841-rq8ukzu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401001841-rq8ukzu","updated":"20240401001845"},"Children":[{"Type":"NodeText","Data":"Golang"}]},{"ID":"20240401001845-zt4fd64","Type":"NodeParagraph","Properties":{"id":"20240401001845-zt4fd64","updated":"20240401001902"},"Children":[{"Type":"NodeText","Data":"在 Golang 中垃圾回收算法选择了标记-清除，通过“三色标记”算法进行标记，通过多层级的内存分配算法，尽可能解决内存碎片化的问题。 利用写屏障+辅助 GC 缩短 STW"}]},{"ID":"20240401001903-ujqtct4","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401001903-ujqtct4","updated":"20240401002125"},"Children":[{"Type":"NodeText","Data":"内存分配"}]},{"ID":"20240401002126-sgh79qj","Type":"NodeParagraph","Properties":{"id":"20240401002126-sgh79qj","updated":"20240401002153"},"Children":[{"Type":"NodeText","Data":"编程语言的内存分配器一般包含两种分配方法，一种是线性分配器（Sequential Allocator，Bump Allocator），另一种是空闲链表分配器（Free-List Allocator）"}]},{"ID":"20240401002157-l613mry","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401002157-l613mry","updated":"20240401002205"},"Children":[{"Type":"NodeText","Data":"线性分配器"}]},{"ID":"20240401002205-yofky20","Type":"NodeParagraph","Properties":{"id":"20240401002205-yofky20","updated":"20240401002205"},"Children":[{"Type":"NodeText","Data":"线性分配（Bump Allocator）是一种高效的内存分配方法，但是有较大的局限性。当我们使用线性分配器时，只需要在内存中维护一个指向内存特定位置的指针，如果用户程序向分配器申请内存，分配器只需要检查剩余的空闲内存、返回分配的内存区域并修改指针在内存中的位置，即移动下图中的指针："}]},{"ID":"20240401002233-hxamls7","Type":"NodeParagraph","Properties":{"id":"20240401002233-hxamls7","updated":"20240401002205"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401002233-iyzzybu.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401002254-wv2txjw","Type":"NodeParagraph","Properties":{"id":"20240401002254-wv2txjw","updated":"20240401002255"},"Children":[{"Type":"NodeText","Data":"虽然线性分配器实现为它带来了较快的执行速度以及较低的实现复杂度，但是线性分配器无法在内存被释放时重用内存。如下图所示，如果已经分配的内存被回收，线性分配器无法重新利用红色的内存："}]},{"ID":"20240401002306-3mrfmbf","Type":"NodeParagraph","Properties":{"id":"20240401002306-3mrfmbf","updated":"20240401002306"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401002306-cr97s2p.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401002317-jceq7lj","Type":"NodeParagraph","Properties":{"id":"20240401002317-jceq7lj","updated":"20240401002342"},"Children":[{"Type":"NodeText","Data":"因为线性分配器具有上述特性，所以需要与合适的垃圾回收算法配合使用，例如：标记压缩（Mark-Compact）、复制回收（Copying GC）和分代回收（Generational GC）等算法，它们可以通过拷贝的方式整理存活对象的碎片，将空闲内存定期合并，这样就能利用线性分配器的效率提升内存分配器的性能了。"}]},{"ID":"20240401002357-8h4592b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401002357-8h4592b","updated":"20240401002357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"空闲链表分配器"}]},{"ID":"20240401002357-oxxfqgo","Type":"NodeParagraph","Properties":{"id":"20240401002357-oxxfqgo","updated":"20240401002404"},"Children":[{"Type":"NodeText","Data":"空闲链表分配器（Free-List Allocator）可以重用已经被释放的内存，它在内部会维护一个类似链表的数据结构。当用户程序申请内存时，空闲链表分配器会依次遍历空闲的内存块，找到足够大的内存，然后申请新的资源并修改链表："}]},{"ID":"20240401002414-kx43v6q","Type":"NodeParagraph","Properties":{"id":"20240401002414-kx43v6q","updated":"20240401002414"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401002414-4ummvze.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401002428-7jl5jho","Type":"NodeParagraph","Properties":{"id":"20240401002428-7jl5jho","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"因为不同的内存块通过指针构成了链表，所以使用这种方式的分配器可以重新利用回收的资源，但是因为分配内存时需要遍历链表，所以它的时间复杂度是 𝑂(𝑛)"}]},{"ID":"20240401002428-jl71jfk","Type":"NodeParagraph","Properties":{"id":"20240401002428-jl71jfk","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"空闲链表分配器可以选择不同的策略在链表中的内存块中进行选择，最常见的是以下四种："}]},{"ID":"20240401002428-ryt2oy7","Type":"NodeList","ListData":{},"Properties":{"id":"20240401002428-ryt2oy7","updated":"20240401002428"},"Children":[{"ID":"20240401002428-v50lta4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401002428-v50lta4","updated":"20240401002428"},"Children":[{"ID":"20240401002428-sbr0eup","Type":"NodeParagraph","Properties":{"id":"20240401002428-sbr0eup","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"首次适应（First-Fit）— 从链表头开始遍历，选择第一个大小大于申请内存的内存块；"}]}]},{"ID":"20240401002428-mbp6bf8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401002428-mbp6bf8","updated":"20240401002428"},"Children":[{"ID":"20240401002428-aqxvzll","Type":"NodeParagraph","Properties":{"id":"20240401002428-aqxvzll","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"循环首次适应（Next-Fit）— 从上次遍历的结束位置开始遍历，选择第一个大小大于申请内存的内存块；"}]}]},{"ID":"20240401002428-xhytpod","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401002428-xhytpod","updated":"20240401002428"},"Children":[{"ID":"20240401002428-3ssg8ox","Type":"NodeParagraph","Properties":{"id":"20240401002428-3ssg8ox","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"最优适应（Best-Fit）— 从链表头遍历整个链表，选择最合适的内存块；"}]}]},{"ID":"20240401002428-o67u0g0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401002428-o67u0g0","updated":"20240401002428"},"Children":[{"ID":"20240401002428-wm47a44","Type":"NodeParagraph","Properties":{"id":"20240401002428-wm47a44","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"隔离适应（Segregated-Fit）— 将内存分割成多个链表，每个链表中的内存块大小相同，申请内存时先找到满足条件的链表，再从链表中选择合适的内存块；"}]}]}]},{"ID":"20240401002428-hokpz6h","Type":"NodeParagraph","Properties":{"id":"20240401002428-hokpz6h","updated":"20240401002428"},"Children":[{"Type":"NodeText","Data":"上述四种策略的前三种就不过多介绍了，Go 语言使用的内存分配策略与第四种策略有些相似，我们通过下图了解该策略的原理："}]},{"ID":"20240401002437-5gikbpb","Type":"NodeParagraph","Properties":{"id":"20240401002437-5gikbpb","updated":"20240401002437"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401002437-qxmdej6.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401002449-e3fg786","Type":"NodeParagraph","Properties":{"id":"20240401002449-e3fg786","updated":"20240401002449"},"Children":[{"Type":"NodeText","Data":"如上图所示，该策略会将内存分割成由 4、8、16、32 字节的内存块组成的链表，当我们向内存分配器申请 8 字节的内存时，它会在上图中找到满足条件的空闲内存块并返回。隔离适应的分配策略减少了需要遍历的内存块数量，提高了内存分配的效率。"}]},{"ID":"20240401002449-yugukbu","Type":"NodeParagraph","Properties":{"id":"20240401002449-yugukbu","updated":"20240401002503"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);"},"TextMarkType":"strong text","TextMarkTextContent":"java 使用的是线性分配器，golang 使用的是空闲链表分配器，从而一定程度上解决了内存碎片化问题"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-error-background); color: var(--b3-card-error-color);\"}"}]},{"ID":"20240401002505-a3de086","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401002505-a3de086","updated":"20240401002543"},"Children":[{"Type":"NodeText","Data":"线性模型"}]},{"ID":"20240401002543-9pfrkjf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401002543-9pfrkjf","updated":"20240401002612"},"Children":[{"Type":"NodeText","Data":"使用用户线程实现 多对一模型 M:1"}]},{"ID":"20240401002612-sgozivb","Type":"NodeParagraph","Properties":{"id":"20240401002612-sgozivb","updated":"20240401002624"},"Children":[{"Type":"NodeText","Data":"广义上来讲，一个线程只要不是内核线程，都可以是用户线程（User Threa，UT）的一种。多个用户线程映射到一个内核线程，用户线程建立在用户空间的线程库上，用户线程的建立、同步、销毁和调度完全在用户态中完成，对内核透明。果程序实现得当，不需要切换内核态，因此操作可以是非常快且低消耗的，也能够支持规模更大的线程数量，部分高性能数据库中的多线程就是由用户线程实现的。"}]},{"ID":"20240401002640-pfqvp46","Type":"NodeParagraph","Properties":{"id":"20240401002640-pfqvp46","updated":"20240401002640"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401002640-bgy4cmk.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401002651-ziarjzp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240401002651-ziarjzp","updated":"20240401002704"},"Children":[{"Type":"NodeText","Data":"优点"}]},{"ID":"20240401002714-ldelzpg","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401002714-ldelzpg","updated":"20240401002714"},"Children":[{"ID":"20240401002714-tlxppsv","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401002714-tlxppsv","updated":"20240401002714"},"Children":[{"ID":"20240401002714-8qwqsxr","Type":"NodeParagraph","Properties":{"id":"20240401002714-8qwqsxr","updated":"20240401002714"},"Children":[{"Type":"NodeText","Data":"线程的上下文切换都发生在用户空间，避免了模态切换（mode switch），减少了性能的开销。"}]}]},{"ID":"20240401002714-yo4fg3j","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401002714-yo4fg3j","updated":"20240401002714"},"Children":[{"ID":"20240401002714-6pt03ys","Type":"NodeParagraph","Properties":{"id":"20240401002714-6pt03ys","updated":"20240401002714"},"Children":[{"Type":"NodeText","Data":"用户线程的创建不受内核资源的限制，可以支持更大规模的线程数量。"}]}]}]},{"ID":"20240401002715-48lxf2c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240401002715-48lxf2c","updated":"20240401002718"},"Children":[{"Type":"NodeText","Data":"缺点"}]},{"ID":"20240401002730-d0oozgz","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401002730-d0oozgz","updated":"20240401002730"},"Children":[{"ID":"20240401002730-nkyvz2m","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401002730-nkyvz2m","updated":"20240401002730"},"Children":[{"ID":"20240401002730-bff65pr","Type":"NodeParagraph","Properties":{"id":"20240401002730-bff65pr","updated":"20240401002730"},"Children":[{"Type":"NodeText","Data":"所有的线程基于一个内核调度实体即内核线程，这意味着只有一个处理器可以被利用，浪费了其它处理器资源，不支持并行，在多处理器环境下这是不能够被接受的，如果线程因为 I/O 操作陷入了内核态，内核态线程阻塞等待 I/O 数据，则所有的线程都将会被阻塞。"}]}]},{"ID":"20240401002730-d45pkmk","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401002730-d45pkmk","updated":"20240401002730"},"Children":[{"ID":"20240401002730-3jiv2cj","Type":"NodeParagraph","Properties":{"id":"20240401002730-3jiv2cj","updated":"20240401002730"},"Children":[{"Type":"NodeText","Data":"增加了复杂度，所有的线程操作都需要用户程序自己处理，而且在用户空间要想自己实现 “阻塞的时候把线程映射到其他处理器上” 异常困难。"}]}]}]},{"ID":"20240401002730-1243uco","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401002730-1243uco","updated":"20240401002749"},"Children":[{"Type":"NodeText","Data":"使用内核线程实现 一对一模型1:1"}]},{"ID":"20240401002749-nflrcke","Type":"NodeBlockquote","Properties":{"id":"20240401002749-nflrcke","updated":"20240401002921"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240401002908-vx9f98n","Type":"NodeParagraph","Properties":{"id":"20240401002908-vx9f98n","updated":"20240401002921"},"Children":[{"Type":"NodeText","Data":"使用内核线程实现的方式被称为 1:1 实现。内核线程（Kernel Levvel Thread，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"KLT"},{"Type":"NodeText","Data":"）就是直接由操作系统内核（Kernel，下称内核）支持的线程，内核通过操纵调度器（"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Scheduler"},{"Type":"NodeText","Data":"）对线程进行调度，并负责将线程的任务映射到各个处理器上。其实程序一般不会直接使用内核线程，程序使用的是内核线程的一种高级接口——轻量级进程（Light Weight Process,LWP），轻量级进程就是我们通常意义上所讲的线程,轻量级进程也是属于用户线程。"}]}]},{"ID":"20240401002924-gw8boqf","Type":"NodeParagraph","Properties":{"id":"20240401002924-gw8boqf","updated":"20240401002941"},"Children":[{"Type":"NodeText","Data":"每个用户线程都映射到一个内核线程，每个线程都成为一个独立的调度单元，由内核调度器独立调度，一个线程的阻塞不会影响到其他线程，从而保障整个进程继续工作。"}]},{"ID":"20240401002953-55na6e6","Type":"NodeParagraph","Properties":{"id":"20240401002953-55na6e6","updated":"20240401002953"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401002953-le3t091.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401002958-2c2jmw5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240401002958-2c2jmw5","updated":"20240401003021"},"Children":[{"Type":"NodeText","Data":"优点"}]},{"ID":"20240401003036-ulh4f7v","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401003036-ulh4f7v","updated":"20240401003036"},"Children":[{"ID":"20240401003036-xdwzhbx","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401003036-xdwzhbx","updated":"20240401003036"},"Children":[{"ID":"20240401003036-596sayi","Type":"NodeParagraph","Properties":{"id":"20240401003036-596sayi","updated":"20240401003036"},"Children":[{"Type":"NodeText","Data":"每个线程都成为一个独立的调度单元，使用内核提供的线程调度功能及处理器映射，可以完成线程的切换，并将线程的任务映射到其他处理器上，充分利用多核处理器的优势，实现真正的并行。"}]}]}]},{"ID":"20240401003036-hbvamp9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240401003036-hbvamp9","updated":"20240401003041"},"Children":[{"Type":"NodeText","Data":"缺点"}]},{"ID":"20240401003049-ae8jsgx","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401003049-ae8jsgx","updated":"20240401003049"},"Children":[{"ID":"20240401003049-6oophbw","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401003049-6oophbw","updated":"20240401003049"},"Children":[{"ID":"20240401003049-cdrkrom","Type":"NodeParagraph","Properties":{"id":"20240401003049-cdrkrom","updated":"20240401003049"},"Children":[{"Type":"NodeText","Data":"每创建一个用户级线程都需要创建一个内核级线程与其对应，因此需要消耗一定的内核资源,而内核资源是有限的，所以能创建的线程数量也是有限的。"}]}]},{"ID":"20240401003049-mfhv4ji","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401003049-mfhv4ji","updated":"20240401003049"},"Children":[{"ID":"20240401003049-eeg0s3y","Type":"NodeParagraph","Properties":{"id":"20240401003049-eeg0s3y","updated":"20240401003049"},"Children":[{"Type":"NodeText","Data":"模态切换频繁，各种线程操作，如创建、析构及同步，都需要进行系统调用，需要频繁的在用户态和内核态之间切换，开销大。"}]}]}]},{"ID":"20240401003058-jld81ro","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401003058-jld81ro","updated":"20240401003058"},"Children":[{"Type":"NodeText","Data":"使用用户线程加轻量级进程混合实现（多对多模型 M:N）"}]},{"ID":"20240401003121-bk5xpo9","Type":"NodeParagraph","Properties":{"id":"20240401003121-bk5xpo9","updated":"20240401003122"},"Children":[{"Type":"NodeText","Data":"内核线程和用户线程的数量比为 M : N，这种模型需要内核线程调度器和用户空间线程调度器相互操作，本质上是多个线程被映射到了多个内核线程。"}]},{"ID":"20240401003142-s113ket","Type":"NodeParagraph","Properties":{"id":"20240401003142-s113ket","updated":"20240401003142"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401003142-p91bdkn.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401003144-pcx464n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401003144-pcx464n","updated":"20240401003213"},"Children":[{"Type":"NodeText","Data":"综合了前面两种模型的优点:"}]},{"ID":"20240401003224-ouvbzh7","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401003224-ouvbzh7","updated":"20240401003224"},"Children":[{"ID":"20240401003224-w3ql4fo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401003224-w3ql4fo","updated":"20240401003224"},"Children":[{"ID":"20240401003224-ocon9if","Type":"NodeParagraph","Properties":{"id":"20240401003224-ocon9if","updated":"20240401003224"},"Children":[{"Type":"NodeText","Data":"用户线程的创建、切换、析构及同步依然发生在用户空间，能创建数量更多的线程，支持更大规模的并发。"}]}]},{"ID":"20240401003224-0lt44ey","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401003224-0lt44ey","updated":"20240401003224"},"Children":[{"ID":"20240401003224-x3kipvz","Type":"NodeParagraph","Properties":{"id":"20240401003224-x3kipvz","updated":"20240401003224"},"Children":[{"Type":"NodeText","Data":"大部分的线程上下文切换都发生在用户空间，减少了模态切换带来的开销。"}]}]},{"ID":"20240401003224-0luhl4k","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240401003224-0luhl4k","updated":"20240401003224"},"Children":[{"ID":"20240401003224-61kv0rp","Type":"NodeParagraph","Properties":{"id":"20240401003224-61kv0rp","updated":"20240401003224"},"Children":[{"Type":"NodeText","Data":"可以使用内核提供的线程调度功能及处理器映射，充分利用多核处理器的优势，实现真正的并行，并降低了整个进程被完全阻塞的风险"}]}]}]},{"ID":"20240401003224-3u0fo0d","Type":"NodeParagraph","Properties":{"id":"20240401003224-3u0fo0d","updated":"20240401003224"},"Children":[{"Type":"NodeText","Data":"java 使用 1:1 模型，而 golang 使用 M:N 模型"}]},{"ID":"20240401003359-wdclmum","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401003359-wdclmum","updated":"20240401003413"},"Children":[{"Type":"NodeText","Data":"效率"}]},{"ID":"20240401003425-5qltd4w","Type":"NodeParagraph","Properties":{"id":"20240401003425-5qltd4w","updated":"20240401003425"},"Children":[{"Type":"NodeText","Data":"java-go-rust 性能对比： "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn/?target=https%3A%2F%2Ftonybai.com%2F2020%2F05%2F01%2Fcomparison-between-java-go-and-rust%2F","TextMarkATitle":"https://tonybai.com/2020/05/01/comparison-between-java-go-and-rust/","TextMarkTextContent":"tonybai.com/2020/05/01/…"}]},{"ID":"20240401003425-qcs62xf","Type":"NodeParagraph","Properties":{"id":"20240401003425-qcs62xf","updated":"20240401003425"},"Children":[{"Type":"NodeText","Data":"  web 框架性能测试榜单： "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn/?target=https%3A%2F%2Fwww.techempower.com%2Fbenchmarks%2F%23section%3Ddata-r21%26hw%3Dph%26test%3Dcomposite","TextMarkATitle":"https://www.techempower.com/benchmarks/#section=data-r21\u0026amp;hw=ph\u0026amp;test=composite","TextMarkTextContent":"www.techempower.com/benchmarks/…"},{"Type":"NodeText","Data":" (参考可以，适合的才是最好的)"}]}]}