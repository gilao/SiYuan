{"ID":"20230727001004-989eda5","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3a1","id":"20230727001004-989eda5","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230727001004-989eda5\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230727001005-rn1w0lc\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230727001007-712h89k\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230727001005-rn1w0lc\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"数据类型,数据转换","title":"21. 十进制、二进制、八进制、十六进制的转换","updated":"20230727001004"},"Children":[{"ID":"20230727001005-rn1w0lc","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727001005-rn1w0lc","updated":"20230727001005"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"21. 十进制、二进制、八进制、十六进制的转换"}]},{"ID":"20230727001006-fmsmy4e","Type":"NodeParagraph","Properties":{"id":"20230727001006-fmsmy4e","updated":"20230727001006"},"Children":[{"Type":"NodeText","Data":"除了使用strconv.ParseInt()和strconv.FormatInt()来进行进制间的转换，我们还可以尝试通过数学运算来自己实现"}]},{"ID":"20230727001007-712h89k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727001007-712h89k","updated":"20230727001007"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package convert\n\nimport (\n   \"fmt\"\n   \"log\"\n   \"math\"\n   \"strconv\"\n   \"strings\"\n)\n\n// Decimal to binary 十进制转二进制\nfunc DecBin(n int64) string {\n   if n \u003c 0 {\n      log.Println(\"Decimal to binary error: the argument must be greater than zero.\")\n      return \"\"\n   }\n   if n == 0 {\n      return \"0\"\n   }\n   s := \"\"\n   for q := n; q \u003e 0; q = q / 2 {\n      m := q % 2\n      s = fmt.Sprintf(\"%v%v\", m, s)\n   }\n   return s\n}\n\n// Decimal to octal\t十进制转八进制\nfunc DecOct(d int64) int64 {\n   if d == 0 {\n      return 0\n   }\n   if d \u003c 0 {\n      log.Println(\"Decimal to octal error: the argument must be greater than zero.\")\n      return -1\n   }\n   s := \"\"\n   for q := d; q \u003e 0; q = q / 8 {\n      m := q % 8\n      s = fmt.Sprintf(\"%v%v\", m, s)\n   }\n   n, err := strconv.Atoi(s)\n   if err != nil {\n      log.Println(\"Decimal to octal error:\", err.Error())\n      return -1\n   }\n   return int64(n)\n}\n\n// Decimal to hexadecimal\t十进制转十六进制\nfunc DecHex(n int64) string {\n   if n \u003c 0 {\n      log.Println(\"Decimal to hexadecimal error: the argument must be greater than zero.\")\n      return \"\"\n   }\n   if n == 0 {\n      return \"0\"\n   }\n   hex := map[int64]int64{10: 65, 11: 66, 12: 67, 13: 68, 14: 69, 15: 70}\n   s := \"\"\n   for q := n; q \u003e 0; q = q / 16 {\n      m := q % 16\n      if m \u003e 9 \u0026\u0026 m \u003c 16 {\n         m = hex[m]\n         s = fmt.Sprintf(\"%v%v\", string(m), s)\n         continue\n      }\n      s = fmt.Sprintf(\"%v%v\", m, s)\n   }\n   return s\n}\n\n// Binary to decimal\t二进制转十进制\nfunc BinDec(b string) (n int64) {\n   s := strings.Split(b, \"\")\n   l := len(s)\n   i := 0\n   d := float64(0)\n   for i = 0; i \u003c l; i++ {\n      f, err := strconv.ParseFloat(s[i], 10)\n      if err != nil {\n         log.Println(\"Binary to decimal error:\", err.Error())\n         return -1\n      }\n      d += f * math.Pow(2, float64(l-i-1))\n   }\n   return int64(d)\n}\n\n// Octal to decimal\t八进制转十进制\nfunc OctDec(o int64) (n int64) {\n   s := strings.Split(strconv.Itoa(int(o)), \"\")\n   l := len(s)\n   i := 0\n   d := float64(0)\n   for i = 0; i \u003c l; i++ {\n      f, err := strconv.ParseFloat(s[i], 10)\n      if err != nil {\n         log.Println(\"Octal to decimal error:\", err.Error())\n         return -1\n      }\n      d += f * math.Pow(8, float64(l-i-1))\n   }\n   return int64(d)\n}\n\n// Hexadecimal to decimal\t十六进制转十进制\nfunc HexDec(h string) (n int64) {\n   s := strings.Split(strings.ToUpper(h), \"\")\n   l := len(s)\n   i := 0\n   d := float64(0)\n   hex := map[string]string{\"A\": \"10\", \"B\": \"11\", \"C\": \"12\", \"D\": \"13\", \"E\": \"14\", \"F\": \"15\"}\n   for i = 0; i \u003c l; i++ {\n      c := s[i]\n      if v, ok := hex[c]; ok {\n         c = v\n      }\n      f, err := strconv.ParseFloat(c, 10)\n      if err != nil {\n         log.Println(\"Hexadecimal to decimal error:\", err.Error())\n         return -1\n      }\n      d += f * math.Pow(16, float64(l-i-1))\n   }\n   return int64(d)\n}\n\n// Octal to binary\t八进制转二进制\nfunc OctBin(o int64) string {\n   d := OctDec(o)\n   if d == -1 {\n      return \"\"\n   }\n   return DecBin(d)\n}\n\n// Hexadecimal to binary\t十六进制转二进制\nfunc HexBin(h string) string {\n   d := HexDec(h)\n   if d == -1 {\n      return \"\"\n   }\n   return DecBin(d)\n}\n\n// Binary to octal\t二进制转八进制\nfunc BinOct(b string) int64 {\n   d := BinDec(b)\n   if d == -1 {\n      return -1\n   }\n   return DecOct(d)\n}\n\n// Binary to hexadecimal\t二进制转十六进制\nfunc BinHex(b string) string {\n   d := BinDec(b)\n   if d == -1 {\n      return \"\"\n   }\n   return DecHex(d)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}