{"ID":"20230727000206-ocrknzy","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f96d","id":"20230727000206-ocrknzy","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230727000206-ocrknzy\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230727000207-chyw567\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230727000348-3co6jjq\u0026quot;,\u0026quot;scrollTop\u0026quot;:200,\u0026quot;focusId\u0026quot;:\u0026quot;20230727000207-chyw567\u0026quot;,\u0026quot;focusStart\u0026quot;:16,\u0026quot;focusEnd\u0026quot;:16\u0026#125;","tags":"Go 内存分配,Go 垃圾回收","title":"16 Go内存分配和垃圾回收机制-","updated":"20230727000206"},"Children":[{"ID":"20230727000207-chyw567","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727000207-chyw567","updated":"20230727000207"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"16 Go内存分配和垃圾回收机制"}]},{"ID":"20230727000208-7557x7h","Type":"NodeParagraph","Properties":{"id":"20230727000208-7557x7h","updated":"20230727000208"},"Children":[{"Type":"NodeText","Data":"https://www.topgoer.cn/docs/gozhuanjia/gozhuanjiachapter044.1-memory_alloc"}]},{"ID":"20230727000209-cj7xsvf","Type":"NodeParagraph","Properties":{"id":"20230727000209-cj7xsvf","updated":"20230727000209"},"Children":[{"Type":"NodeText","Data":"https://zhuanlan.zhihu.com/p/518984548"}]},{"ID":"20230727000210-6ruewcg","Type":"NodeParagraph","Properties":{"id":"20230727000210-6ruewcg","updated":"20230727000210"},"Children":[{"Type":"NodeText","Data":"从Go v1.12版本开始，Go使用了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"非分代的、并发的、基于三色标记清除的垃圾回收器"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727000211-1ni2wud","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000211-1ni2wud","updated":"20230727000211"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Go 内存管理"}]},{"ID":"20230727000212-xngj9e0","Type":"NodeParagraph","Properties":{"id":"20230727000212-xngj9e0","updated":"20230727000212"},"Children":[{"Type":"NodeText","Data":"这里先简单介绍一下 Golang 运行调度。在 Golang 里面有三个基本的概念：G, M, P。"}]},{"ID":"20230727000213-1o9vrsk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000213-1o9vrsk","updated":"20230727000213"},"Children":[{"ID":"20230727000214-m1cgy33","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000214-m1cgy33","updated":"20230727000214"},"Children":[{"ID":"20230727000215-pj7ag04","Type":"NodeParagraph","Properties":{"id":"20230727000215-pj7ag04","updated":"20230727000215"},"Children":[{"Type":"NodeText","Data":"G: Goroutine 执行的上下文环境。"}]}]},{"ID":"20230727000216-rui30kk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000216-rui30kk","updated":"20230727000216"},"Children":[{"ID":"20230727000217-hgiqbeu","Type":"NodeParagraph","Properties":{"id":"20230727000217-hgiqbeu","updated":"20230727000217"},"Children":[{"Type":"NodeText","Data":"M: 操作系统线程。"}]}]},{"ID":"20230727000218-qgwgydg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000218-qgwgydg","updated":"20230727000218"},"Children":[{"ID":"20230727000219-5xsla72","Type":"NodeParagraph","Properties":{"id":"20230727000219-5xsla72","updated":"20230727000219"},"Children":[{"Type":"NodeText","Data":"P: Processer。进程调度的关键，调度器，也可以认为约等于CPU。"}]}]}]},{"ID":"20230727000220-y0sntaj","Type":"NodeParagraph","Properties":{"id":"20230727000220-y0sntaj","updated":"20230727000220"},"Children":[{"Type":"NodeText","Data":"一个 Goroutine 的运行需要G+P+M三部分结合起来。"}]},{"ID":"20230727000221-e7km5zr","Type":"NodeParagraph","Properties":{"id":"20230727000221-e7km5zr","updated":"20230727000221"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"v2-6385e751232a3e75db84ff5ecdfd5551_720w","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"../../Typora picture/v2-6385e751232a3e75db84ff5ecdfd5551_720w.webp","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000222-86rmv3g","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000222-86rmv3g","updated":"20230727000222"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（一）TCMalloc"}]},{"ID":"20230727000223-w4qfmw7","Type":"NodeParagraph","Properties":{"id":"20230727000223-w4qfmw7","updated":"20230727000223"},"Children":[{"Type":"NodeText","Data":"Go将内存划分和分组为页（Page），这和Java的内存结构完全不同，没有分代内存，这样的原因是Go的内存分配器采用了TCMalloc的设计思想："}]},{"ID":"20230727000224-y1zwcul","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000224-y1zwcul","updated":"20230727000224"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.Page"}]},{"ID":"20230727000225-acdogly","Type":"NodeParagraph","Properties":{"id":"20230727000225-acdogly","updated":"20230727000225"},"Children":[{"Type":"NodeText","Data":"与TCMalloc中的Page相同，x64下1个Page的大小是8KB。上图的最下方，1个浅蓝色的长方形代表1个Page。"}]},{"ID":"20230727000226-hxvzp7c","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000226-hxvzp7c","updated":"20230727000226"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2.Span"}]},{"ID":"20230727000227-83kwzce","Type":"NodeParagraph","Properties":{"id":"20230727000227-83kwzce","updated":"20230727000227"},"Children":[{"Type":"NodeText","Data":"与TCMalloc中的Span相同，Span是内存管理的基本单位，代码中为mspan，一组连续的Page组成1个Span，所以上图一组连续的浅蓝色长方形代表的是一组Page组成的1个Span，另外，1个淡紫色长方形为1个Span。"}]},{"ID":"20230727000228-vgy7zf1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000228-vgy7zf1","updated":"20230727000228"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3.mcache"}]},{"ID":"20230727000229-hhivzm7","Type":"NodeParagraph","Properties":{"id":"20230727000229-hhivzm7","updated":"20230727000229"},"Children":[{"Type":"NodeText","Data":"mcache是提供给P（逻辑处理器）的高速缓存，用于存储小对象（对象大小\u003c= 32Kb）。尽管这类似于线程堆栈，但它是堆的一部分，用于动态数据。所有类大小的mcache包含scan和noscan类型mspan。Goroutine可以从mcache没有任何锁的情况下获取内存，因为一次P只能有一个锁G。因此，这更有效。mcache从mcentral需要时请求新的span。"}]},{"ID":"20230727000230-hh6tp31","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000230-hh6tp31","updated":"20230727000230"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"4.mcentral"}]},{"ID":"20230727000231-sxqso5h","Type":"NodeParagraph","Properties":{"id":"20230727000231-sxqso5h","updated":"20230727000231"},"Children":[{"Type":"NodeText","Data":"mcentral与TCMalloc中的CentralCache类似，是所有线程共享的缓存，需要加锁访问，它按Span class对Span分类，串联成链表，当mcache的某个级别Span的内存被分配光时，它会向mcentral申请1个当前级别的Span。每个mcentral包含两个mspanList："}]},{"ID":"20230727000232-p8qnp90","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000232-p8qnp90","updated":"20230727000232"},"Children":[{"ID":"20230727000233-qy2704n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000233-qy2704n","updated":"20230727000233"},"Children":[{"ID":"20230727000234-sf5x8b4","Type":"NodeParagraph","Properties":{"id":"20230727000234-sf5x8b4","updated":"20230727000234"},"Children":[{"Type":"NodeText","Data":"empty：双向span链表，包括没有空闲对象的span或缓存mcache中的span。当此处的span被释放时，它将被移至non-empty span链表。"}]}]},{"ID":"20230727000235-n4zad3u","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000235-n4zad3u","updated":"20230727000235"},"Children":[{"ID":"20230727000236-r3cnu19","Type":"NodeParagraph","Properties":{"id":"20230727000236-r3cnu19","updated":"20230727000236"},"Children":[{"Type":"NodeText","Data":"non-empty：有空闲对象的span双向链表。当从mcentral请求新的span，mcentral将从该链表中获取span并将其移入empty span链表。"}]}]}]},{"ID":"20230727000237-jpi7mjm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000237-jpi7mjm","updated":"20230727000237"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"5.mheap"}]},{"ID":"20230727000238-6sin9r1","Type":"NodeParagraph","Properties":{"id":"20230727000238-6sin9r1","updated":"20230727000238"},"Children":[{"Type":"NodeText","Data":"mheap与TCMalloc中的PageHeap类似，它是堆内存的抽象，也是垃圾回收的重点区域，把从OS申请出的内存页组织成Span，并保存起来。当mcentral的Span不够用时会向mheap申请，mheap的Span不够用时会向OS申请，向OS的内存申请是按页来的，然后把申请来的内存页生成Span组织起来，同样也是需要加锁访问的。"}]},{"ID":"20230727000239-c24xb5u","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000239-c24xb5u","updated":"20230727000239"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"6.栈"}]},{"ID":"20230727000240-zhrstck","Type":"NodeParagraph","Properties":{"id":"20230727000240-zhrstck","updated":"20230727000240"},"Children":[{"Type":"NodeText","Data":"这是栈存储区，每个Goroutine（G）有一个栈。在这里存储了静态数据，包括函数栈帧，静态结构，原生类型值和指向动态结构的指针。这与分配给每个P的mcache不是一回事。"}]},{"ID":"20230727000241-08fl131","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000241-08fl131","updated":"20230727000241"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（二）内存分配"}]},{"ID":"20230727000242-2wmlw5h","Type":"NodeParagraph","Properties":{"id":"20230727000242-2wmlw5h","updated":"20230727000242"},"Children":[{"Type":"NodeText","Data":"Go 中的内存分类并不像TCMalloc那样分成小、中、大对象，但是它的小对象里又细分了一个Tiny对象，Tiny对象指大小在1Byte到16Byte之间并且不包含指针的对象。小对象和大对象只用大小划定，无其他区分。"}]},{"ID":"20230727000243-y1n21uc","Type":"NodeParagraph","Properties":{"id":"20230727000243-y1n21uc","updated":"20230727000243"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"核心思想"},{"Type":"NodeText","Data":"：把内存分为多级管理，降低锁的粒度(只是去mcentral和mheap会申请锁), 以及多种对象大小类型，减少分配产生的内存碎片。"}]},{"ID":"20230727000244-akw83in","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000244-akw83in","updated":"20230727000244"},"Children":[{"ID":"20230727000245-69trvq0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000245-69trvq0","updated":"20230727000245"},"Children":[{"ID":"20230727000246-i1y949m","Type":"NodeParagraph","Properties":{"id":"20230727000246-i1y949m","updated":"20230727000246"},"Children":[{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"微小对象(Tiny)（size\u003c16B）"},{"Type":"NodeMark2CloseMarker","Data":"=="}]}]}]}]},{"ID":"20230727000247-h6sp5jg","Type":"NodeParagraph","Properties":{"id":"20230727000247-h6sp5jg","updated":"20230727000247"},"Children":[{"Type":"NodeText","Data":"使用mcache的微小分配器分配小于16个字节的对象，并且在单个16字节块上可完成多个微小分配。"}]},{"ID":"20230727000248-8q4zynw","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000248-8q4zynw","updated":"20230727000248"},"Children":[{"ID":"20230727000249-eagpmm7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000249-eagpmm7","updated":"20230727000249"},"Children":[{"ID":"20230727000250-jsoykxt","Type":"NodeParagraph","Properties":{"id":"20230727000250-jsoykxt","updated":"20230727000250"},"Children":[{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"小对象（尺寸16B〜32KB）"},{"Type":"NodeMark2CloseMarker","Data":"=="}]}]}]}]},{"ID":"20230727000251-l1gafm4","Type":"NodeParagraph","Properties":{"id":"20230727000251-l1gafm4","updated":"20230727000251"},"Children":[{"Type":"NodeText","Data":"大小在16个字节和32k字节之间的对象被分配在G运行所在的P的mcache的对应的mspan size class上。"}]},{"ID":"20230727000252-6xpdhcu","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000252-6xpdhcu","updated":"20230727000252"},"Children":[{"ID":"20230727000253-zl3wd19","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000253-zl3wd19","updated":"20230727000253"},"Children":[{"ID":"20230727000254-der1ywl","Type":"NodeParagraph","Properties":{"id":"20230727000254-der1ywl","updated":"20230727000254"},"Children":[{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"大对象（大小\u003e32KB）"},{"Type":"NodeMark2CloseMarker","Data":"=="}]}]}]}]},{"ID":"20230727000255-f22rlzx","Type":"NodeParagraph","Properties":{"id":"20230727000255-f22rlzx","updated":"20230727000255"},"Children":[{"Type":"NodeText","Data":"大于32 KB的对象直接分配在mheap的相应大小类上(size class)。"}]},{"ID":"20230727000256-ii2efb2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000256-ii2efb2","updated":"20230727000256"},"Children":[{"ID":"20230727000257-qq6mr79","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000257-qq6mr79","updated":"20230727000257"},"Children":[{"ID":"20230727000258-rb6qrg4","Type":"NodeParagraph","Properties":{"id":"20230727000258-rb6qrg4","updated":"20230727000258"},"Children":[{"Type":"NodeText","Data":"如果mheap为空或没有足够大的页面满足分配请求，则它将从操作系统中分配一组新的页（至少1MB）。"}]}]},{"ID":"20230727000259-3czbp12","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000259-3czbp12","updated":"20230727000259"},"Children":[{"ID":"20230727000260-utercbr","Type":"NodeParagraph","Properties":{"id":"20230727000260-utercbr","updated":"20230727000260"},"Children":[{"Type":"NodeText","Data":"如果对应的大小规格在mcache中没有可用的块，则向mcentral申请。"}]}]},{"ID":"20230727000261-qxliw5w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000261-qxliw5w","updated":"20230727000261"},"Children":[{"ID":"20230727000262-77780yv","Type":"NodeParagraph","Properties":{"id":"20230727000262-77780yv","updated":"20230727000262"},"Children":[{"Type":"NodeText","Data":"如果mcentral中没有可用的块，则向mheap申请，并根据BestFit 算法找到最合适的mspan。如果申请到的mspan超出申请大小，将会根据需求进行切分，以返回用户所需的页数。剩余的页构成一个新的mspan放回mheap的空闲列表。"}]}]},{"ID":"20230727000263-0vdip32","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000263-0vdip32","updated":"20230727000263"},"Children":[{"ID":"20230727000264-f3293xx","Type":"NodeParagraph","Properties":{"id":"20230727000264-f3293xx","updated":"20230727000264"},"Children":[{"Type":"NodeText","Data":"如果mheap中没有可用span，则向操作系统申请一系列新的页（最小 1MB）。Go 会在操作系统分配超大的页（称作arena）。分配一大批页会减少和操作系统通信的成本。"}]}]}]},{"ID":"20230727000265-9a3ppgi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000265-9a3ppgi","updated":"20230727000265"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（三）内存回收"}]},{"ID":"20230727000266-c93f7uo","Type":"NodeParagraph","Properties":{"id":"20230727000266-c93f7uo","updated":"20230727000266"},"Children":[{"Type":"NodeText","Data":"go内存会分成"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"堆区（Heap）"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"和"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"栈区（Stack）"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"两个部分，"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"程序在运行期间可以主动从堆区申请内存空间"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，这些"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"内存由内存分配器分配并由垃圾收集器负责回收"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"。栈区的内存由编译器自动进行分配和释放，"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"栈区中存储着函数的参数以及局部变量"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，它们"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"会随着函数的创建而创建，函数的返回而销毁"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"。如果只申请和分配内存，内存终将枯竭。"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"Go使用垃圾回收收集不再使用的span，把span释放交给mheap，mheap对span进行span的合并，把合并后的span加入scav树中，等待再分配内存时，由mheap进行内存再分配"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"。"},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"因此，Go堆是Go垃圾收集器管理的主要区域"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727000267-y8zkft6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000267-y8zkft6","updated":"20230727000267"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Golang GC 发展历史"}]},{"ID":"20230727000268-44agc1m","Type":"NodeParagraph","Properties":{"id":"20230727000268-44agc1m","updated":"20230727000268"},"Children":[{"Type":"NodeText","Data":"v1.0 — 完全串行的标记和清除过程，需要暂停整个程序；"}]},{"ID":"20230727000269-va3pgo7","Type":"NodeParagraph","Properties":{"id":"20230727000269-va3pgo7","updated":"20230727000269"},"Children":[{"Type":"NodeText","Data":"v1.1 — 在多核主机并行执行垃圾收集的标记和清除阶段；"}]},{"ID":"20230727000270-ar019ji","Type":"NodeParagraph","Properties":{"id":"20230727000270-ar019ji","updated":"20230727000270"},"Children":[{"Type":"NodeText","Data":"v1.3 — 运行时"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"基于只有指针类型的值包含指针"},{"Type":"NodeText","Data":"的假设增加了对栈内存的精确扫描支持，实现了真正精确的垃圾收集；将unsafe.Pointer类型转换成整数类型的值认定为不合法的，可能会造成悬挂指针等严重问题；"}]},{"ID":"20230727000271-g2gzkrw","Type":"NodeParagraph","Properties":{"id":"20230727000271-g2gzkrw","updated":"20230727000271"},"Children":[{"Type":"NodeText","Data":"v1.5 — 实现了基于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"三色标记清扫的并发"},{"Type":"NodeText","Data":"垃圾收集器："}]},{"ID":"20230727000272-tist3ru","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000272-tist3ru","updated":"20230727000272"},"Children":[{"ID":"20230727000273-wsxji80","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000273-wsxji80","updated":"20230727000273"},"Children":[{"ID":"20230727000274-4as97ih","Type":"NodeParagraph","Properties":{"id":"20230727000274-4as97ih","updated":"20230727000274"},"Children":[{"Type":"NodeText","Data":"大幅度降低垃圾收集的延迟从几百 ms 降低至 10ms 以下；"}]}]},{"ID":"20230727000275-ixcabzy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000275-ixcabzy","updated":"20230727000275"},"Children":[{"ID":"20230727000276-lyqy6a1","Type":"NodeParagraph","Properties":{"id":"20230727000276-lyqy6a1","updated":"20230727000276"},"Children":[{"Type":"NodeText","Data":"计算垃圾收集启动的合适时间并通过并发加速垃圾收集的过程；"}]}]}]},{"ID":"20230727000277-lrnlj8l","Type":"NodeParagraph","Properties":{"id":"20230727000277-lrnlj8l","updated":"20230727000277"},"Children":[{"Type":"NodeText","Data":"v1.6 — 实现了去中心化的垃圾收集协调器："}]},{"ID":"20230727000278-pn6fucm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000278-pn6fucm","updated":"20230727000278"},"Children":[{"ID":"20230727000279-26ibwun","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000279-26ibwun","updated":"20230727000279"},"Children":[{"ID":"20230727000280-e6312o4","Type":"NodeParagraph","Properties":{"id":"20230727000280-e6312o4","updated":"20230727000280"},"Children":[{"Type":"NodeText","Data":"基于显式的状态机使得任意Goroutine都能触发垃圾收集的状态迁移；"}]}]},{"ID":"20230727000281-mglnr7z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000281-mglnr7z","updated":"20230727000281"},"Children":[{"ID":"20230727000282-x3zg8jb","Type":"NodeParagraph","Properties":{"id":"20230727000282-x3zg8jb","updated":"20230727000282"},"Children":[{"Type":"NodeText","Data":"使用密集的位图替代空闲链表表示的堆内存，降低清除阶段的CPU占用;"}]}]}]},{"ID":"20230727000283-ktebvs9","Type":"NodeParagraph","Properties":{"id":"20230727000283-ktebvs9","updated":"20230727000283"},"Children":[{"Type":"NodeText","Data":"v1.7 — 通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"并行栈收缩"},{"Type":"NodeText","Data":"将垃圾收集的时间缩短至2ms以内；"}]},{"ID":"20230727000284-v10xqvg","Type":"NodeParagraph","Properties":{"id":"20230727000284-v10xqvg","updated":"20230727000284"},"Children":[{"Type":"NodeText","Data":"v1.8 — 使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"混合写屏障"},{"Type":"NodeText","Data":"将垃圾收集的时间缩短至0.5ms以内；"}]},{"ID":"20230727000285-nlilvz1","Type":"NodeParagraph","Properties":{"id":"20230727000285-nlilvz1","updated":"20230727000285"},"Children":[{"Type":"NodeText","Data":"v1.9 — 彻底移除暂停程序的重新扫描栈的过程；"}]},{"ID":"20230727000286-ws6qkge","Type":"NodeParagraph","Properties":{"id":"20230727000286-ws6qkge","updated":"20230727000286"},"Children":[{"Type":"NodeText","Data":"v1.10 — 更新了垃圾收集调频器（Pacer）的实现，分离软硬堆大小的目标；"}]},{"ID":"20230727000287-6c3h1kl","Type":"NodeParagraph","Properties":{"id":"20230727000287-6c3h1kl","updated":"20230727000287"},"Children":[{"Type":"NodeText","Data":"v1.12 — 使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"新的标记终止算法"},{"Type":"NodeText","Data":"简化垃圾收集器的几个阶段；"}]},{"ID":"20230727000288-zjktgnx","Type":"NodeParagraph","Properties":{"id":"20230727000288-zjktgnx","updated":"20230727000288"},"Children":[{"Type":"NodeText","Data":"v1.13 — 通过新的 Scavenger 解决瞬时内存占用过高的应用程序向操作系统归还内存的问题；"}]},{"ID":"20230727000289-xkhzhaj","Type":"NodeParagraph","Properties":{"id":"20230727000289-xkhzhaj","updated":"20230727000289"},"Children":[{"Type":"NodeText","Data":"v1.14 — 使用全新的页分配器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"优化内存分配的速度"},{"Type":"NodeText","Data":"；"}]},{"ID":"20230727000290-b1i8hmm","Type":"NodeParagraph","Properties":{"id":"20230727000290-b1i8hmm","updated":"20230727000290"},"Children":[{"Type":"NodeText","Data":"v1.15 — 改进编译器和运行时内部的CL 226367，它使编译器可以将更多的x86寄存器用于垃圾收集器的写屏障调用；"}]},{"ID":"20230727000291-7t7ya74","Type":"NodeParagraph","Properties":{"id":"20230727000291-7t7ya74","updated":"20230727000291"},"Children":[{"Type":"NodeText","Data":"v1.16 — Go runtime默认使用MADV_DONTNEED更积极的将不用的内存释放给OS。"}]},{"ID":"20230727000292-jz8r5ws","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000292-jz8r5ws","updated":"20230727000292"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"垃圾回收机制"}]},{"ID":"20230727000293-bpk6nz9","Type":"NodeParagraph","Properties":{"id":"20230727000293-bpk6nz9","updated":"20230727000293"},"Children":[{"Type":"NodeText","Data":"程序创建对象等引用类型实体时会在虚拟内存中分配给它们一块内存空间，如果该内存空间不再被任何引用变量引用时就成为需要被回收的垃圾。操作系统会记录一个进程运行时的所占用的内存、CPU和寄存器等资源，当进程结束后便由操作系统能够自动回收资源。但是对于一个运行较长时间的程序，如果使用完内存资源后没有及时释放就会造成内存泄漏甚至系统错误。"}]},{"ID":"20230727000294-jpdnjxt","Type":"NodeParagraph","Properties":{"id":"20230727000294-jpdnjxt","updated":"20230727000294"},"Children":[{"Type":"NodeText","Data":"如果由于异常或者其他原因导致某个函数运行结束后没有释放其内存，且该函数被频繁调用，那么很容易占用所有系统内存从而导致程序崩溃，如果泄漏的是系统资源的话甚至还会导致系统崩溃。另一方面如果我们在不该释放内存的时候释放内存，那么仍然在使用这块内存的指针就会变成野指针"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"wild pointer"},{"Type":"NodeText","Data":"，使用该指针对内存进行读写是未定义的行为。"}]},{"ID":"20230727000295-tfqs2ub","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000295-tfqs2ub","updated":"20230727000295"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. 垃圾回收过程"}]},{"ID":"20230727000296-od48cj6","Type":"NodeParagraph","Properties":{"id":"20230727000296-od48cj6","updated":"20230727000296"},"Children":[{"Type":"NodeText","Data":"用户程序"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"通过内存分配器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Allocator"},{"Type":"NodeText","Data":"在堆"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Heap"},{"Type":"NodeText","Data":"上申请内存，垃圾回收器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Collector"},{"Type":"NodeText","Data":"会定时清理堆上的内存。内存分配器如何申请内存我们已经在前面"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Golang"},{"Type":"NodeText","Data":"内存管理介绍过了，本篇主要介绍的是垃圾回收器如何清理内存。"}]},{"ID":"20230727000297-sw98x8i","Type":"NodeParagraph","Properties":{"id":"20230727000297-sw98x8i","updated":"20230727000297"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619213210848","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619213210848.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000298-cl1w8pf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000298-cl1w8pf","updated":"20230727000298"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 自动垃圾回收与手动垃圾回收"}]},{"ID":"20230727000299-0jub2jm","Type":"NodeParagraph","Properties":{"id":"20230727000299-0jub2jm","updated":"20230727000299"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"语言这种较为传统的语言通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"malloc"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"free"},{"Type":"NodeText","Data":"手动向操作系统申请和释放内存，这种自由管理内存的方式给予程序员极大的自由度，但是也相应地提高了对程序员的要求。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"语言的内存分配和回收方式主要包括三种："}]},{"ID":"20230727000300-5y31my4","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000300-5y31my4","updated":"20230727000300"},"Children":[{"ID":"20230727000301-qdbh9e4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000301-qdbh9e4","updated":"20230727000301"},"Children":[{"ID":"20230727000302-xvzoz13","Type":"NodeParagraph","Properties":{"id":"20230727000302-xvzoz13","updated":"20230727000302"},"Children":[{"Type":"NodeText","Data":"函数体内的局部变量：在栈上创建，函数作用域结束后自动释放内存"}]}]},{"ID":"20230727000303-3c9jukk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000303-3c9jukk","updated":"20230727000303"},"Children":[{"ID":"20230727000304-yrl99w5","Type":"NodeParagraph","Properties":{"id":"20230727000304-yrl99w5","updated":"20230727000304"},"Children":[{"Type":"NodeText","Data":"静态变量：在静态存储区域上分配内存，整个程序运行结束后释放（全局生命周期）"}]}]},{"ID":"20230727000305-evrzeqc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000305-evrzeqc","updated":"20230727000305"},"Children":[{"ID":"20230727000306-wzgy8xd","Type":"NodeParagraph","Properties":{"id":"20230727000306-wzgy8xd","updated":"20230727000306"},"Children":[{"Type":"NodeText","Data":"动态分配内存的变量：在堆上分配，通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"malloc"},{"Type":"NodeText","Data":"申请，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"free"},{"Type":"NodeText","Data":"释放"}]}]}]},{"ID":"20230727000307-2hax1m0","Type":"NodeParagraph","Properties":{"id":"20230727000307-2hax1m0","updated":"20230727000307"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C++"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Rust"},{"Type":"NodeText","Data":"等较早的语言采用的是手动垃圾回收，需要程序员通过向操作系统申请和释放内存来手动管理内存，程序员极容易忘记释放自己申请的内存，对于一个长期运行的程序往往是一个致命的缺点。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Python"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Java"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Golang"},{"Type":"NodeText","Data":"等较新的语言"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"采取的都是自动垃圾回收方式"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，程序员只需要负责申请内存，垃圾回收器会周期性释放结束生命周期的变量所占用的内存空间。"}]},{"ID":"20230727000308-l3zuemk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000308-l3zuemk","updated":"20230727000308"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 垃圾回收目标"}]},{"ID":"20230727000309-s4mbg5t","Type":"NodeParagraph","Properties":{"id":"20230727000309-s4mbg5t","updated":"20230727000309"},"Children":[{"Type":"NodeText","Data":"垃圾回收器主要包括三个目标："}]},{"ID":"20230727000310-do81ywn","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000310-do81ywn","updated":"20230727000310"},"Children":[{"ID":"20230727000311-y5vef7x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000311-y5vef7x","updated":"20230727000311"},"Children":[{"ID":"20230727000312-z6kamvo","Type":"NodeParagraph","Properties":{"id":"20230727000312-z6kamvo","updated":"20230727000312"},"Children":[{"Type":"NodeText","Data":"无内存泄漏：垃圾回收器最基本的目标就是减少防止程序员未及时释放导致的内存泄漏，垃圾回收器会识别并清理内存中的垃圾"}]}]},{"ID":"20230727000313-pg87qwb","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000313-pg87qwb","updated":"20230727000313"},"Children":[{"ID":"20230727000314-skhcf14","Type":"NodeParagraph","Properties":{"id":"20230727000314-skhcf14","updated":"20230727000314"},"Children":[{"Type":"NodeText","Data":"自动回收无用内存：垃圾回收器作为独立的子任务，不需要程序员显式调用即可自动清理内存垃圾"}]}]},{"ID":"20230727000315-aww4yxo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000315-aww4yxo","updated":"20230727000315"},"Children":[{"ID":"20230727000316-9csegv9","Type":"NodeParagraph","Properties":{"id":"20230727000316-9csegv9","updated":"20230727000316"},"Children":[{"Type":"NodeText","Data":"内存整理：如果只是简单回收无用内存，那么堆上的内存空间会存在较多碎片而无法满足分配较大对象的需求，因此垃圾回收器需要重整内存空间，提高内存利用率"}]}]}]},{"ID":"20230727000317-mml9mu9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000317-mml9mu9","updated":"20230727000317"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. 垃圾回收的常见方法"}]},{"ID":"20230727000318-y5cmjam","Type":"NodeBlockquote","Properties":{"id":"20230727000318-y5cmjam","updated":"20230727000318"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000319-ujjg848","Type":"NodeParagraph","Properties":{"id":"20230727000319-ujjg848","updated":"20230727000319"},"Children":[{"Type":"NodeText","Data":"根据判断对象是否存活的方法，可以简单将 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"算法分为“引用计数式”垃圾回收和“追踪回收式”垃圾回收。前者根据每个对象的引用计数器是否为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"来判断该对象是否为未引用的垃圾对象，后者先判断哪些对象存活，然后将其余的所有对象作为垃圾进行回收。追踪回收本身包括标记-清除 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark-Sweep"},{"Type":"NodeText","Data":"、标记-复制 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark-Copy"},{"Type":"NodeText","Data":"和标记-整理 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark-Compact"},{"Type":"NodeText","Data":"三种回收算法。"}]}]},{"ID":"20230727000320-vesyl64","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000320-vesyl64","updated":"20230727000320"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. 引用计数"}]},{"ID":"20230727000321-t6xy3dm","Type":"NodeParagraph","Properties":{"id":"20230727000321-t6xy3dm","updated":"20230727000321"},"Children":[{"Type":"NodeText","Data":"引用计数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Reference counting"},{"Type":"NodeText","Data":"会为每个对象维护一个计数器，当该对象被其他对象引用时加一，引用失效时减一，当引用次数归零后即可回收对象。使用这类"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"方法的语言包括"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"python"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"php"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"objective-C"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C++"},{"Type":"NodeText","Data":"标准库中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"std::shared_ptr"},{"Type":"NodeText","Data":"等。"}]},{"ID":"20230727000322-ath4vpj","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000322-ath4vpj","updated":"20230727000322"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"引用技术的优点："}]},{"ID":"20230727000323-duk564w","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000323-duk564w","updated":"20230727000323"},"Children":[{"ID":"20230727000324-biua7cj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000324-biua7cj","updated":"20230727000324"},"Children":[{"ID":"20230727000325-lmmorj7","Type":"NodeParagraph","Properties":{"id":"20230727000325-lmmorj7","updated":"20230727000325"},"Children":[{"Type":"NodeText","Data":"原理和实现都比较简单"}]}]},{"ID":"20230727000326-0f4c1qs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000326-0f4c1qs","updated":"20230727000326"},"Children":[{"ID":"20230727000327-hi3w7eb","Type":"NodeParagraph","Properties":{"id":"20230727000327-hi3w7eb","updated":"20230727000327"},"Children":[{"Type":"NodeText","Data":"回收的即时性：当对象的引用技术为0时立即回收，不像其他GC机制需要等待特定时机再回收，提高了内存的利用率"}]}]},{"ID":"20230727000328-3vo992m","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000328-3vo992m","updated":"20230727000328"},"Children":[{"ID":"20230727000329-4sl4oqt","Type":"NodeParagraph","Properties":{"id":"20230727000329-4sl4oqt","updated":"20230727000329"},"Children":[{"Type":"NodeText","Data":"不需要暂停应用即可完成回收"}]}]}]},{"ID":"20230727000330-llzzsnv","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000330-llzzsnv","updated":"20230727000330"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点"}]},{"ID":"20230727000331-6yifztr","Type":"NodeList","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000331-6yifztr","updated":"20230727000331"},"Children":[{"ID":"20230727000332-unmnu80","Type":"NodeListItem","Data":"-","ListData":{"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000332-unmnu80","updated":"20230727000332"},"Children":[{"ID":"20230727000333-7o73cl5","Type":"NodeParagraph","Properties":{"id":"20230727000333-7o73cl5","updated":"20230727000333"},"Children":[{"Type":"NodeText","Data":"无法解决循环引用的回收问题：当"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ObjA"},{"Type":"NodeText","Data":"引用了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ObjB"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ObjB"},{"Type":"NodeText","Data":"也引用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ObjA"},{"Type":"NodeText","Data":"时，这两个对象的引用次数使用大于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"，从而占用的内存无法被回收"}]}]},{"ID":"20230727000334-cblh9sr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000334-cblh9sr","updated":"20230727000334"},"Children":[{"ID":"20230727000335-yi82y4n","Type":"NodeParagraph","Properties":{"id":"20230727000335-yi82y4n","updated":"20230727000335"},"Children":[{"Type":"NodeText","Data":"时间和空间成本较高：一方面是因为每个对象需要额外的空间存储引用计数器变量，另一方面是在栈上的赋值时修改引用次数时间成本较高（原本只需要修改寄存器中的值，现在计数器需要不断更新因此不是只读的，需要额外的原子操作来保证线程安全）"}]}]},{"ID":"20230727000336-fbllbxg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000336-fbllbxg","updated":"20230727000336"},"Children":[{"ID":"20230727000337-69czsg6","Type":"NodeParagraph","Properties":{"id":"20230727000337-69czsg6","updated":"20230727000337"},"Children":[{"Type":"NodeText","Data":"引用计数是一种摊销算法，会将内存的回收分摊到整个程序的运行过程，但是当销毁一个很大的树形结构时无法保证响应时间"}]}]}]},{"ID":"20230727000338-nzfowgp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000338-nzfowgp","updated":"20230727000338"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 追踪基础：可达性分析算法"}]},{"ID":"20230727000339-k2rj7nv","Type":"NodeParagraph","Properties":{"id":"20230727000339-k2rj7nv","updated":"20230727000339"},"Children":[{"Type":"NodeText","Data":"尽管前面提到的三种追踪式垃圾回收算法实现起来各不相同，但是第一步都是通过可达性分析算法标记"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark"},{"Type":"NodeText","Data":"对象是否“可达”。一般可到达的对象主要包括两类："}]},{"ID":"20230727000340-jff99hp","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000340-jff99hp","updated":"20230727000340"},"Children":[{"ID":"20230727000341-f3oaa6w","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000341-f3oaa6w","updated":"20230727000341"},"Children":[{"ID":"20230727000342-cukpht8","Type":"NodeParagraph","Properties":{"id":"20230727000342-cukpht8","updated":"20230727000342"},"Children":[{"Type":"NodeText","Data":"GC Root对象：包括全局对象、栈上的对象（函数参数与内部变量）"}]}]},{"ID":"20230727000343-rcqqhtl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000343-rcqqhtl","updated":"20230727000343"},"Children":[{"ID":"20230727000344-q8pdtot","Type":"NodeParagraph","Properties":{"id":"20230727000344-q8pdtot","updated":"20230727000344"},"Children":[{"Type":"NodeText","Data":"与GC Root对象通过引用链Reference Chain相连的对象"}]}]}]},{"ID":"20230727000345-tgx5irv","Type":"NodeParagraph","Properties":{"id":"20230727000345-tgx5irv","updated":"20230727000345"},"Children":[{"Type":"NodeText","Data":"对于“不可达”的对象，我们可以认为该对象为垃圾对象并回收对应的内存空间。"}]},{"ID":"20230727000346-sz5pt6j","Type":"NodeParagraph","Properties":{"id":"20230727000346-sz5pt6j","updated":"20230727000346"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619215746210","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619215746210.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000347-501wcin","Type":"NodeParagraph","Properties":{"id":"20230727000347-501wcin","updated":"20230727000347"},"Children":[{"Type":"NodeText","Data":"可达性算法中判断对象是否“可达”依赖于“引用”的定义，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"java"},{"Type":"NodeText","Data":"中的引用从强到弱可分为四类，不同的引用类型可以满足多样化的场景："}]},{"ID":"20230727000348-3co6jjq","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000348-3co6jjq","updated":"20230727000348"},"Children":[{"ID":"20230727000349-qmzpjm9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000349-qmzpjm9","updated":"20230727000349"},"Children":[{"ID":"20230727000350-htqont7","Type":"NodeParagraph","Properties":{"id":"20230727000350-htqont7","updated":"20230727000350"},"Children":[{"Type":"NodeText","Data":"强引用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Strong Reference"},{"Type":"NodeText","Data":"：使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Object obj = new Object()"},{"Type":"NodeText","Data":"定义的引用，这类对象无论在什么情况下都不会被垃圾回收机制清理掉"}]}]},{"ID":"20230727000351-8mde9v4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000351-8mde9v4","updated":"20230727000351"},"Children":[{"ID":"20230727000352-jc3uyzq","Type":"NodeParagraph","Properties":{"id":"20230727000352-jc3uyzq","updated":"20230727000352"},"Children":[{"Type":"NodeText","Data":"软引用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Soft Reference"},{"Type":"NodeText","Data":"：用于描述有用但非必需的对象，只有在内存不足的时候才会回收该对象，适合实现内存敏感的高速缓存（网页缓存和图片缓存等）；软引用可以和引用队列"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReferenceQueue"},{"Type":"NodeText","Data":"一起使用，当软引用所引用的对象被回收时"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"JVM"},{"Type":"NodeText","Data":"会把这个软引用加入到与之关联的引用队列，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"线程会在抛出"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"OOM"},{"Type":"NodeText","Data":"错误前根据引用队列来回收长时间闲置不用的软引用对象"}]}]},{"ID":"20230727000353-mqfda5j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000353-mqfda5j","updated":"20230727000353"},"Children":[{"ID":"20230727000354-zm14bri","Type":"NodeParagraph","Properties":{"id":"20230727000354-zm14bri","updated":"20230727000354"},"Children":[{"Type":"NodeText","Data":"弱引用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Weak Reference"},{"Type":"NodeText","Data":"：用于描述非必需对象，在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"JVM"},{"Type":"NodeText","Data":"进行垃圾回收时会直接回收被弱引用关联的对象，同软引用相比有更短的生命周期"}]}]},{"ID":"20230727000355-qzu59g9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000355-qzu59g9","updated":"20230727000355"},"Children":[{"ID":"20230727000356-gi830br","Type":"NodeParagraph","Properties":{"id":"20230727000356-gi830br","updated":"20230727000356"},"Children":[{"Type":"NodeText","Data":"虚引用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Phantom Reference"},{"Type":"NodeText","Data":"：一个对象与虚引用关联时在任何时候都可以被垃圾回收器回收，因此并不会影响该对象的生命周期，主要用于跟踪对象被"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"回收的活动；虚引用必须和引用队列联合使用，当回收一个对象时如果发现它还有虚引用，就会在回收对象的内存之前将这个虚引用加入到与之关联的引用队列中，这样程序可以通过判断引用队列是否加入虚引用来判断被引用的对象是否将进行垃圾回收"}]}]}]},{"ID":"20230727000357-pxcvsge","Type":"NodeParagraph","Properties":{"id":"20230727000357-pxcvsge","updated":"20230727000357"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\12b1fef7af0bd34401cf41c646f1aae2.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000358-hptyu3g","Type":"NodeParagraph","Properties":{"id":"20230727000358-hptyu3g","updated":"20230727000358"},"Children":[{"Type":"NodeText","Data":"同引用计数法相比，"}]},{"ID":"20230727000359-edmf5sn","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000359-edmf5sn","updated":"20230727000359"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"追踪式算法优点："}]},{"ID":"20230727000360-wglwt7n","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000360-wglwt7n","updated":"20230727000360"},"Children":[{"ID":"20230727000361-9tvsjy7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000361-9tvsjy7","updated":"20230727000361"},"Children":[{"ID":"20230727000362-fvlbuw0","Type":"NodeParagraph","Properties":{"id":"20230727000362-fvlbuw0","updated":"20230727000362"},"Children":[{"Type":"NodeText","Data":"解决了循环引用对象的回收问题"}]}]},{"ID":"20230727000363-s77az3h","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000363-s77az3h","updated":"20230727000363"},"Children":[{"ID":"20230727000364-yybn3z0","Type":"NodeParagraph","Properties":{"id":"20230727000364-yybn3z0","updated":"20230727000364"},"Children":[{"Type":"NodeText","Data":"占用空间更少"}]}]}]},{"ID":"20230727000365-clpeey5","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000365-clpeey5","updated":"20230727000365"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点包括："}]},{"ID":"20230727000366-5zqhki8","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000366-5zqhki8","updated":"20230727000366"},"Children":[{"ID":"20230727000367-x2x3jfs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000367-x2x3jfs","updated":"20230727000367"},"Children":[{"ID":"20230727000368-wm2hdu3","Type":"NodeParagraph","Properties":{"id":"20230727000368-wm2hdu3","updated":"20230727000368"},"Children":[{"Type":"NodeText","Data":"同引用计数相比无法立刻识别出垃圾对象，需要依赖"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"线程"}]}]},{"ID":"20230727000369-q8xoaye","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000369-q8xoaye","updated":"20230727000369"},"Children":[{"ID":"20230727000370-qfjefuj","Type":"NodeParagraph","Properties":{"id":"20230727000370-qfjefuj","updated":"20230727000370"},"Children":[{"Type":"NodeText","Data":"算法在标记时必须暂停整个程序，即"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Stop The World, STW"},{"Type":"NodeText","Data":"，否则其他线程的代码会修改对象状态从而回收不该回收的对象"}]}]}]},{"ID":"20230727000371-lb2o02b","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000371-lb2o02b","updated":"20230727000371"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 标记-清除算法"}]},{"ID":"20230727000372-ggs9jo4","Type":"NodeParagraph","Properties":{"id":"20230727000372-ggs9jo4","updated":"20230727000372"},"Children":[{"Type":"NodeText","Data":"标记-清除"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark-Sweep"},{"Type":"NodeText","Data":"算法是最基础的追踪式算法，分为“标记”和“清除”两个步骤："}]},{"ID":"20230727000373-psbod4a","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000373-psbod4a","updated":"20230727000373"},"Children":[{"ID":"20230727000374-rqzcqtw","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000374-rqzcqtw","updated":"20230727000374"},"Children":[{"ID":"20230727000375-qv7zylq","Type":"NodeParagraph","Properties":{"id":"20230727000375-qv7zylq","updated":"20230727000375"},"Children":[{"Type":"NodeText","Data":"标记：记录需要回收的垃圾对象"}]}]},{"ID":"20230727000376-ufz0hye","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000376-ufz0hye","updated":"20230727000376"},"Children":[{"ID":"20230727000377-cymgpdo","Type":"NodeParagraph","Properties":{"id":"20230727000377-cymgpdo","updated":"20230727000377"},"Children":[{"Type":"NodeText","Data":"清除：在标记完成后回收垃圾对象的内存空间"}]}]}]},{"ID":"20230727000378-i67xhdl","Type":"NodeParagraph","Properties":{"id":"20230727000378-i67xhdl","updated":"20230727000378"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\665c384683d758602dd5ec82f4c4af14.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000379-ydrbrik","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000379-ydrbrik","updated":"20230727000379"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优点包括："}]},{"ID":"20230727000380-60ig9wb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000380-60ig9wb","updated":"20230727000380"},"Children":[{"ID":"20230727000381-f7atgdu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000381-f7atgdu","updated":"20230727000381"},"Children":[{"ID":"20230727000382-7ajbj7o","Type":"NodeParagraph","Properties":{"id":"20230727000382-7ajbj7o","updated":"20230727000382"},"Children":[{"Type":"NodeText","Data":"算法吞吐量较高，即运行用户代码时间 / （运行用户代码时间 + 运行垃圾收集时间）较高"}]}]},{"ID":"20230727000383-lm7m6ng","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000383-lm7m6ng","updated":"20230727000383"},"Children":[{"ID":"20230727000384-8fkjq97","Type":"NodeParagraph","Properties":{"id":"20230727000384-8fkjq97","updated":"20230727000384"},"Children":[{"Type":"NodeText","Data":"空间利用率高：同标记-复制相比不需要额外空间复制对象，也不需要像引用计数算法为每个对象设置引用计数器"}]}]}]},{"ID":"20230727000385-z14kzd9","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000385-z14kzd9","updated":"20230727000385"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点包括："}]},{"ID":"20230727000386-q2um4ec","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000386-q2um4ec","updated":"20230727000386"},"Children":[{"ID":"20230727000387-dk0adz9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000387-dk0adz9","updated":"20230727000387"},"Children":[{"ID":"20230727000388-safuuab","Type":"NodeParagraph","Properties":{"id":"20230727000388-safuuab","updated":"20230727000388"},"Children":[{"Type":"NodeText","Data":"清除后会产生大量的内存碎片空间，导致程序在运行时可能没法为较大的对象分配内存空间，导致提前进行下一次垃圾回收"}]}]}]},{"ID":"20230727000389-77gghma","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000389-77gghma","updated":"20230727000389"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. 标记-复制算法"}]},{"ID":"20230727000390-7vep0z2","Type":"NodeParagraph","Properties":{"id":"20230727000390-7vep0z2","updated":"20230727000390"},"Children":[{"Type":"NodeText","Data":"标记-复制"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark-Copy"},{"Type":"NodeText","Data":"算法将内存分成大小相同的两块，当某一块的内存使用完了之后就将使用中的对象挨个复制到另一块内存中，最后将当前内存恢复未使用的状态。"}]},{"ID":"20230727000391-abjxujb","Type":"NodeParagraph","Properties":{"id":"20230727000391-abjxujb","updated":"20230727000391"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619221130780","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619221130780.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000392-jwjass9","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000392-jwjass9","updated":"20230727000392"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优点包括："}]},{"ID":"20230727000393-lbgruk6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000393-lbgruk6","updated":"20230727000393"},"Children":[{"ID":"20230727000394-6nmyzri","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000394-6nmyzri","updated":"20230727000394"},"Children":[{"ID":"20230727000395-l3tvatl","Type":"NodeParagraph","Properties":{"id":"20230727000395-l3tvatl","updated":"20230727000395"},"Children":[{"Type":"NodeText","Data":"标记-清除法需要在清除阶段对大量垃圾对象进行扫描，标记-复制则只需要从"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root"},{"Type":"NodeText","Data":"对象出发，将“可到达”的对象复制到另一块内存后直接清理当前这块的内存，因此提升了垃圾回收的效率"}]}]},{"ID":"20230727000396-hey7r09","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000396-hey7r09","updated":"20230727000396"},"Children":[{"ID":"20230727000397-ggx0o7c","Type":"NodeParagraph","Properties":{"id":"20230727000397-ggx0o7c","updated":"20230727000397"},"Children":[{"Type":"NodeText","Data":"解决了内存碎片化的问题，防止分配较大连续空间时的提前"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"问题"}]}]}]},{"ID":"20230727000398-0i7t9y0","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000398-0i7t9y0","updated":"20230727000398"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点包括："}]},{"ID":"20230727000399-nxyi7n9","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000399-nxyi7n9","updated":"20230727000399"},"Children":[{"ID":"20230727000400-o7cvkxh","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000400-o7cvkxh","updated":"20230727000400"},"Children":[{"ID":"20230727000401-ne72pw2","Type":"NodeParagraph","Properties":{"id":"20230727000401-ne72pw2","updated":"20230727000401"},"Children":[{"Type":"NodeText","Data":"同标记-清除法相比，在“可达”对象占比较高的情况下有复制对象的开销"}]}]},{"ID":"20230727000402-uiwyt3j","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000402-uiwyt3j","updated":"20230727000402"},"Children":[{"ID":"20230727000403-w2i82rc","Type":"NodeParagraph","Properties":{"id":"20230727000403-w2i82rc","updated":"20230727000403"},"Children":[{"Type":"NodeText","Data":"内存利用率较低，相当于可利用的内存仅有一半"}]}]}]},{"ID":"20230727000404-401femh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000404-401femh","updated":"20230727000404"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. 标记-整理算法"}]},{"ID":"20230727000405-8b0xw3x","Type":"NodeParagraph","Properties":{"id":"20230727000405-8b0xw3x","updated":"20230727000405"},"Children":[{"Type":"NodeText","Data":"标记-整理"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark-Compact"},{"Type":"NodeText","Data":"算法综合了标记-清除法和标记-复制法的优势，既不会产生内存碎片化的问题，也不会有一半内存空间浪费的问题。该方法首先标记出所有“可达”的对象，然后将存活的对象移动到内存空间的一端，最后清理掉端边界以外的内存。"}]},{"ID":"20230727000406-69vex1x","Type":"NodeParagraph","Properties":{"id":"20230727000406-69vex1x","updated":"20230727000406"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619222240189","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619222240189.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000407-eaedou0","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000407-eaedou0","updated":"20230727000407"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优点包括："}]},{"ID":"20230727000408-exqsnzx","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000408-exqsnzx","updated":"20230727000408"},"Children":[{"ID":"20230727000409-ep5uoy4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000409-ep5uoy4","updated":"20230727000409"},"Children":[{"ID":"20230727000410-bmfy2k0","Type":"NodeParagraph","Properties":{"id":"20230727000410-bmfy2k0","updated":"20230727000410"},"Children":[{"Type":"NodeText","Data":"避免了内存碎片化的问题"}]}]},{"ID":"20230727000411-hhqc9fg","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000411-hhqc9fg","updated":"20230727000411"},"Children":[{"ID":"20230727000412-hmtxqag","Type":"NodeParagraph","Properties":{"id":"20230727000412-hmtxqag","updated":"20230727000412"},"Children":[{"Type":"NodeText","Data":"在对象存活率较高的情况下，标记-整理算法由于不需要复制对象效率更高，因此更加适合老年代算法"}]}]}]},{"ID":"20230727000413-lsr99g4","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000413-lsr99g4","updated":"20230727000413"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点包括："}]},{"ID":"20230727000414-zyl30us","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000414-zyl30us","updated":"20230727000414"},"Children":[{"ID":"20230727000415-9uetttd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000415-9uetttd","updated":"20230727000415"},"Children":[{"ID":"20230727000416-nsgd950","Type":"NodeParagraph","Properties":{"id":"20230727000416-nsgd950","updated":"20230727000416"},"Children":[{"Type":"NodeText","Data":"整理过程较为复杂，需要多次遍历内存导致"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"时间比标记-清除算法更长"}]}]}]},{"ID":"20230727000417-7bqa29q","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000417-7bqa29q","updated":"20230727000417"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6. 三色标记法"}]},{"ID":"20230727000418-6jgu9jy","Type":"NodeParagraph","Properties":{"id":"20230727000418-6jgu9jy","updated":"20230727000418"},"Children":[{"Type":"NodeText","Data":"前面提到的“标记”类算法都有一个共同的瑕疵，即在进行垃圾回收的时候会暂停整个程序（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"问题）。三色标记法是对“标记”阶段的改进，在不暂停程序的情况下即可完成对象的可达性分析。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"线程将所有对象分为三类："}]},{"ID":"20230727000419-id2ugu6","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000419-id2ugu6","updated":"20230727000419"},"Children":[{"ID":"20230727000420-dhskcwv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000420-dhskcwv","updated":"20230727000420"},"Children":[{"ID":"20230727000421-yiy9hbx","Type":"NodeParagraph","Properties":{"id":"20230727000421-yiy9hbx","updated":"20230727000421"},"Children":[{"Type":"NodeText","Data":"白色：未搜索的对象，在回收周期开始时所有对象都是白色，在回收周期结束时所有的白色都是垃圾对象"}]}]},{"ID":"20230727000422-zfwgj8y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000422-zfwgj8y","updated":"20230727000422"},"Children":[{"ID":"20230727000423-z616w6m","Type":"NodeParagraph","Properties":{"id":"20230727000423-z616w6m","updated":"20230727000423"},"Children":[{"Type":"NodeText","Data":"灰色：正在搜索的对象，但是对象身上还有一个或多个引用没有扫描"}]}]},{"ID":"20230727000424-ir2rc6y","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000424-ir2rc6y","updated":"20230727000424"},"Children":[{"ID":"20230727000425-bgxsjpk","Type":"NodeParagraph","Properties":{"id":"20230727000425-bgxsjpk","updated":"20230727000425"},"Children":[{"Type":"NodeText","Data":"黑色：已搜索完的对象，所有的引用已经被扫描完"}]}]}]},{"ID":"20230727000426-auxofpf","Type":"NodeParagraph","Properties":{"id":"20230727000426-auxofpf","updated":"20230727000426"},"Children":[{"Type":"NodeText","Data":"三色标记法属于增量式"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"算法，回收器首先将所有的对象着色成白色，然后从"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root"},{"Type":"NodeText","Data":"出发，逐步把所有“可达”的对象变成灰色再到黑色，最终所有的白色对象即是“不可达”对象。"}]},{"ID":"20230727000427-y9eh9v4","Type":"NodeParagraph","Properties":{"id":"20230727000427-y9eh9v4","updated":"20230727000427"},"Children":[{"Type":"NodeText","Data":"具体的实现如下："}]},{"ID":"20230727000428-18xt3pa","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000428-18xt3pa","updated":"20230727000428"},"Children":[{"ID":"20230727000429-ibloyhk","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000429-ibloyhk","updated":"20230727000429"},"Children":[{"ID":"20230727000430-r8rgl0q","Type":"NodeParagraph","Properties":{"id":"20230727000430-r8rgl0q","updated":"20230727000430"},"Children":[{"Type":"NodeText","Data":"初始时所有对象都是白色对象"}]}]},{"ID":"20230727000431-yzj4crv","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000431-yzj4crv","updated":"20230727000431"},"Children":[{"ID":"20230727000432-pmppgiw","Type":"NodeParagraph","Properties":{"id":"20230727000432-pmppgiw","updated":"20230727000432"},"Children":[{"Type":"NodeText","Data":"从"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root"},{"Type":"NodeText","Data":"对象出发，扫描所有可达对象并标记为灰色，放入待处理队列"}]}]},{"ID":"20230727000433-126up39","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000433-126up39","updated":"20230727000433"},"Children":[{"ID":"20230727000434-d6b443o","Type":"NodeParagraph","Properties":{"id":"20230727000434-d6b443o","updated":"20230727000434"},"Children":[{"Type":"NodeText","Data":"从队列取出一个灰色对象并标记为黑色，将其引用对象标记为灰色放入队列"}]}]},{"ID":"20230727000435-vanx8g2","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000435-vanx8g2","updated":"20230727000435"},"Children":[{"ID":"20230727000436-lw7c3fb","Type":"NodeParagraph","Properties":{"id":"20230727000436-lw7c3fb","updated":"20230727000436"},"Children":[{"Type":"NodeText","Data":"重复上一步骤，直到灰色对象队列为空"}]}]},{"ID":"20230727000437-hclsmxc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000437-hclsmxc","updated":"20230727000437"},"Children":[{"ID":"20230727000438-q1ejicb","Type":"NodeParagraph","Properties":{"id":"20230727000438-q1ejicb","updated":"20230727000438"},"Children":[{"Type":"NodeText","Data":"此时所有剩下的白色对象就是垃圾对象"}]}]}]},{"ID":"20230727000439-h7hkgpe","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000439-h7hkgpe","updated":"20230727000439"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"优点："}]},{"ID":"20230727000440-sioxe2f","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000440-sioxe2f","updated":"20230727000440"},"Children":[{"ID":"20230727000441-msewik9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000441-msewik9","updated":"20230727000441"},"Children":[{"ID":"20230727000442-hexuhdl","Type":"NodeParagraph","Properties":{"id":"20230727000442-hexuhdl","updated":"20230727000442"},"Children":[{"Type":"NodeText","Data":"不需要暂停整个程序进行垃圾回收"}]}]}]},{"ID":"20230727000443-jusxv2k","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000443-jusxv2k","updated":"20230727000443"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeText","Data":"缺点："}]},{"ID":"20230727000444-qdykhrc","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000444-qdykhrc","updated":"20230727000444"},"Children":[{"ID":"20230727000445-6ew74m1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000445-6ew74m1","updated":"20230727000445"},"Children":[{"ID":"20230727000446-rvqchx6","Type":"NodeParagraph","Properties":{"id":"20230727000446-rvqchx6","updated":"20230727000446"},"Children":[{"Type":"NodeText","Data":"如果程序垃圾对象的产生速度大于垃圾对象的回收速度时，可能导致程序中的垃圾对象越来越多而无法及时收集"}]}]},{"ID":"20230727000447-5zpq0fx","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000447-5zpq0fx","updated":"20230727000447"},"Children":[{"ID":"20230727000448-z8ei1j6","Type":"NodeParagraph","Properties":{"id":"20230727000448-z8ei1j6","updated":"20230727000448"},"Children":[{"Type":"NodeText","Data":"线程切换和上下文转换的消耗会使得垃圾回收的总体成本上升，从而降低系统吞吐量"}]}]}]},{"ID":"20230727000449-3nfktie","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000449-3nfktie","updated":"20230727000449"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. 读写屏障技术"}]},{"ID":"20230727000450-fyv5g35","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000450-fyv5g35","updated":"20230727000450"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. 三色标记法的并发性问题"}]},{"ID":"20230727000451-jz22hd7","Type":"NodeParagraph","Properties":{"id":"20230727000451-jz22hd7","updated":"20230727000451"},"Children":[{"Type":"NodeText","Data":"假设三色标记法执行前，包含如下对象："}]},{"ID":"20230727000452-1dvxlbt","Type":"NodeParagraph","Properties":{"id":"20230727000452-1dvxlbt","updated":"20230727000452"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619231057396","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619231057396.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000453-wmvcehl","Type":"NodeParagraph","Properties":{"id":"20230727000453-wmvcehl","updated":"20230727000453"},"Children":[{"Type":"NodeText","Data":"则三色标记法的具体执行过程如下："}]},{"ID":"20230727000454-wooycfp","Type":"NodeParagraph","Properties":{"id":"20230727000454-wooycfp","updated":"20230727000454"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619231125807","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619231125807.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000455-w0kx3lf","Type":"NodeParagraph","Properties":{"id":"20230727000455-w0kx3lf","updated":"20230727000455"},"Children":[{"Type":"NodeText","Data":"上述三色标记执行过后堆内存中白色对象（只有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"D"},{"Type":"NodeText","Data":"）会被当做垃圾对象清理掉，如果用户在标记执行过程中建立了从"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"对象到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"D"},{"Type":"NodeText","Data":"对象的引用，那么会导致后续对"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"D"},{"Type":"NodeText","Data":"的访问出错。这种没有指向合法地址的指针一般被称为“野指针”，会造成严重的程序错误。"}]},{"ID":"20230727000456-uqrzmpw","Type":"NodeParagraph","Properties":{"id":"20230727000456-uqrzmpw","updated":"20230727000456"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619231705596","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619231705596.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000457-wn2vzaf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000457-wn2vzaf","updated":"20230727000457"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 并发问题原因及解决思路"}]},{"ID":"20230727000458-r89mygd","Type":"NodeParagraph","Properties":{"id":"20230727000458-r89mygd","updated":"20230727000458"},"Children":[{"Type":"NodeText","Data":"假设三色标记法和用户程序并发执行，那么下列两个条件"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"同时满足"},{"Type":"NodeText","Data":"就可能出现错误回收非垃圾对象的问题："}]},{"ID":"20230727000459-bg2z6bt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000459-bg2z6bt","updated":"20230727000459"},"Children":[{"ID":"20230727000460-0wi3xst","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000460-0wi3xst","updated":"20230727000460"},"Children":[{"ID":"20230727000461-pxt0640","Type":"NodeParagraph","Properties":{"id":"20230727000461-pxt0640","updated":"20230727000461"},"Children":[{"Type":"NodeText","Data":"条件1：某一黑色对象引用白色对象"}]}]},{"ID":"20230727000462-dvpxt68","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000462-dvpxt68","updated":"20230727000462"},"Children":[{"ID":"20230727000463-8hqfw9n","Type":"NodeParagraph","Properties":{"id":"20230727000463-8hqfw9n","updated":"20230727000463"},"Children":[{"Type":"NodeText","Data":"条件2：对于某个白色对象，所有和它存在可达关系的灰色对象丢失了访问它的可达路径"}]}]}]},{"ID":"20230727000464-nnscydx","Type":"NodeParagraph","Properties":{"id":"20230727000464-nnscydx","updated":"20230727000464"},"Children":[{"Type":"NodeText","Data":"简单证明一下：如果条件1不满足，那么任何不该被回收的白色对象都能和至少一个灰色对象存在“可达”路径，因此不会有白色对象被遗漏；如果条件2不满足，那么对于某一个白色对象，即使它被黑色对象引用，但至少存在一个和它存在可达关系的灰色对象，因此这个白色对象也不会被回收。"}]},{"ID":"20230727000465-7x57rdj","Type":"NodeBlockquote","Properties":{"id":"20230727000465-7x57rdj","updated":"20230727000465"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000466-fbw50ru","Type":"NodeParagraph","Properties":{"id":"20230727000466-fbw50ru","updated":"20230727000466"},"Children":[{"Type":"NodeText","Data":"一句话总结即是：在三色标记法执行的某个特定时机，只要存在未经访问的能够到达白色对象的可达路径，就可以令黑色对象引用白色对象，反正该白色对象在后面标记中会被识别为“可达”对象从而不会被错误回收。"}]}]},{"ID":"20230727000467-qudflao","Type":"NodeParagraph","Properties":{"id":"20230727000467-qudflao","updated":"20230727000467"},"Children":[{"Type":"NodeText","Data":"一种最简单解决三色标记并发问题的方法是停止所有的赋值器线程，保证标记过程不受干扰，即垃圾回收器中常提到的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW, stop the world"},{"Type":"NodeText","Data":"方法。另外一种思路就是使用赋值器屏障技术使得赋值器在进行指针写操作时同步垃圾回收器，保证不破坏弱三色不变性（见下文）。"}]},{"ID":"20230727000468-zu87jul","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000468-zu87jul","updated":"20230727000468"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 读写屏障技术"}]},{"ID":"20230727000469-h9guzrj","Type":"NodeBlockquote","Properties":{"id":"20230727000469-h9guzrj","updated":"20230727000469"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000470-wsvxyqg","Type":"NodeParagraph","Properties":{"id":"20230727000470-wsvxyqg","updated":"20230727000470"},"Children":[{"Type":"NodeText","Data":"屏障技术：给代码操作内存的顺序添加一些限制，即在内存屏障前执行的动作必须先于在你内存屏障后执行的动作。"}]}]},{"ID":"20230727000471-fw5pu84","Type":"NodeParagraph","Properties":{"id":"20230727000471-fw5pu84","updated":"20230727000471"},"Children":[{"Type":"NodeText","Data":"使用屏障技术可以使得用户程序和三色标记过程并发执行，我们只需要达成下列任意一种三色不变性："}]},{"ID":"20230727000472-cdbd4j2","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000472-cdbd4j2","updated":"20230727000472"},"Children":[{"ID":"20230727000473-di69nne","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000473-di69nne","updated":"20230727000473"},"Children":[{"ID":"20230727000474-lrqmoz3","Type":"NodeParagraph","Properties":{"id":"20230727000474-lrqmoz3","updated":"20230727000474"},"Children":[{"Type":"NodeText","Data":"强三色不变性：黑色对象永远不会指向白色对象"}]}]},{"ID":"20230727000475-qw7t4s9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000475-qw7t4s9","updated":"20230727000475"},"Children":[{"ID":"20230727000476-3is52ae","Type":"NodeParagraph","Properties":{"id":"20230727000476-3is52ae","updated":"20230727000476"},"Children":[{"Type":"NodeText","Data":"弱三色不变性：黑色对象指向的白色对象至少包含一条由灰色对象经过白色对象的可达路径"}]}]}]},{"ID":"20230727000477-vg49att","Type":"NodeParagraph","Properties":{"id":"20230727000477-vg49att","updated":"20230727000477"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"中使用的内存读写屏障技术指的是编译器会在编译期间生成一段代码，该代码在运行期间用户读取、创建或更新对象指针时会拦截内存读写操作，相当于一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hook"},{"Type":"NodeText","Data":"调用，根据"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hook"},{"Type":"NodeText","Data":"时机不同可分为不同的屏障技术。由于读屏障"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Read barrier"},{"Type":"NodeText","Data":"技术需要在读操作中插入代码片段从而影响用户程序性能，所以一般使用写屏障技术来保证三色标记的稳健性。"}]},{"ID":"20230727000478-7v1aizh","Type":"NodeBlockquote","Properties":{"id":"20230727000478-7v1aizh","updated":"20230727000478"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000479-iy6wedw","Type":"NodeParagraph","Properties":{"id":"20230727000479-iy6wedw","updated":"20230727000479"},"Children":[{"Type":"NodeText","Data":"我们讲内存屏障技术解决了三色标记法的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"缺点，并不是指消除了所有的赋值器挂起问题。需要分清楚 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"方法是全局性的赋值器挂起而内存屏障技术是局部的赋值器挂起。"}]}]},{"ID":"20230727000480-sqz7fg2","Type":"NodeParagraph","Properties":{"id":"20230727000480-sqz7fg2","updated":"20230727000480"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619233016606","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619233016606.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000481-t2msqpe","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000481-t2msqpe","updated":"20230727000481"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4. Dijkstra插入写屏障"}]},{"ID":"20230727000482-3g8hnpo","Type":"NodeParagraph","Properties":{"id":"20230727000482-3g8hnpo","updated":"20230727000482"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dijkstra"},{"Type":"NodeText","Data":"插入写屏障避免了前面提到的条件1，即防止黑色对象指向白色对象。"}]},{"ID":"20230727000483-fbgahxj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000483-fbgahxj","updated":"20230727000483"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 添加下游对象的函数, 当前下游对象slot, 新下游对象ptr\nfunc DijkstraWritePointer(slot *unsafe.Pointer, ptr unsafe.Pointer) {// 1) 将新下游对象标记为灰色shade(ptr)// 2) 当前下游对象slot = 新下游对象ptr*slot = ptr\n}\n\n// 场景一：A之前没有下游, 新添加一个下游对象B, B被标记为灰色\nA.DijkstraWritePointer(nil, B)\n// 场景二：A将下游对象C更换为B, B被标记为灰色\nA.DijkstraWritePointer(C, B)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000484-94blmcp","Type":"NodeParagraph","Properties":{"id":"20230727000484-94blmcp","updated":"20230727000484"},"Children":[{"Type":"NodeText","Data":"一个对象可以存储在内存中的“栈”或者“堆”，由于“栈”空间容量小且要求相应速度较高，因此“插入写屏障”不适合用于“栈”空间。在“插入写屏障”保护下的三色标记法执行例子如下："}]},{"ID":"20230727000485-oe517at","Type":"NodeParagraph","Properties":{"id":"20230727000485-oe517at","updated":"20230727000485"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619235742308","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619235742308.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000486-un3j0ta","Type":"NodeParagraph","Properties":{"id":"20230727000486-un3j0ta","updated":"20230727000486"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230619235903246","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230619235903246.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000487-2t4l9xa","Type":"NodeParagraph","Properties":{"id":"20230727000487-2t4l9xa","updated":"20230727000487"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620000135961","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620000135961.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000488-hvb7l2m","Type":"NodeParagraph","Properties":{"id":"20230727000488-hvb7l2m","updated":"20230727000488"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620000758945","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620000758945.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000489-hmvf66e","Type":"NodeParagraph","Properties":{"id":"20230727000489-hmvf66e","updated":"20230727000489"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620001041041","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620001041041.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000490-reakz7y","Type":"NodeParagraph","Properties":{"id":"20230727000490-reakz7y","updated":"20230727000490"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620001702980","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620001702980.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000491-9yzq8qv","Type":"NodeParagraph","Properties":{"id":"20230727000491-9yzq8qv","updated":"20230727000491"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620001849510","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620001849510.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000492-2axmht0","Type":"NodeParagraph","Properties":{"id":"20230727000492-2axmht0","updated":"20230727000492"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620001932953","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620001932953.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000493-hsc6fkq","Type":"NodeParagraph","Properties":{"id":"20230727000493-hsc6fkq","updated":"20230727000493"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620002024332","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620002024332.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000494-h4eh95i","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000494-h4eh95i","updated":"20230727000494"},"Children":[{"ID":"20230727000495-q944qtc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000495-q944qtc","updated":"20230727000495"},"Children":[{"ID":"20230727000496-rogj9sr","Type":"NodeParagraph","Properties":{"id":"20230727000496-rogj9sr","updated":"20230727000496"},"Children":[{"Type":"NodeText","Data":"第一步：垃圾回收之前将所有的对象标记为白色"}]}]},{"ID":"20230727000497-wx2don0","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000497-wx2don0","updated":"20230727000497"},"Children":[{"ID":"20230727000498-8ih4dj6","Type":"NodeParagraph","Properties":{"id":"20230727000498-8ih4dj6","updated":"20230727000498"},"Children":[{"Type":"NodeText","Data":"第二步：遍历"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root Set"},{"Type":"NodeText","Data":"，将可达对象标记为灰色"}]}]},{"ID":"20230727000499-jzy44kr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000499-jzy44kr","updated":"20230727000499"},"Children":[{"ID":"20230727000500-7xsmgup","Type":"NodeParagraph","Properties":{"id":"20230727000500-7xsmgup","updated":"20230727000500"},"Children":[{"Type":"NodeText","Data":"第三步：遍历灰色对象列表，将可达的对象从白色标记为灰色；将遍历完的灰色对象标记为黑色"}]}]},{"ID":"20230727000501-o5vib6t","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000501-o5vib6t","updated":"20230727000501"},"Children":[{"ID":"20230727000502-d19ez36","Type":"NodeParagraph","Properties":{"id":"20230727000502-d19ez36","updated":"20230727000502"},"Children":[{"Type":"NodeText","Data":"第四步：在三色标记过程中用户程序令栈区对象A指向对象H，令堆区对象E指向对象I，由于对象E在堆区从而触发插入写屏障并将黑色对象E指向的白色对象I标记为灰色，栈区对象A不触发"}]}]},{"ID":"20230727000503-uq8n5ay","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000503-uq8n5ay","updated":"20230727000503"},"Children":[{"ID":"20230727000504-oxdn7q8","Type":"NodeParagraph","Properties":{"id":"20230727000504-oxdn7q8","updated":"20230727000504"},"Children":[{"Type":"NodeText","Data":"第五步：继续三色标记直至灰色对象队列为空"}]}]},{"ID":"20230727000505-2ccfo0d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000505-2ccfo0d","updated":"20230727000505"},"Children":[{"ID":"20230727000506-ifzfytv","Type":"NodeParagraph","Properties":{"id":"20230727000506-ifzfytv","updated":"20230727000506"},"Children":[{"Type":"NodeText","Data":"第六步：由于栈区对象没有启动插入写屏障，因此栈上可能存在白色对象被引用的情况（上图中对应对象H），因此在回收白色对象前在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"保护下重新扫描一次栈空间"}]}]},{"ID":"20230727000507-ikbtki9","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000507-ikbtki9","updated":"20230727000507"},"Children":[{"ID":"20230727000508-594v3ho","Type":"NodeParagraph","Properties":{"id":"20230727000508-594v3ho","updated":"20230727000508"},"Children":[{"Type":"NodeText","Data":"第七步：在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"保护下对栈空间一次性进行三色标记，直到灰色对象队列为空"}]}]},{"ID":"20230727000509-zz4vngd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000509-zz4vngd","updated":"20230727000509"},"Children":[{"ID":"20230727000510-6881mgm","Type":"NodeParagraph","Properties":{"id":"20230727000510-6881mgm","updated":"20230727000510"},"Children":[{"Type":"NodeText","Data":"第八步：结束"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"}]}]},{"ID":"20230727000511-4adatl8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000511-4adatl8","updated":"20230727000511"},"Children":[{"ID":"20230727000512-g0voyne","Type":"NodeParagraph","Properties":{"id":"20230727000512-g0voyne","updated":"20230727000512"},"Children":[{"Type":"NodeText","Data":"第九步：最后将栈空间和堆空间的白色垃圾对象进行回收"}]}]}]},{"ID":"20230727000513-p6ch93i","Type":"NodeParagraph","Properties":{"id":"20230727000513-p6ch93i","updated":"20230727000513"},"Children":[{"Type":"NodeText","Data":"尽管"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dijkstra"},{"Type":"NodeText","Data":"插入写屏障可以实现垃圾回收和用户程序的并发执行，但是它存在两个缺点。"},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"一方面它是一种比较保守的垃圾回收方法，把有可能存活的对象都标记成灰色了以满足“强三色不变性”。"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"以下图为例，用户程序"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"将对象A原本指向B对象的指针改成指向C对象，尽管在修改后B对象已经是一个垃圾对象，但是它在本轮垃圾回收过程中不会被回收。"}]},{"ID":"20230727000514-b4nvzko","Type":"NodeParagraph","Properties":{"id":"20230727000514-b4nvzko","updated":"20230727000514"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620010649433","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620010649433.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000515-7hm02zf","Type":"NodeParagraph","Properties":{"id":"20230727000515-7hm02zf","updated":"20230727000515"},"Children":[{"Type":"NodeText","Data":"另外一个缺点在于栈上的对象也是根对象，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dijkstra"},{"Type":"NodeText","Data":"插入写屏障要么在用户程序执行内存写操作时为栈上对象插入写屏障，要么在一轮三色标记完成后使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"重新对栈上的对象进行三色标记。前者会降低栈空间的响应速度，后者会暂停用户程序。"}]},{"ID":"20230727000516-na9wlas","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000516-na9wlas","updated":"20230727000516"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5. Yuasa删除写屏障"}]},{"ID":"20230727000517-4isgf37","Type":"NodeParagraph","Properties":{"id":"20230727000517-4isgf37","updated":"20230727000517"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Yuasa"},{"Type":"NodeText","Data":"删除写屏障避免了前面提到的条件2，防止丢失灰色对象到白色对象的可达路径。当用户程序执行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"*slot = ptr"},{"Type":"NodeText","Data":"时（即令"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"slot"},{"Type":"NodeText","Data":"指向了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ptr"},{"Type":"NodeText","Data":"），我们会将当前下游对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"*slot"},{"Type":"NodeText","Data":"标记为灰色。一句话解释就是当删除对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"指向对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"的指针时，那么将被删除的对象标记为灰色。"}]},{"ID":"20230727000518-7spdftp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000518-7spdftp","updated":"20230727000518"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 添加下游对象的函数, 当前下游对象slot, 新下游对象ptr\nfunc YuasaWritePointer(slot *unsafe.Pointer, ptr unsafe.Pointer) {// 1) 将当前下游对象标记为灰色shade(*slot)// 2) 当前下游对象slot = 新下游对象ptr*slot = ptr\n}\n\n// 场景一：B被A删除, 将B标记为灰色\nA.添加下游对象(B, nil)\n// 场景二：B被A删除, 将B标记为灰色\nA.添加下游对象(B, C)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000519-n5mfhou","Type":"NodeParagraph","Properties":{"id":"20230727000519-n5mfhou","updated":"20230727000519"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620011133595","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620011133595.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000520-53hmp8a","Type":"NodeParagraph","Properties":{"id":"20230727000520-53hmp8a","updated":"20230727000520"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620011240263","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620011240263.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000521-kb3ria5","Type":"NodeParagraph","Properties":{"id":"20230727000521-kb3ria5","updated":"20230727000521"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620011438179","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620011438179.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000522-teuhppm","Type":"NodeParagraph","Properties":{"id":"20230727000522-teuhppm","updated":"20230727000522"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620011646497","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620011646497.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000523-nn46ozs","Type":"NodeParagraph","Properties":{"id":"20230727000523-nn46ozs","updated":"20230727000523"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620011742977","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620011742977.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000524-0wh4q70","Type":"NodeParagraph","Properties":{"id":"20230727000524-0wh4q70","updated":"20230727000524"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230620011817276","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230620011817276.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000525-yxc2igo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000525-yxc2igo","updated":"20230727000525"},"Children":[{"ID":"20230727000526-9kb0uvy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000526-9kb0uvy","updated":"20230727000526"},"Children":[{"ID":"20230727000527-vzgz7vk","Type":"NodeParagraph","Properties":{"id":"20230727000527-vzgz7vk","updated":"20230727000527"},"Children":[{"Type":"NodeText","Data":"第一步：将所有对象标记为白色"}]}]},{"ID":"20230727000528-mp45ldi","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000528-mp45ldi","updated":"20230727000528"},"Children":[{"ID":"20230727000529-efinahj","Type":"NodeParagraph","Properties":{"id":"20230727000529-efinahj","updated":"20230727000529"},"Children":[{"Type":"NodeText","Data":"第二步：遍历"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root Set"},{"Type":"NodeText","Data":"将可达对象设为灰色"}]}]},{"ID":"20230727000530-rl1yjnf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000530-rl1yjnf","updated":"20230727000530"},"Children":[{"ID":"20230727000531-r1l3k5k","Type":"NodeParagraph","Properties":{"id":"20230727000531-r1l3k5k","updated":"20230727000531"},"Children":[{"Type":"NodeText","Data":"第三步：如果用户程序令灰色对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"删除了对白色对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"D"},{"Type":"NodeText","Data":"的引用，如果这时候不触发删除写屏障，那么对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"D"},{"Type":"NodeText","Data":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"直到本轮垃圾回收结束都会是白色对象。因此需要触发删除写屏障，将对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"D"},{"Type":"NodeText","Data":"标记为灰色。"}]}]},{"ID":"20230727000532-46my6hr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000532-46my6hr","updated":"20230727000532"},"Children":[{"ID":"20230727000533-x6mk617","Type":"NodeParagraph","Properties":{"id":"20230727000533-x6mk617","updated":"20230727000533"},"Children":[{"Type":"NodeText","Data":"第四步：遍历灰色对象队列，将可达的白色对象标记为灰色，遍历完的灰色对象标记为黑色"}]}]},{"ID":"20230727000534-65b9tzq","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000534-65b9tzq","updated":"20230727000534"},"Children":[{"ID":"20230727000535-vdo9524","Type":"NodeParagraph","Properties":{"id":"20230727000535-vdo9524","updated":"20230727000535"},"Children":[{"Type":"NodeText","Data":"第五步：继续进行三色标记，直到灰色对象队列为空"}]}]},{"ID":"20230727000536-28ll8so","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000536-28ll8so","updated":"20230727000536"},"Children":[{"ID":"20230727000537-9uoepsc","Type":"NodeParagraph","Properties":{"id":"20230727000537-9uoepsc","updated":"20230727000537"},"Children":[{"Type":"NodeText","Data":"第六步：清除所有的白色对象"}]}]}]},{"ID":"20230727000538-cslnirv","Type":"NodeParagraph","Properties":{"id":"20230727000538-cslnirv","updated":"20230727000538"},"Children":[{"Type":"NodeText","Data":"下图简单绘制了"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Yuasa"},{"Type":"NodeText","Data":"删除写屏障是如何保证用户程序"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"和垃圾回收器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Collector"},{"Type":"NodeText","Data":"的并发执行的："}]},{"ID":"20230727000539-80kn0g1","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000539-80kn0g1","updated":"20230727000539"},"Children":[{"ID":"20230727000540-q8g52sn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000540-q8g52sn","updated":"20230727000540"},"Children":[{"ID":"20230727000541-75skvpc","Type":"NodeParagraph","Properties":{"id":"20230727000541-75skvpc","updated":"20230727000541"},"Children":[{"Type":"NodeText","Data":"第二步中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"将对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"原本指向对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"的指针指向"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"，由于对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"本身就是灰色的，因此不需要对它重新着色"}]}]},{"ID":"20230727000542-lthyqaf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000542-lthyqaf","updated":"20230727000542"},"Children":[{"ID":"20230727000543-l36itc2","Type":"NodeParagraph","Properties":{"id":"20230727000543-l36itc2","updated":"20230727000543"},"Children":[{"Type":"NodeText","Data":"第三步中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"删除了对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"指向对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"的指针，删除写屏障将下游对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"标记为灰色"}]}]}]},{"ID":"20230727000544-udhvthc","Type":"NodeParagraph","Properties":{"id":"20230727000544-udhvthc","updated":"20230727000544"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\6eeb50d5dd2e38a5e98a31a86a801534.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000545-isom1v2","Type":"NodeParagraph","Properties":{"id":"20230727000545-isom1v2","updated":"20230727000545"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Yuasa"},{"Type":"NodeText","Data":"删除写屏障和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dijkstra"},{"Type":"NodeText","Data":"插入写屏障相比优点在于不需要在一轮三色标记后对栈空间上的对象进行重新扫描，缺点在于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Collector"},{"Type":"NodeText","Data":"会悲观地认为所有被删除的对象都可能被黑色对象引用，比如上图中第三步"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"删除了对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"指向对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"的指针，如果此时还有一个单独的对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"E"},{"Type":"NodeText","Data":"指向"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"，那么本该被删除的对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"E"},{"Type":"NodeText","Data":"却可以在本轮垃圾回收中存活。"}]},{"ID":"20230727000546-qanbk8b","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000546-qanbk8b","updated":"20230727000546"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"=="},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"6. 混合写屏障"},{"Type":"NodeText","Data":"=="}]},{"ID":"20230727000547-eiru2ds","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000547-eiru2ds","updated":"20230727000547"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"6.1 引入混合写屏障的原因"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000548-i5gqdjf","Type":"NodeParagraph","Properties":{"id":"20230727000548-i5gqdjf","updated":"20230727000548"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"go v1.8"},{"Type":"NodeText","Data":"引入混合写屏障"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hybrid write barrier"},{"Type":"NodeText","Data":"之前，由于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root"},{"Type":"NodeText","Data":"对象包括了栈对象，如果运行时在所有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root"},{"Type":"NodeText","Data":"对象上开启插入写屏障意味着需要在数量庞大的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Goroutine"},{"Type":"NodeText","Data":"的栈上都开启"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dijkstra"},{"Type":"NodeText","Data":"写屏障从而严重影响用户程序的性能。之前的做法是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mark"},{"Type":"NodeText","Data":"阶段（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"golang"},{"Type":"NodeText","Data":"垃圾回收使用的是标记-清除法）结束后暂停整个程序，对栈上对象重新进行三色标记法。"}]},{"ID":"20230727000549-mw7y1eu","Type":"NodeBlockquote","Properties":{"id":"20230727000549-mw7y1eu","updated":"20230727000549"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000550-lwg9mf2","Type":"NodeParagraph","Properties":{"id":"20230727000550-lwg9mf2","updated":"20230727000550"},"Children":[{"Type":"NodeText","Data":"如果Goroutine较多的话，对栈对象re-scan这一步需要耗费10~1000ms"}]}]},{"ID":"20230727000551-fi071l1","Type":"NodeParagraph","Properties":{"id":"20230727000551-fi071l1","updated":"20230727000551"},"Children":[{"Type":"NodeText","Data":"回顾一下之前提到的两种写屏障的劣势："}]},{"ID":"20230727000552-kjtly8z","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000552-kjtly8z","updated":"20230727000552"},"Children":[{"ID":"20230727000553-ygetz09","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000553-ygetz09","updated":"20230727000553"},"Children":[{"ID":"20230727000554-a3d0gof","Type":"NodeParagraph","Properties":{"id":"20230727000554-a3d0gof","updated":"20230727000554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Dijkstra"},{"Type":"NodeText","Data":"插入写屏障：一轮标记结束后需要"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"重新扫描栈上对象"}]}]},{"ID":"20230727000555-m8yhcx7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000555-m8yhcx7","updated":"20230727000555"},"Children":[{"ID":"20230727000556-b2yyo65","Type":"NodeParagraph","Properties":{"id":"20230727000556-b2yyo65","updated":"20230727000556"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Yuasa"},{"Type":"NodeText","Data":"删除写屏障：回收精度低，在垃圾回收开始前使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"扫描所有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC Root"},{"Type":"NodeText","Data":"对象形成初始快照，用户程序"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Mutator"},{"Type":"NodeText","Data":"从灰色/白色对象中删除白色指针时会将下游对象标记为灰色，相当于保护了所有初始快照中的白色对象不被删除"}]}]}]},{"ID":"20230727000557-sve9meb","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000557-sve9meb","updated":"20230727000557"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"6.2 混合写屏障的实现"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000558-j0mucqd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Yw==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000558-j0mucqd","updated":"20230727000558"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Yw==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 添加下游对象的函数, 当前下游对象slot, 新下游对象ptr\nfunc HybridWritePointerSimple(slot *unsafe.Pointer, ptr unsafe.Pointer) {// 1) 将被删除的下游对象标记为灰色shade(*slot)// 2) 将新下游对象标记为灰色shade(ptr)// 3) 当前下游对象slot = 新下游对象ptr*slot = ptr\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000559-7ncchbi","Type":"NodeBlockquote","Properties":{"id":"20230727000559-7ncchbi","updated":"20230727000559"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000560-haw4mmn","Type":"NodeParagraph","Properties":{"id":"20230727000560-haw4mmn","updated":"20230727000560"},"Children":[{"Type":"NodeText","Data":"注意：混合写屏障也是仅在堆空间启动的，防止降低栈空间的运行效率"}]}]},{"ID":"20230727000561-qromi69","Type":"NodeParagraph","Properties":{"id":"20230727000561-qromi69","updated":"20230727000561"},"Children":[{"Type":"NodeText","Data":"混合写屏障逻辑如下："}]},{"ID":"20230727000562-kmfo49g","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000562-kmfo49g","updated":"20230727000562"},"Children":[{"ID":"20230727000563-y895u86","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000563-y895u86","updated":"20230727000563"},"Children":[{"ID":"20230727000564-8dcm2t9","Type":"NodeParagraph","Properties":{"id":"20230727000564-8dcm2t9","updated":"20230727000564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"开始时将栈上所有对象标记为黑色，无须"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"}]}]},{"ID":"20230727000565-g00q14n","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000565-g00q14n","updated":"20230727000565"},"Children":[{"ID":"20230727000566-8l0jad0","Type":"NodeParagraph","Properties":{"id":"20230727000566-8l0jad0","updated":"20230727000566"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"期间在栈上创建的新对象均标记为黑色"}]}]},{"ID":"20230727000567-rmpsddr","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000567-rmpsddr","updated":"20230727000567"},"Children":[{"ID":"20230727000568-7xe3vqq","Type":"NodeParagraph","Properties":{"id":"20230727000568-7xe3vqq","updated":"20230727000568"},"Children":[{"Type":"NodeText","Data":"将被删除的下游对象标记为灰色"}]}]},{"ID":"20230727000569-69vdx8x","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000569-69vdx8x","updated":"20230727000569"},"Children":[{"ID":"20230727000570-d2s79lv","Type":"NodeParagraph","Properties":{"id":"20230727000570-d2s79lv","updated":"20230727000570"},"Children":[{"Type":"NodeText","Data":"将被添加的下游对象标记为灰色"}]}]}]},{"ID":"20230727000571-lhzh2cw","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230727000571-lhzh2cw","updated":"20230727000571"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"##### ","Properties":{"id":""}},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"6.3 具体场景的实现"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000572-8e0k511","Type":"NodeParagraph","Properties":{"id":"20230727000572-8e0k511","updated":"20230727000572"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"开始阶段会将所有栈空间可达对象都标记为黑色："},{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\1c34534b9c47b1094debf8164336eb55.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000573-gvi897q","Type":"NodeParagraph","Properties":{"id":"20230727000573-gvi897q","updated":"20230727000573"},"Children":[{"Type":"NodeText","Data":"场景一：某个对象从堆对象的下游变成栈对象的下游，这种情况下标记该对象为灰色，该对象就不会被错误地回收"}]},{"ID":"20230727000574-qo4cm9q","Type":"NodeParagraph","Properties":{"id":"20230727000574-qo4cm9q","updated":"20230727000574"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\38bc32961ac6497ac9e142809cdb72fd.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000575-3ldu00h","Type":"NodeParagraph","Properties":{"id":"20230727000575-3ldu00h","updated":"20230727000575"},"Children":[{"Type":"NodeText","Data":"场景二：某个对象从一个栈对象的下游变成另一个对象的下游，由于对象全都在栈空间对象的可达对象中，因此混合写屏障不会对这些对象着色。"}]},{"ID":"20230727000576-vgkbtpw","Type":"NodeParagraph","Properties":{"id":"20230727000576-vgkbtpw","updated":"20230727000576"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\6c1b102f5d877686edf2a53343a02e2a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000577-c2rl7rz","Type":"NodeParagraph","Properties":{"id":"20230727000577-c2rl7rz","updated":"20230727000577"},"Children":[{"Type":"NodeText","Data":"场景三：某个对象从一个堆对象的下游变成另一个堆对象的下游，比如下图中对象G从F的下游移动到Y的下游，为了避免对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"G"},{"Type":"NodeText","Data":"被错误回收，我们需要将其标记为灰色"}]},{"ID":"20230727000578-egjk28i","Type":"NodeParagraph","Properties":{"id":"20230727000578-egjk28i","updated":"20230727000578"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\e9d602f1b177e2e582ed44a21db31229.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000579-e0n49fl","Type":"NodeParagraph","Properties":{"id":"20230727000579-e0n49fl","updated":"20230727000579"},"Children":[{"Type":"NodeText","Data":"场景四：某个对象从栈对象的下游变成堆对象的下游，对于栈空间对象不触发写屏障，但是对于被删除的堆空间对象"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"G"},{"Type":"NodeText","Data":"需要标记成灰色以保护它和它的下游对象不被错误删除"}]},{"ID":"20230727000580-pixarx6","Type":"NodeParagraph","Properties":{"id":"20230727000580-pixarx6","updated":"20230727000580"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\ae2165d756cf8c3320c258a28d292b75.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000581-qhhay7u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000581-qhhay7u","updated":"20230727000581"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"8. 分代收集算法"}]},{"ID":"20230727000582-wx2ib9g","Type":"NodeParagraph","Properties":{"id":"20230727000582-wx2ib9g","updated":"20230727000582"},"Children":[{"Type":"NodeText","Data":"前面提到追踪式垃圾回收算法一个显著的问题是会频繁扫描生命周期较长的对象，而内存分配存在一个"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"most object die young"},{"Type":"NodeText","Data":"（绝大部分对象的生命周期都很短）的事实，因此有必要将对象按照生命周期的长度划分到堆"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"heap"},{"Type":"NodeText","Data":"上的两个甚至多个区域。对于新生代区域的扫描频率应该高于老年代区域。"}]},{"ID":"20230727000583-h3gdbjz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000583-h3gdbjz","updated":"20230727000583"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"8.1 分代收集算法的三个假设"}]},{"ID":"20230727000584-qbiz7tr","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000584-qbiz7tr","updated":"20230727000584"},"Children":[{"ID":"20230727000585-yl70wy1","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000585-yl70wy1","updated":"20230727000585"},"Children":[{"ID":"20230727000586-it25kqv","Type":"NodeParagraph","Properties":{"id":"20230727000586-it25kqv","updated":"20230727000586"},"Children":[{"Type":"NodeText","Data":"弱分代假说：大多数对象的生命周期都很短"}]}]},{"ID":"20230727000587-hhnq8ea","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000587-hhnq8ea","updated":"20230727000587"},"Children":[{"ID":"20230727000588-o4pa0x1","Type":"NodeParagraph","Properties":{"id":"20230727000588-o4pa0x1","updated":"20230727000588"},"Children":[{"Type":"NodeText","Data":"强分代假说：多轮垃圾回收都没清理掉的对象往往不容易死亡"}]}]},{"ID":"20230727000589-01miyzy","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000589-01miyzy","updated":"20230727000589"},"Children":[{"ID":"20230727000590-dvvoqfp","Type":"NodeParagraph","Properties":{"id":"20230727000590-dvvoqfp","updated":"20230727000590"},"Children":[{"Type":"NodeText","Data":"跨代引用假说：跨代引用和同代引用相比仅占一小部分"}]}]}]},{"ID":"20230727000591-4w6hxg2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000591-4w6hxg2","updated":"20230727000591"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"8.2 新生代分区和老年代分区"}]},{"ID":"20230727000592-glsz3pe","Type":"NodeParagraph","Properties":{"id":"20230727000592-glsz3pe","updated":"20230727000592"},"Children":[{"Type":"NodeText","Data":"分代收集算法会将对象按照生命周期的长短划分到不同的分区。对于生命周期短的新生代区域，每次回收仅需要考虑如何保留少量的存活对象，因此可以采用标记-复制算法完成"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"；对于生命周期长的老年代区域，可以通过减少垃圾回收的频率来提升效率，同时由于对象存活率高没有额外的空间用于复制，因此一般使用标记-清除算法或者标记-整理算法。"}]},{"ID":"20230727000593-081khw6","Type":"NodeBlockquote","Properties":{"id":"20230727000593-081khw6","updated":"20230727000593"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000594-389prtm","Type":"NodeParagraph","Properties":{"id":"20230727000594-389prtm","updated":"20230727000594"},"Children":[{"Type":"NodeText","Data":"分代收集算法首先会根据对象的生命周期将内存划分为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"两块大区域。由于新生代中的对象生命周期较短（每次回收约 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"98%"},{"Type":"NodeText","Data":"的对象是垃圾对象），再加上新生代采用标记-复制法需要两块内存交替使用， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young"},{"Type":"NodeText","Data":"区为了节省复制算法的内存代价又划分成 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"、 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor0"},{"Type":"NodeText","Data":"和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor1"},{"Type":"NodeText","Data":"三个分区（内存分配比例为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"8:1:1"},{"Type":"NodeText","Data":"）。另外，我们没法保证 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young"},{"Type":"NodeText","Data":"区每次回收都仅有 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"10%"},{"Type":"NodeText","Data":"不到的对象存活，因此当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor"},{"Type":"NodeText","Data":"区空间不够时需要放到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区，而且大对象需要直接进 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区。"}]}]},{"ID":"20230727000595-l47mivv","Type":"NodeParagraph","Properties":{"id":"20230727000595-l47mivv","updated":"20230727000595"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\247ea13b01610ec1f4ac83229e9bba1a.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000596-nhrfpba","Type":"NodeParagraph","Properties":{"id":"20230727000596-nhrfpba","updated":"20230727000596"},"Children":[{"Type":"NodeText","Data":"由于堆分为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"两个分区，因此垃圾回收也根据回收的分区不同划分为新生代回收"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"和老年代回收"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Major GC"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727000597-y8z1o1u","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000597-y8z1o1u","updated":"20230727000597"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"8.3 对象的分配策略"}]},{"ID":"20230727000598-rnb3wyo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000598-rnb3wyo","updated":"20230727000598"},"Children":[{"ID":"20230727000599-35lxr2z","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000599-35lxr2z","updated":"20230727000599"},"Children":[{"ID":"20230727000600-szofr7j","Type":"NodeParagraph","Properties":{"id":"20230727000600-szofr7j","updated":"20230727000600"},"Children":[{"Type":"NodeText","Data":"对象优先在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Yonug"},{"Type":"NodeText","Data":"上的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"区域分配"}]}]},{"ID":"20230727000601-yo4ei64","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000601-yo4ei64","updated":"20230727000601"},"Children":[{"ID":"20230727000602-reivgln","Type":"NodeParagraph","Properties":{"id":"20230727000602-reivgln","updated":"20230727000602"},"Children":[{"Type":"NodeText","Data":"大对象直接进入"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区：主要是因为我们没法保证"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young"},{"Type":"NodeText","Data":"区每次回收都仅有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"10%"},{"Type":"NodeText","Data":"不到的对象存活，因此标记-复制法下"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor"},{"Type":"NodeText","Data":"难以回收较大的对象"}]}]},{"ID":"20230727000603-80430ox","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000603-80430ox","updated":"20230727000603"},"Children":[{"ID":"20230727000604-f75kehl","Type":"NodeParagraph","Properties":{"id":"20230727000604-f75kehl","updated":"20230727000604"},"Children":[{"Type":"NodeText","Data":"新生代中生命周期较长的对象在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor"},{"Type":"NodeText","Data":"区每熬过因此"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"就会增加一岁，年龄增加到一定阈值时就进入老年代"}]}]}]},{"ID":"20230727000605-n562prc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000605-n562prc","updated":"20230727000605"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"8.4 分代算法的大体流程"}]},{"ID":"20230727000606-k8x6dp0","Type":"NodeParagraph","Properties":{"id":"20230727000606-k8x6dp0","updated":"20230727000606"},"Children":[{"Type":"NodeText","Data":"假设一开始"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Young"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区都是空的，流程如下："}]},{"ID":"20230727000607-fqa1b17","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000607-fqa1b17","updated":"20230727000607"},"Children":[{"ID":"20230727000608-f63e9r2","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000608-f63e9r2","updated":"20230727000608"},"Children":[{"ID":"20230727000609-ep8m1yo","Type":"NodeParagraph","Properties":{"id":"20230727000609-ep8m1yo","updated":"20230727000609"},"Children":[{"Type":"NodeText","Data":"新分配的对象优先存放在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"区（大对象直接进入"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区）"}]}]},{"ID":"20230727000610-weu6kiz","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230727000610-weu6kiz","updated":"20230727000610"},"Children":[{"ID":"20230727000611-f8wyw6p","Type":"NodeParagraph","Properties":{"id":"20230727000611-f8wyw6p","updated":"20230727000611"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"区满了之后开始进行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"，将"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"中存活的对象移动到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor0"},{"Type":"NodeText","Data":"区，直接清空"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"区"}]}]},{"ID":"20230727000612-i4rvnmh","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20230727000612-i4rvnmh","updated":"20230727000612"},"Children":[{"ID":"20230727000613-7foybaw","Type":"NodeParagraph","Properties":{"id":"20230727000613-7foybaw","updated":"20230727000613"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"区第二次满了之后进行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"，将"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor0"},{"Type":"NodeText","Data":"中存活的对象复制到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor1"},{"Type":"NodeText","Data":"区，清空"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Eden"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor0"},{"Type":"NodeText","Data":"区"}]}]},{"ID":"20230727000614-qaafasw","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20230727000614-qaafasw","updated":"20230727000614"},"Children":[{"ID":"20230727000615-pbvvia1","Type":"NodeParagraph","Properties":{"id":"20230727000615-pbvvia1","updated":"20230727000615"},"Children":[{"Type":"NodeText","Data":"若干轮"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"过后，此时新生代中生命周期较长的对象熬过了一定次数的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"晋升成老年代移动到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区，某轮"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Minor GC"},{"Type":"NodeText","Data":"存活率较高"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Survivor"},{"Type":"NodeText","Data":"区空间不足时也会将存活对象放到"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区"}]}]},{"ID":"20230727000616-1g89wor","Type":"NodeListItem","Data":"5","ListData":{"Typ":1,"Tight":true,"Start":5,"Delimiter":46,"Padding":3,"Marker":"NQ==","Num":5},"Properties":{"id":"20230727000616-1g89wor","updated":"20230727000616"},"Children":[{"ID":"20230727000617-l58x869","Type":"NodeParagraph","Properties":{"id":"20230727000617-l58x869","updated":"20230727000617"},"Children":[{"Type":"NodeText","Data":"当"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Old"},{"Type":"NodeText","Data":"区满了之后进行"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Major GC"}]}]}]},{"ID":"20230727000618-pax0kqi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000618-pax0kqi","updated":"20230727000618"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"增量和并发式垃圾回收"}]},{"ID":"20230727000619-27uy90j","Type":"NodeParagraph","Properties":{"id":"20230727000619-27uy90j","updated":"20230727000619"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\f6f04c7195d462321ee11b8150f26593.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000620-isthck6","Type":"NodeParagraph","Properties":{"id":"20230727000620-isthck6","updated":"20230727000620"},"Children":[{"Type":"NodeText","Data":"前面提到传统的垃圾回收算法都有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"的弊端，即需要在执行垃圾回收过程中需要抢占"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CPU"},{"Type":"NodeText","Data":"，这会暂停所有的用户程序。这有两个弊端："}]},{"ID":"20230727000621-edl7sbk","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000621-edl7sbk","updated":"20230727000621"},"Children":[{"ID":"20230727000622-v3s5mrd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000622-v3s5mrd","updated":"20230727000622"},"Children":[{"ID":"20230727000623-hnhimts","Type":"NodeParagraph","Properties":{"id":"20230727000623-hnhimts","updated":"20230727000623"},"Children":[{"Type":"NodeText","Data":"通常"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GC"},{"Type":"NodeText","Data":"任务都比较繁重，长时间暂停用户程序会影响程序的响应速度，这对于实时性要求较高的程序是致命的缺点"}]}]},{"ID":"20230727000624-s5mzegz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000624-s5mzegz","updated":"20230727000624"},"Children":[{"ID":"20230727000625-a7a3lpl","Type":"NodeParagraph","Properties":{"id":"20230727000625-a7a3lpl","updated":"20230727000625"},"Children":[{"Type":"NodeText","Data":"对于多核计算机而言，抢占"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"CPU"},{"Type":"NodeText","Data":"进行垃圾回收会造成计算资源浪费"}]}]}]},{"ID":"20230727000626-7buwgvo","Type":"NodeBlockquote","Properties":{"id":"20230727000626-7buwgvo","updated":"20230727000626"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000627-ufh8dbx","Type":"NodeParagraph","Properties":{"id":"20230727000627-ufh8dbx","updated":"20230727000627"},"Children":[{"Type":"NodeText","Data":"三色标记法结合读写屏障技术使得垃圾回收器 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Collector"},{"Type":"NodeText","Data":"避免了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"，因此后续提到的增量式垃圾回收和并发式垃圾回收都是基于三色标记法和读写屏障技术的。为了保证三色不变性，我们需要在垃圾回收前打开写屏障，在本轮垃圾回收过程中用户所有对内存的写操作都需要被写屏障拦截。"}]}]},{"ID":"20230727000628-ir8y1ry","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000628-ir8y1ry","updated":"20230727000628"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1. 增量式垃圾回收"}]},{"ID":"20230727000629-k0cpb7y","Type":"NodeParagraph","Properties":{"id":"20230727000629-k0cpb7y","updated":"20230727000629"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\114d5bb9791d0a3b9dbc0bcad63df22b.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000630-05qz505","Type":"NodeParagraph","Properties":{"id":"20230727000630-05qz505","updated":"20230727000630"},"Children":[{"Type":"NodeText","Data":"增量式垃圾回收过程图如上所示，同"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"STW"},{"Type":"NodeText","Data":"垃圾回收过程相比："}]},{"ID":"20230727000631-nmsm5dd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000631-nmsm5dd","updated":"20230727000631"},"Children":[{"ID":"20230727000632-ul8mqt6","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000632-ul8mqt6","updated":"20230727000632"},"Children":[{"ID":"20230727000633-x9z4tdb","Type":"NodeParagraph","Properties":{"id":"20230727000633-x9z4tdb","updated":"20230727000633"},"Children":[{"Type":"NodeText","Data":"优势：将垃圾回收时间分摊开，避免了程序的长时间暂停，防止影响程序的实时性"}]}]},{"ID":"20230727000634-3p0q0k7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000634-3p0q0k7","updated":"20230727000634"},"Children":[{"ID":"20230727000635-udb5u4d","Type":"NodeParagraph","Properties":{"id":"20230727000635-udb5u4d","updated":"20230727000635"},"Children":[{"Type":"NodeText","Data":"劣势：一方面引入了内存写屏障技术，需要额外的计算开销；另一方面由于写屏障技术的保守性导致有一些垃圾对象没有被回收，会增加一轮垃圾回收的总时长"}]}]}]},{"ID":"20230727000636-vdqmotg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000636-vdqmotg","updated":"20230727000636"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2. 并发式垃圾回收"}]},{"ID":"20230727000637-y3n843d","Type":"NodeParagraph","Properties":{"id":"20230727000637-y3n843d","updated":"20230727000637"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\9e3feb6092b7911a9721d58cb81b1b70.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000638-93s8zt8","Type":"NodeParagraph","Properties":{"id":"20230727000638-93s8zt8","updated":"20230727000638"},"Children":[{"Type":"NodeText","Data":"并发式垃圾回收允许垃圾回收器"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"collector"},{"Type":"NodeText","Data":"和用户程序"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"mutator"},{"Type":"NodeText","Data":"同时执行，但仍然有一些阶段需要暂停用户程序。并发式的垃圾回收机制在一定程序上利用了多核计算机的优势并减少了对用户程序的干扰，不过依然无法摆脱读写屏障的额外计算开销和增加一轮垃圾回收总时长的问题。"}]},{"ID":"20230727000639-rqduhcp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000639-rqduhcp","updated":"20230727000639"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Golang GC如何扫描对象[见Reference14]"}]},{"ID":"20230727000640-i7alxmx","Type":"NodeParagraph","Properties":{"id":"20230727000640-i7alxmx","updated":"20230727000640"},"Children":[{"Type":"NodeText","Data":"Golang扫描对象可以分为三部分："}]},{"ID":"20230727000641-ul4a1dm","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000641-ul4a1dm","updated":"20230727000641"},"Children":[{"ID":"20230727000642-w7mre6q","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000642-w7mre6q","updated":"20230727000642"},"Children":[{"ID":"20230727000643-3czwa07","Type":"NodeParagraph","Properties":{"id":"20230727000643-3czwa07","updated":"20230727000643"},"Children":[{"Type":"NodeText","Data":"编译阶段：对静态类型做好标记准备"}]}]},{"ID":"20230727000644-r5y67hj","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000644-r5y67hj","updated":"20230727000644"},"Children":[{"ID":"20230727000645-w8f3xnd","Type":"NodeParagraph","Properties":{"id":"20230727000645-w8f3xnd","updated":"20230727000645"},"Children":[{"Type":"NodeText","Data":"运行阶段：赋值器分配内存时，根据编译阶段的type为对象内存对应的指针设置bitmap"}]}]},{"ID":"20230727000646-xsyj0o8","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000646-xsyj0o8","updated":"20230727000646"},"Children":[{"ID":"20230727000647-2gv7mnj","Type":"NodeParagraph","Properties":{"id":"20230727000647-2gv7mnj","updated":"20230727000647"},"Children":[{"Type":"NodeText","Data":"扫描阶段：根据指针的bitmap进行扫描"}]}]}]},{"ID":"20230727000648-tiwyg91","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000648-tiwyg91","updated":"20230727000648"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1. 编译阶段"}]},{"ID":"20230727000649-29pl67d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000649-29pl67d","updated":"20230727000649"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.1 Golang结构体对齐规则"}]},{"ID":"20230727000650-vkxw94t","Type":"NodeParagraph","Properties":{"id":"20230727000650-vkxw94t","updated":"20230727000650"},"Children":[{"Type":"NodeText","Data":"Golang结构体对齐规则包括两部分："}]},{"ID":"20230727000651-1gzf397","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000651-1gzf397","updated":"20230727000651"},"Children":[{"ID":"20230727000652-xvv84po","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000652-xvv84po","updated":"20230727000652"},"Children":[{"ID":"20230727000653-g0qzhao","Type":"NodeParagraph","Properties":{"id":"20230727000653-g0qzhao","updated":"20230727000653"},"Children":[{"Type":"NodeText","Data":"长度对齐"}]}]},{"ID":"20230727000654-5ueegn5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000654-5ueegn5","updated":"20230727000654"},"Children":[{"ID":"20230727000655-6ptpc0q","Type":"NodeParagraph","Properties":{"id":"20230727000655-6ptpc0q","updated":"20230727000655"},"Children":[{"Type":"NodeText","Data":"地址对齐"}]}]}]},{"ID":"20230727000656-69bwvqh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000656-69bwvqh","updated":"20230727000656"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.2 长度对齐"}]},{"ID":"20230727000657-o7drl15","Type":"NodeParagraph","Properties":{"id":"20230727000657-o7drl15","updated":"20230727000657"},"Children":[{"Type":"NodeText","Data":"长度对齐指的是结构体的长度至少是内部最长的基础字段的整数倍。比如下面这个结构体内存占用为16个字节，因为TestStruct整体要和内部最长的基础字段ptr（8字节的uintptr类型）对齐。"}]},{"ID":"20230727000658-8e20cyn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000658-8e20cyn","updated":"20230727000658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type TestStruct struct {ptr   uintptr  // 8字节int1  uint32   // 4字节int2  uint8    // 1字节\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000659-o3o94qs","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000659-o3o94qs","updated":"20230727000659"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.3 地址对齐"}]},{"ID":"20230727000660-msl59ry","Type":"NodeParagraph","Properties":{"id":"20230727000660-msl59ry","updated":"20230727000660"},"Children":[{"Type":"NodeText","Data":"字段的地址偏移是自身长度的整数倍，仍然以TestStruct为例，令第二个元素为1个字节大小："}]},{"ID":"20230727000661-p5klj1p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000661-p5klj1p","updated":"20230727000661"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 假设new一个TestStruct结构体的地址是x, 则各字段的地址如下\n// ptr: a + 0\n// int1: a + 8\n// int2: a + 8 + 4\ntype TestStruct struct {ptr   uintptr  // 8字节int1  uint8    // 1字节int2  uint32   // 4字节\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000662-lnnptfy","Type":"NodeBlockquote","Properties":{"id":"20230727000662-lnnptfy","updated":"20230727000662"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000663-2n5u0zs","Type":"NodeParagraph","Properties":{"id":"20230727000663-2n5u0zs","updated":"20230727000663"},"Children":[{"Type":"NodeText","Data":"int1和int2之间填充了一些没使用到的内存空间，进而实现了地址对齐。"}]}]},{"ID":"20230727000664-syn0bt8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000664-syn0bt8","updated":"20230727000664"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"1.4 指针位标记"}]},{"ID":"20230727000665-glmboff","Type":"NodeParagraph","Properties":{"id":"20230727000665-glmboff","updated":"20230727000665"},"Children":[{"Type":"NodeText","Data":"golang的所有类型都对应一个_type结构："}]},{"ID":"20230727000666-8axeprl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000666-8axeprl","updated":"20230727000666"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Needs to be in sync with ../cmd/link/internal/ld/decodesym.go:/^func.commonsize,\n// ../cmd/compile/internal/gc/reflect.go:/^func.dcommontype and\n// ../reflect/type.go:/^type.rtype.\ntype _type struct {size       uintptrptrdata    uintptr // size of memory prefix holding all pointershash       uint32tflag      tflagalign      uint8fieldalign uint8kind       uint8alg        *typeAlg// gcdata stores the GC type data for the garbage collector.// If the KindGCProg bit is set in kind, gcdata is a GC program.// Otherwise it is a ptrmask bitmap. See mbitmap.go for details.gcdata    *bytestr       nameOffptrToThis typeOff\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000667-6861dn5","Type":"NodeParagraph","Properties":{"id":"20230727000667-6861dn5","updated":"20230727000667"},"Children":[{"Type":"NodeText","Data":"比如说我们定义一个struct如下："}]},{"ID":"20230727000668-r1h2wu2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000668-r1h2wu2","updated":"20230727000668"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type TestStruct struct {ptr   uintptrint1  uint8pint1 *uint8int2  uint32pint2 *uint64int3  uint64\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000669-td8zc7z","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000669-td8zc7z","updated":"20230727000669"},"Children":[{"ID":"20230727000670-aquvv9f","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000670-aquvv9f","updated":"20230727000670"},"Children":[{"ID":"20230727000671-ib6mnhx","Type":"NodeParagraph","Properties":{"id":"20230727000671-ib6mnhx","updated":"20230727000671"},"Children":[{"Type":"NodeText","Data":"size：类型长度，上面这个结构体的长度48个字节"}]}]},{"ID":"20230727000672-ug1812v","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000672-ug1812v","updated":"20230727000672"},"Children":[{"ID":"20230727000673-b0b617v","Type":"NodeParagraph","Properties":{"id":"20230727000673-b0b617v","updated":"20230727000673"},"Children":[{"Type":"NodeText","Data":"ptrdata：指针截止的长度位置，由于最后一个指针是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"pint2"},{"Type":"NodeText","Data":"，因此包含指针的字段截止到40字节的位置"}]}]},{"ID":"20230727000674-ntpqbi7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000674-ntpqbi7","updated":"20230727000674"},"Children":[{"ID":"20230727000675-bdgqfjn","Type":"NodeParagraph","Properties":{"id":"20230727000675-bdgqfjn","updated":"20230727000675"},"Children":[{"Type":"NodeText","Data":"kind：类型，自定义struct类型的kind为25"}]}]},{"ID":"20230727000676-bcsd9mz","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000676-bcsd9mz","updated":"20230727000676"},"Children":[{"ID":"20230727000677-vh8uenv","Type":"NodeParagraph","Properties":{"id":"20230727000677-vh8uenv","updated":"20230727000677"},"Children":[{"Type":"NodeText","Data":"gcdata：byte数组（*byte类型），表示指针的bitmap。比如当gcdata等于20（二进制00010100，从低位到高位就是00101000，其中每个bit表示一个指针大小（8字节）的内存，第3个bit和第5个bit为1表示第三个和第五个字段是指针类型）。"}]}]}]},{"ID":"20230727000678-odg0pyg","Type":"NodeBlockquote","Properties":{"id":"20230727000678-odg0pyg","updated":"20230727000678"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000679-hc30itw","Type":"NodeParagraph","Properties":{"id":"20230727000679-hc30itw","updated":"20230727000679"},"Children":[{"Type":"NodeText","Data":"第一个类型uintptr在指针的bitmap是不会标记成指针类型的，用这个存储指针是无法保护对象的（扫描的时候uintptr指向的对象不会被扫描）。"}]}]},{"ID":"20230727000680-2cccyn0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000680-2cccyn0","updated":"20230727000680"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"2. 运行期内存分配"}]},{"ID":"20230727000681-c34qqh0","Type":"NodeParagraph","Properties":{"id":"20230727000681-c34qqh0","updated":"20230727000681"},"Children":[{"Type":"NodeText","Data":"golang在运行分配完内存后会调用函数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"heapBitsSetType"},{"Type":"NodeText","Data":"，这个函数及其复杂，但是主要逻辑是根据编译期间对每个struct生成的type结构，用一个bitmap记录下来分配的内存块中哪些位置是指针。"}]},{"ID":"20230727000682-1o7ibuv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000682-1o7ibuv","updated":"20230727000682"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"3. 运行扫描阶段"}]},{"ID":"20230727000683-prdo7lh","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000683-prdo7lh","updated":"20230727000683"},"Children":[{"ID":"20230727000684-l0avik7","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000684-l0avik7","updated":"20230727000684"},"Children":[{"ID":"20230727000685-y1lnfyj","Type":"NodeParagraph","Properties":{"id":"20230727000685-y1lnfyj","updated":"20230727000685"},"Children":[{"Type":"NodeText","Data":"扫描阶段从markroot开始，以栈对象、全局变量和寄存器对象作为gc root，创建一个有向引用图并将根对象添加到队列中"}]}]},{"ID":"20230727000686-t3tgrmo","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000686-t3tgrmo","updated":"20230727000686"},"Children":[{"ID":"20230727000687-ooecqev","Type":"NodeParagraph","Properties":{"id":"20230727000687-ooecqev","updated":"20230727000687"},"Children":[{"Type":"NodeText","Data":"新起一个异步goroutine执行gcDrain函数，从队列里消费并扫描对象"}]}]}]}]}