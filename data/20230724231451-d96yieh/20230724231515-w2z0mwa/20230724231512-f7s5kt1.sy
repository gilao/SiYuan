{"ID":"20230724231512-f7s5kt1","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f9ee","id":"20230724231512-f7s5kt1","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724231512-f7s5kt1\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724231513-tx17rqt\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724231514-lsgye7c\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231120160710-xhahs1u\u0026quot;,\u0026quot;focusStart\u0026quot;:57,\u0026quot;focusEnd\u0026quot;:57\u0026#125;","title":"Go 工厂模式","updated":"20231215160143"},"Children":[{"ID":"20230724231513-tx17rqt","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231513-tx17rqt","updated":"20231117213356"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/Fp0KxoXc4y3z8cgc7IzD-Q","TextMarkTextContent":"Go 工厂模式"},{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231120160710-ploo25y","Type":"NodeParagraph","Properties":{"id":"20231120160710-ploo25y","updated":"20231120160710"},"Children":[{"Type":"NodeText","Data":"Go 语言中没有针对类的构造器方法定义统一的规范，倘若每次需要创建类的实例时，都需要在业务方法中事无俱细地执行实例初始化的细节，那么会存在缺陷的包括："}]},{"ID":"20231120160710-b2hwdi7","Type":"NodeList","ListData":{},"Properties":{"id":"20231120160710-b2hwdi7","updated":"20231120160710"},"Children":[{"ID":"20231120160710-w48x0pw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231120160710-w48x0pw","updated":"20231120160710"},"Children":[{"ID":"20231120160710-v82jo1u","Type":"NodeParagraph","Properties":{"id":"20231120160710-v82jo1u","updated":"20231120160710"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"业务方法和组件类之间产生过高的耦合度，需要了解到组件类的过多细节"}]}]},{"ID":"20231120160710-zei5wr6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231120160710-zei5wr6","updated":"20231120160710"},"Children":[{"ID":"20231120160710-s8wemc7","Type":"NodeParagraph","Properties":{"id":"20231120160710-s8wemc7","updated":"20231120160710"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"倘若组件类的定义发生变更，那么散落在各处业务方法中对类的构造流程都需要配合改动"}]}]}]},{"ID":"20231120160710-ihnki0z","Type":"NodeParagraph","Properties":{"id":"20231120160710-ihnki0z","updated":"20231120160710"},"Children":[{"Type":"NodeText","Data":"那么如何解决上述问题呢？在编程世界中，相当的一部分问题都可以通过增加一个中间层加以解决. 我们在此处遵循工厂模式的设计思路，在业务方法和类之间添加一个防腐中间层——工厂类，这样做能够带来的好处是："}]},{"ID":"20231120160710-nro74tj","Type":"NodeList","ListData":{},"Properties":{"id":"20231120160710-nro74tj","updated":"20231120160710"},"Children":[{"ID":"20231120160710-hkkz7le","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231120160710-hkkz7le","updated":"20231120160710"},"Children":[{"ID":"20231120160710-whrhl1c","Type":"NodeParagraph","Properties":{"id":"20231120160710-whrhl1c","updated":"20231120160710"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"实现类和业务方法之间的解耦，如果类的构造过程发生变更，可以统一收口在工厂类中进行处理，从而对业务方法屏蔽相关细节"}]}]},{"ID":"20231120160710-8oc02j1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231120160710-8oc02j1","updated":"20231120160710"},"Children":[{"ID":"20231120160710-xhahs1u","Type":"NodeParagraph","Properties":{"id":"20231120160710-xhahs1u","updated":"20231120160710"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"倘若有多个类都聚拢在工厂类中进行构造，这样各个类的构造流程中就天然形成了一个公共的切面，可以进行一些公共逻辑的执行"}]}]}]},{"ID":"20231120160649-sam0cmy","Type":"NodeParagraph","Properties":{"id":"20231120160649-sam0cmy","updated":"20231120160649"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231120160530-gvrifyb.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230724231514-lsgye7c","Type":"NodeParagraph","Properties":{"id":"20230724231514-lsgye7c","updated":"20231117211948"}}]}