{"ID":"20240429110851-igq75tc","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2702-fe0f","id":"20240429110851-igq75tc","title":"controller.py ","updated":"20240429110916"},"Children":[{"ID":"20240429110916-jvsgwzn","Type":"NodeParagraph","Properties":{"id":"20240429110916-jvsgwzn","updated":"20240429110916"},"Children":[{"Type":"NodeText","Data":"该Python脚本实现了一个控制器服务，其核心目标是管理一组分布式工作的节点（workers），这些节点通常执行特定任务，如模型推理等。控制器的关键职责包括但不限于注册新工人、监控心跳、调度任务到合适的工人、以及提供API供客户端查询和交互。以下是该脚本的详细功能分析："}]},{"ID":"20240429110916-bf4ebpc","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240429110916-bf4ebpc","updated":"20240429110916"},"Children":[{"ID":"20240429110916-v2itzzc","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240429110916-v2itzzc","updated":"20240429110916"},"Children":[{"ID":"20240429110916-n6p2fqz","Type":"NodeParagraph","Properties":{"id":"20240429110916-n6p2fqz","updated":"20240429110916"},"Children":[{"Type":"NodeText","Data":"基础架构与依赖导入\n引入了必要的库，如argparse用于命令行参数解析，asyncio和uvicorn用于异步HTTP服务器运行，FastAPI构建RESTful API，numpy处理数值计算，以及requests进行HTTP请求等。\n定义了日志记录器，使用build_logger函数初始化，确保操作有迹可循。"}]}]},{"ID":"20240429110916-pj5x0qb","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240429110916-pj5x0qb","updated":"20240429110916"},"Children":[{"ID":"20240429110916-nefxvvl","Type":"NodeParagraph","Properties":{"id":"20240429110916-nefxvvl","updated":"20240429110916"},"Children":[{"Type":"NodeText","Data":"核心逻辑组件\n2.1 DispatchMethod Enum类\n定义了调度策略的枚举类型，包括LOTTERY(随机选择) 和 SHORTEST_QUEUE(选择队列最短的)。这为控制器提供了灵活的任务分配策略。\n2.2 WorkerInfo dataclass\n使用dataclasses.dataclass定义了WorkerInfo结构，存储每个工人的关键信息，如支持的模型列表、处理速度、当前队列长度、心跳检查标志及最后心跳时间等。\n2.3 Controller 类\n初始化：接收调度策略作为参数，初始化工人信息字典、调度方法，并启动一个线程周期性检查心跳过期的工人。\n方法：\nregister_worker：根据工人状态信息注册新工人或更新现有工人的状态。\nget_worker_status：通过HTTP请求获取单个工人的状态。\nremove_worker：从管理列表中移除指定工人。\nrefresh_all_workers：重新验证并更新所有工人的状态。\nlist_models系列方法：分别列出所有模型、多模态模型和语言模型。\nget_worker_address：根据模型名选择一个合适的工人地址，依据调度策略决定。\nreceive_heart_beat：处理工人的心跳信号，更新工人状态。\nremove_stale_workers_by_expiration：定期清理未发送心跳的过期工人。\nAPI处理方法：如worker_api_generate_stream，处理特定于工人的请求，如生成数据流。"}]}]},{"ID":"20240429110916-ehg2m8l","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240429110916-ehg2m8l","updated":"20240429110916"},"Children":[{"ID":"20240429110916-ef8vz28","Type":"NodeParagraph","Properties":{"id":"20240429110916-ef8vz28","updated":"20240429110916"},"Children":[{"Type":"NodeText","Data":"FastAPI应用\n定义了一系列API端点，允许外部客户端或工人与控制器交互，比如注册新工人(/register_worker)、获取模型列表(/list_models)、获取工作者地址(/get_worker_address)等。"}]}]},{"ID":"20240429110916-zenb5wl","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240429110916-zenb5wl","updated":"20240429110916"},"Children":[{"ID":"20240429110916-apq0xre","Type":"NodeParagraph","Properties":{"id":"20240429110916-apq0xre","updated":"20240429110916"},"Children":[{"Type":"NodeText","Data":"主函数与参数解析\n使用argparse解析命令行参数，设置控制器监听的主机和端口，以及调度策略等。\n根据参数创建控制器实例，并根据是否启用SSL配置启动uvicorn服务器。"}]}]},{"ID":"20240429110916-fwichbc","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240429110916-fwichbc","updated":"20240429110916"},"Children":[{"ID":"20240429110916-8sduoxe","Type":"NodeParagraph","Properties":{"id":"20240429110916-8sduoxe","updated":"20240429110916"},"Children":[{"Type":"NodeText","Data":"设计特点\n异步处理：利用FastAPI和asyncio，支持高效并发处理HTTP请求。\n动态调度：通过不同调度策略适应不同的负载均衡需求。\n心跳机制：确保工人状态实时更新，及时剔除故障节点。\n层次化管理：控制器自身可作为“超级工人”，连接并管理下级网络，实现网络的层级化控制。\n综上所述，该脚本构建了一个高度灵活且可扩展的分布式系统控制器，有效管理了分布式资源，提高了系统的稳定性和效率。"}]}]}]},{"ID":"20240429110851-87hpexf","Type":"NodeParagraph","Properties":{"id":"20240429110851-87hpexf","updated":"20240429110851"}}]}