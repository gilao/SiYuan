{"ID":"20240429142412-5xhg9a6","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f40f","id":"20240429142412-5xhg9a6","title":"openai_api_server.py","updated":"20240429152426"},"Children":[{"ID":"20240429142431-t0qj4mq","Type":"NodeParagraph","Properties":{"id":"20240429142431-t0qj4mq","updated":"20240429142516"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"日志记录器初始化:"}]},{"ID":"20240429142441-4as8shr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240429142441-4as8shr","updated":"20240429142451"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"   logger = build_logger(\"openai_api_server\", \"openai_api_server.log\")\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240429142412-lrg5h05","Type":"NodeParagraph","Properties":{"id":"20240429142412-lrg5h05","updated":"20240429142513"},"Children":[{"Type":"NodeText","Data":"这行代码创建并初始化一个日志记录器，命名为openai_api_server，日志信息将会被记录到名为openai_api_server.log的文件中。build_logger函数虽然未在代码片段中定义，但根据其命名和参数推测，它应负责设置日志的格式、级别等配置，并绑定到指定的日志文件。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"全局变量定义:"},{"Type":"NodeText","Data":"\nconv_template_map: 空字典，可能用于后续存储某种对话模板或配置，但当前未赋值。\nfetch_timeout: 使用aiohttp.ClientTimeout类定义了异步HTTP请求的超时时间，总超时时间为3小时。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"异步函数 fetch_remote:"}]},{"ID":"20240429142522-6vbhmyq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240429142522-6vbhmyq","updated":"20240429142529"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"   async def fetch_remote(url, pload=None, name=None):\n       ...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240429142530-8odspgw","Type":"NodeParagraph","Properties":{"id":"20240429142530-8odspgw","updated":"20240429142538"},"Children":[{"Type":"NodeText","Data":"此函数用于执行异步HTTP POST请求到指定的url，并可选地携带JSON形式的pload（即payload，请求体）。它使用了aiohttp库来管理异步会话和请求。\n如果响应状态码不是200，函数会立即返回一个错误信息的JSON字符串。\n对于成功的响应，函数会累积响应体的各个数据块（chunks），最后合并成完整的输出（output）。\n若提供了name参数，函数还会进一步处理输出，尝试将其解析为JSON，并提取指定键名的数据。如果name为空字符串，则直接返回原始输出。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"配置类 AppSettings:"}]},{"ID":"20240429142539-4ki8nyf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240429142539-4ki8nyf","updated":"20240429142551"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"   class AppSettings(BaseSettings):\n       controller_address: str = \"http://localhost:21001\"\n       api_keys: Optional[List[str]] = None\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240429142602-4wtqr8z","Type":"NodeParagraph","Properties":{"id":"20240429142602-4wtqr8z","updated":"20240429142604"},"Children":[{"Type":"NodeText","Data":"这是一个继承自BaseSettings的类，用于定义应用程序的配置。它包含了两个字段：\ncontroller_address: 控制器服务的地址，默认为本地的http://localhost:21001。\napi_keys: 可选的API密钥列表，用于认证和授权。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"应用设置实例与FastAPI应用初始化:"}]},{"ID":"20240429142604-9pm1a4m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240429142604-9pm1a4m","updated":"20240429142614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"   app_settings = AppSettings()\n   app = fastapi.FastAPI()\n   headers = {\"User-Agent\": \"FastChat API Server\"}\n   get_bearer_token = HTTPBearer(auto_error=False)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240429142616-22puv2y","Type":"NodeList","ListData":{},"Properties":{"id":"20240429142616-22puv2y","updated":"20240429142708"},"Children":[{"ID":"20240429142630-l53gvd7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429142630-l53gvd7","updated":"20240429142708"},"Children":[{"ID":"20240429142630-ae4vqx8","Type":"NodeParagraph","Properties":{"id":"20240429142630-ae4vqx8","updated":"20240429142630"},"Children":[{"Type":"NodeText","Data":"app_settings是AppSettings类的一个实例，用于存储应用程序的实际配置值。\n"}]},{"ID":"20240429142643-3jlfw3n","Type":"NodeList","ListData":{},"Properties":{"id":"20240429142643-3jlfw3n","updated":"20240429142708"},"Children":[{"ID":"20240429142647-pw212vx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429142647-pw212vx","updated":"20240429142647"},"Children":[{"ID":"20240429142647-ssutv9v","Type":"NodeParagraph","Properties":{"id":"20240429142647-ssutv9v","updated":"20240429142647"},"Children":[{"Type":"NodeText","Data":"app是使用FastAPI框架创建的Web应用实例。"}]}]},{"ID":"20240429142652-5rfwd8u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429142652-5rfwd8u"},"Children":[{"ID":"20240429142652-k4f710n","Type":"NodeParagraph","Properties":{"id":"20240429142652-k4f710n","updated":"20240429142707"},"Children":[{"Type":"NodeText","Data":"headers定义了默认的HTTP请求头，包含一个自定义的用户代理字"}]}]},{"ID":"20240429142708-h5de413","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429142708-h5de413","updated":"20240429142708"},"Children":[{"ID":"20240429142708-cpcr1ck","Type":"NodeParagraph","Properties":{"id":"20240429142708-cpcr1ck"},"Children":[{"Type":"NodeText","Data":"get_bearer_token是一个依赖项，用于从HTTP请求中提取Bearer类型的认证令牌，且不强制要求存在。"}]}]}]}]}]},{"ID":"20240429142633-tmd16b2","Type":"NodeParagraph","Properties":{"id":"20240429142633-tmd16b2","updated":"20240429142718"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"API密钥检查函数 check_api_key:"}]},{"ID":"20240429142719-y4vq5ad","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240429142719-y4vq5ad","updated":"20240429142733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"   async def check_api_key(...):\n       ...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240429142735-no3jtu6","Type":"NodeParagraph","Properties":{"id":"20240429142735-no3jtu6","updated":"20240429142750"},"Children":[{"Type":"NodeText","Data":"此异步函数用于验证API请求中的密钥是否有效。它依赖于get_bearer_token获取请求中的Bearer令牌。"}]},{"ID":"20240429142752-w7udc7w","Type":"NodeList","ListData":{},"Properties":{"id":"20240429142752-w7udc7w","updated":"20240429142903"},"Children":[{"ID":"20240429142753-cowvgbr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429142753-cowvgbr","updated":"20240429142753"},"Children":[{"ID":"20240429142753-dpa3p7a","Type":"NodeParagraph","Properties":{"id":"20240429142753-dpa3p7a","updated":"20240429142759"},"Children":[{"Type":"NodeText","Data":"如果api_keys在配置中已设置，函数会检查请求携带的令牌是否在允许的API密钥列表中。如果密钥无效或缺失，会抛出HTTP 401 Unauthorized异常，错误类型为invalid_api_key。"}]}]},{"ID":"20240429142800-mo92qqs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429142800-mo92qqs","updated":"20240429142903"},"Children":[{"ID":"20240429142800-nx00kjo","Type":"NodeParagraph","Properties":{"id":"20240429142800-nx00kjo","updated":"20240429142903"},"Children":[{"Type":"NodeText","Data":"如果api_keys未设置，则不对请求做任何验证，直接允许通过（这通常用于开发或测试环境）。"}]}]}]},{"ID":"20240429142903-jh9mteu","Type":"NodeParagraph","Properties":{"id":"20240429142903-jh9mteu","updated":"20240429142906"},"Children":[{"Type":"NodeText","Data":"综上所述，这段代码主要设置了日志记录、定义了异步数据获取逻辑、配置了应用的基本设置，并实现了一个API密钥的简单验证机制，构成了一个基于FastAPI的API服务器的基础架构。"}]},{"ID":"20240429142744-05wdybh","Type":"NodeParagraph","Properties":{"id":"20240429142744-05wdybh","updated":"20240429144827"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"create_error_response:"},{"Type":"NodeText","Data":"\n功能: 此函数接收一个整型错误码code和一个字符串类型的错误信息message，并利用这两个参数创建一个JSONResponse对象。这个响应对象包含了自定义的错误响应结构（通过ErrorResponse类实例化并转换为字典），其HTTP状态码固定设为400（Bad Request）。此函数主要用于构建统一格式的错误响应。\n用途示例: 当API处理过程中遇到任何预定义的错误情况时，调用此函数快速生成错误消息反馈给客户端。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"validation_exception_handler:"},{"Type":"NodeText","Data":"\n功能: 这是一个异步异常处理器，专为处理FastAPI框架中的RequestValidationError异常设计。当请求验证失败时，它会捕获异常，并调用create_error_response函数，使用预定义的错误代码ErrorCode.VALIDATION_TYPE_ERROR和异常的具体错误信息（转换为字符串）来构造错误响应。\n作用: 确保所有请求验证失败的情况都能以一致且用户友好的方式被处理和返回。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"check_model:"},{"Type":"NodeText","Data":"\n功能: 异步函数，负责检查请求中指定的模型是否存在于远程服务器提供的模型列表中。首先，从应用设置获取控制器地址，然后向该地址发起请求获取模型列表。如果请求的模型不在列表中，该函数将返回一个由create_error_response创建的错误响应，指明允许的模型以及请求模型的不匹配。\n场景: 在处理涉及特定模型的请求前，确保所请求的模型是可服务的。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"check_length:"},{"Type":"NodeText","Data":"\n功能: 异步函数，检查生成请求的长度限制。首先，确保max_tokens参数为正整数，否则默认为1MB的令牌大小。接着，从远程worker获取模型的上下文长度和给定prompt的令牌计数。计算实际可生成的最大令牌数（min(max_tokens, context_len - token_num)），如果计算结果小于等于0，表示超出了模型的最大上下文长度，此时返回一个错误响应。\n目的: 防止生成请求因超过模型的上下文限制而失败。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"check_requests:"},{"Type":"NodeText","Data":"\n功能: 检查请求中的多个参数是否满足预设的范围条件。包括max_tokens, n, temperature, top_p, top_k, 和 stop等参数。对于每个参数，函数会验证其值是否在合理的范围内，如果发现任何参数不合规，立即返回相应的错误响应。\n重要性: 确保API调用的参数安全有效，避免因不当的参数导致内部处理错误或性能问题。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"process_input:"},{"Type":"NodeText","Data":"\n功能: 根据传入的模型名称和输入数据，处理输入到适合模型接受的格式。如果输入是字符串，则转换为单元素列表；如果是整数列表，假设这些是令牌ID，尝试解码为文本；如果是嵌套列表，逐个解码。如果找不到模型对应的编码器，则使用默认的cl100k_base编码。\n应用场景: 在将用户输入传递给模型进行处理之前，确保数据格式正确且已适配目标模型。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"create_openai_logprobs:"},{"Type":"NodeText","Data":"\n功能: 接受一个日志概率字典logprob_dict，并将其转换为一个具有相应属性的LogProbs对象。如果输入为None，则直接返回None。这个过程有助于标准化和封装日志概率数据，以便于后续处理或展示。\n用途: 在需要提供生成文本的概率分布信息时使用，比如OpenAI API的兼容接口。"}]},{"ID":"20240429144811-7en5h84","Type":"NodeParagraph","Properties":{"id":"20240429144811-7en5h84","updated":"20240429144830"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"_add_to_set 函数"},{"Type":"NodeText","Data":"：此辅助函数用于扩展一个集合（可以是字符串或列表类型），使其包含新的停止序列。如果集合s非空，函数会根据s的类型（单个字符串或列表）将new_stop的内容合并进去。如果s是字符串，直接将其加入集合；如果是列表，则使用update方法合并所有元素。这个函数在处理用户请求中的停止单词时非常有用，确保了生成文本时能正确识别并停在指定的标记上。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"get_gen_params 函数："}]},{"ID":"20240429144831-8dpua9u","Type":"NodeParagraph","Properties":{"id":"20240429144831-8dpua9u","updated":"20240429144835"},"Children":[{"Type":"NodeText","Data":"这是一个关键的异步函数，其核心职责是基于一系列输入参数（如模型名称、worker地址、用户消息、温度、top_p等），构造出一个用于生成新文本的参数字典。这个过程包括：\n使用现有的对话模板（通过get_conv函数获取）初始化或更新对话上下文。\n处理用户输入，将纯文本或结构化的消息转换成模型可以理解的格式，并整合图片等多媒体内容（如果存在）。\n根据用户请求和预设的配置设置生成参数，比如温度控制生成文本的随机性，top_p和top_k控制采样策略，以及最大生成长度等。\n考虑到高级选项，如是否存在多个最佳候选生成(best_of)或是否使用束搜索(use_beam_search)。\n最后，整合所有这些信息到一个字典中，该字典可以直接用于调用模型API生成文本。此外，它还处理了停止条件的合并，确保了生成过程能在正确的点终止。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"get_worker_address 函数："}]},{"ID":"20240429144837-1l234pz","Type":"NodeParagraph","Properties":{"id":"20240429144837-1l234pz","updated":"20240429144840"},"Children":[{"Type":"NodeText","Data":"此异步函数负责查询并返回能够处理特定模型请求的worker地址。它通过与控制器服务通信，提供了动态分配worker资源的能力。如果模型有可用的worker，函数将返回该worker的地址；否则，抛出ValueError表明没有worker能处理请求的模型，这在负载均衡和故障转移场景下尤为重要。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"get_conv 函数："}]},{"ID":"20240429144841-9e8r2yc","Type":"NodeParagraph","Properties":{"id":"20240429144841-9e8r2yc","updated":"20240429144841"},"Children":[{"Type":"NodeText","Data":"此异步函数用于获取或缓存与特定模型和worker地址关联的对话模板。对话模板通常包含了系统消息、角色定义、消息分隔符等元数据，对于构建和维护连贯的多轮对话至关重要。函数首先尝试从本地缓存(conv_template_map)中获取模板，如果不存在，则向worker发起请求获取模板信息并存储到缓存中，以便后续快速访问。这一机制减少了对worker的重复请求，提升了系统的响应效率"}]},{"ID":"20240429145556-i8521jx","Type":"NodeParagraph","Properties":{"id":"20240429145556-i8521jx","updated":"20240429145656"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"show_available_models 函数"}]},{"ID":"20240429145702-uw3ndmp","Type":"NodeParagraph","Properties":{"id":"20240429145702-uw3ndmp","updated":"20240429145702"},"Children":[{"Type":"NodeText","Data":"此函数是FastAPI应用中的一个异步路由处理器，负责处理GET请求到/v1/models路径。其主要功能如下：\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"依赖检查:"},{"Type":"NodeText","Data":" 通过dependencies=[Depends(check_api_key)]确保请求携带了有效的API密钥。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获取控制器地址:"},{"Type":"NodeText","Data":" 从应用配置(app_settings)中读取控制器服务的地址。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"刷新工作器状态:"},{"Type":"NodeText","Data":" 异步调用fetch_remote函数，向控制器发送请求以刷新所有工作器的状态（/refresh_all_workers），这可能用于确保获取的是最新模型信息。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获取模型列表:"},{"Type":"NodeText","Data":" 再次调用fetch_remote函数，这次请求模型列表（/list_models）。结果被期望是一个模型名称列表。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"排序模型:"},{"Type":"NodeText","Data":" 对获取到的模型列表进行排序，以便于统一展示顺序。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"构建模型卡片:"},{"Type":"NodeText","Data":" 遍历排序后的模型列表，为每个模型创建一个简单的ModelCard对象，目前仅设置了模型ID、根路径以及一个默认的权限实例（待完善）。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"返回模型信息:"},{"Type":"NodeText","Data":" 最后，将这些模型卡片封装进一个ModelList对象并作为HTTP响应返回，展示给客户端可用的模型信息。"}]},{"ID":"20240429145659-ninf01c","Type":"NodeParagraph","Properties":{"id":"20240429145659-ninf01c"}},{"ID":"20240429145657-ltxn0c3","Type":"NodeParagraph","Properties":{"id":"20240429145657-ltxn0c3","updated":"20240429145745"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"create_chat_completion 函数"},{"Type":"NodeText","Data":"\n这个函数处理POST请求至/v1/chat/completions路径，用于生成基于聊天消息的文本完成。其详细步骤包括：\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"依赖检查:"},{"Type":"NodeText","Data":" 同样检查API密钥的有效性。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"错误检查:"},{"Type":"NodeText","Data":" 先通过await check_model(request)和check_requests(request)进行预处理错误检查，如模型有效性、请求参数合规性等。若检查失败，直接返回错误响应。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获取工作器地址:"},{"Type":"NodeText","Data":" 根据请求中的模型名，异步获取应处理该请求的工作器地址。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"生成参数准备:"},{"Type":"NodeText","Data":" 根据请求参数（如温度、top_p等）和工作器地址，准备生成文本所需的参数。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"长度检查:"},{"Type":"NodeText","Data":" 异步检查生成文本的最大长度是否符合限制，调整max_new_tokens值，避免生成过长内容。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"文本生成逻辑:"},{"Type":"NodeText","Data":"\n如果请求指定了stream=True，则使用chat_completion_stream_generator生成器，以Server-Sent Events (SSE)格式流式返回生成的文本。\n若非流式请求，通过并发任务(asyncio.gather)调用generate_completion生成多个完成内容（如果请求中n\u003e1），收集结果，处理异常，并汇总成最终响应。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"结果处理与响应:"},{"Type":"NodeText","Data":"\n收集所有生成任务的结果，对每个完成内容进行解析，根据内容构建ChatCompletionResponse对象，其中包含模型名、每个选项的完成信息及总体的使用情况统计。\n若生成过程中任一任务遇到错误，返回相应的错误响应。\n正常情况下，返回一个包含多个完成选项的聊天完成响应。"}]},{"ID":"20240429145755-6thqcog","Type":"NodeParagraph","Properties":{"id":"20240429145755-6thqcog"}},{"ID":"20240429145754-41knb6x","Type":"NodeParagraph","Properties":{"id":"20240429145754-41knb6x","updated":"20240429145814"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"chat_completion_stream_generator 函数"},{"Type":"NodeText","Data":"\n这是一个异步生成器，专为流式聊天完成设计，按SSE规范格式化输出数据。其流程如下：\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始化:"},{"Type":"NodeText","Data":" 为本次流式响应生成唯一ID，并初始化完成事件列表。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始数据推送:"},{"Type":"NodeText","Data":" 首先发送一个带有角色信息的初始数据块，告知客户端开始新的聊天完成响应。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"逐块生成与推送:"},{"Type":"NodeText","Data":"\n对于每个请求的完成项，通过generate_completion_stream异步迭代获取增量文本内容。\n根据增量内容更新响应块（含delta信息或完成原因），并通过yield逐个返回给客户端，实现即时更新的交互体验。\n若检测到完成原因（如达到最大长度或明确停止指令），则将此块加入到完成事件列表，暂不发送。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"结束流:"},{"Type":"NodeText","Data":" 所有内容生成完毕后，发送剩余的完成事件（无“content”字段的块），最后发送一个特殊标记[DONE]指示流结束。"}]},{"ID":"20240429145816-shbh9zu","Type":"NodeParagraph","Properties":{"id":"20240429145816-shbh9zu","updated":"20240429145816"},"Children":[{"Type":"NodeText","Data":"综上，这三个函数共同支撑了一个基于API的聊天模型服务，实现了模型列表查询、聊天消息的即时生成与流式传输等功能。"}]},{"ID":"20240429150207-suuvibi","Type":"NodeParagraph","Properties":{"id":"20240429150207-suuvibi"}},{"ID":"20240429150208-38ewtew","Type":"NodeParagraph","Properties":{"id":"20240429150208-38ewtew","updated":"20240429150440"},"Children":[{"Type":"NodeText","Data":"该Python函数是定义在FastAPI应用中的一个异步路由处理函数，其主要功能是处理来自/v1/completions端点的POST请求，旨在根据用户提供的参数生成文本完成（类似于自动补全或生成对话回复）。函数逻辑较为复杂，下面详细分解其工作流程：\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"函数签名与依赖"},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"装饰器:"},{"Type":"NodeText","Data":" @app.post(\"/v1/completions\", dependencies=[Depends(check_api_key)])指定了这是一个POST请求的处理函数，并且在处理请求前会检查API密钥的有效性。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"参数:"},{"Type":"NodeText","Data":" 接收一个CompletionRequest对象，封装了用户请求的所有参数，如模型名称、提示文本、最大生成长度等。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"错误检查"},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Model \u0026amp; Request Checks:"},{"Type":"NodeText","Data":" 调用check_model和check_requests异步函数进行初步的错误检查，包括模型可用性和请求参数的有效性。若检查失败，直接返回错误信息。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Input Processing:"},{"Type":"NodeText","Data":" 对请求中的提示文本进行预处理，通过process_input函数适应特定模型的要求。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Length \u0026amp; Worker Address:"},{"Type":"NodeText","Data":"\n确定处理请求的工作节点地址(worker_addr)。\n对每个提示文本进行长度检查，通过check_length函数确保不超过限制，必要时调整最大生成长度。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"文本生成逻辑"},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"异步并行处理:"},{"Type":"NodeText","Data":" 根据请求是否要求流式输出，执行不同的生成策略。\n    "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"非流式处理:"},{"Type":"NodeText","Data":"\n          为每个输入文本生成参数，包括温度、顶级P值等，通过get_gen_params获取。\n          异步并行调用generate_completion函数生成文本完成，收集所有结果。\n          组装最终响应，包括各个完成项的选择、使用统计信息等，通过CompletionResponse对象返回。\n    "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"流式处理:"},{"Type":"NodeText","Data":"\n          创建一个生成器generate_completion_stream_generator，逐个处理输入文本，对每个文本调用generate_completion_stream生成连续的文本片段。\n          使用StreamingResponse返回事件流，格式遵循\"text/event-stream\"，允许客户端实时接收生成的文本片段直至完成或遇到错误。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"辅助函数说明"},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"generate_completion_stream_generator:"},{"Type":"NodeText","Data":" 为每个输入文本和每个请求的完成数量生成一个事件流，逐段发送文本完成信息。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"generate_completion_stream:"},{"Type":"NodeText","Data":" 实现与工作节点的异步流式通信，处理从工作节点接收的原始数据，转换为客户端可理解的格式。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"generate_completion:"},{"Type":"NodeText","Data":" 非流式的文本生成调用，向指定工作节点发送请求并获取完整的生成文本或错误信息。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"技术要点"},{"Type":"NodeText","Data":"\n        "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并发控制:"},{"Type":"NodeText","Data":" 利用了asyncio的并发特性，通过asyncio.gather并行执行任务，提高处理效率。\n        "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"错误处理:"},{"Type":"NodeText","Data":" 在多个环节检查错误，并即时返回错误响应，保证了服务的健壮性。\n        "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"流式API支持:"},{"Type":"NodeText","Data":" 提供了对流式数据传输的支持，提升了用户体验，特别是在生成大量文本或实时交互场景中。"}]},{"ID":"20240429150450-92ybbbt","Type":"NodeParagraph","Properties":{"id":"20240429150450-92ybbbt","updated":"20240429150450"},"Children":[{"Type":"NodeText","Data":"综上所述，此函数是一个高度优化、支持异步处理和流式响应的文本生成接口实现，集成了复杂的逻辑处理、错误检查和高效的网络通信机制。"}]},{"ID":"20240429150459-ob8ocei","Type":"NodeParagraph","Properties":{"id":"20240429150459-ob8ocei"}},{"ID":"20240429150859-xo19ll3","Type":"NodeParagraph","Properties":{"id":"20240429150859-xo19ll3","updated":"20240429150900"},"Children":[{"Type":"NodeText","Data":"该Python函数是一个异步处理函数，设计用于处理HTTP POST请求，以生成文本的嵌入表示（embedding）。函数被装饰了两次，分别处理两个不同的路由，但功能逻辑相同，只是路由路径有所不同，其中一个带有模型名称作为路径参数。下面是该函数的详细说明：\n函数签名与基本功能"}]},{"ID":"20240429150901-fqcr5fl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240429150901-fqcr5fl","updated":"20240429150911"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"@app.post(\"/v1/embeddings\", ...)\n@app.post(\"/v1/engines/{model_name}/embeddings\", ...)\nasync def create_embeddings(request: EmbeddingsRequest, model_name: str = None):\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240429150925-1i1dtwu","Type":"NodeParagraph","Properties":{"id":"20240429150925-1i1dtwu","updated":"20240429150941"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"装饰器:"},{"Type":"NodeText","Data":" 使用FastAPI的路由装饰器，定义了两个POST请求的处理端点。第一个处理无特定模型名的请求，第二个允许通过路径参数指定模型名。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"异步:"},{"Type":"NodeText","Data":" 通过async def声明，表明这是一个异步函数，能够处理并发请求提高效率。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"参数:"}]},{"ID":"20240429150944-9xi3o7o","Type":"NodeParagraph","Properties":{"id":"20240429150944-9xi3o7o","updated":"20240429150944"},"Children":[{"Type":"NodeText","Data":"request: 类型为EmbeddingsRequest的对象，包含了用户提交的文本数据、模型选择（可选）及编码格式等信息。"}]},{"ID":"20240429150946-zc0afo3","Type":"NodeParagraph","Properties":{"id":"20240429150946-zc0afo3","updated":"20240429150946"},"Children":[{"Type":"NodeText","Data":"model_name: 可选字符串参数，当请求路径中包含模型名称时使用。"}]},{"ID":"20240429150953-s98qgii","Type":"NodeParagraph","Properties":{"id":"20240429150953-s98qgii","updated":"20240429150955"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"函数执行流程"}]},{"ID":"20240429150948-4v1yha9","Type":"NodeParagraph","Properties":{"id":"20240429150948-4v1yha9","updated":"20240429151013"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"模型参数处理:"},{"Type":"NodeText","Data":" 如果请求中未指定模型(request.model为None)，则使用URL路径中提供的model_name。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"错误检查:"},{"Type":"NodeText","Data":" 调用await check_model(request)进行预处理错误检查，如权限、模型有效性等，若检查失败则直接返回错误响应。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"输入处理:"},{"Type":"NodeText","Data":" 调用process_input函数根据选定模型处理原始输入数据，可能包括清洗、标准化等操作。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"批量处理:"}]},{"ID":"20240429151017-befwtx7","Type":"NodeList","ListData":{},"Properties":{"id":"20240429151017-befwtx7","updated":"20240429151032"},"Children":[{"ID":"20240429151032-l7n1nub","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151032-l7n1nub","updated":"20240429151032"},"Children":[{"ID":"20240429151032-i7kqgx9","Type":"NodeParagraph","Properties":{"id":"20240429151032-i7kqgx9","updated":"20240429151032"},"Children":[{"Type":"NodeText","Data":"计算输入数据的批次，每个批次大小由WORKER_API_EMBEDDING_BATCH_SIZE决定。"}]}]}]},{"ID":"20240429151028-ai2y4dw","Type":"NodeList","ListData":{},"Properties":{"id":"20240429151028-ai2y4dw","updated":"20240429151036"},"Children":[{"ID":"20240429151036-mitogir","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151036-mitogir","updated":"20240429151036"},"Children":[{"ID":"20240429151036-ol6rx0p","Type":"NodeParagraph","Properties":{"id":"20240429151036-ol6rx0p","updated":"20240429151036"},"Children":[{"Type":"NodeText","Data":"遍历批次，为每个批次构造请求载荷(payload)，包含模型名、当前批次的输入数据和编码格式。\n"}]}]}]},{"ID":"20240429151041-w19z2sr","Type":"NodeParagraph","Properties":{"id":"20240429151041-w19z2sr","updated":"20240429151043"}},{"ID":"20240429151041-8hhcxmx","Type":"NodeParagraph","Properties":{"id":"20240429151041-8hhcxmx","updated":"20240429151055"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获取嵌入数据:"}]},{"ID":"20240429151055-t8rrgr2","Type":"NodeList","ListData":{},"Properties":{"id":"20240429151055-t8rrgr2","updated":"20240429151055"},"Children":[{"ID":"20240429151055-eyz7lwu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151055-eyz7lwu","updated":"20240429151055"},"Children":[{"ID":"20240429151055-fh3udyh","Type":"NodeParagraph","Properties":{"id":"20240429151055-fh3udyh","updated":"20240429151055"},"Children":[{"Type":"NodeText","Data":"对每个批次，异步调用get_embedding函数发送请求到工作节点以获取嵌入数据。"}]}]},{"ID":"20240429151100-chdcktp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151100-chdcktp"},"Children":[{"ID":"20240429151100-syn7ugv","Type":"NodeParagraph","Properties":{"id":"20240429151100-syn7ugv","updated":"20240429151105"},"Children":[{"Type":"NodeText","Data":"get_embedding内部会根据模型名找到对应的工作节点地址，然后向该节点发送POST请求。"}]}]},{"ID":"20240429151106-17jbuq1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151106-17jbuq1"},"Children":[{"ID":"20240429151106-wezl9tn","Type":"NodeParagraph","Properties":{"id":"20240429151106-wezl9tn"},"Children":[{"Type":"NodeText","Data":"收到响应后，解析JSON得到嵌入数据。\n"}]}]}]},{"ID":"20240429151108-qb8u9in","Type":"NodeParagraph","Properties":{"id":"20240429151108-qb8u9in","updated":"20240429151110"}},{"ID":"20240429151108-5uehlru","Type":"NodeParagraph","Properties":{"id":"20240429151108-5uehlru","updated":"20240429151118"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"结果组装与错误处理:"}]},{"ID":"20240429151118-m003uv1","Type":"NodeList","ListData":{},"Properties":{"id":"20240429151118-m003uv1","updated":"20240429151118"},"Children":[{"ID":"20240429151118-i248j4b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151118-i248j4b","updated":"20240429151118"},"Children":[{"ID":"20240429151118-zw35fo6","Type":"NodeParagraph","Properties":{"id":"20240429151118-zw35fo6","updated":"20240429151118"},"Children":[{"Type":"NodeText","Data":"若从工作节点收到的响应包含错误码，构造并返回错误响应。"}]}]},{"ID":"20240429151123-vrtano0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151123-vrtano0"},"Children":[{"ID":"20240429151123-542f4jx","Type":"NodeParagraph","Properties":{"id":"20240429151123-542f4jx","updated":"20240429151124"},"Children":[{"Type":"NodeText","Data":"否则，将每批嵌入数据按序组织成期望格式的列表，并累计计算使用的token数。\n"}]}]}]},{"ID":"20240429151132-osekm9f","Type":"NodeParagraph","Properties":{"id":"20240429151132-osekm9f","updated":"20240429151133"}},{"ID":"20240429151132-xlmq3ea","Type":"NodeParagraph","Properties":{"id":"20240429151132-xlmq3ea","updated":"20240429151139"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"响应构造与返回:"}]},{"ID":"20240429151139-5hr4lht","Type":"NodeList","ListData":{},"Properties":{"id":"20240429151139-5hr4lht","updated":"20240429151139"},"Children":[{"ID":"20240429151139-ai32rwx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151139-ai32rwx","updated":"20240429151139"},"Children":[{"ID":"20240429151139-siiw3wl","Type":"NodeParagraph","Properties":{"id":"20240429151139-siiw3wl","updated":"20240429151139"},"Children":[{"Type":"NodeText","Data":"构造一个EmbeddingsResponse对象，包含嵌入数据列表、使用的模型名以及使用统计信息（如提示token数）。"}]}]},{"ID":"20240429151143-yffh7tm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151143-yffh7tm"},"Children":[{"ID":"20240429151143-jc9vz88","Type":"NodeParagraph","Properties":{"id":"20240429151143-jc9vz88","updated":"20240429151144"},"Children":[{"Type":"NodeText","Data":"使用.dict(exclude_none=True)转换为字典并剔除值为None的项，最后返回给客户端。\n"}]}]}]},{"ID":"20240429151151-flpx0dm","Type":"NodeParagraph","Properties":{"id":"20240429151151-flpx0dm","updated":"20240429151153"}},{"ID":"20240429151151-0xgmfjc","Type":"NodeParagraph","Properties":{"id":"20240429151151-0xgmfjc"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20240429151157-4tvsb8k","Type":"NodeParagraph","Properties":{"id":"20240429151157-4tvsb8k","updated":"20240429151157"},"Children":[{"Type":"NodeText","Data":"该函数实现了文本到向量嵌入的异步生成服务，支持通过不同路由灵活指定模型，集成了错误处理、数据预处理、批量处理优化及响应封装等功能，适用于需要大规模文本嵌入生成的场景，如搜索引擎、文本分类或相似性匹配应用。"}]},{"ID":"20240429151738-5zfhhzg","Type":"NodeParagraph","Properties":{"id":"20240429151738-5zfhhzg"}},{"ID":"20240429151740-ag7defu","Type":"NodeParagraph","Properties":{"id":"20240429151740-ag7defu","updated":"20240429151750"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"count_tokens 函数"}]},{"ID":"20240429151752-edcmn3o","Type":"NodeParagraph","Properties":{"id":"20240429151752-edcmn3o","updated":"20240429151902"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"功能描述："},{"Type":"NodeText","Data":"此异步函数接收一个APITokenCheckRequest对象作为请求参数，其内部包含多个待检查的prompt及其模型信息。函数的主要任务是对列表中的每个消息计算其在指定模型下的token数量，并检查该数量加上请求的最大token数是否超出了模型上下文长度的限制。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"步骤分解："}]},{"ID":"20240429151902-ekof5ev","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240429151902-ekof5ev","updated":"20240429152137"},"Children":[{"ID":"20240429151902-jbzi2w0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240429151902-jbzi2w0","updated":"20240429152137"},"Children":[{"ID":"20240429151902-2njrtod","Type":"NodeParagraph","Properties":{"id":"20240429151902-2njrtod","updated":"20240429152137"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始化响应列表："},{"Type":"NodeText","Data":"创建一个空列表checkedList，用于存放每个检查项的结果。"}]}]},{"ID":"20240429151908-y5cdlqu","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240429151908-y5cdlqu","updated":"20240429152135"},"Children":[{"ID":"20240429151908-rjqafw6","Type":"NodeParagraph","Properties":{"id":"20240429151908-rjqafw6","updated":"20240429152135"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"循环处理请求项"},{"Type":"NodeText","Data":"：遍历request.prompts中的每一项，对于每项执行以下操作："}]},{"ID":"20240429151914-6zc677l","Type":"NodeList","ListData":{},"Properties":{"id":"20240429151914-6zc677l","updated":"20240429152131"},"Children":[{"ID":"20240429151918-3mf3q18","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151918-3mf3q18","updated":"20240429152131"},"Children":[{"ID":"20240429151918-y1torgh","Type":"NodeParagraph","Properties":{"id":"20240429151918-y1torgh","updated":"20240429152131"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获取Worker地址："},{"Type":"NodeText","Data":"调用get_worker_address异步函数，根据模型名称获取处理该模型的worker地址。"}]}]},{"ID":"20240429151922-gsncrnp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151922-gsncrnp","updated":"20240429152129"},"Children":[{"ID":"20240429151922-tdy90ox","Type":"NodeParagraph","Properties":{"id":"20240429151922-tdy90ox","updated":"20240429152129"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"查询上下文长度"},{"Type":"NodeText","Data":"：通过worker地址，向/model_details端点发起HTTP请求，获取模型的上下文长度（context_len）。"}]}]},{"ID":"20240429151925-zk9uwvw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151925-zk9uwvw","updated":"20240429152126"},"Children":[{"ID":"20240429151925-vgphpho","Type":"NodeParagraph","Properties":{"id":"20240429151925-vgphpho","updated":"20240429152126"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"计算Token数量"},{"Type":"NodeText","Data":"：再次通过worker地址，向/count_token端点发送HTTP请求，计算当前prompt的token数量（token_num）。"}]}]},{"ID":"20240429151928-xmsj3kr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151928-xmsj3kr","updated":"20240429152123"},"Children":[{"ID":"20240429151928-28eovfp","Type":"NodeParagraph","Properties":{"id":"20240429151928-28eovfp","updated":"20240429152123"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"检查是否适配："},{"Type":"NodeText","Data":"判断token_num + item.max_tokens是否超过了context_len，设置can_fit标志。"}]}]},{"ID":"20240429151935-nqkblo0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429151935-nqkblo0","updated":"20240429152121"},"Children":[{"ID":"20240429151935-739tjtn","Type":"NodeParagraph","Properties":{"id":"20240429151935-739tjtn","updated":"20240429152121"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"构建响应项："},{"Type":"NodeText","Data":"根据检查结果，创建一个APITokenCheckResponseItem对象并将其添加到checkedList中。"}]}]}]}]}]},{"ID":"20240429152043-j275zas","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240429152043-j275zas","updated":"20240429152119"},"Children":[{"ID":"20240429152055-kjaiji3","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240429152055-kjaiji3","updated":"20240429152119"},"Children":[{"ID":"20240429152055-6wa2h7n","Type":"NodeParagraph","Properties":{"id":"20240429152055-6wa2h7n","updated":"20240429152119"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"返回响应："},{"Type":"NodeText","Data":"最后，将填充好的checkedList封装进一个APITokenCheckResponse对象并返回。"}]}]}]},{"ID":"20240429152100-4sm7dr7","Type":"NodeParagraph","Properties":{"id":"20240429152100-4sm7dr7","updated":"20240429152413"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"create_chat_completion 函数"},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"功能描述："},{"Type":"NodeText","Data":"此异步函数负责生成聊天消息的完成内容，接收一个APIChatCompletionRequest对象作为输入。它执行一系列的校验、参数准备、长度检查以及实际的生成任务，支持流式响应或一次性响应。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"步骤细化："},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"错误检查："},{"Type":"NodeText","Data":"首先调用check_model和check_requests进行初步的请求合法性和模型可用性检查，如果有错误直接返回错误信息。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获取Worker地址："},{"Type":"NodeText","Data":"根据请求中的模型名调用get_worker_address获取worker服务地址。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"生成参数准备："},{"Type":"NodeText","Data":"基于请求参数和worker地址，调用get_gen_params准备生成文本所需的参数，包括温度、top_p、top_k等。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"长度检查："},{"Type":"NodeText","Data":"通过check_length函数确保生成内容不会超出模型上下文限制，调整最大新token数（max_new_tokens）。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"生成完成内容："}]},{"ID":"20240429152424-yt6wrm3","Type":"NodeList","ListData":{},"Properties":{"id":"20240429152424-yt6wrm3","updated":"20240429152426"},"Children":[{"ID":"20240429152426-2by0xjl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429152426-2by0xjl","updated":"20240429152426"},"Children":[{"ID":"20240429152426-3u658hc","Type":"NodeParagraph","Properties":{"id":"20240429152426-3u658hc","updated":"20240429152426"},"Children":[{"Type":"NodeText","Data":"如果请求指定了stream=True，则使用chat_completion_stream_generator创建一个流式响应，类型为\"text/event-stream\"。"}]}]},{"ID":"20240429152430-0iu1jcu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429152430-0iu1jcu"},"Children":[{"ID":"20240429152430-3jhdijz","Type":"NodeParagraph","Properties":{"id":"20240429152430-3jhdijz","updated":"20240429152431"},"Children":[{"Type":"NodeText","Data":"否则，使用异步任务并发生成多个（request.n个）聊天完成内容，收集所有任务的结果。"}]},{"ID":"20240429153542-ba4wxda","Type":"NodeList","ListData":{},"Properties":{"id":"20240429153542-ba4wxda"},"Children":[{"ID":"20240429152439-89naw6z","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240429152439-89naw6z"},"Children":[{"ID":"20240429152439-f02w2o2","Type":"NodeParagraph","Properties":{"id":"20240429152439-f02w2o2","updated":"20240429152440"},"Children":[{"Type":"NodeText","Data":"对于每个生成任务，检查是否有错误代码，如果有，则立即返回错误响应；否则，将生成的内容包装成ChatCompletionResponseChoice对象并累计使用统计信息。"}]}]}]}]}]},{"ID":"20240429152420-852lmwd","Type":"NodeParagraph","Properties":{"id":"20240429152420-852lmwd","updated":"20240429152420"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"组装并返回响应："},{"Type":"NodeText","Data":"将所有生成的选择、使用情况统计等信息封装进一个ChatCompletion Response 对象并返回。"}]},{"ID":"20240429152356-eoc49ft","Type":"NodeParagraph","Properties":{"id":"20240429152356-eoc49ft","updated":"20240429152356"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其他代码段"},{"Type":"NodeText","Data":"\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"create_openai_api_server函数："}]},{"ID":"20240429152351-ig5nyyk","Type":"NodeParagraph","Properties":{"id":"20240429152351-ig5nyyk","updated":"20240429152351"},"Children":[{"Type":"NodeText","Data":"这个函数用于配置和启动一个与OpenAI兼容的RESTful API服务器。它解析命令行参数以设置服务器的主机名、端口、CORS策略、API密钥等，并根据参数决定是否启用SSL连接。最后，使用Uvicorn运行应用程序。\n"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"主程序入口："}]},{"ID":"20240429152349-gjcwf06","Type":"NodeParagraph","Properties":{"id":"20240429152349-gjcwf06","updated":"20240429152349"},"Children":[{"Type":"NodeText","Data":"这部分代码检查是否为主模块，如果是，则调用create_openai_api_server函数来准备服务器配置，并根据配置的SSL选项使用Uvicorn启动服务器。"}]}]}