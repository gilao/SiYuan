{"ID":"20230723230441-bcs0cg9","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f956","id":"20230723230441-bcs0cg9","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230723230441-bcs0cg9\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230723230528-nk242kc\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230723230459-li1elj0\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230723230528-nk242kc\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"未完成,需要仔细看,gRPC","title":"从RPC到服务化框架设计","updated":"20230723230549"},"Children":[{"ID":"20230723230528-nk242kc","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230723230528-nk242kc","updated":"20230723230528"},"Children":[{"Type":"NodeText","Data":"从RPC"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/CIRFwqNCF9kl57hxGH-SBw","TextMarkTextContent":"到服务化框架设计"}]},{"ID":"20230723230459-45wfjpb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723230459-45wfjpb","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"一、RPC 基本框架"}]},{"ID":"20230723230459-ab9usz3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723230459-ab9usz3","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"1-1 RPC基本框架"}]},{"ID":"20230723230459-ugxxwb8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723230459-ugxxwb8","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"理解RPC"}]},{"ID":"20230723230459-1q081mu","Type":"NodeParagraph","Properties":{"id":"20230723230459-1q081mu","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"RPC 的概念就是远程过程调用。我们本地的函数调用，就是 A 方法调 B 方法，然后得到调用的结果，RPC 就是让你像本地函数调用一样进行跨服务之间的函数调用。互联网发展到现在，我们都在讲微服务，服务都拆分为微服务了，那么相关依赖的调用，就会变成跨服务之间的调用，而他们之间的通信方式就是依靠 RPC。"}]},{"ID":"20230723230459-bah62aa","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723230459-bah62aa","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"RPC 基础结构 （RPC 协议）"}]},{"ID":"20230723230459-a2mkga5","Type":"NodeParagraph","Properties":{"id":"20230723230459-a2mkga5","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Nelson 的论文 Implementing Remote Procedure Calls 告诉我们， RPC 协议包括 5 个部分："}]},{"ID":"20230723230459-03r6705","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230723230459-03r6705","updated":"20230723230459"},"Children":[{"ID":"20230723230459-59bobxo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20230723230459-59bobxo","updated":"20230723230459"},"Children":[{"ID":"20230723230459-n2gk8su","Type":"NodeParagraph","Properties":{"id":"20230723230459-n2gk8su","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Client"}]}]},{"ID":"20230723230459-rci5nuu","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20230723230459-rci5nuu","updated":"20230723230459"},"Children":[{"ID":"20230723230459-ir0sw5b","Type":"NodeParagraph","Properties":{"id":"20230723230459-ir0sw5b","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Client-stub"}]}]},{"ID":"20230723230459-ygefnug","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20230723230459-ygefnug","updated":"20230723230459"},"Children":[{"ID":"20230723230459-77034du","Type":"NodeParagraph","Properties":{"id":"20230723230459-77034du","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"RPCRuntime"}]}]},{"ID":"20230723230459-ravpjtz","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20230723230459-ravpjtz","updated":"20230723230459"},"Children":[{"ID":"20230723230459-os2p1su","Type":"NodeParagraph","Properties":{"id":"20230723230459-os2p1su","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Server-stub"}]}]},{"ID":"20230723230459-5ib4jqg","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20230723230459-5ib4jqg","updated":"20230723230459"},"Children":[{"ID":"20230723230459-w280jdf","Type":"NodeParagraph","Properties":{"id":"20230723230459-w280jdf","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Server"}]}]}]},{"ID":"20230723230459-oc7l8oh","Type":"NodeParagraph","Properties":{"id":"20230723230459-oc7l8oh","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:/Typora%20picture/640.jpeg?lastModify=1690124691"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230723230459-ttdmhnp","Type":"NodeParagraph","Properties":{"id":"20230723230459-ttdmhnp","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当 Client 发起一个远程调用时，它实际上是调用本地的 Stub。本地 stub 负责将调用的接口、方法和参数，通过约定的协议规范进行编码，并通过本地的 RPCRuntime 进行传输，然后将数据包发送到网络上传输出去"},{"Type":"NodeText","Data":"。当 Server 端的 RPCRuntime 收到请求后，交给 Server-Stub 进行解码，然后调用 Server 端的函数或者方法，执行完毕就开始返回结果，Server-Stub 将返回结果编码后，发送给 Client，Client 端的 RPCRuntime 收到结果，发给 Client-Stub 解码得到结果，返回给 Client。"}]},{"ID":"20230723230459-d70et59","Type":"NodeParagraph","Properties":{"id":"20230723230459-d70et59","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这里面分了三个层次:"}]},{"ID":"20230723230459-hgdjsvx","Type":"NodeList","ListData":{},"Properties":{"id":"20230723230459-hgdjsvx","updated":"20230723230459"},"Children":[{"ID":"20230723230459-90srq0g","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723230459-90srq0g","updated":"20230723230459"},"Children":[{"ID":"20230723230459-nabmcts","Type":"NodeParagraph","Properties":{"id":"20230723230459-nabmcts","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"对于客户端和服务端，都和原来本地调用一样，只需要关注自身的业务逻辑。"}]}]},{"ID":"20230723230459-fekltth","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723230459-fekltth","updated":"20230723230459"},"Children":[{"ID":"20230723230459-kedto0d","Type":"NodeParagraph","Properties":{"id":"20230723230459-kedto0d","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"对于 Stub 层，处理双方约定好的语法、语义、封装、解封装。"}]}]},{"ID":"20230723230459-m8kjdx1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723230459-m8kjdx1","updated":"20230723230459"},"Children":[{"ID":"20230723230459-j6qt5j6","Type":"NodeParagraph","Properties":{"id":"20230723230459-j6qt5j6","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"对于 RPCRuntime，主要处理高性能的传输，以及网络的错误和异常。"}]}]}]},{"ID":"20230723230459-w6uhdd1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723230459-w6uhdd1","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"1-2、RPC 框架的重点"}]},{"ID":"20230723230459-x85srt8","Type":"NodeParagraph","Properties":{"id":"20230723230459-x85srt8","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"从 RPC 基础结构中，我们总结出 RPC 框架的重点，包括 4 部分，如下："}]},{"ID":"20230723230459-e0pqubg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723230459-e0pqubg","updated":"20230723230459"},"Children":[{"Type":"NodeText","Data":"1-2-1、数据序列化"}]},{"ID":"20230723230459-li1elj0","Type":"NodeParagraph","Properties":{"id":"20230723230459-li1elj0","updated":"20230723230459"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"序列化就是将数据结构或对象转换成二进制的过程，也就是编码的过程，序列化后的数据才方便进行网络传输；反序列化就是在序列化过程中所生成的二进制转换成数据结构"}]}]}