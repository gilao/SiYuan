{"ID":"20240109231029-pfqu90i","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f362","id":"20240109231029-pfqu90i","tags":"Go-zap 库","title":"使用zap接受gin框架默认的日志并配置日志归档","updated":"20240109234320"},"Children":[{"ID":"20240109231113-6ewmgdd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240109231113-6ewmgdd","updated":"20240109231148"},"Children":[{"Type":"NodeText","Data":"gin默认的中间件"}]},{"ID":"20240109231256-f54mpge","Type":"NodeParagraph","Properties":{"id":"20240109231256-f54mpge","updated":"20240109231256"},"Children":[{"Type":"NodeText","Data":"首先我们来看一个最简单的gin项目："}]},{"ID":"20240109231256-5o72k09","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109231256-5o72k09","updated":"20240109231256"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\tr := gin.Default()\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\tc.String(\"hello liwenzhou.com!\")\n\t})\n\tr.Run(\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109231256-v44fyg6","Type":"NodeParagraph","Properties":{"id":"20240109231256-v44fyg6","updated":"20240109231256"},"Children":[{"Type":"NodeText","Data":"接下来我们看一下"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gin.Default()"},{"Type":"NodeText","Data":"​的源码："}]},{"ID":"20240109231256-zbrhz48","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109231256-zbrhz48","updated":"20240109231256"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func Default() *Engine {\n\tdebugPrintWARNINGDefault()\n\tengine := New()\n\tengine.Use(Logger(), Recovery())\n\treturn engine\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109231256-uvm3vuj","Type":"NodeParagraph","Properties":{"id":"20240109231256-uvm3vuj","updated":"20240109231256"},"Children":[{"Type":"NodeText","Data":"也就是我们在使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gin.Default()"},{"Type":"NodeText","Data":"​的同时是用到了gin框架内的两个默认中间件"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Logger()"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recovery()"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240109231256-7hmrdf1","Type":"NodeParagraph","Properties":{"id":"20240109231256-7hmrdf1","updated":"20240109231256"},"Children":[{"Type":"NodeText","Data":"其中"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Logger()"},{"Type":"NodeText","Data":"​是把gin框架本身的日志输出到标准输出（我们本地开发调试时在终端输出的那些日志就是它的功劳），而"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recovery()"},{"Type":"NodeText","Data":"​是在程序出现panic的时候恢复现场并写入500响应的。"}]},{"ID":"20240109231259-n0wv2c8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240109231259-n0wv2c8","updated":"20240109231313"},"Children":[{"Type":"NodeText","Data":"基于zap 的中间件"}]},{"ID":"20240109231320-ah6ogpv","Type":"NodeParagraph","Properties":{"id":"20240109231320-ah6ogpv","updated":"20240109231320"},"Children":[{"Type":"NodeText","Data":"我们可以模仿"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Logger()"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recovery()"},{"Type":"NodeText","Data":"​的实现，使用我们的日志库来接收gin框架默认输出的日志。"}]},{"ID":"20240109231320-9p5nmyr","Type":"NodeParagraph","Properties":{"id":"20240109231320-9p5nmyr","updated":"20240109231320"},"Children":[{"Type":"NodeText","Data":"这里以zap为例，我们实现两个中间件如下："}]},{"ID":"20240109231321-5vgpiyf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109231321-5vgpiyf","updated":"20240109231328"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// GinLogger 接收gin框架默认的日志\nfunc GinLogger(logger *zap.Logger) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tstart := time.Now()\n\t\tpath := c.Request.URL.Path\n\t\tquery := c.Request.URL.RawQuery\n\t\tc.Next()\n\n\t\tcost := time.Since(start)\n\t\tlogger.Info(path,\n\t\t\tzap.Int(\"status\", c.Writer.Status()),\n\t\t\tzap.String(\"method\", c.Request.Method),\n\t\t\tzap.String(\"path\", path),\n\t\t\tzap.String(\"query\", query),\n\t\t\tzap.String(\"ip\", c.ClientIP()),\n\t\t\tzap.String(\"user-agent\", c.Request.UserAgent()),\n\t\t\tzap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n\t\t\tzap.Duration(\"cost\", cost),\n\t\t)\n\t}\n}\n\n// GinRecovery recover掉项目可能出现的panic\nfunc GinRecovery(logger *zap.Logger, stack bool) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\t// Check for a broken connection, as it is not really a\n\t\t\t\t// condition that warrants a panic stack trace.\n\t\t\t\tvar brokenPipe bool\n\t\t\t\tif ne, ok := err.(*net.OpError); ok {\n\t\t\t\t\tif se, ok := ne.Err.(*os.SyscallError); ok {\n\t\t\t\t\t\tif strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") || strings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n\t\t\t\t\t\t\tbrokenPipe = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\thttpRequest, _ := httputil.DumpRequest(c.Request, false)\n\t\t\t\tif brokenPipe {\n\t\t\t\t\tlogger.Error(c.Request.URL.Path,\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"request\", string(httpRequest)),\n\t\t\t\t\t)\n\t\t\t\t\t// If the connection is dead, we can't write a status to it.\n\t\t\t\t\tc.Error(err.(error)) // nolint: errcheck\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif stack {\n\t\t\t\t\tlogger.Error(\"[Recovery from panic]\",\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"request\", string(httpRequest)),\n\t\t\t\t\t\tzap.String(\"stack\", string(debug.Stack())),\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tlogger.Error(\"[Recovery from panic]\",\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"request\", string(httpRequest)),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\t}\n\t\t}()\n\t\tc.Next()\n\t}\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109234320-i12guxq","Type":"NodeParagraph","Properties":{"id":"20240109234320-i12guxq","updated":"20240109234320"},"Children":[{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"如果不想自己实现，可以使用github上有别人封装好的"},{"Type":"NodeTextMark","TextMarkType":"em a","TextMarkAHref":"https://github.com/gin-contrib/zap","TextMarkTextContent":"https://github.com/gin-contrib/zap"},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"。"}]},{"ID":"20240109234320-0s6zj8y","Type":"NodeParagraph","Properties":{"id":"20240109234320-0s6zj8y","updated":"20240109234320"},"Children":[{"Type":"NodeText","Data":"这样我们就可以在gin框架中使用我们上面定义好的两个中间件来代替gin框架默认的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Logger()"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recovery()"},{"Type":"NodeText","Data":"​了。"}]},{"ID":"20240109234320-l607lph","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109234320-l607lph","updated":"20240109234320"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"r := gin.New()\nr.Use(GinLogger(), GinRecovery())\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109234320-9yb1qa4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240109234320-9yb1qa4","updated":"20240109234320"},"Children":[{"Type":"NodeText","Data":"在gin项目中使用zap"}]},{"ID":"20240109234320-omvs5ac","Type":"NodeParagraph","Properties":{"id":"20240109234320-omvs5ac","updated":"20240109234320"},"Children":[{"Type":"NodeText","Data":"最后我们再加入我们项目中常用的日志切割，完整版的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"logger.go"},{"Type":"NodeText","Data":"​代码如下："}]},{"ID":"20240109234320-rnt3yts","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109234320-rnt3yts","updated":"20240109234320"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package logger\n\nimport (\n\t\"gin_zap_demo/config\"\n\t\"net\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"os\"\n\t\"runtime/debug\"\n\t\"strings\"\n\t\"time\"\n\n\t\"github.com/gin-gonic/gin\"\n\t\"github.com/natefinch/lumberjack\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n)\n\nvar lg *zap.Logger\n\n// InitLogger 初始化Logger\nfunc InitLogger(cfg *config.LogConfig) (err error) {\n\twriteSyncer := getLogWriter(cfg.Filename, cfg.MaxSize, cfg.MaxBackups, cfg.MaxAge)\n\tencoder := getEncoder()\n\tvar l = new(zapcore.Level)\n\terr = l.UnmarshalText([]byte(cfg.Level))\n\tif err != nil {\n\t\treturn\n\t}\n\tcore := zapcore.NewCore(encoder, writeSyncer, l)\n\n\tlg = zap.New(core, zap.AddCaller())\n\tzap.ReplaceGlobals(lg) // 替换zap包中全局的logger实例，后续在其他包中只需使用zap.L()调用即可\n\treturn\n}\n\nfunc getEncoder() zapcore.Encoder {\n\tencoderConfig := zap.NewProductionEncoderConfig()\n\tencoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n\tencoderConfig.TimeKey = \"time\"\n\tencoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n\tencoderConfig.EncodeDuration = zapcore.SecondsDurationEncoder\n\tencoderConfig.EncodeCaller = zapcore.ShortCallerEncoder\n\treturn zapcore.NewJSONEncoder(encoderConfig)\n}\n\nfunc getLogWriter(filename string, maxSize, maxBackup, maxAge int) zapcore.WriteSyncer {\n\tlumberJackLogger := \u0026lumberjack.Logger{\n\t\tFilename:   filename,\n\t\tMaxSize:    maxSize,\n\t\tMaxBackups: maxBackup,\n\t\tMaxAge:     maxAge,\n\t}\n\treturn zapcore.AddSync(lumberJackLogger)\n}\n\n// GinLogger 接收gin框架默认的日志\nfunc GinLogger() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tstart := time.Now()\n\t\tpath := c.Request.URL.Path\n\t\tquery := c.Request.URL.RawQuery\n\t\tc.Next()\n\n\t\tcost := time.Since(start)\n\t\tlg.Info(path,\n\t\t\tzap.Int(\"status\", c.Writer.Status()),\n\t\t\tzap.String(\"method\", c.Request.Method),\n\t\t\tzap.String(\"path\", path),\n\t\t\tzap.String(\"query\", query),\n\t\t\tzap.String(\"ip\", c.ClientIP()),\n\t\t\tzap.String(\"user-agent\", c.Request.UserAgent()),\n\t\t\tzap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n\t\t\tzap.Duration(\"cost\", cost),\n\t\t)\n\t}\n}\n\n// GinRecovery recover掉项目可能出现的panic，并使用zap记录相关日志\nfunc GinRecovery(stack bool) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\t// Check for a broken connection, as it is not really a\n\t\t\t\t// condition that warrants a panic stack trace.\n\t\t\t\tvar brokenPipe bool\n\t\t\t\tif ne, ok := err.(*net.OpError); ok {\n\t\t\t\t\tif se, ok := ne.Err.(*os.SyscallError); ok {\n\t\t\t\t\t\tif strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") || strings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n\t\t\t\t\t\t\tbrokenPipe = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\thttpRequest, _ := httputil.DumpRequest(c.Request, false)\n\t\t\t\tif brokenPipe {\n\t\t\t\t\tlg.Error(c.Request.URL.Path,\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"request\", string(httpRequest)),\n\t\t\t\t\t)\n\t\t\t\t\t// If the connection is dead, we can't write a status to it.\n\t\t\t\t\tc.Error(err.(error)) // nolint: errcheck\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n\n\t\t\t\tif stack {\n\t\t\t\t\tlg.Error(\"[Recovery from panic]\",\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"request\", string(httpRequest)),\n\t\t\t\t\t\tzap.String(\"stack\", string(debug.Stack())),\n\t\t\t\t\t)\n\t\t\t\t} else {\n\t\t\t\t\tlg.Error(\"[Recovery from panic]\",\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"request\", string(httpRequest)),\n\t\t\t\t\t)\n\t\t\t\t}\n\t\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\t}\n\t\t}()\n\t\tc.Next()\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109234320-lvlyyia","Type":"NodeParagraph","Properties":{"id":"20240109234320-lvlyyia","updated":"20240109234320"},"Children":[{"Type":"NodeText","Data":"然后定义日志相关配置："}]},{"ID":"20240109234320-88fexrg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109234320-88fexrg","updated":"20240109234320"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type LogConfig struct {\n\tLevel string `json:\"level\"`\n\tFilename string `json:\"filename\"`\n\tMaxSize int `json:\"maxsize\"`\n\tMaxAge int `json:\"max_age\"`\n\tMaxBackups int `json:\"max_backups\"`\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109234320-zrnnsji","Type":"NodeParagraph","Properties":{"id":"20240109234320-zrnnsji","updated":"20240109234320"},"Children":[{"Type":"NodeText","Data":"在项目中先从配置文件加载配置信息，再调用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"logger.InitLogger(config.Conf.LogConfig)"},{"Type":"NodeText","Data":"​即可完成logger实例的初识化。其中，通过"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"r.Use(logger.GinLogger(), logger.GinRecovery(true))"},{"Type":"NodeText","Data":"​注册我们的中间件来使用zap接收gin框架自身的日志，在项目中需要的地方通过使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zap.L().Xxx()"},{"Type":"NodeText","Data":"​方法来记录自定义日志信息。"}]},{"ID":"20240109234320-nqyagnd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109234320-nqyagnd","updated":"20240109234320"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"fmt\"\n\t\"gin_zap_demo/config\"\n\t\"gin_zap_demo/logger\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"go.uber.org/zap\"\n\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\t// load config from config.json\n\tif len(os.Args) \u003c 1 {\n\t\treturn\n\t}\n\n\tif err := config.Init(os.Args[1]); err != nil {\n\t\tpanic(err)\n\t}\n\t// init logger\n\tif err := logger.InitLogger(config.Conf.LogConfig); err != nil {\n\t\tfmt.Printf(\"init logger failed, err:%v\\n\", err)\n\t\treturn\n\t}\n\n\tgin.SetMode(config.Conf.Mode)\n\n\tr := gin.Default()\n\t// 注册zap相关中间件\n\tr.Use(logger.GinLogger(), logger.GinRecovery(true))\n\n\tr.GET(\"/hello\", func(c *gin.Context) {\n\t\t// 假设你有一些数据需要记录到日志中\n\t\tvar (\n\t\t\tname = \"q1mi\"\n\t\t\tage  = 18\n\t\t)\n\t\t// 记录日志并使用zap.Xxx(key, val)记录相关字段\n\t\tzap.L().Debug(\"this is hello func\", zap.String(\"user\", name), zap.Int(\"age\", age))\n\n\t\tc.String(http.StatusOK, \"hello liwenzhou.com!\")\n\t})\n\n\taddr := fmt.Sprintf(\":%v\", config.Conf.Port)\n\tr.Run(addr)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109234320-sge831v","Type":"NodeParagraph","Properties":{"id":"20240109234320-sge831v","updated":"20240109234320"},"Children":[{"Type":"NodeText","Data":"完整示例代码我已经上传至github："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/Q1mi/gin_zap_demo","TextMarkTextContent":"gin_zap_demo"}]}]}