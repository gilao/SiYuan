{"ID":"20230724231512-zvfx3tu","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f9a2","id":"20230724231512-zvfx3tu","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724231512-zvfx3tu\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724231513-77m6odn\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724231514-evk8nnk\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724231513-77m6odn\u0026quot;,\u0026quot;focusStart\u0026quot;:4,\u0026quot;focusEnd\u0026quot;:4\u0026#125;","tags":"公众号-小徐先生的编程世界,设计模式-单例模式,sync.Once","title":"Golang 设计模式之单例模式","updated":"20231215155815"},"Children":[{"ID":"20230724231513-77m6odn","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231513-77m6odn","updated":"20231127212707"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/KRgNwJt1C7q2ckeqCu9pCQ","TextMarkTextContent":"Go 单例模式"},{"Type":"NodeText","Data":"背景"}]},{"ID":"20231127212707-32wn1yt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231127212707-32wn1yt","updated":"20231127220841"},"Children":[{"Type":"NodeText","Data":"应用背景"}]},{"ID":"20230724231514-evk8nnk","Type":"NodeParagraph","Properties":{"id":"20230724231514-evk8nnk","updated":"20231127220905"},"Children":[{"Type":"NodeText","Data":"单例模式是一类最经典最简单的设计模式. 在单例模式下，我们声明一个类并保证这个类只存在全局唯一的实例供外部反复使用.\n单例模式的适用场景包括："}]},{"ID":"20231127220921-zro6095","Type":"NodeList","ListData":{},"Properties":{"id":"20231127220921-zro6095","updated":"20231127220925"},"Children":[{"ID":"20231127220921-2xldbb0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231127220921-2xldbb0","updated":"20231127220923"},"Children":[{"ID":"20231127220911-rsk5rpo","Type":"NodeParagraph","Properties":{"id":"20231127220911-rsk5rpo","updated":"20231127220923"},"Children":[{"Type":"NodeText","Data":"一些只允许存在一个实例的类，比如全局统一的监控统计模块"}]}]},{"ID":"20231127220921-7dawjiu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231127220921-7dawjiu","updated":"20231127220924"},"Children":[{"ID":"20231127220913-fc57za6","Type":"NodeParagraph","Properties":{"id":"20231127220913-fc57za6","updated":"20231127220924"},"Children":[{"Type":"NodeText","Data":"一些实例化时很耗费资源的类，比如协程池、连接池、和第三方交互的客户端等"}]}]},{"ID":"20231127220921-kcpasja","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231127220921-kcpasja","updated":"20231127220925"},"Children":[{"ID":"20231127220914-17ykowz","Type":"NodeParagraph","Properties":{"id":"20231127220914-17ykowz","updated":"20231127220925"},"Children":[{"Type":"NodeText","Data":"一些入参繁杂的系统模块组件，比如 controller、service、dao 等"}]}]}]},{"ID":"20231127220909-po7xqhb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231127220909-po7xqhb","updated":"20231127220952"},"Children":[{"Type":"NodeText","Data":"实现模式"}]},{"ID":"20231127220952-cgbq8y6","Type":"NodeParagraph","Properties":{"id":"20231127220952-cgbq8y6","updated":"20231128000305"},"Children":[{"Type":"NodeText","Data":" 在单例模式的实现上，可以分为饿汉式和懒汉式两种类型："}]},{"ID":"20231128000312-14s4ltu","Type":"NodeList","ListData":{},"Properties":{"id":"20231128000312-14s4ltu"},"Children":[{"ID":"20231128000312-rvf4jjf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231128000312-rvf4jjf"},"Children":[{"ID":"20231128000306-sciblta","Type":"NodeParagraph","Properties":{"id":"20231128000306-sciblta","updated":"20231128000314"},"Children":[{"Type":"NodeText","Data":"饿汉式：从一开始就完成单例的初始化工作，以备不时之需（肚子饿了，先干为敬.）"}]}]},{"ID":"20231128000312-4k687ia","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231128000312-4k687ia"},"Children":[{"ID":"20231128000307-097pqv9","Type":"NodeParagraph","Properties":{"id":"20231128000307-097pqv9","updated":"20231128000315"},"Children":[{"Type":"NodeText","Data":"懒汉式：贯彻佛系思想，不到逼不得已（需要被使用了），不执行单例的初始化工作"}]}]}]},{"ID":"20231128000318-apf5e9q","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231128000318-apf5e9q","updated":"20231128000419"},"Children":[{"Type":"NodeText","Data":"饿汉式单例模式"}]},{"ID":"20231128000419-vh6lohd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128000419-vh6lohd","updated":"20231128000427"},"Children":[{"Type":"NodeText","Data":"饿汉式实现流程"}]},{"ID":"20231128000435-wek98i5","Type":"NodeParagraph","Properties":{"id":"20231128000435-wek98i5","updated":"20231128000435"},"Children":[{"Type":"NodeText","Data":"饿汉式和懒汉式中的“饿”和“懒”体现在单例初始化时机的不同. “饿” 指的是，对于单例对象而言，不论其后续有没有被使用到以及何时才会被使用到，都会在程序启动之初完成其初始化工作."}]},{"ID":"20231128000435-xd0j3fp","Type":"NodeParagraph","Properties":{"id":"20231128000435-xd0j3fp","updated":"20231128000435"},"Children":[{"Type":"NodeText","Data":"在实现上，可以将饿汉式单例模式的执行步骤拆解如下："}]},{"ID":"20231128000507-rfkmf43","Type":"NodeList","ListData":{},"Properties":{"id":"20231128000507-rfkmf43","updated":"20231128000507"},"Children":[{"ID":"20231128000507-agwp7xx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231128000507-agwp7xx","updated":"20231128000507"},"Children":[{"ID":"20231128000507-4b1dvtf","Type":"NodeParagraph","Properties":{"id":"20231128000507-4b1dvtf","updated":"20231128000507"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单例类和构造方法声明为不可导出类型，避免被外部直接获取到（避免让外界拥有直接初始化的能力，导致单例模式被破坏）"}]}]},{"ID":"20231128000507-izhlx9j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231128000507-izhlx9j","updated":"20231128000507"},"Children":[{"ID":"20231128000507-y02t8f1","Type":"NodeParagraph","Properties":{"id":"20231128000507-y02t8f1","updated":"20231128000507"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在代码启动之初，就初始化好一个全局单一的实例，作为后续所谓的“单例”"}]}]},{"ID":"20231128000507-bvxj12e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231128000507-bvxj12e","updated":"20231128000507"},"Children":[{"ID":"20231128000507-8xsddwu","Type":"NodeParagraph","Properties":{"id":"20231128000507-8xsddwu","updated":"20231128000507"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"暴露一个可导出的单例获取方法 GetXXX()，用于返回这个单例对象"}]}]}]},{"ID":"20231128000558-g6zobqu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128000558-g6zobqu","updated":"20231128000632"},"Children":[{"Type":"NodeText","Data":"饿汉式实现源码"}]},{"ID":"20231128000642-eochakq","Type":"NodeParagraph","Properties":{"id":"20231128000642-eochakq","updated":"20231128000642"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128000642-70xzz17.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128000812-emwfgdf","Type":"NodeParagraph","Properties":{"id":"20231128000812-emwfgdf","updated":"20231128000812"},"Children":[{"Type":"NodeText","Data":"下面给出实现饿汉式单例模式的代码示例："}]},{"ID":"20231128000812-7eqgbjl","Type":"NodeParagraph","Properties":{"id":"20231128000812-7eqgbjl","updated":"20231128000812"},"Children":[{"Type":"NodeText","Data":"• singleton 是需要被单例模式保护的类型"}]},{"ID":"20231128000812-6g3qmly","Type":"NodeParagraph","Properties":{"id":"20231128000812-6g3qmly","updated":"20231128000812"},"Children":[{"Type":"NodeText","Data":"• singleton 首字母小写，是不可导出的类型，避免被外界直接获取"}]},{"ID":"20231128000812-22ptzg9","Type":"NodeParagraph","Properties":{"id":"20231128000812-22ptzg9","updated":"20231128000812"},"Children":[{"Type":"NodeText","Data":"• 在包初始化函数 init 中完成了 singleton 单例的初始化工作"}]},{"ID":"20231128000812-elvk5zi","Type":"NodeParagraph","Properties":{"id":"20231128000812-elvk5zi","updated":"20231128000812"},"Children":[{"Type":"NodeText","Data":"• 对外暴露可导出方法 GetInstance，返回提前初始化好的全局单例对象 s"}]},{"ID":"20231128000815-74cague","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128000815-74cague","updated":"20231128001308"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nvar s *Singleton\n\nfunc init() {\n\ts = newSingleton()\n}\n\ntype Singleton struct {\n\n}\n\nfunc newSingleton() *Singleton {\n\treturn \u0026Singleton{}\n}\n\nfunc (s *Singleton) Work() {\n\n}\n\nfunc GetInstance() *Singleton {\n\treturn s\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128001317-gue0q22","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128001317-gue0q22","updated":"20231128001326"},"Children":[{"Type":"NodeText","Data":"代码规范性讨论"}]},{"ID":"20231128001333-njdhjq4","Type":"NodeParagraph","Properties":{"id":"20231128001333-njdhjq4","updated":"20231128001333"},"Children":[{"Type":"NodeText","Data":"上述代码在实现上没有逻辑问题，但是存在一个比较容易引起争议的规范性问题，就是在对外可导出的 GetInstance 方法中，返回了不可导出的类型 singleton."}]},{"ID":"20231128001333-drwypf7","Type":"NodeParagraph","Properties":{"id":"20231128001333-drwypf7","updated":"20231128001333"},"Children":[{"Type":"NodeText","Data":"代码执行流程上 ok，但这种实现方式存在代码坏味道，相应的问题在 stackoverflow 上引起过讨论，对应链接如下，大家感兴趣可以去了解原贴中的讨论内容："}]},{"ID":"20231128001333-sf35rq1","Type":"NodeParagraph","Properties":{"id":"20231128001333-sf35rq1","updated":"20231128001333"},"Children":[{"Type":"NodeText","Data":"https://stackoverflow.com/questions/21470398/return-an-unexported-type-from-a-function"}]},{"ID":"20231128001352-03oiblq","Type":"NodeParagraph","Properties":{"id":"20231128001352-03oiblq","updated":"20231128001355"},"Children":[{"Type":"NodeText","Data":"不建议这么做的原因主要在于：\n• singleton 是包内的不可导出类型，在包外即便获取到了，也无法直接作为方法的入参或者出参进行传递，显得很呆\n• singleton 的对外暴露，使得 singleton 所在 package 的代码设计看起来是自相矛盾的，混淆了 singleton 这个不可导出类型的边界和定位\n综上，规范的处理方式是，在不可导出单例类 singleton 的基础上包括一层接口 interface，将其作为对对导出方法 GetInstance 的返回参数类型:"}]},{"ID":"20231128001446-ru16tm4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128001446-ru16tm4","updated":"20231128001546"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Instance interface {\n     Work() \n}\n\nfunc GetInstance() Instance {\n    return s\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128001603-1f25vyx","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231128001603-1f25vyx","updated":"20231128001627"},"Children":[{"Type":"NodeText","Data":"懒汉式单例模式"}]},{"ID":"20231128001627-7o37job","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128001627-7o37job","updated":"20231128001635"},"Children":[{"Type":"NodeText","Data":"懒汉式实现流程"}]},{"ID":"20231128001635-6g422iu","Type":"NodeParagraph","Properties":{"id":"20231128001635-6g422iu","updated":"20231128001647"},"Children":[{"Type":"NodeText","Data":"懒汉式讲究的是”佛系”，某件事情如果是可做可不做，那我一定选择不做. 直到万不得已非做不可的时候，我才会采取行动（deadline 是第一生产力）.\n懒汉式的执行步骤如下：\n• 单例类声明为不可导出类型，避免被外界直接获取到\n• 声明一个全局单例变量, 但不进行初始化（注意只声明，不初始化）\n• 暴露一个对外公开的方法,用于获取这个单例\n• 在这个获取方法被调用时，会判断单例是否初始化过，倘若没有，则在此时才完成初始化工作"}]},{"ID":"20231128001653-3qo1rx4","Type":"NodeParagraph","Properties":{"id":"20231128001653-3qo1rx4"}},{"ID":"20231128001655-usv09se","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128001655-usv09se","updated":"20231128001700"},"Children":[{"Type":"NodeText","Data":"实现过程推演"}]},{"ID":"20231128001701-yhgpu0a","Type":"NodeParagraph","Properties":{"id":"20231128001701-yhgpu0a","updated":"20231128001708"},"Children":[{"Type":"NodeText","Data":"懒汉相比于饿汉，在代码实现上有更多细节值得考究，下面就和大家一起进行思路的推演，一步步暴露问题并解决问题，直到获取到最终答案."}]},{"ID":"20231128001709-wum9z7t","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231128001709-wum9z7t","updated":"20231128001717"},"Children":[{"Type":"NodeText","Data":"懒汉模式 1.0"}]},{"ID":"20231128001718-zwgr825","Type":"NodeParagraph","Properties":{"id":"20231128001718-zwgr825","updated":"20231128001725"},"Children":[{"Type":"NodeText","Data":"首先请大家观察我这边提出的懒汉 1.0 的实现源码，并留意其中存在的问题."}]},{"ID":"20231128001738-m9o9dhw","Type":"NodeParagraph","Properties":{"id":"20231128001738-m9o9dhw","updated":"20231128001738"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128001738-gel0wwd.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128001755-e1xuvhl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128001755-e1xuvhl","updated":"20231128002022"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\n//懒汉模式\nvar s *Singleton\n\ntype Singleton struct {\n}\n\nfunc newSingleton() *Singleton {\n\treturn \u0026Singleton{}\n}\n\nfunc (s *Singleton) Work() {\n}\n\ntype Instance interface {\n\tWork()\n}\n\n\nfunc GetInstance() *Singleton {\n\tif s == nil {\n\t\ts = newSingleton()\n\t}\n\treturn s\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128002021-8aen7j6","Type":"NodeParagraph","Properties":{"id":"20231128002021-8aen7j6","updated":"20231128002027"},"Children":[{"Type":"NodeText","Data":"这个实现流程乍一看没有问题，但是我们需要意识到，这个 GetInstance 方法是对外暴露的，我们需要基于底线思维，把外界看成是存在不稳定因素的使用方，这个 GetInstance 方法是存在被并发调用的可能性的，一旦被并发调用，则 singleton 这个单例就可能被初始化两次，违背了所谓”单例“的语义."}]},{"ID":"20231128002031-no1wg07","Type":"NodeParagraph","Properties":{"id":"20231128002031-no1wg07"}},{"ID":"20231128002035-sh4z0ke","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231128002035-sh4z0ke","updated":"20231128002044"},"Children":[{"Type":"NodeText","Data":"懒汉模式 2.0"}]},{"ID":"20231128002044-oac44vi","Type":"NodeParagraph","Properties":{"id":"20231128002044-oac44vi","updated":"20231128002057"},"Children":[{"Type":"NodeText","Data":"问题已经发现了，我们就见招拆招，在1.0的基础上提出2.0，探讨如何规避并发问题，实现真正意义的单例模式."}]},{"ID":"20231128002107-6g3k48k","Type":"NodeParagraph","Properties":{"id":"20231128002107-6g3k48k","updated":"20231128002107"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128002107-bwd63qy.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128002112-jzcoeuw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128002112-jzcoeuw","updated":"20231128002214"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"sync\"\n\n// 饿汉模式\nvar (\n\ts *Singleton\n\tmux sync.Mutex\n)\n\ntype Singleton struct {\n}\n\nfunc newSingleton() *Singleton {\n\treturn \u0026Singleton{}\n}\n\nfunc (s *Singleton) Work() {\n}\n\ntype Instance interface {\n\tWork()\n}\n\nfunc GetInstance() *Singleton {\n\tmux.Lock()\n\tdefer mux.Unlock()\n\tif s == nil {\n\t\ts = newSingleton()\n\t}\n\treturn s\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128002220-u2hlase","Type":"NodeParagraph","Properties":{"id":"20231128002220-u2hlase","updated":"20231128002220"},"Children":[{"Type":"NodeText","Data":"上述懒汉2.0的代码中，我们通过定义一把全局锁，用于在并发场景下保护单例 singleton 的数据一致性."}]},{"ID":"20231128002220-sxk351d","Type":"NodeParagraph","Properties":{"id":"20231128002220-sxk351d","updated":"20231128002220"},"Children":[{"Type":"NodeText","Data":"用户调用 GetInstance 方法时，无一例外需要率先取得锁，然后再判断 singleton 是否被初始化过，如果没有，则完成对应的初始化工作. 通过互斥锁的保护，保证了 singleton 的初始化工作一定只会执行一次，”单例“的语义得以达成."}]},{"ID":"20231128002220-cmzhkwo","Type":"NodeParagraph","Properties":{"id":"20231128002220-cmzhkwo","updated":"20231128002220"},"Children":[{"Type":"NodeText","Data":"这样可以解决并发问题，但是还不够完美，这是因为即便 singleton 已经初始化过了，后续外界用户每次在获取单例时，都需要加锁，存在无意义的性能损耗."}]},{"ID":"20231128002239-noqwdxu","Type":"NodeParagraph","Properties":{"id":"20231128002239-noqwdxu"}},{"ID":"20231128002240-2crj1k5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231128002240-2crj1k5","updated":"20231128002245"},"Children":[{"Type":"NodeText","Data":"懒汉模式 3.0"}]},{"ID":"20231128002246-f7nce2e","Type":"NodeParagraph","Properties":{"id":"20231128002246-f7nce2e","updated":"20231128002251"},"Children":[{"Type":"NodeText","Data":"解决懒汉2.0中性能问题的关键在于，我们希望尽可能地减少与互斥锁的交互，在此基础上，我们提出懒汉3.0的实现."}]},{"ID":"20231128002302-lv956ws","Type":"NodeParagraph","Properties":{"id":"20231128002302-lv956ws","updated":"20231128002302"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128002302-mkim7ah.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128002303-jjznr9d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128002303-jjznr9d","updated":"20231128002352"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"sync\"\n\n// 饿汉模式\nvar (\n\ts   *Singleton\n\tmux sync.Mutex\n)\n\ntype Singleton struct {\n}\n\nfunc newSingleton() *Singleton {\n\treturn \u0026Singleton{}\n}\n\nfunc (s *Singleton) Work() {\n}\n\ntype Instance interface {\n\tWork()\n}\n\nfunc GetInstance() *Singleton {\n\tif s != nil {\n\t\treturn s\n\t}\n\n\tmux.Lock()\n\tdefer mux.Unlock()\n\n\ts = newSingleton()\n\n\treturn s\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128002353-1iyspa8","Type":"NodeParagraph","Properties":{"id":"20231128002353-1iyspa8","updated":"20231128002359"},"Children":[{"Type":"NodeText","Data":"懒汉3.0中，用户调用 GetInstance 方法获取单例时经历如下步骤：\n• 首先在加锁前，先判断 singleton 是否初始化过，如果是，则直接返回（需要注意，这一步是无锁的）\n• 倘若 singleton 没初始化过，才加锁，并执行初始化工作\n这样的实现方式，保证了只要 singleton 被成功初始化后，用户调用 GetInstance 方法时都可以直接返回，无需加锁，大幅度减少了加锁的频率.\n然而，懒汉3.0的实现是存在逻辑上的漏洞，仍然可能引起并发安全问题. 这里给出的反例如下：\n• moment1：单例 singleton 至今为止没有被初始化过\n• moment2：goroutine A 和 goroutine B 同时调用 GetInstance 获取单例，由于当前 singleton 没初始化过，于是两个 goroutine 都未走进 if s !"},{"Type":"NodeBackslash","Data":"span","Children":[{"Type":"NodeBackslashContent","Data":"="}]},{"Type":"NodeText","Data":" nil 的分支，而是开始抢锁\n• moment3：goroutine A 抢锁成功继续往下；goroutine B 抢锁失败，进行等锁\n• moment4：goroutine A 完成 singleton 初始化，并释放锁\n• moment5：由于锁被释放，goroutine B 取锁成功，并继续往下执行，完成 singleton 的初始化\n通过上述5个时间节点的串联，我们得见，singleton 仍然被初始化了不只1次."}]},{"ID":"20231128002421-rt10q8v","Type":"NodeParagraph","Properties":{"id":"20231128002421-rt10q8v"}},{"ID":"20231128002422-j52rs0g","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231128002422-j52rs0g","updated":"20231128002426"},"Children":[{"Type":"NodeText","Data":"懒汉模式 4.0"}]},{"ID":"20231128002427-f0zfb5m","Type":"NodeParagraph","Properties":{"id":"20231128002427-f0zfb5m","updated":"20231128002432"},"Children":[{"Type":"NodeText","Data":"最后，我们在 3.0 的基础上继续升级，给到完整的解决方案：懒汉 4.0"}]},{"ID":"20231128002504-lpfky4n","Type":"NodeParagraph","Properties":{"id":"20231128002504-lpfky4n","updated":"20231128002504"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128002504-gjqs2j7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128002516-nol9hoa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128002516-nol9hoa","updated":"20231128002546"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"sync\"\n\n// 饿汉模式\nvar (\n\ts   *Singleton\n\tmux sync.Mutex\n)\n\ntype Singleton struct {\n}\n\nfunc newSingleton() *Singleton {\n\treturn \u0026Singleton{}\n}\n\nfunc (s *Singleton) Work() {\n}\n\ntype Instance interface {\n\tWork()\n}\n\nfunc GetInstance() *Singleton {\n\tif s != nil {\n\t\treturn s\n\t}\n\n\tmux.Lock()\n\tdefer mux.Unlock()\n\n\tif s != nil {\n\t\treturn s\n\t}\n\ts = newSingleton()\n\n\treturn s\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128002553-uyw7noe","Type":"NodeParagraph","Properties":{"id":"20231128002553-uyw7noe","updated":"20231128002556"},"Children":[{"Type":"NodeText","Data":"懒汉4.0中，我们将流程升级为加锁 double check 模式：\n• 在加锁前，先检查一轮单例的初始化状态，倘若已初始化过，则直接返回，以做到最大限度的无锁操作\n• 倘若通过第一轮检查，则进行加锁，保证并发安全性\n• 加锁成功后，需要执行第二轮检查，确保在此时单例仍未初始化过的前提下，才执行初始化工作\n此处得以解决懒汉3.0中并发问题的核心在于，加锁之后多了一次 double check 动作，由于这轮检查工作是在加锁之后执行的，因此能够保证 singleton 的初始化状态是稳定不变的，并发问题彻底得以解决."}]},{"ID":"20231128002557-j2hes60","Type":"NodeParagraph","Properties":{"id":"20231128002557-j2hes60"}},{"ID":"20231128002558-o8pkx95","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231128002558-o8pkx95","updated":"20231128002608"},"Children":[{"Type":"NodeText","Data":"懒汉模式 5.0"}]},{"ID":"20231128002608-9z3efah","Type":"NodeParagraph","Properties":{"id":"20231128002608-9z3efah","updated":"20231128002615"},"Children":[{"Type":"NodeText","Data":"事实上，在使用 Go 语言时还有一种更优雅的单例实现方式，那就是使用 sync 包下的单例工具 sync.Once，使用的代码示例如下. 关于 sync.Once 底层具体的实现原理，我们放在本文第 4 章中再作展开."}]},{"ID":"20231128002616-bdjra2r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128002616-bdjra2r","updated":"20231128002710"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"sync\"\n\n// 饿汉模式\nvar (\n\ts   *Singleton\n\tonce sync.Once\n)\n\ntype Singleton struct {\n}\n\nfunc newSingleton() *Singleton {\n\treturn \u0026Singleton{}\n}\n\nfunc (s *Singleton) Work() {\n}\n\ntype Instance interface {\n\tWork()\n}\n\nfunc GetInstance() *Singleton {\n\tonce.Do(func() {\n\t\ts = newSingleton()\n\t})\n\treturn s\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128002712-7m7h8g3","Type":"NodeParagraph","Properties":{"id":"20231128002712-7m7h8g3"}},{"ID":"20231128002716-atllk28","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128002716-atllk28","updated":"20231128002723"},"Children":[{"Type":"NodeText","Data":"两种模式对比"}]},{"ID":"20231128002723-km4oqu9","Type":"NodeParagraph","Properties":{"id":"20231128002723-km4oqu9","updated":"20231128002734"},"Children":[{"Type":"NodeText","Data":"饿汉式与懒汉式没有绝对的优劣之分，需要权衡看待：\n• 饿汉式在程序运行之初就完成单例的初始化，说白了，不够智能，不够极限，不够”懒“. 说不定这个单例对象迟迟不被使用到，甚至永远都不被使用，那么这次初始化动作可能只是一次无谓的性能损耗\n• 懒汉式在单例被首次使用时才执行初始化，看起来显得”聪明“一些. 但是，我们需要意识到，倘若初始化工作中存在异常问题（如 panic，fatal），则这枚定时炸弹会在程序运行过程才暴露出来，这对于我们的运行项目而言会带来更严重的伤害. 相比之下，倘若使用的是饿汉模式，则这种实例化的问题会在代码编译运行之初就提前暴露，更有利于问题的定位和解决"}]},{"ID":"20231128002813-24zu4v9","Type":"NodeParagraph","Properties":{"id":"20231128002813-24zu4v9"}},{"ID":"20231128002816-dp45n3l","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231128002816-dp45n3l","updated":"20231128002828"},"Children":[{"Type":"NodeText","Data":"sync.Once 实现原理"}]},{"ID":"20231128002828-c16ks3a","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128002828-c16ks3a","updated":"20231128002839"},"Children":[{"Type":"NodeText","Data":"数据结构"}]},{"ID":"20231128002839-iodsm3k","Type":"NodeParagraph","Properties":{"id":"20231128002839-iodsm3k","updated":"20231128002844"},"Children":[{"Type":"NodeText","Data":"sync.Once 是 Golang 提供的用于支持实现单例模式的标准库工具，其对应的数据结构如下："}]},{"ID":"20231128002851-m059v2g","Type":"NodeParagraph","Properties":{"id":"20231128002851-m059v2g","updated":"20231128002851"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128002851-zyoqqsv.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128002852-7pgjhnt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128002852-7pgjhnt","updated":"20231128002903"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package sync\n\nimport (\n    \"sync/atomic\"\n)\n\ntype Once struct {\n    // 通过一个整型变量标识，once 保护的函数是否已经被执行过\n    done uint32\n    // 一把锁，在并发场景下保护临界资源 done 字段只能串行访问\n    m    Mutex\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128002904-v57bk8o","Type":"NodeParagraph","Properties":{"id":"20231128002904-v57bk8o","updated":"20231128003332"},"Children":[{"Type":"NodeText","Data":"在 sync.Once 的定义类中 包含了两个核心字段：\n• done：一个整型 uint32，用于标识用户传入的任务函数是否已经执行过了\n• m：一把互斥锁 sync.Mutex，用于保护标识值 done ，避免因并发问题导致数据不一致"}]},{"ID":"20231128003333-na7eb9f","Type":"NodeParagraph","Properties":{"id":"20231128003333-na7eb9f"}},{"ID":"20231128003338-soh5tre","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231128003338-soh5tre","updated":"20231128003354"},"Children":[{"Type":"NodeText","Data":"Once.Do"}]},{"ID":"20231128003355-x1k3xrc","Type":"NodeParagraph","Properties":{"id":"20231128003355-x1k3xrc","updated":"20231128003401"},"Children":[{"Type":"NodeText","Data":"sync.Once 本质上也是通过加锁 double check 机制，实现了任务的全局单次执行，实现的方法链路和具体源码展示如下："}]},{"ID":"20231128003410-f2dgkav","Type":"NodeParagraph","Properties":{"id":"20231128003410-f2dgkav","updated":"20231128003410"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231128003410-jx8mzta.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231128003412-7313i0f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231128003412-7313i0f","updated":"20231128003422"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (o *Once) Do(f func()) {\n    // 锁外的第一次 check，读取 Once.done 的值\n    if atomic.LoadUint32(\u0026o.done) == 0 {\n        o.doSlow(f)\n    }\n}\n\nfunc (o *Once) doSlow(f func()) {\n    // 加锁\n    o.m.Lock()\n    defer o.m.Unlock()\n    // double check\n    if o.done == 0 {\n        // 任务执行完成后，将 Once.done 标识为 1\n        defer atomic.StoreUint32(\u0026o.done, 1)\n        // 保证全局唯一一次执行用户注入的任务\n        f()\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231128003454-o9xmeu0","Type":"NodeParagraph","Properties":{"id":"20231128003454-o9xmeu0","updated":"20231128003455"},"Children":[{"Type":"NodeText","Data":"单例工具 sync.Once 的使用方式非常简单. 用户调用 sync.Once.Do 方法，并在方法入参传入一个需要保证全局只执行一次的闭包任务函数 f func() 即可.\nsync.Once.Do 方法的实现步骤如下：\n• first check：第一次检查 Once.done 的值是否为 0，这步是无锁化的\n• easy return：倘若 Once.done 的值为 0，说明任务已经执行过，直接返回\n• lock：加锁\n• double check：再次检查 Once.done 的值是否为 0\n• execute func：倘若通过 double check，真正执行用户传入的执行函数 f\n• update：执行完 f 后，将 Once.done 的值设为 1\n• return：解锁并返回"}]},{"ID":"20231128003618-fay8cdk","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231128003618-fay8cdk","updated":"20231128003629"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231128003630-3m3ey0s","Type":"NodeParagraph","Properties":{"id":"20231128003630-3m3ey0s","updated":"20231128003636"},"Children":[{"Type":"NodeText","Data":"本文通过 Go 语言和大家一起探讨了单例模式中饿汉式和懒汉式两种模式的设计思路和实现细节，并介绍了 Golang 标准库中提供的单例工具 sync.Once 的实现原理."}]}]}