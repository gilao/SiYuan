{"ID":"20240513103026-4u5fgcg","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3f9","id":"20240513103026-4u5fgcg","tags":"Go-分布式锁","title":"Golang 分布式锁技术攻略","type":"doc","updated":"20240513141101"},"Children":[{"ID":"20240513103059-yeiqx8a","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513103059-yeiqx8a","updated":"20240513103209"},"Children":[{"Type":"NodeText","Data":"0 前言"}]},{"ID":"20240513103104-7arm88u","Type":"NodeParagraph","Properties":{"id":"20240513103104-7arm88u","updated":"20240513103209"},"Children":[{"Type":"NodeText","Data":"本文内容分为两部分：第一部分聊聊如何通过 redis 实现主动轮询模型下的分布式锁；第二部分和大家一起探讨如何使用 etcd 实现 watch 回调模型下的分布式锁. 两个部分均会通过原理阐述结合源码剖析的方式为大家作具体的内容介绍"}]},{"ID":"20240513103026-rfdrmbg","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513103026-rfdrmbg","updated":"20240513103207"},"Children":[{"Type":"NodeText","Data":"1 分布式锁"}]},{"ID":"20240513103155-eojc9fh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513103155-eojc9fh","updated":"20240513103207"},"Children":[{"Type":"NodeText","Data":"1.1 使用背景"}]},{"ID":"20240513103217-9qt03xu","Type":"NodeParagraph","Properties":{"id":"20240513103217-9qt03xu","updated":"20240513103217"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513103217-w9zl4mm.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513103218-kb5t4hx","Type":"NodeParagraph","Properties":{"id":"20240513103218-kb5t4hx","updated":"20240513103228"},"Children":[{"Type":"NodeText","Data":"在并发场景中，为了保证临界资源的数据一致性，我们会经常使用到“锁”这个工具对临界资源进行保护，让混乱的并发访问行为退化为秩序的串行访问行为."}]},{"ID":"20240513103236-cbd0wxj","Type":"NodeParagraph","Properties":{"id":"20240513103236-cbd0wxj","updated":"20240513103237"},"Children":[{"Type":"NodeText","Data":"在本地环境中，由于多线程之间能够共享进程的数据，因此可以比较简单地实现进程内的互斥锁；然而在分布式场景中，有时我们需要跨域多个物理节点执行加锁操作，因此我们就需要依赖到类似于 redis、mysql 这样的状态存储组件，在此基础之上实现所谓的“分布式锁”技术."}]},{"ID":"20240513103246-oqaldkb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513103246-oqaldkb","updated":"20240513103255"},"Children":[{"Type":"NodeText","Data":"1.2 核心性质"}]},{"ID":"20240513103255-alqs3pz","Type":"NodeParagraph","Properties":{"id":"20240513103255-alqs3pz","updated":"20240513103345"},"Children":[{"Type":"NodeText","Data":"分布式锁应当具备如下几项的核心性质："}]},{"ID":"20240513103346-b2pqbbk","Type":"NodeList","ListData":{},"Properties":{"id":"20240513103346-b2pqbbk","updated":"20240513103824"},"Children":[{"ID":"20240513103348-uzn6nub","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513103348-uzn6nub","updated":"20240513103348"},"Children":[{"ID":"20240513103348-gkc187r","Type":"NodeParagraph","Properties":{"id":"20240513103348-gkc187r","updated":"20240513103450"},"Children":[{"Type":"NodeText","Data":"独占性：对于同一把锁，在同一时刻只能被一个取锁方占有，这是作为“锁”工具最基础的一项性质"}]}]},{"ID":"20240513103451-puu08g0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513103451-puu08g0"},"Children":[{"ID":"20240513103451-hw1xvoa","Type":"NodeParagraph","Properties":{"id":"20240513103451-hw1xvoa","updated":"20240513103635"},"Children":[{"Type":"NodeText","Data":"健壮性：即不能产生死锁（dead lock)，假如某个占有锁的使用方因为宕机而无法主动执行解锁动作，锁也应该能够被正常传承下去，被其他使用方延续使用。"}]}]},{"ID":"20240513103636-rlvbeyk","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513103636-rlvbeyk"},"Children":[{"ID":"20240513103636-dmdjrjy","Type":"NodeParagraph","Properties":{"id":"20240513103636-dmdjrjy","updated":"20240513103738"},"Children":[{"Type":"NodeText","Data":"对称性：加锁和解锁的使用方必须为同一身份，不允许非法释放他人持有的分布式锁。"}]}]},{"ID":"20240513103738-10888bc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513103738-10888bc","updated":"20240513103824"},"Children":[{"ID":"20240513103738-g7xwsgf","Type":"NodeParagraph","Properties":{"id":"20240513103738-g7xwsgf","updated":"20240513103824"},"Children":[{"Type":"NodeText","Data":"高可用：当提供分布式锁服务的基础组件中存在少量节点发生故障时，不应该影响到分布式锁服务的稳定性；"}]}]}]},{"ID":"20240513103342-kdurqsi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513103342-kdurqsi","updated":"20240513103855"},"Children":[{"Type":"NodeText","Data":"1.3 实现类型"}]},{"ID":"20240513103909-0by3u4r","Type":"NodeParagraph","Properties":{"id":"20240513103909-0by3u4r","updated":"20240513103909"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513103909-7dogyp9.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513103911-r1uy061","Type":"NodeParagraph","Properties":{"id":"20240513103911-r1uy061","updated":"20240513103940"},"Children":[{"Type":"NodeText","Data":"分布式锁根据其实现类型，可以被划分为两大类："}]},{"ID":"20240513103940-6032gix","Type":"NodeList","ListData":{},"Properties":{"id":"20240513103940-6032gix","updated":"20240513104010"},"Children":[{"ID":"20240513103943-miz306b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513103943-miz306b","updated":"20240513103943"},"Children":[{"ID":"20240513103943-enpfblx","Type":"NodeParagraph","Properties":{"id":"20240513103943-enpfblx","updated":"20240513104000"},"Children":[{"Type":"NodeText","Data":"主动轮询型：该模型类似于单机锁中的主动轮询 + cas 乐观锁模型，取锁方会持续对分布式锁发出尝试获取动作，如果锁已被占用则会不断发起重试，直到取锁成功为止"}]}]},{"ID":"20240513104006-0pphu8r","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104006-0pphu8r","updated":"20240513104010"},"Children":[{"ID":"20240513104006-pkm9o3m","Type":"NodeParagraph","Properties":{"id":"20240513104006-pkm9o3m","updated":"20240513104010"},"Children":[{"Type":"NodeText","Data":"watch 回调型：在取锁方发现锁已被他人占用时，会创建 watcher 监视器订阅锁的释放事件，随后不再发起主动取锁的尝试；当锁被释放后，取锁方能通过之前创建的 watcher 感知到这一变化，然后再重新发起取锁的尝试动作"}]}]}]},{"ID":"20240513104021-d3nk5dz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513104021-d3nk5dz","updated":"20240513104031"},"Children":[{"Type":"NodeText","Data":"1.4 一些个人理解"}]},{"ID":"20240513104032-rlwyf6y","Type":"NodeParagraph","Properties":{"id":"20240513104032-rlwyf6y","updated":"20240513104043"},"Children":[{"Type":"NodeText","Data":"在单机环境中，主动轮询和 watch 回调两种锁模型各有优劣，所谓的”优“和”劣“也是相对而言，需要对 cpu 空转以及阻塞协程两种行为的损耗做出权衡. （大家对这部分概念如果不清晰，可以阅读一下我之前发表的文章——”Golang 单机锁实现原理“）."}]},{"ID":"20240513104225-8c21was","Type":"NodeParagraph","Properties":{"id":"20240513104225-8c21was","updated":"20240513104225"},"Children":[{"Type":"NodeText","Data":"然而，在分布式场景中，我个人觉得优势的天平在略微朝着 watch 回调型的实现策略倾斜. 这是因为分布式场景中”轮询“这一动作的成本相比于单机锁而言要高很多，背后存在的行为可能是一次甚至多次网络 IO 请求. 这种情况下，取锁方基于 watch 回调的方式，在确保锁被释放、自身有机会取锁的情况下，才会重新发出尝试取锁的请求，这样能在很大程度上避免无意义的轮询损耗."}]},{"ID":"20240513104232-zamchwh","Type":"NodeParagraph","Properties":{"id":"20240513104232-zamchwh","updated":"20240513104232"},"Children":[{"Type":"NodeText","Data":"当然，主动轮询型的分布式锁能够保证使用方始终占据流程的主动权，整个流程可以更加轻便灵活；此外，watch 机制在实现过程中需要建立长连接完成 watch 监听动作，也会存在一定的资源损耗. 因此这个问题没有标准答案，应该结合实际的需求背景采取不同的应对策略：在并发激烈程度较高时倾向于 watch 回调型分布式锁；反之，主动轮询型分布式锁可能会是更好的选择."}]},{"ID":"20240513104232-rr9kk6y","Type":"NodeParagraph","Properties":{"id":"20240513104232-rr9kk6y","updated":"20240513104232"},"Children":[{"Type":"NodeText","Data":"除此之外，基于 watch 回调模型实现的分布式锁背后可能还存在其他的问题，比如：当有多个尝试取锁的使用方 watch 监听同一把锁时，一次锁的释放事件可能会引发“惊群效应”. 这个问题以及对应的解决方案将会在本文第 4 章中进行探讨."}]},{"ID":"20240513104317-69zh7v9","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513104317-69zh7v9","updated":"20240513104325"},"Children":[{"Type":"NodeText","Data":"2. 主动轮询型"}]},{"ID":"20240513104325-rcrgihj","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513104325-rcrgihj","updated":"20240513104332"},"Children":[{"Type":"NodeText","Data":"2.1 实现思路"}]},{"ID":"20240513104340-hptje0b","Type":"NodeParagraph","Properties":{"id":"20240513104340-hptje0b","updated":"20240513104340"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513104340-j369wpo.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513104342-sd4qe77","Type":"NodeParagraph","Properties":{"id":"20240513104342-sd4qe77","updated":"20240513104419"},"Children":[{"Type":"NodeText","Data":"主动轮询型分布式锁的实现思路为："}]},{"ID":"20240513104419-t9z9y31","Type":"NodeList","ListData":{},"Properties":{"id":"20240513104419-t9z9y31","updated":"20240513104436"},"Children":[{"ID":"20240513104419-ojoc7yl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104419-ojoc7yl","updated":"20240513104419"},"Children":[{"ID":"20240513104419-exey2zu","Type":"NodeParagraph","Properties":{"id":"20240513104419-exey2zu","updated":"20240513104419"},"Children":[{"Type":"NodeText","Data":"针对于同一把分布式锁，使用同一条数据进行标识（以 redis 为例，则为同一个 key 对应的 kv 数据记录）"}]}]},{"ID":"20240513104421-5j4yhkl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104421-5j4yhkl"},"Children":[{"ID":"20240513104421-itob3q6","Type":"NodeParagraph","Properties":{"id":"20240513104421-itob3q6","updated":"20240513104423"},"Children":[{"Type":"NodeText","Data":"假如在存储介质成功插入了该条数据（要求之前该 key 对应的数据不存在），则被认定为加锁成功"}]}]},{"ID":"20240513104425-3wypv7p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104425-3wypv7p"},"Children":[{"ID":"20240513104425-ycd95qe","Type":"NodeParagraph","Properties":{"id":"20240513104425-ycd95qe","updated":"20240513104427"},"Children":[{"Type":"NodeText","Data":"把从存储介质中删除该条数据这一行为理解为释放锁操作"}]}]},{"ID":"20240513104429-h9ohaw0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104429-h9ohaw0"},"Children":[{"ID":"20240513104429-i1uf8qw","Type":"NodeParagraph","Properties":{"id":"20240513104429-i1uf8qw","updated":"20240513104430"},"Children":[{"Type":"NodeText","Data":"倘若在插入该条数据时，发现数据已经存在（锁已被他人持有），则持续轮询，直到数据被他人删除（他人释放锁），并由自身完成数据插入动作为止（取锁成功）"}]}]},{"ID":"20240513104434-r230716","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104434-r230716","updated":"20240513104436"},"Children":[{"ID":"20240513104434-k1e0i9o","Type":"NodeParagraph","Properties":{"id":"20240513104434-k1e0i9o","updated":"20240513104436"},"Children":[{"Type":"NodeText","Data":"由于是并发场景，需要保证【 （1）检查数据是否已被插入（2）数据不存在则插入数据 】这两个步骤之间是原子化不可拆分的（在 redis 中是 set only if not exist —— SETNX 操作）"}]}]}]},{"ID":"20240513104522-z6iysr7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513104522-z6iysr7","updated":"20240513104612"},"Children":[{"Type":"NodeText","Data":"2.2 技术选型"}]},{"ID":"20240513104613-2lnhscu","Type":"NodeParagraph","Properties":{"id":"20240513104613-2lnhscu","updated":"20240513104638"},"Children":[{"Type":"NodeText","Data":"实现主动轮询型分布式锁时，我们常用的组件包括 redis 和mysql"}]},{"ID":"20240513104638-ertn860","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513104638-ertn860","updated":"20240513104646"},"Children":[{"Type":"NodeText","Data":"（1）redis"}]},{"ID":"20240513104646-eeouz0w","Type":"NodeParagraph","Properties":{"id":"20240513104646-eeouz0w","updated":"20240513104659"},"Children":[{"Type":"NodeText","Data":"在实现主动轮询型分布式锁时，redis 算得上是大家最常用的组件. 在第 3 章中，本文会以 redis 为例，进行主动轮询型分布式锁的实践介绍."}]},{"ID":"20240513104708-p781v3m","Type":"NodeParagraph","Properties":{"id":"20240513104708-p781v3m","updated":"20240513104708"},"Children":[{"Type":"NodeText","Data":"redis 官方文档：https://redis.io/"}]},{"ID":"20240513104708-xx9zqbh","Type":"NodeParagraph","Properties":{"id":"20240513104708-xx9zqbh","updated":"20240513104708"},"Children":[{"Type":"NodeText","Data":"redis 基于内存实现数据的存储，因此足够高轻便高效. 此外，redis 基于单线程模型完成数据处理工作，支持 SETNX 原子指令（set only if not exist），能够很方便地支持分布式锁的加锁操作."}]},{"ID":"20240513104708-u61v3m1","Type":"NodeParagraph","Properties":{"id":"20240513104708-u61v3m1","updated":"20240513104708"},"Children":[{"Type":"NodeText","Data":"setnx 使用文档：https://redis.io/commands/setnx/ （事实上，在 redis 2.6.12 版本之后，setnx 操作已经被弃置，官方推荐大家使用 set 指令并附加 nx 参数来实现与 setnx 指令相同的效果）"}]},{"ID":"20240513104729-yd79m9c","Type":"NodeParagraph","Properties":{"id":"20240513104729-yd79m9c","updated":"20240513104729"},"Children":[{"Type":"NodeText","Data":"此外，redis 还支持使用 lua 脚本自定义组装同一个 redis 节点下的多笔操作形成一个具备原子性的事务."}]},{"ID":"20240513104729-hfk35d4","Type":"NodeParagraph","Properties":{"id":"20240513104729-hfk35d4","updated":"20240513104729"},"Children":[{"Type":"NodeText","Data":"redis lua 脚本使用文档：https://redis.io/docs/manual/programmability/eval-intro/"}]},{"ID":"20240513104730-le8vst6","Type":"NodeParagraph","Properties":{"id":"20240513104730-le8vst6","updated":"20240513104736"},"Children":[{"Type":"NodeText","Data":"在通过 redis 实现分布式锁时，我们可以通过将 key 对应的 value 设置为使用方的身份标识. 在解锁流程中，通过 lua 脚本组装步骤：【（1）检查释放锁动作执行者的身份；（2）身份合法时才进行解锁】. 如此一来，分布式锁的对称性也就得以保证了."}]},{"ID":"20240513104743-hcyy6jc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513104743-hcyy6jc","updated":"20240513104815"},"Children":[{"Type":"NodeText","Data":"（2）mysql"}]},{"ID":"20240513104821-i3xbqde","Type":"NodeParagraph","Properties":{"id":"20240513104821-i3xbqde","updated":"20240513104821"},"Children":[{"Type":"NodeText","Data":"mysql 官方文档：https://www.mysql.com/"}]},{"ID":"20240513104821-wmpn6ln","Type":"NodeParagraph","Properties":{"id":"20240513104821-wmpn6ln","updated":"20240513105321"},"Children":[{"Type":"NodeText","Data":"通过经典的关系型数据库 mysql 也能实现和 redis 类似的效果."}]},{"ID":"20240513104823-ckqevce","Type":"NodeList","ListData":{},"Properties":{"id":"20240513104823-ckqevce","updated":"20240513105258"},"Children":[{"ID":"20240513104830-6zcqc48","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104830-6zcqc48","updated":"20240513104830"},"Children":[{"ID":"20240513104830-sen5g1z","Type":"NodeParagraph","Properties":{"id":"20240513104830-sen5g1z","updated":"20240513104855"},"Children":[{"Type":"NodeText","Data":"建立一张用于存储分布式锁记录的数据表"}]}]},{"ID":"20240513104855-ih62dai","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104855-ih62dai"},"Children":[{"ID":"20240513104855-ygg6frx","Type":"NodeParagraph","Properties":{"id":"20240513104855-ygg6frx","updated":"20240513104924"},"Children":[{"Type":"NodeText","Data":"以分布式锁的表示键作为表中的唯一键（类比于redis中的key）"}]}]},{"ID":"20240513104924-574xwlr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513104924-574xwlr"},"Children":[{"ID":"20240513104924-5j7tz30","Type":"NodeParagraph","Properties":{"id":"20240513104924-5j7tz30","updated":"20240513105016"},"Children":[{"Type":"NodeText","Data":"基于唯一键的特性，同一把锁只能被插入一条数据，因此也就只能由一个使用方持有锁"}]}]},{"ID":"20240513105017-2lslkgp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513105017-2lslkgp"},"Children":[{"ID":"20240513105017-ufa5dyf","Type":"NodeParagraph","Properties":{"id":"20240513105017-ufa5dyf","updated":"20240513105124"},"Children":[{"Type":"NodeText","Data":"当锁被占有时，其他取锁方尝试插入数据时，会被mysql表的唯一键所拦截报错，进而感知到锁已被占用这一情报。"}]}]},{"ID":"20240513105124-hbt8njo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513105124-hbt8njo","updated":"20240513105258"},"Children":[{"ID":"20240513105124-vnmrbdm","Type":"NodeParagraph","Properties":{"id":"20240513105124-vnmrbdm","updated":"20240513105258"},"Children":[{"Type":"NodeText","Data":"在表中可以新增一个字段标识使用方的身份，完整的解锁动作可以基于mysql 事务（使用innodb 引擎）保证原子性：【（1）检查释放锁动作执行者的身份；（2）身份合法时才进行解锁】. 基于此，分布式锁的对称性性质能够得到保证."}]}]}]},{"ID":"20240513105341-ayn9ope","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513105341-ayn9ope","updated":"20240513105348"},"Children":[{"Type":"NodeText","Data":"2.3 死锁问题"}]},{"ID":"20240513105357-715qivy","Type":"NodeParagraph","Properties":{"id":"20240513105357-715qivy","updated":"20240513105357"},"Children":[{"Type":"NodeText","Data":"下一个问题是，我们在设计主动轮询型分布式锁时，如何避免出现死锁问题而导致分布式锁不可能用呢？"}]},{"ID":"20240513105357-aw34vgy","Type":"NodeParagraph","Properties":{"id":"20240513105357-aw34vgy","updated":"20240513105407"},"Children":[{"Type":"NodeText","Data":"这项能力在 mysql 中显得捉襟见肘，不过在使用 redis 时，我们可以"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"通过过期时间 expire time 机制得以保证. 我们通常会在插入分布式锁对应的 kv 数据时设置一个过期时间 expire time，这样即便使用方因为异常原因导致无法正常解锁，锁对应的数据项也会在达到过期时间阈值后被自动删除，实现释放分布式锁的效果."}]},{"ID":"20240513105412-vknxmnr","Type":"NodeParagraph","Properties":{"id":"20240513105412-vknxmnr","updated":"20240513105412"},"Children":[{"Type":"NodeText","Data":"值得一提的是，这种过期机制的引入也带来了新的问题：因为锁的持有者并不能精确预判到自己持锁后处理业务逻辑的实际耗时，因此此处设置的过期时间只能是一个偏向于保守的经验值，假如因为一些异常情况导致占有锁的使用方在业务处理流程中的耗时超过了设置的过期时间阈值，就会导致锁被提前释放，其他取锁方可能取锁成功，最终引起数据不一致的并发问题."}]},{"ID":"20240513105412-cjywojd","Type":"NodeParagraph","Properties":{"id":"20240513105412-cjywojd","updated":"20240513105447"},"Children":[{"Type":"NodeText","Data":"针对于这个问题，在分布式锁工具 redisson 中给出了解决方案——"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"看门狗策略（watch dog strategy）：在锁的持有方未完成业务逻辑的处理时，会持续对分布式锁的过期阈值进行延期操作."},{"Type":"NodeText","Data":" 这部分内容不属于本文的讨论范畴，后续我们找机会单开一篇，连带着 redis 中的 redlock 策略一起展开聊聊."}]},{"ID":"20240513105449-pvfiz5v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513105449-pvfiz5v","updated":"20240513105508"},"Children":[{"Type":"NodeText","Data":"2.4 弱一致性问题"}]},{"ID":"20240513105525-hwup1j0","Type":"NodeParagraph","Properties":{"id":"20240513105525-hwup1j0","updated":"20240513105525"},"Children":[{"Type":"NodeText","Data":"回顾 redis 的设计思路，为避免单点故障问题，redis 会基于主从复制的方式实现数据备份. （以哨兵机制为例，哨兵会持续监听 master 节点的健康状况，倘若 master 节点发生故障，哨兵会负责扶持 slave 节点上位，以保证整个集群能够正常对外提供服务）. 此外，在 CAP 体系中，redis 走的是 AP 路线，为保证服务的吞吐性能，主从节点之间的数据同步是异步延迟进行的."}]},{"ID":"20240513105525-3gxl6ie","Type":"NodeParagraph","Properties":{"id":"20240513105525-3gxl6ie","updated":"20240513105525"},"Children":[{"Type":"NodeText","Data":"到这里问题就来了，试想一种场景：倘若 使用方 A 在 redis master 节点加锁成功，但是对应的 kv 记录在同步到 slave 之前，master 节点就宕机了. 此时未同步到这项数据的 slave 节点升为 master，这样分布式锁被 A 持有的“凭证” 就这样凭空消失了. 于是不知情的使用方 B C D 都可能加锁成功，于是就出现了一把锁被多方同时持有的问题，导致分布式锁最基本的独占性遭到破坏."}]},{"ID":"20240513105525-vzdd7jy","Type":"NodeParagraph","Properties":{"id":"20240513105525-vzdd7jy","updated":"20240513105525"},"Children":[{"Type":"NodeText","Data":"关于这个问题，一个比较经典的解决方案是：redis 红锁（redlock，全称 redis distribution lock），本文仅仅抛出一个引子，具体内容我们后续单开一篇再聊."}]},{"ID":"20240513110322-hmlli2a","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513110322-hmlli2a","updated":"20240513110336"},"Children":[{"Type":"NodeText","Data":"3 redis 分布式锁"}]},{"ID":"20240513110336-beip0j1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513110336-beip0j1","updated":"20240513110343"},"Children":[{"Type":"NodeText","Data":"3.1 sdk 介绍"}]},{"ID":"20240513110350-qbg4jfk","Type":"NodeParagraph","Properties":{"id":"20240513110350-qbg4jfk","updated":"20240513110350"},"Children":[{"Type":"NodeText","Data":"首先，本文使用到基于 golang 编写的 redis 客户端 sdk：redigo，用于和 redis 组件进行交互."}]},{"ID":"20240513110350-4808sob","Type":"NodeParagraph","Properties":{"id":"20240513110350-4808sob","updated":"20240513110350"},"Children":[{"Type":"NodeText","Data":"redigo 开源地址：https://github.com/gomodule/redigo"}]},{"ID":"20240513110350-6oxp4t9","Type":"NodeParagraph","Properties":{"id":"20240513110350-6oxp4t9","updated":"20240513110350"},"Children":[{"Type":"NodeText","Data":"本文使用到的 redigo 源码版本为 v1.8.9"}]},{"ID":"20240513110359-3ehvmf0","Type":"NodeParagraph","Properties":{"id":"20240513110359-3ehvmf0","updated":"20240513110359"},"Children":[{"Type":"NodeText","Data":"在 redigo 基础之上，我个人编写了一款基于 redis 实现的分布式锁 sdk，支持阻塞和非阻塞两种模式进行取锁. 项目已于 github 开源：https://github.com/xiaoxuxiansheng/redis_lock"}]},{"ID":"20240513110401-h5rhw5j","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513110401-h5rhw5j","updated":"20240513110415"},"Children":[{"Type":"NodeText","Data":"3.2 源码介绍"}]},{"ID":"20240513110415-g6cs86e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513110415-g6cs86e","updated":"20240513110427"},"Children":[{"Type":"NodeText","Data":"（1）redis 客户端"}]},{"ID":"20240513110427-isx2usy","Type":"NodeList","ListData":{},"Properties":{"id":"20240513110427-isx2usy","updated":"20240513110430"},"Children":[{"ID":"20240513110430-zg50c1d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110430-zg50c1d","updated":"20240513110430"},"Children":[{"ID":"20240513110430-snhg1iq","Type":"NodeParagraph","Properties":{"id":"20240513110430-snhg1iq","updated":"20240513110516"},"Children":[{"Type":"NodeText","Data":"在 redis 的基础上，我封装实现了一个 redis 客户端 Client，内置了一个连接池 redis.pool 进行redis 连接的复用"}]}]},{"ID":"20240513110517-xiimi7l","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110517-xiimi7l"},"Children":[{"ID":"20240513110517-x5m2oy4","Type":"NodeParagraph","Properties":{"id":"20240513110517-x5m2oy4","updated":"20240513110546"},"Children":[{"Type":"NodeText","Data":"客户端 Client 对外暴露了 SetNEX 方法，语义是set with expire time only if key not exist. 用于支持分布式锁的加锁操作"}]}]},{"ID":"20240513110548-clzrm5l","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110548-clzrm5l"},"Children":[{"ID":"20240513110548-5n682rv","Type":"NodeParagraph","Properties":{"id":"20240513110548-5n682rv","updated":"20240513110554"},"Children":[{"Type":"NodeText","Data":"客户端 Client 对外暴露了 Eval 方法，用以执行 lua 脚本，后续用来支持分布式锁的解锁操作"}]}]}]},{"ID":"20240513110554-7v39cc8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513110554-7v39cc8","updated":"20240513110616"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package redis_lock\n\n\nimport (\n    \"context\"\n    \"errors\"\n    \"time\"\n\n\n    \"github.com/gomodule/redigo/redis\"\n)\n\n\n// Client Redis 客户端.\ntype Client struct {\n    ClientOptions\n    pool *redis.Pool\n}\n\n\nfunc NewClient(network, address, password string, opts ...ClientOption) *Client {\n    c := Client{\n        ClientOptions: ClientOptions{\n            network:  network,\n            address:  address,\n            password: password,\n        },\n    }\n\n\n    for _, opt := range opts {\n        opt(\u0026c.ClientOptions)\n    }\n\n\n    repairClient(\u0026c.ClientOptions)\n\n\n    pool := c.getRedisPool()\n    return \u0026Client{\n        pool: pool,\n    }\n}\n\n\nfunc (c *Client) getRedisPool() *redis.Pool {\n    return \u0026redis.Pool{\n        MaxIdle:     c.maxIdle,\n        IdleTimeout: time.Duration(c.idleTimeoutSeconds) * time.Second,\n        Dial: func() (redis.Conn, error) {\n            c, err := c.getRedisConn()\n            if err != nil {\n                return nil, err\n            }\n            return c, nil\n        },\n        MaxActive: c.maxActive,\n        Wait:      c.wait,\n        TestOnBorrow: func(c redis.Conn, t time.Time) error {\n            _, err := c.Do(\"PING\")\n            return err\n        },\n    }\n}\n\n\nfunc (c *Client) getRedisConn() (redis.Conn, error) {\n    if c.address == \"\" {\n        panic(\"Cannot get redis address from config\")\n    }\n\n\n    var dialOpts []redis.DialOption\n    if len(c.password) \u003e 0 {\n        dialOpts = append(dialOpts, redis.DialPassword(c.password))\n    }\n    conn, err := redis.DialContext(context.Background(),\n        c.network, c.address, dialOpts...)\n    if err != nil {\n        return nil, err\n    }\n    return conn, nil\n}\n\n\nfunc (c *Client) GetConn(ctx context.Context) (redis.Conn, error) {\n    return c.pool.GetContext(ctx)\n}\n\n\n// 只有 key 不存在时，能够 set 成功. set 时携带上超时时间，单位秒.\nfunc (c *Client) SetNEX(ctx context.Context, key, value string, expireSeconds int64) (int64, error) {\n    if key == \"\" || value == \"\" {\n        return -1, errors.New(\"redis SET keyNX or value can't be empty\")\n    }\n\n\n    conn, err := c.pool.GetContext(ctx)\n    if err != nil {\n        return -1, err\n    }\n    defer conn.Close()\n\n\n    reply, err := conn.Do(\"SET\", key, value, \"EX\", expireSeconds, \"NX\")\n    if err != nil {\n        return -1, nil\n    }\n\n\n    r, _ := reply.(int64)\n    return r, nil\n}\n\n\n// Eval 支持使用 lua 脚本.\nfunc (c *Client) Eval(ctx context.Context, src string, keyCount int, keysAndArgs []interface{}) (interface{}, error) {\n    args := make([]interface{}, 2+len(keysAndArgs))\n    args[0] = src\n    args[1] = keyCount\n    copy(args[2:], keysAndArgs)\n\n\n    conn, err := c.pool.GetContext(ctx)\n    if err != nil {\n        return -1, err\n    }\n    defer conn.Close()\n\n\n    return conn.Do(\"EVAL\", args...)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513110647-smmy6dp","Type":"NodeParagraph","Properties":{"id":"20240513110647-smmy6dp","updated":"20240513110659"},"Children":[{"Type":"NodeText","Data":"（2）redis 分布式锁"}]},{"ID":"20240513110707-6xoqt2f","Type":"NodeList","ListData":{},"Properties":{"id":"20240513110707-6xoqt2f","updated":"20240513110707"},"Children":[{"ID":"20240513110707-19ized4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110707-19ized4","updated":"20240513110707"},"Children":[{"ID":"20240513110707-cxbdm4w","Type":"NodeParagraph","Properties":{"id":"20240513110707-cxbdm4w","updated":"20240513110711"},"Children":[{"Type":"NodeText","Data":"定义了 redis 分布式锁的类型：RedisLock"}]}]},{"ID":"20240513110707-4z9kbvm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110707-4z9kbvm","updated":"20240513110707"},"Children":[{"ID":"20240513110707-tq8wy4l","Type":"NodeParagraph","Properties":{"id":"20240513110707-tq8wy4l","updated":"20240513110717"},"Children":[{"Type":"NodeText","Data":"锁 RedisLock 中需要内置一个 redis 客户端 Client，用于后续的请求交互"}]}]},{"ID":"20240513110707-winlj51","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110707-winlj51","updated":"20240513110707"},"Children":[{"ID":"20240513110707-ubukziv","Type":"NodeParagraph","Properties":{"id":"20240513110707-ubukziv","updated":"20240513110716"},"Children":[{"Type":"NodeText","Data":"锁实例被创建时，需要显式指定锁的标识键 key"}]}]},{"ID":"20240513110707-wkgeoih","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110707-wkgeoih","updated":"20240513110707"},"Children":[{"ID":"20240513110707-k64tzhx","Type":"NodeParagraph","Properties":{"id":"20240513110707-k64tzhx","updated":"20240513110715"},"Children":[{"Type":"NodeText","Data":"锁被创建时，会取创建者的进程 id + 协程 id，拼接生成 token，作为使用方的身份标识"}]}]},{"ID":"20240513110707-ev3a1h7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513110707-ev3a1h7","updated":"20240513110707"},"Children":[{"ID":"20240513110707-kd8aqn5","Type":"NodeParagraph","Properties":{"id":"20240513110707-kd8aqn5","updated":"20240513110721"},"Children":[{"Type":"NodeText","Data":"用户可以使用 option 配置项，声明创建的锁是否是阻塞模式，锁对应的过期时间阈值以及等锁超时阈值等配置"}]}]}]},{"ID":"20240513110723-599qme0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513110723-599qme0","updated":"20240513110732"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package redis_lock\n\nimport (\n    \"context\"\n    \"errors\"\n    \"fmt\"\n    \"time\"\n\n    \"github.com/xiaoxuxiansheng/redis_lock/utils\"\n)\n\nvar ErrLockAcquiredByOthers = errors.New(\"lock is acquired by others\")\n\nfunc IsRetryableErr(err error) bool {\n    return errors.Is(err, ErrLockAcquiredByOthers)\n}\n\n// 基于 redis 实现的分布式锁，不可重入，但保证了对称性\ntype RedisLock struct {\n    LockOptions\n    key    string\n    token  string\n    client *Client\n}\n\nfunc NewRedisLock(key string, client *Client, opts ...LockOption) *RedisLock {\n    r := RedisLock{\n        key:    key,\n        token:  utils.GetProcessAndGoroutineIDStr(),\n        client: client,\n    }\n\n    for _, opt := range opts {\n        opt(\u0026r.LockOptions)\n    }\n\n    repairLock(\u0026r.LockOptions)\n    return \u0026r\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513110733-mjkiwoe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513110733-mjkiwoe","updated":"20240513110803"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package utils\n\nimport (\n    \"fmt\"\n    \"os\"\n    \"runtime\"\n    \"strconv\"\n    \"strings\"\n)\n\nfunc GetCurrentProcessID() string {\n    return strconv.Itoa(os.Getpid())\n}\n\n// GetCurrentGoroutineID 获取当前的协程ID\nfunc GetCurrentGoroutineID() string {\n    buf := make([]byte, 128)\n    buf = buf[:runtime.Stack(buf, false)]\n    stackInfo := string(buf)\n    return strings.TrimSpace(strings.Split(strings.Split(stackInfo, \"[running]\")[0], \"goroutine\")[1])\n}\n\nfunc GetProcessAndGoroutineIDStr() string {\n    return fmt.Sprintf(\"%s_%s\", GetCurrentProcessID(), GetCurrentGoroutineID())\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513110808-ot8hxh5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513110808-ot8hxh5","updated":"20240513111732"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package redis_lock\n\nconst (\n    // 默认连接池超过 10 s 释放连接\n    DefaultIdleTimeoutSeconds = 10\n    // 默认最大激活连接数\n    DefaultMaxActive = 100\n    // 默认最大空闲连接数\n    DefaultMaxIdle = 20\n)\n\ntype ClientOptions struct {\n    maxIdle            int\n    idleTimeoutSeconds int\n    maxActive          int\n    wait               bool\n    // 必填参数\n    network  string\n    address  string\n    password string\n}\n\ntype ClientOption func(c *ClientOptions)\n\nfunc WithMaxIdle(maxIdle int) ClientOption {\n    return func(c *ClientOptions) {\n        c.maxIdle = maxIdle\n    }\n}\n\nfunc WithIdleTimeoutSeconds(idleTimeoutSeconds int) ClientOption {\n    return func(c *ClientOptions) {\n        c.idleTimeoutSeconds = idleTimeoutSeconds\n    }\n}\n\nfunc WithMaxActive(maxActive int) ClientOption {\n    return func(c *ClientOptions) {\n        c.maxActive = maxActive\n    }\n}\n\nfunc WithWaitMode() ClientOption {\n    return func(c *ClientOptions) {\n        c.wait = true\n    }\n}\n\nfunc repairClient(c *ClientOptions) {\n    if c.maxIdle \u003c 0 {\n        c.maxIdle = DefaultMaxIdle\n    }\n\n    if c.idleTimeoutSeconds \u003c 0 {\n        c.idleTimeoutSeconds = DefaultIdleTimeoutSeconds\n    }\n\n    if c.maxActive \u003c 0 {\n        c.maxActive = DefaultMaxActive\n    }\n}\n\ntype LockOption func(*LockOptions)\n\nfunc WithBlock() LockOption {\n    return func(o *LockOptions) {\n        o.isBlock = true\n    }\n}\n\nfunc WithBlockWaitingSeconds(waitingSeconds int64) LockOption {\n    return func(o *LockOptions) {\n        o.blockWaitingSeconds = waitingSeconds\n    }\n}\n\nfunc WithExpireSeconds(expireSeeconds int64) LockOption {\n    return func(o *LockOptions) {\n        o.expireSeconds = expireSeeconds\n    }\n}\n\nfunc repairLock(o *LockOptions) {\n    if o.isBlock \u0026\u0026 o.blockWaitingSeconds \u003c= 0 {\n        // 默认阻塞等待时间上限为 5 秒\n        o.blockWaitingSeconds = 5\n    }\n\n    // 分布式锁默认超时时间为 30 秒\n    if o.expireSeconds \u003c= 0 {\n        o.expireSeconds = 30\n    }\n}\n\ntype LockOptions struct {\n    isBlock             bool\n    blockWaitingSeconds int64\n    expireSeconds       int64\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513111734-winwazu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513111734-winwazu","updated":"20240513111743"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（3）非阻塞模式加锁"}]},{"ID":"20240513111745-sv8ujv6","Type":"NodeList","ListData":{},"Properties":{"id":"20240513111745-sv8ujv6","updated":"20240513111800"},"Children":[{"ID":"20240513111753-j6qmwul","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111753-j6qmwul","updated":"20240513111753"},"Children":[{"ID":"20240513111753-2nt8ruz","Type":"NodeParagraph","Properties":{"id":"20240513111753-2nt8ruz","updated":"20240513111753"},"Children":[{"Type":"NodeText","Data":"倘若锁处于非阻塞模式，则只会执行一次 tryLock 方法进行尝试加锁动作，倘若失败，就直接返回错误"}]}]},{"ID":"20240513111754-1w1g4pa","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111754-1w1g4pa","updated":"20240513111800"},"Children":[{"ID":"20240513111754-ynrrvou","Type":"NodeParagraph","Properties":{"id":"20240513111754-ynrrvou","updated":"20240513111800"},"Children":[{"Type":"NodeText","Data":"tryLock 操作基于 redis 的 setNEX 操作实现，即基于原子操作实现 set with expire time only if key not exist 的语义"}]}]}]},{"ID":"20240513111759-qqzub81","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513111759-qqzub81","updated":"20240513111808"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"const RedisLockKeyPrefix = \"REDIS_LOCK_PREFIX_\"\n\n// Lock 加锁.\nfunc (r *RedisLock) Lock(ctx context.Context) error {\n    // 不管是不是阻塞模式，都要先获取一次锁\n    err := r.tryLock(ctx)\n    if err == nil {\n        return nil\n    }\n\n    // 非阻塞模式加锁失败直接返回错误\n    if !r.isBlock {\n        return err\n    }\n\n    // 判断错误是否可以允许重试，不可允许的类型则直接返回错误\n    if !IsRetryableErr(err) {\n        return err\n    }\n\n    // 基于阻塞模式持续轮询取锁\n    return r.blockingLock(ctx)\n}\n\nfunc (r *RedisLock) tryLock(ctx context.Context) error {\n    // 首先查询锁是否属于自己\n    reply, err := r.client.SetNEX(ctx, r.getLockKey(), r.token, r.expireSeconds)\n    if err != nil {\n        return err\n    }\n    if reply != 1 {\n        return fmt.Errorf(\"reply: %d, err: %w\", reply, ErrLockAcquiredByOthers)\n    }\n    return nil\n}\n\nfunc (r *RedisLock) getLockKey() string {\n    return RedisLockKeyPrefix + r.key\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513111810-thrqhpn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513111810-thrqhpn","updated":"20240513111815"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（4）阻塞模式加锁"}]},{"ID":"20240513111820-ocqxuag","Type":"NodeParagraph","Properties":{"id":"20240513111820-ocqxuag","updated":"20240513111820"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513111820-dx1xofc.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513111821-0ygv6ya","Type":"NodeList","ListData":{},"Properties":{"id":"20240513111821-0ygv6ya","updated":"20240513111828"},"Children":[{"ID":"20240513111828-226k2mo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111828-226k2mo","updated":"20240513111828"},"Children":[{"ID":"20240513111828-x67xt4j","Type":"NodeParagraph","Properties":{"id":"20240513111828-x67xt4j","updated":"20240513111828"},"Children":[{"Type":"NodeText","Data":"当锁处在阻塞模式下，会通过 ticker，每隔 50 ms 执行一次尝试取锁的请求（tryLock：setNEX）"}]}]},{"ID":"20240513111828-zf4aeau","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111828-zf4aeau","updated":"20240513111828"},"Children":[{"ID":"20240513111828-a73d47j","Type":"NodeParagraph","Properties":{"id":"20240513111828-a73d47j","updated":"20240513111841"},"Children":[{"Type":"NodeText","Data":"倘若某次请求取锁成功，则直接返回"}]}]},{"ID":"20240513111842-epsgi20","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111842-epsgi20"},"Children":[{"ID":"20240513111842-vtg9718","Type":"NodeParagraph","Properties":{"id":"20240513111842-vtg9718","updated":"20240513111847"},"Children":[{"Type":"NodeText","Data":"倘若达到等锁超时阈值或者中途发生了预期之外的错误，则会终止流程"}]}]}]},{"ID":"20240513111848-6qzw92u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513111848-6qzw92u","updated":"20240513111856"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (r *RedisLock) blockingLock(ctx context.Context) error {\n    // 阻塞模式等锁时间上限\n    timeoutCh := time.After(time.Duration(r.blockWaitingSeconds) * time.Second)\n    // 轮询 ticker，每隔 50 ms 尝试取锁一次\n    ticker := time.NewTicker(time.Duration(50) * time.Millisecond)\n    defer ticker.Stop()\n\n    for range ticker.C {\n        select {\n        // ctx 终止了\n        case \u003c-ctx.Done():\n            return fmt.Errorf(\"lock failed, ctx timeout, err: %w\", ctx.Err())\n            // 阻塞等锁达到上限时间\n        case \u003c-timeoutCh:\n            return fmt.Errorf(\"block waiting time out, err: %w\", ErrLockAcquiredByOthers)\n        // 放行\n        default:\n        }\n\n        // 尝试取锁\n        err := r.tryLock(ctx)\n        if err == nil {\n            // 加锁成功，返回结果\n            return nil\n        }\n\n        // 不可重试类型的错误，直接返回\n        if !IsRetryableErr(err) {\n            return err\n        }\n    }\n\n    return nil\n} \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513111840-vliolob","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513111840-vliolob"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（5）解锁"}]},{"ID":"20240513111917-6lb5jmw","Type":"NodeParagraph","Properties":{"id":"20240513111917-6lb5jmw","updated":"20240513111917"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513111917-sechuds.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513111918-clki4rw","Type":"NodeList","ListData":{},"Properties":{"id":"20240513111918-clki4rw","updated":"20240513111925"},"Children":[{"ID":"20240513111925-2wi0wv6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111925-2wi0wv6","updated":"20240513111925"},"Children":[{"ID":"20240513111925-3jl4kyd","Type":"NodeParagraph","Properties":{"id":"20240513111925-3jl4kyd","updated":"20240513111925"},"Children":[{"Type":"NodeText","Data":"解锁动作基于 lua 脚本执行"}]}]},{"ID":"20240513111929-rnz8bbh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513111929-rnz8bbh"},"Children":[{"ID":"20240513111929-n22pps5","Type":"NodeParagraph","Properties":{"id":"20240513111929-n22pps5","updated":"20240513111935"},"Children":[{"Type":"NodeText","Data":"lua 脚本执行内容分为两部分：【（1）校验当前操作者是否拥有锁的所有权（2）倘若是，则释放锁】"}]}]}]},{"ID":"20240513111936-5s778nq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513111936-5s778nq","updated":"20240513111942"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Unlock 解锁. 基于 lua 脚本实现操作原子性.\nfunc (r *RedisLock) Unlock(ctx context.Context) error {\n    keysAndArgs := []interface{}{r.getLockKey(), r.token}\n    reply, err := r.client.Eval(ctx, LuaCheckAndDeleteDistributionLock, 1, keysAndArgs)\n    if err != nil {\n        return err\n    }\n\n    if ret, _ := reply.(int64); ret != 1 {\n        return errors.New(\"can not unlock without ownership of lock)\n    }\n    return nil\n}   \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513111950-qin1b52","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513111950-qin1b52","updated":"20240513111952"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// LuaCheckAndDeleteDistributionLock 判断是否拥有分布式锁的归属权，是则删除\nconst LuaCheckAndDeleteDistributionLock = `\n  local lockerKey = KEYS[1]\n  local targetToken = ARGV[1]\n  local getToken = redis.call('get',lockerKey)\n  if (not getToken or getToken ~= targetToken) then\n    return 0\n  else\n    return redis.call('del',lockerKey)\n  end\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513111955-e1oh1k4","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513111955-e1oh1k4","updated":"20240513112004"},"Children":[{"Type":"NodeText","Data":"4 watch 回调型"}]},{"ID":"20240513112004-4lvvwpk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513112004-4lvvwpk","updated":"20240513112012"},"Children":[{"Type":"NodeText","Data":"4.1 实现思路"}]},{"ID":"20240513112016-p0nmf9l","Type":"NodeParagraph","Properties":{"id":"20240513112016-p0nmf9l","updated":"20240513112016"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112016-b4d4fyj.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112021-1gobfdc","Type":"NodeParagraph","Properties":{"id":"20240513112021-1gobfdc","updated":"20240513112021"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112021-bc8amm6.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112022-650e70k","Type":"NodeParagraph","Properties":{"id":"20240513112022-650e70k","updated":"20240513112026"},"Children":[{"Type":"NodeText","Data":"对于实现 watch 回调型分布式锁，一些基本要点和 2.1 小节中聊到的主动轮询型分布式锁类似："}]},{"ID":"20240513112026-2xq8xrc","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112026-2xq8xrc","updated":"20240513112028"},"Children":[{"ID":"20240513112028-53dm4hq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112028-53dm4hq","updated":"20240513112028"},"Children":[{"ID":"20240513112028-0zcveth","Type":"NodeParagraph","Properties":{"id":"20240513112028-0zcveth","updated":"20240513112032"},"Children":[{"Type":"NodeText","Data":"针对于同一把分布式锁，使用一条相同的数据进行标识（唯一、明确的 key）"}]}]},{"ID":"20240513112033-lji8ljm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112033-lji8ljm"},"Children":[{"ID":"20240513112033-wpqtbnl","Type":"NodeParagraph","Properties":{"id":"20240513112033-wpqtbnl","updated":"20240513112039"},"Children":[{"Type":"NodeText","Data":"倘若在存储介质内成功插入该条数据（要求 key 对应的数据不存在），则这一行为被认定为加锁成功"}]}]},{"ID":"20240513112040-yvz0yi7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112040-yvz0yi7"},"Children":[{"ID":"20240513112040-0m9v9mq","Type":"NodeParagraph","Properties":{"id":"20240513112040-0m9v9mq"},"Children":[{"Type":"NodeText","Data":"把从存储介质中删除该条数据这行为理解为解锁操作"}]}]}]},{"ID":"20240513112049-aqyqw2n","Type":"NodeParagraph","Properties":{"id":"20240513112049-aqyqw2n","updated":"20240513112056"},"Children":[{"Type":"NodeText","Data":"与主动轮询型分布式锁不同的是，在取锁失败时，watch 回调型分布式锁不会持续轮询，而是会 watch 监听锁的删除事件："}]},{"ID":"20240513112057-yh4m9ir","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112057-yh4m9ir","updated":"20240513112104"},"Children":[{"ID":"20240513112104-0hd2n62","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112104-0hd2n62","updated":"20240513112104"},"Children":[{"ID":"20240513112104-o01qm9i","Type":"NodeParagraph","Properties":{"id":"20240513112104-o01qm9i","updated":"20240513112104"},"Children":[{"Type":"NodeText","Data":"倘若在插入数据时，发现该条记录已经存在，说明锁已被他人持有，此时选择监听这条数据记录的删除事件，当对应事件发生时说明锁被释放了，此时才继续尝试取锁"}]}]}]},{"ID":"20240513112107-q445ywi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513112107-q445ywi","updated":"20240513112113"},"Children":[{"Type":"NodeText","Data":"4.2 技术选型"}]},{"ID":"20240513112119-fkyd9os","Type":"NodeParagraph","Properties":{"id":"20240513112119-fkyd9os","updated":"20240513112119"},"Children":[{"Type":"NodeText","Data":"在实现上，我们需要依赖于提供了 watch 机制的状态存储组件，不仅能支持数据的存储和去重，还需要利用到其中的 watch 监听回调功能进行锁释放事件的订阅感知."}]},{"ID":"20240513112119-q4uz4ju","Type":"NodeParagraph","Properties":{"id":"20240513112119-q4uz4ju","updated":"20240513112119"},"Children":[{"Type":"NodeText","Data":"为满足上述诉求，我们常用的技术组件包括 etcd 和 zookeeper."}]},{"ID":"20240513112143-xsdojgn","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513112143-xsdojgn","updated":"20240513112143"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（1）etcd"}]},{"ID":"20240513112143-1j6r7gr","Type":"NodeParagraph","Properties":{"id":"20240513112143-1j6r7gr","updated":"20240513112143"},"Children":[{"Type":"NodeText","Data":"etcd 官方文档：https://etcd.io/"}]},{"ID":"20240513112143-wyur1zy","Type":"NodeParagraph","Properties":{"id":"20240513112143-wyur1zy","updated":"20240513112143"},"Children":[{"Type":"NodeText","Data":"etcd 是一款适合用于共享配置和服务发现的分布式 kv 存储组件，底层基于分布式共识算法 raft 协议保证了存储服务的强一致和高可用."}]},{"ID":"20240513112143-b8494tn","Type":"NodeParagraph","Properties":{"id":"20240513112143-b8494tn","updated":"20240513112143"},"Children":[{"Type":"NodeText","Data":"在 etcd 中提供了watch 监听器的功能，即针对于指定范围的数据，通过与 etcd 服务端节点创建 grpc 长连接的方式持续监听变更事件. 关于 watch 机制的详细介绍，可以参见我上一周发表的两篇文章—— etcd watch 机制源码解析——客户端篇/服务端篇."}]},{"ID":"20240513112143-bhcn9xc","Type":"NodeParagraph","Properties":{"id":"20240513112143-bhcn9xc","updated":"20240513112143"},"Children":[{"Type":"NodeText","Data":"此外，etcd 中写入数据时，还支持通过版本 revision 机制进行取锁秩序的统筹协调，是一款很适合用于实现分布式锁的组件."}]},{"ID":"20240513112143-rbs1gae","Type":"NodeParagraph","Properties":{"id":"20240513112143-rbs1gae","updated":"20240513112143"},"Children":[{"Type":"NodeText","Data":"etcd 是本文在介绍 watch 回调型分布式锁时选取的工程实践案例，在本文第 5 章会结合实现源码展开介绍."}]},{"ID":"20240513112155-uj8iy7p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513112155-uj8iy7p","updated":"20240513112155"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"（2）zookeeper"}]},{"ID":"20240513112155-xasju1b","Type":"NodeParagraph","Properties":{"id":"20240513112155-xasju1b","updated":"20240513112155"},"Children":[{"Type":"NodeText","Data":"zookeeper 官方文档：https://zookeeper.apache.org/"}]},{"ID":"20240513112155-vsgtxm3","Type":"NodeParagraph","Properties":{"id":"20240513112155-vsgtxm3","updated":"20240513112155"},"Children":[{"Type":"NodeText","Data":"ZooKeeper是一款开源的分布式应用协调服务，底层基于分布式共识算法 zab 协议保证了数据的强一致性和高可用性."}]},{"ID":"20240513112155-g6tm8j1","Type":"NodeParagraph","Properties":{"id":"20240513112155-g6tm8j1","updated":"20240513112155"},"Children":[{"Type":"NodeText","Data":"zookeeper 中提供了临时顺序节点（EPHEMERAL_SEQUENTIAL）类型以及 watch 监听器机制，能够满足实现 watch 回调型分布式锁所需要具备的一切核心能力."}]},{"ID":"20240513112155-7h44h8q","Type":"NodeParagraph","Properties":{"id":"20240513112155-7h44h8q","updated":"20240513112155"},"Children":[{"Type":"NodeText","Data":"不过在本文中，zk 部分我们不多作展开，介绍内容以 etcd 为核心."}]},{"ID":"20240513112225-meo1br6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513112225-meo1br6","updated":"20240513112233"},"Children":[{"Type":"NodeText","Data":"4.3 死锁问题"}]},{"ID":"20240513112237-yqth20g","Type":"NodeParagraph","Properties":{"id":"20240513112237-yqth20g","updated":"20240513112237"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112237-gurdx5v.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112237-3pazmhw","Type":"NodeParagraph","Properties":{"id":"20240513112237-3pazmhw","updated":"20240513112237"}},{"ID":"20240513112242-xvgwtu4","Type":"NodeParagraph","Properties":{"id":"20240513112242-xvgwtu4","updated":"20240513112242"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112242-dhlj3o9.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112251-4csyipv","Type":"NodeParagraph","Properties":{"id":"20240513112251-4csyipv","updated":"20240513112251"},"Children":[{"Type":"NodeText","Data":"为避免死锁问题的产生，etcd 中提供了租约 lease 机制. 租约，顾名思义，是一份具有时效性的协议，一旦达到租约上规定的截止时间，租约就会失去效力. 同时，etcd 中还提供了续约机制（keepAlive），用户可以通过续约操作来延迟租约的过期时间."}]},{"ID":"20240513112253-qvru4np","Type":"NodeParagraph","Properties":{"id":"20240513112253-qvru4np","updated":"20240513112259"},"Children":[{"Type":"NodeText","Data":"那么，我们如何来利用租约 lease 机制解决分布式锁中可能存在的死锁问题呢？实现思路如下："}]},{"ID":"20240513112303-9x9ub0z","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112303-9x9ub0z","updated":"20240513112303"},"Children":[{"ID":"20240513112303-w2xbdm8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112303-w2xbdm8","updated":"20240513112303"},"Children":[{"ID":"20240513112303-uvhzz9p","Type":"NodeParagraph","Properties":{"id":"20240513112303-uvhzz9p","updated":"20240513112306"},"Children":[{"Type":"NodeText","Data":"用户可以先申请一份租约，设定好租约的截止时间"}]}]},{"ID":"20240513112303-tvhsq12","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112303-tvhsq12","updated":"20240513112303"},"Children":[{"ID":"20240513112303-26fotnd","Type":"NodeParagraph","Properties":{"id":"20240513112303-26fotnd","updated":"20240513112308"},"Children":[{"Type":"NodeText","Data":"异步启动一个续约协程，负责在业务逻辑处理完成前，按照一定的时间节奏持续进行续约操作"}]}]},{"ID":"20240513112303-z85m6d5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112303-z85m6d5","updated":"20240513112303"},"Children":[{"ID":"20240513112303-vs7l41j","Type":"NodeParagraph","Properties":{"id":"20240513112303-vs7l41j","updated":"20240513112309"},"Children":[{"Type":"NodeText","Data":"在执行取锁动作，将对应于锁的 kv 数据和租约进行关联绑定，使得锁数据和租约拥有相同的过期时间属性"}]}]}]},{"ID":"20240513112311-jqxcnt9","Type":"NodeParagraph","Properties":{"id":"20240513112311-jqxcnt9","updated":"20240513112316"},"Children":[{"Type":"NodeText","Data":"在这样的设定之下，倘若分布式锁的持有者出现异常状况导致无法正常解锁，则可以通过租约的过期机制完成对分布式锁的释放，死锁问题因此得以规避. 此外，锁的使用方可以将租约的初始过期时间设定为一个偏小的值，并通过续约机制来对租约的生效周期进行动态延长. 可以看到，此处 etcd 中的租约及续约机制，实现了与 redisson 中 watch dog 机制类似的效果."}]},{"ID":"20240513112327-bevmvmb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513112327-bevmvmb","updated":"20240513112337"},"Children":[{"Type":"NodeText","Data":"4.4 惊群效应"}]},{"ID":"20240513112357-gvbcqso","Type":"NodeParagraph","Properties":{"id":"20240513112357-gvbcqso","updated":"20240513112357"},"Children":[{"Type":"NodeText","Data":"惊群效应又称为羊群效应：羊群是一种纪律性很差的组织，平时就处在一种散漫无秩序地移动模式之下. 需要注意的是，在羊群中一旦有某只羊出现异动，其他的羊也会不假思索地一哄而上跑动起来，全然不估计附近可能有狼或者何处有更好的草源等客观问题."}]},{"ID":"20240513112357-y09x7au","Type":"NodeParagraph","Properties":{"id":"20240513112357-y09x7au","updated":"20240513112357"},"Children":[{"Type":"NodeText","Data":"在 watch 回调型分布式锁的实现过程中，可能也会存在类似于惊群效应的问题. 这里指的是：倘若一把分布式锁的竞争比较激烈，那么锁的释放事件可能同时被多个的取锁方所监听，一旦锁真的被释放了，所有的取锁方都会一拥而上尝试取锁，然而我们知道，一个轮次中真正能够取锁成功的只会有一名角色，因此这个过程中会存在大量无意义的性能损耗，且释放锁时刻瞬间激增的请求流量也可能会对系统稳定性产生负面效应."}]},{"ID":"20240513112357-r63kq22","Type":"NodeParagraph","Properties":{"id":"20240513112357-r63kq22","updated":"20240513112357"},"Children":[{"Type":"NodeText","Data":"为规避惊群效应，etcd 中提供了前缀 prefix 机制以及版本 revision 机制，和 zookeeper 的临时顺序节点功能有些类似："}]},{"ID":"20240513112403-kkn07u6","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112403-kkn07u6","updated":"20240513112412"},"Children":[{"ID":"20240513112403-va1ad2x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112403-va1ad2x","updated":"20240513112406"},"Children":[{"ID":"20240513112403-ri1320n","Type":"NodeParagraph","Properties":{"id":"20240513112403-ri1320n","updated":"20240513112406"},"Children":[{"Type":"NodeText","Data":"对于同一把分布式锁，锁记录数据的 key 拥有共同的前缀 prefix，作为锁的标识"}]}]},{"ID":"20240513112403-omce27k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112403-omce27k","updated":"20240513112408"},"Children":[{"ID":"20240513112403-75nqdo4","Type":"NodeParagraph","Properties":{"id":"20240513112403-75nqdo4","updated":"20240513112408"},"Children":[{"Type":"NodeText","Data":"每个取锁方取锁时，会以锁前缀 prefix 拼接上自身的身份标识（租约 id），生成完整的 lock key. 因此各取锁方完整的 lock key 都是互不相同的（只是有着相同的前缀），理论上所有取锁方都能成功把锁记录数据插入到 etcd 中"}]}]},{"ID":"20240513112403-rytgnbn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112403-rytgnbn","updated":"20240513112409"},"Children":[{"ID":"20240513112403-g6xdb21","Type":"NodeParagraph","Properties":{"id":"20240513112403-g6xdb21","updated":"20240513112409"},"Children":[{"Type":"NodeText","Data":"每个取锁方插入锁记录数据时，会获得自身 lock key 处在锁前缀 prefix 范围下唯一且递增的版本号 revision"}]}]},{"ID":"20240513112403-q82f19k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112403-q82f19k","updated":"20240513112411"},"Children":[{"ID":"20240513112403-stf2cyk","Type":"NodeParagraph","Properties":{"id":"20240513112403-stf2cyk","updated":"20240513112411"},"Children":[{"Type":"NodeText","Data":"取锁方插入加锁记录数据不意味着加锁成功，而是需要在插入数据后查询一次锁前缀 prefix 下的记录列表，判定自身 lock key 对应的 revision 是不是其中最小的，如果是的话，才表示加锁成功"}]}]},{"ID":"20240513112403-9az68uh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112403-9az68uh","updated":"20240513112412"},"Children":[{"ID":"20240513112403-69eq8ps","Type":"NodeParagraph","Properties":{"id":"20240513112403-69eq8ps","updated":"20240513112412"},"Children":[{"Type":"NodeText","Data":"如果锁被他人占用，取锁方会 watch 监听 revision 小于自己但最接近自己的那个 lock key 的删除事件."}]}]}]},{"ID":"20240513112403-ischlys","Type":"NodeParagraph","Properties":{"id":"20240513112403-ischlys","updated":"20240513112403"},"Children":[{"Type":"NodeText","Data":"这样所有的取锁方就会在 revision 机制的协调下，根据取锁序号（revision）的先后顺序排成一条队列，每当锁被释放，只会惊动到下一顺位的取锁方，惊群问题得以避免."}]},{"ID":"20240513112512-l1p921v","Type":"NodeParagraph","Properties":{"id":"20240513112512-l1p921v","updated":"20240513112512"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112512-yh6om5s.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112515-fmb6xgd","Type":"NodeParagraph","Properties":{"id":"20240513112515-fmb6xgd","updated":"20240513112515"}},{"ID":"20240513112518-is0v7f8","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513112518-is0v7f8","updated":"20240513112525"},"Children":[{"Type":"NodeText","Data":"5 etcd 分布式锁"}]},{"ID":"20240513112525-n9a70js","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513112525-n9a70js","updated":"20240513112535"},"Children":[{"Type":"NodeText","Data":"5.1 sdk 介绍"}]},{"ID":"20240513112541-ueocexj","Type":"NodeParagraph","Properties":{"id":"20240513112541-ueocexj","updated":"20240513112541"},"Children":[{"Type":"NodeText","Data":"etcd 开源地址：https://github.com/etcd-io/etcd"}]},{"ID":"20240513112541-dlhjado","Type":"NodeParagraph","Properties":{"id":"20240513112541-dlhjado","updated":"20240513112541"},"Children":[{"Type":"NodeText","Data":"本文使用到的 etcd 源码版本为 v3.5.8."}]},{"ID":"20240513112541-ionlgkm","Type":"NodeParagraph","Properties":{"id":"20240513112541-ionlgkm","updated":"20240513112541"},"Children":[{"Type":"NodeText","Data":"etcd 作者在 etcd 的 concurrency 包下，基于 watch 机制结合 revision 机制实现了一款通用的 etcd 分布式锁，因此这部分代码我不再手写，而是会基于官方的实现示范进行源码讲解."}]},{"ID":"20240513112542-3gnkofc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240513112542-3gnkofc","updated":"20240513112551"},"Children":[{"Type":"NodeText","Data":"5.2 实现源码"}]},{"ID":"20240513112551-ki996e8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513112551-ki996e8","updated":"20240513112558"},"Children":[{"Type":"NodeText","Data":"（1）数据结构"}]},{"ID":"20240513112602-fw1jsno","Type":"NodeParagraph","Properties":{"id":"20240513112602-fw1jsno","updated":"20240513112602"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112602-2mobwq8.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112604-q8cler3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513112604-q8cler3","updated":"20240513112614"},"Children":[{"Type":"NodeText","Data":"Session"}]},{"ID":"20240513112619-rx2616q","Type":"NodeParagraph","Properties":{"id":"20240513112619-rx2616q","updated":"20240513112619"},"Children":[{"Type":"NodeText","Data":"session 指的是一次访问会话，背后对应的是一笔租约 lease. 用户调用 NewSession 方法构造 session 实例时，执行的步骤包括："}]},{"ID":"20240513112619-etoxdpk","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112619-etoxdpk","updated":"20240513112625"},"Children":[{"ID":"20240513112619-geefoiv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112619-geefoiv","updated":"20240513112621"},"Children":[{"ID":"20240513112619-ij0mxvt","Type":"NodeParagraph","Properties":{"id":"20240513112619-ij0mxvt","updated":"20240513112621"},"Children":[{"Type":"NodeText","Data":"通过 client.Grant 方法申请到一个 lease id"}]}]},{"ID":"20240513112619-kns1fdd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112619-kns1fdd","updated":"20240513112623"},"Children":[{"ID":"20240513112619-i3j2gwm","Type":"NodeParagraph","Properties":{"id":"20240513112619-i3j2gwm","updated":"20240513112623"},"Children":[{"Type":"NodeText","Data":"调用 client.KeepAlive 方法持续对租约进行续期"}]}]},{"ID":"20240513112619-degbi71","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112619-degbi71","updated":"20240513112624"},"Children":[{"ID":"20240513112619-3si9bu0","Type":"NodeParagraph","Properties":{"id":"20240513112619-3si9bu0","updated":"20240513112624"},"Children":[{"Type":"NodeText","Data":"构造一个会话 session 实例"}]}]},{"ID":"20240513112619-mw9mnnh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112619-mw9mnnh","updated":"20240513112625"},"Children":[{"ID":"20240513112619-itgcpa9","Type":"NodeParagraph","Properties":{"id":"20240513112619-itgcpa9","updated":"20240513112625"},"Children":[{"Type":"NodeText","Data":"异步开启一个守护协程，进行租约续期响应参数的处理（keepAlive）"}]}]}]},{"ID":"20240513112635-v5dfpfi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513112635-v5dfpfi","updated":"20240513112635"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"const defaultSessionTTL = 60\n\n// Session represents a lease kept alive for the lifetime of a client.\n// Fault-tolerant applications may use sessions to reason about liveness.\ntype Session struct {\n    client *v3.Client\n    opts   *sessionOptions\n    id     v3.LeaseID\n\n    cancel context.CancelFunc\n    donec  \u003c-chan struct{}\n}\n\n// NewSession gets the leased session for a client.\nfunc NewSession(client *v3.Client, opts ...SessionOption) (*Session, error) {\n    lg := client.GetLogger()\n    ops := \u0026sessionOptions{ttl: defaultSessionTTL, ctx: client.Ctx()}\n    for _, opt := range opts {\n        opt(ops, lg)\n    }\n\n    id := ops.leaseID\n    if id == v3.NoLease {\n        resp, err := client.Grant(ops.ctx, int64(ops.ttl))\n        if err != nil {\n            return nil, err\n        }\n        id = resp.ID\n    }\n\n    ctx, cancel := context.WithCancel(ops.ctx)\n    keepAlive, err := client.KeepAlive(ctx, id)\n    if err != nil || keepAlive == nil {\n        cancel()\n        return nil, err\n    }\n\n    donec := make(chan struct{})\n    s := \u0026Session{client: client, opts: ops, id: id, cancel: cancel, donec: donec}\n\n    // keep the lease alive until client error or cancelled context\n    go func() {\n        defer close(donec)\n        for range keepAlive {\n            // eat messages until keep alive channel closes\n        }\n    }()\n\n    return s,nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513112637-ppf4mml","Type":"NodeParagraph","Properties":{"id":"20240513112637-ppf4mml","updated":"20240513112642"},"Children":[{"Type":"NodeText","Data":"假如用户处理完成业务逻辑之后，可以通过 session.Close 方法完成会话的关闭，在方法中会通过 context 的 cancel 动作，停止对租约的续期行为."}]},{"ID":"20240513112642-9vzxihh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513112642-9vzxihh","updated":"20240513112649"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Close orphans the session and revokes the session lease.\nfunc (s *Session) Close() error {\n    s.Orphan()\n    // if revoke takes longer than the ttl, lease is expired anyway\n    ctx, cancel := context.WithTimeout(s.opts.ctx, time.Duration(s.opts.ttl)*time.Second)\n    _, err := s.client.Revoke(ctx, s.id)\n    cancel()\n    return err\n}\n\n// Orphan ends the refresh for the session lease. This is useful\n// in case the state of the client connection is indeterminate (revoke\n// would fail) or when transferring lease ownership.\nfunc (s *Session) Orphan() {\n    s.cancel()\n    \u003c-s.donec\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513112650-93voz5t","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513112650-93voz5t","updated":"20240513112708"},"Children":[{"Type":"NodeText","Data":"Mutex"}]},{"ID":"20240513112732-9lqxpss","Type":"NodeParagraph","Properties":{"id":"20240513112732-9lqxpss","updated":"20240513112732"},"Children":[{"Type":"NodeText","Data":"Mutex 是 etcd 分布式锁的类型，其中核心字段包括："}]},{"ID":"20240513112732-8ae6s8r","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112732-8ae6s8r","updated":"20240513112744"},"Children":[{"ID":"20240513112732-goaik7s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112732-goaik7s","updated":"20240513112736"},"Children":[{"ID":"20240513112732-aewmh43","Type":"NodeParagraph","Properties":{"id":"20240513112732-aewmh43","updated":"20240513112736"},"Children":[{"Type":"NodeText","Data":"s：内置了一个会话 session"}]}]},{"ID":"20240513112732-5kbrmsj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112732-5kbrmsj","updated":"20240513112739"},"Children":[{"ID":"20240513112732-94bvvk4","Type":"NodeParagraph","Properties":{"id":"20240513112732-94bvvk4","updated":"20240513112739"},"Children":[{"Type":"NodeText","Data":"pfx：分布式锁的公共前缀"}]}]},{"ID":"20240513112732-l46zdcv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112732-l46zdcv","updated":"20240513112742"},"Children":[{"ID":"20240513112732-zcy145w","Type":"NodeParagraph","Properties":{"id":"20240513112732-zcy145w","updated":"20240513112742"},"Children":[{"Type":"NodeText","Data":"myKey：当前锁使用方完整的 lock key，由 pfx 和 lease id 两部分拼接而成"}]}]},{"ID":"20240513112732-id9m52j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112732-id9m52j","updated":"20240513112744"},"Children":[{"ID":"20240513112732-x77qzkc","Type":"NodeParagraph","Properties":{"id":"20240513112732-x77qzkc","updated":"20240513112744"},"Children":[{"Type":"NodeText","Data":"myRev：当前锁使用方 lock key 在公共锁前缀 pfx 下对应的版本 revision"}]}]}]},{"ID":"20240513112751-fqg7qjn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513112751-fqg7qjn","updated":"20240513112751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Mutex implements the sync Locker interface with etcd\ntype Mutex struct {\n    s *Session\n  \n    pfx   string\n    myKey string\n    myRev int64\n    hdr   *pb.ResponseHeader\n}\n\nfunc NewMutex(s *Session, pfx string) *Mutex {\n    return \u0026Mutex{s, pfx + \"/\", \"\", -1, nil}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513112752-sshhpat","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513112752-sshhpat","updated":"20240513112803"},"Children":[{"Type":"NodeText","Data":"（2）方法链路"}]},{"ID":"20240513112803-h4pn8vb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513112803-h4pn8vb","updated":"20240513112809"},"Children":[{"Type":"NodeText","Data":"TryLock"}]},{"ID":"20240513112812-nc7m5l4","Type":"NodeParagraph","Properties":{"id":"20240513112812-nc7m5l4","updated":"20240513112812"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112812-miajcez.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112827-jmg6qsc","Type":"NodeParagraph","Properties":{"id":"20240513112827-jmg6qsc","updated":"20240513112827"},"Children":[{"Type":"NodeText","Data":"Mutex.TryLock 方法会执行一次尝试加锁的动作，倘若锁已经被其他人占有，则会直接返回错误，不会阻塞："}]},{"ID":"20240513112827-0lqlp58","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112827-0lqlp58","updated":"20240513112827"},"Children":[{"ID":"20240513112827-m3nkmxl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112827-m3nkmxl","updated":"20240513112827"},"Children":[{"ID":"20240513112827-9rxgzhx","Type":"NodeParagraph","Properties":{"id":"20240513112827-9rxgzhx","updated":"20240513112834"},"Children":[{"Type":"NodeText","Data":"调用 Mutex.tryAcquire 方法插入 my key（已存在则查询），获取到 my key 对应的 revision 以及当前锁的实际持有者"}]}]},{"ID":"20240513112827-iekz888","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112827-iekz888","updated":"20240513112827"},"Children":[{"ID":"20240513112827-zcbvh6y","Type":"NodeParagraph","Properties":{"id":"20240513112827-zcbvh6y","updated":"20240513112836"},"Children":[{"Type":"NodeText","Data":"倘若锁 pfx 从未被占用过，或者锁 pfx 下存在的 revision 中，自身的 revision 是其中最小的一个，则说明自己加锁成功"}]}]},{"ID":"20240513112827-qj7olrw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112827-qj7olrw","updated":"20240513112827"},"Children":[{"ID":"20240513112827-fwca4bi","Type":"NodeParagraph","Properties":{"id":"20240513112827-fwca4bi","updated":"20240513112837"},"Children":[{"Type":"NodeText","Data":"倘若锁已经被其他人占用，则删除自己加锁时创建的 kv 对记录，然后返回锁已被他人占用的错误"}]}]}]},{"ID":"20240513112858-falq1of","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240513112858-falq1of","updated":"20240513112905"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// TryLock locks the mutex if not already locked by another session.\n// If lock is held by another session, return immediately after attempting necessary cleanup\n// The ctx argument is used for the sending/receiving Txn RPC.\nfunc (m *Mutex) TryLock(ctx context.Context) error {\n    resp, err := m.tryAcquire(ctx)\n    if err != nil {\n        return err\n    }\n    // if no key on prefix / the minimum rev is key, already hold the lock\n    ownerKey := resp.Responses[1].GetResponseRange().Kvs\n    if len(ownerKey) == 0 || ownerKey[0].CreateRevision == m.myRev {\n        m.hdr = resp.Header\n        return nil\n    }\n    client := m.s.Client()\n    // Cannot lock, so delete the key\n    if _, err := client.Delete(ctx, m.myKey); err != nil {\n        return err\n    }\n    m.myKey = \"\\x00\"\n    m.myRev = -1\n    return ErrLocked\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513112850-68jz577","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513112850-68jz577","updated":"20240513112914"},"Children":[{"Type":"NodeText","Data":"Lock"}]},{"ID":"20240513112920-u918wza","Type":"NodeParagraph","Properties":{"id":"20240513112920-u918wza","updated":"20240513112920"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112920-a6iqzlj.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513112927-mtaqru9","Type":"NodeParagraph","Properties":{"id":"20240513112927-mtaqru9","updated":"20240513112927"},"Children":[{"Type":"NodeText","Data":"Mutex.Lock 方法采用的是阻塞加锁的处理模式，倘若分布式锁已经被其他人占用，则会持续阻塞等待时机，直到自己取锁成功："}]},{"ID":"20240513112927-90xp05s","Type":"NodeList","ListData":{},"Properties":{"id":"20240513112927-90xp05s","updated":"20240513112937"},"Children":[{"ID":"20240513112927-5iasuje","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112927-5iasuje","updated":"20240513112930"},"Children":[{"ID":"20240513112927-ykdsfp2","Type":"NodeParagraph","Properties":{"id":"20240513112927-ykdsfp2","updated":"20240513112930"},"Children":[{"Type":"NodeText","Data":"调用 Mutex.tryAcquire 方法插入 my key（已存在则查询），获取到 my key 对应的 revision 以及当前锁的实际持有者"}]}]},{"ID":"20240513112927-xhb3t05","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112927-xhb3t05","updated":"20240513112933"},"Children":[{"ID":"20240513112927-k4eyr23","Type":"NodeParagraph","Properties":{"id":"20240513112927-k4eyr23","updated":"20240513112933"},"Children":[{"Type":"NodeText","Data":"倘若锁 pfx 从未被占用过，或者锁 pfx 下存在的 revision 中，自身的 revision 是其中最小的一个，则说明自己加锁成功"}]}]},{"ID":"20240513112927-p5qlyqs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112927-p5qlyqs","updated":"20240513112936"},"Children":[{"ID":"20240513112927-jq8e6xf","Type":"NodeParagraph","Properties":{"id":"20240513112927-jq8e6xf","updated":"20240513112936"},"Children":[{"Type":"NodeText","Data":"倘若锁已被他人占用，调用 waitDeletes 方法，watch 监听 revision 小于自己且最接近于自己的锁记录数据的删除事件"}]}]},{"ID":"20240513112927-02dz38n","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513112927-02dz38n","updated":"20240513112937"},"Children":[{"ID":"20240513112927-9m5s1og","Type":"NodeParagraph","Properties":{"id":"20240513112927-9m5s1og","updated":"20240513112937"},"Children":[{"Type":"NodeText","Data":"当接收到解锁事件后，会再检查一下自身的租约有没有过期，如果没有，则说明加锁成功"}]}]}]},{"ID":"20240513112944-g1tta9j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513112944-g1tta9j","updated":"20240513112944"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Lock locks the mutex with a cancelable context. If the context is canceled\n// while trying to acquire the lock, the mutex tries to clean its stale lock entry.\nfunc (m *Mutex) Lock(ctx context.Context) error {\n    resp, err := m.tryAcquire(ctx)\n    if err != nil {\n        return err\n    }\n    // if no key on prefix / the minimum rev is key, already hold the lock\n    ownerKey := resp.Responses[1].GetResponseRange().Kvs\n    if len(ownerKey) == 0 || ownerKey[0].CreateRevision == m.myRev {\n        m.hdr = resp.Header\n        return nil\n    }\n    client := m.s.Client()\n    // wait for deletion revisions prior to myKey\n    // TODO: early termination if the session key is deleted before other session keys with smaller revisions.\n    _, werr := waitDeletes(ctx, client, m.pfx, m.myRev-1)\n    // release lock key if wait failed\n    if werr != nil {\n        m.Unlock(client.Ctx())\n        return werr\n    }\n\n\n    // make sure the session is not expired, and the owner key still exists.\n    gresp, werr := client.Get(ctx, m.myKey)\n    if werr != nil {\n        m.Unlock(client.Ctx())\n        return werr\n    }\n\n\n    if len(gresp.Kvs) == 0 { // is the session key lost?\n        return ErrSessionExpired\n    }\n    m.hdr = gresp.Header\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513112946-jn2dd2o","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513112946-jn2dd2o","updated":"20240513112955"},"Children":[{"Type":"NodeText","Data":"tryAcquire"}]},{"ID":"20240513112959-ejgale2","Type":"NodeParagraph","Properties":{"id":"20240513112959-ejgale2","updated":"20240513112959"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513112959-3bwl7ds.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513113006-7fe6m9p","Type":"NodeParagraph","Properties":{"id":"20240513113006-7fe6m9p","updated":"20240513113006"},"Children":[{"Type":"NodeText","Data":"Mutex.tryAcquire 方法，使用方会完成锁数据的插入以及 revision 的获取："}]},{"ID":"20240513113006-6hze9xh","Type":"NodeList","ListData":{},"Properties":{"id":"20240513113006-6hze9xh","updated":"20240513113011"},"Children":[{"ID":"20240513113006-i95tnmn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513113006-i95tnmn","updated":"20240513113008"},"Children":[{"ID":"20240513113006-zu7qqnu","Type":"NodeParagraph","Properties":{"id":"20240513113006-zu7qqnu","updated":"20240513113008"},"Children":[{"Type":"NodeText","Data":"基于 etcd 的事务操作，判定假如当前 my key 还没创建过锁的 kv 记录，则创建 kv 记录并执行 getOwner 操作获取当前锁的持有者；倘若已经创建过，则查询对应的 kv 记录，并调用 getOwner 获取当前锁的持有者"}]}]},{"ID":"20240513113006-94nvxtl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513113006-94nvxtl","updated":"20240513113011"},"Children":[{"ID":"20240513113006-02suemi","Type":"NodeParagraph","Properties":{"id":"20240513113006-02suemi","updated":"20240513113011"},"Children":[{"Type":"NodeText","Data":"返回 my key 对应的 revision 和当前锁的 owner（锁 pfx 中最小 revision 的归属方），供上层的 Lock 或者 TryLock 方法使用"}]}]}]},{"ID":"20240513140905-emq92oa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240513140905-emq92oa","updated":"20240513140905"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (m *Mutex) tryAcquire(ctx context.Context) (*v3.TxnResponse, error) {\n    s := m.s\n    client := m.s.Client()\n\n\n    m.myKey = fmt.Sprintf(\"%s%x\", m.pfx, s.Lease())\n    cmp := v3.Compare(v3.CreateRevision(m.myKey), \"=\", 0)\n    // put self in lock waiters via myKey; oldest waiter holds lock\n    put := v3.OpPut(m.myKey, \"\", v3.WithLease(s.Lease()))\n    // reuse key in case this session already holds the lock\n    get := v3.OpGet(m.myKey)\n    // fetch current holder to complete uncontended path with only one RPC\n    getOwner := v3.OpGet(m.pfx, v3.WithFirstCreate()...)\n    resp, err := client.Txn(ctx).If(cmp).Then(put, getOwner).Else(get, getOwner).Commit()\n    if err != nil {\n        return nil, err\n    }\n    m.myRev = resp.Header.Revision\n    if !resp.Succeeded {\n        m.myRev = resp.Responses[0].GetResponseRange().Kvs[0].CreateRevision\n    }\n    return resp, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513140908-nt98haq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513140908-nt98haq","updated":"20240513140926"},"Children":[{"Type":"NodeText","Data":"waitDeletes"}]},{"ID":"20240513140931-noebkwe","Type":"NodeList","ListData":{},"Properties":{"id":"20240513140931-noebkwe","updated":"20240513140931"},"Children":[{"ID":"20240513140931-f398bau","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513140931-f398bau","updated":"20240513140931"},"Children":[{"ID":"20240513140931-w16wm40","Type":"NodeParagraph","Properties":{"id":"20240513140931-w16wm40","updated":"20240513140933"},"Children":[{"Type":"NodeText","Data":"基于一个 for 循环实现自旋"}]}]},{"ID":"20240513140931-5sd8qs9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513140931-5sd8qs9","updated":"20240513140931"},"Children":[{"ID":"20240513140931-0wtuf61","Type":"NodeParagraph","Properties":{"id":"20240513140931-0wtuf61","updated":"20240513140934"},"Children":[{"Type":"NodeText","Data":"每轮处理中，会获取 revision 小于自己且最接近于自己的取锁方的 key"}]}]},{"ID":"20240513140931-g2bm2hz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513140931-g2bm2hz","updated":"20240513140931"},"Children":[{"ID":"20240513140931-i4tk66f","Type":"NodeParagraph","Properties":{"id":"20240513140931-i4tk66f","updated":"20240513140936"},"Children":[{"Type":"NodeText","Data":"倘若 key 不存在，则说明自己的 revision 已经是最小的，直接取锁成功"}]}]},{"ID":"20240513140931-ouhjlu7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240513140931-ouhjlu7","updated":"20240513140931"},"Children":[{"ID":"20240513140931-a6fumfb","Type":"NodeParagraph","Properties":{"id":"20240513140931-a6fumfb","updated":"20240513140937"},"Children":[{"Type":"NodeText","Data":"倘若 key 存在，则调用 waitDelete 方法阻塞监听这个 key 的删除事件"}]}]}]},{"ID":"20240513140943-iydlffi","Type":"NodeParagraph","Properties":{"id":"20240513140943-iydlffi","updated":"20240513140943"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513140943-q7nnbaa.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513140918-lw2m0ti","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513140918-lw2m0ti","updated":"20240513140954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// waitDeletes efficiently waits until all keys matching the prefix and no greater\n// than the create revision are deleted.\nfunc waitDeletes(ctx context.Context, client *v3.Client, pfx string, maxCreateRev int64) (*pb.ResponseHeader, error) {\n    getOpts := append(v3.WithLastCreate(), v3.WithMaxCreateRev(maxCreateRev))\n    for {\n        resp, err := client.Get(ctx, pfx, getOpts...)\n        if err != nil {\n            return nil, err\n        }\n        if len(resp.Kvs) == 0 {\n            return resp.Header, nil\n        }\n        lastKey := string(resp.Kvs[0].Key)\n        if err = waitDelete(ctx, client, lastKey, resp.Header.Revision); err != nil {\n            return nil, err\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513141000-fj0sb68","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513141000-fj0sb68","updated":"20240513141000"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func waitDelete(ctx context.Context, client *v3.Client, key string, rev int64) error {\n    cctx, cancel := context.WithCancel(ctx)\n    defer cancel()\n\n\n    var wr v3.WatchResponse\n    wch := client.Watch(cctx, key, v3.WithRev(rev))\n    for wr = range wch {\n        for _, ev := range wr.Events {\n            if ev.Type == mvccpb.DELETE {\n                return nil\n            }\n        }\n    }\n    if err := wr.Err(); err != nil {\n        return err\n    }\n    if err := ctx.Err(); err != nil {\n        return err\n    }\n    return errors.New(\"lost watcher waiting for delete\")\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513141004-0fyxary","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240513141004-0fyxary","updated":"20240513141009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"unlock"}]},{"ID":"20240513141014-gnf3aj4","Type":"NodeParagraph","Properties":{"id":"20240513141014-gnf3aj4","updated":"20240513141014"},"Children":[{"Type":"NodeText","Data":"解锁时直接删除自己的 kv 对记录即可，假如自己是持有锁的角色，那么删除 kv 对记录就是真正意义上的解锁动作；即便自己并无持有锁，删除 kv 对就代表自己退出了抢锁流程，也不会对流程产生负面影响."}]},{"ID":"20240513141014-ylj5n14","Type":"NodeParagraph","Properties":{"id":"20240513141014-ylj5n14","updated":"20240513141014"},"Children":[{"Type":"NodeText","Data":"这里大家可能会存在一个疑问，就是假如执行 unlock 操作的角色本身只是处在等锁队列中，并未真正持有锁，那么执行删除 kv 对记录时是否会误将队列中的下一个取锁方误唤醒，引起秩序混乱？"}]},{"ID":"20240513141014-rjqo448","Type":"NodeParagraph","Properties":{"id":"20240513141014-rjqo448","updated":"20240513141014"},"Children":[{"Type":"NodeText","Data":"答案是不会的，大家可以回过头观察 waitDeletes 方法的实现逻辑，取锁方在从 waitDelete 方法中接收到前一笔 kv 记录的删除事件而被唤醒后，它会接着查询一轮比它小且最接近的 revision 对应的 kv 对记录，如果存在则继续进行监听，直到这样的 kv 数据不存在时才会取锁成功（my revision 已经是锁 pfx 下最小的 revision）."}]},{"ID":"20240513141036-y5l4fzv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"fold":"1","id":"20240513141036-y5l4fzv","updated":"20240513141042"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (m *Mutex) Unlock(ctx context.Context) error {\n    if m.myKey == \"\" || m.myRev \u003c= 0 || m.myKey == \"\\x00\" {\n        return ErrLockReleased\n    }\n\n\n    if !strings.HasPrefix(m.myKey, m.pfx) {\n        return fmt.Errorf(\"invalid key %q, it should have prefix %q\", m.myKey, m.pfx)\n    }\n\n\n    client := m.s.Client()\n    if _, err := client.Delete(ctx, m.myKey); err != nil {\n        return err\n    }\n    m.myKey = \"\\x00\"\n    m.myRev = -1\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240513141045-5xme7ju","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240513141045-5xme7ju","updated":"20240513141053"},"Children":[{"Type":"NodeText","Data":"6 总结"}]},{"ID":"20240513141059-12mmkoe","Type":"NodeParagraph","Properties":{"id":"20240513141059-12mmkoe","updated":"20240513141059"},"Children":[{"Type":"NodeText","Data":"本篇和大家一起探讨了如何基于 Golang 实现主动轮询和 watch 回调两种模式的分布式锁. 本文分别以redis 和 etcd 两个组件为例进行了分布式锁的原理介绍及源码展示."}]},{"ID":"20240513141059-nshnz7v","Type":"NodeParagraph","Properties":{"id":"20240513141059-nshnz7v","updated":"20240513141059"},"Children":[{"Type":"NodeText","Data":"redis 可以算是我们最常用于实现分布式锁的组件，但是由于其中缺少续约机制以及存在数据弱一致性的问题，导致分布式锁的独占性并不能够得到保证. 后续我会单独开一个篇章，和大家一起聊聊如何通过 watch dog 和 redlock 机制解决 redis 分布式锁可能存在的安全隐患."}]},{"ID":"20240513141101-cpupjfq","Type":"NodeParagraph","Properties":{"id":"20240513141101-cpupjfq"}}]}