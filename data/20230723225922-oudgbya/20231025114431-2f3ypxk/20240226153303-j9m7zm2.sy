{"ID":"20240226153303-j9m7zm2","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2708-fe0f","id":"20240226153303-j9m7zm2","tags":"需要仔细看","title":"etcd 存储引擎之主干框架","updated":"20240226160549"},"Children":[{"ID":"20240226153321-1u0ps6x","Type":"NodeParagraph","Properties":{"id":"20240226153321-1u0ps6x","updated":"20240226153527"},"Children":[{"Type":"NodeText","Data":"本系列我们将以 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"etcd 存储引擎 boltdb 作为 b+树 工程实践案例"},{"Type":"NodeText","Data":"进行学习，该项目开源地址为：https://github.com/etcd-io/bbolt，go 语言纯度接近 100%. （本系列涉及走读的 boltdb "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"源码版本为 v1.3.8"},{"Type":"NodeText","Data":"）"}]},{"ID":"20240226153631-4t83q6v","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240226153631-4t83q6v","updated":"20240226153644"},"Children":[{"Type":"NodeText","Data":"1. 核心概念"}]},{"ID":"20240226153637-kdqjycd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226153637-kdqjycd","updated":"20240226153700"},"Children":[{"Type":"NodeText","Data":"1.1 bolt 之于 etcd"}]},{"ID":"20240226153700-98gxli7","Type":"NodeParagraph","Properties":{"id":"20240226153700-98gxli7","updated":"20240226153707"},"Children":[{"Type":"NodeText","Data":"etcd 是一个具有强一致性的分布式协调服务，基于 golang 实现，底层基于 raft 算法保证数据的强一致和高可用，对应开源地址： https://github.com/etcd-io/etcd"}]},{"ID":"20240226153843-8dztz1l","Type":"NodeParagraph","Properties":{"id":"20240226153843-8dztz1l","updated":"20240226153843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"74ffcf14399e17394135503f741fdc92"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/74ffcf14399e17394135503f741fdc92-20240226153843-ec4pjgc.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226153854-kmuccky","Type":"NodeParagraph","Properties":{"id":"20240226153854-kmuccky","updated":"20240226153854"},"Children":[{"Type":"NodeText","Data":"言归正传，本系列我们聚焦 etcd 存储层引擎 boltdb 的实现原理. boltdb 在 etcd 整体架构中所属的层次定位示意如上图，它是由 go 语言实现的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单机 kv 数据磁盘存储系统："}]},{"ID":"20240226153854-hvxgyvl","Type":"NodeList","ListData":{},"Properties":{"id":"20240226153854-hvxgyvl","updated":"20240226155347"},"Children":[{"ID":"20240226153854-hsru3wm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226153854-hsru3wm","updated":"20240226155347"},"Children":[{"ID":"20240226153854-vpoy8n3","Type":"NodeParagraph","Properties":{"id":"20240226153854-vpoy8n3","updated":"20240226155347"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单机运行："},{"Type":"NodeText","Data":" 无需考虑分布式共识相关内容（简单）"}]}]},{"ID":"20240226153854-t60x72d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226153854-t60x72d","updated":"20240226155345"},"Children":[{"ID":"20240226153854-2ff4019","Type":"NodeParagraph","Properties":{"id":"20240226153854-2ff4019","updated":"20240226155345"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"磁盘存储："},{"Type":"NodeText","Data":" kv 数据存储于磁盘（可靠）"}]}]},{"ID":"20240226153854-z3fm2rq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226153854-z3fm2rq","updated":"20240226153854"},"Children":[{"ID":"20240226153854-h6wo4rj","Type":"NodeParagraph","Properties":{"id":"20240226153854-h6wo4rj","updated":"20240226155341"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"本地读写："},{"Type":"NodeText","Data":" 读写时直接与本地文件交互，没有客户端与服务端的通信环节（简单、粗暴、高效）"}]}]}]},{"ID":"20240226155338-yhu2uww","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226155338-yhu2uww","updated":"20240226155354"},"Children":[{"Type":"NodeText","Data":"1.2 存储设计"}]},{"ID":"20240226155354-u233zyg","Type":"NodeParagraph","Properties":{"id":"20240226155354-u233zyg","updated":"20240226155400"},"Children":[{"Type":"NodeText","Data":"下面我们拓展聊聊 boltdb 存储技术实现. 本文作为系列开篇，整体内容偏宏观，本小节内容讲解力度偏小、点到即止，更多细节内容在未来的存储设计篇和b+树实现篇中进一步展开."}]},{"ID":"20240226155426-i37oyjk","Type":"NodeList","ListData":{},"Properties":{"id":"20240226155426-i37oyjk","updated":"20240226155434"},"Children":[{"ID":"20240226155433-hshwlkf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155433-hshwlkf","updated":"20240226155434"},"Children":[{"ID":"20240226155433-2flgxnw","Type":"NodeParagraph","Properties":{"id":"20240226155433-2flgxnw","updated":"20240226155434"},"Children":[{"Type":"NodeText","Data":"在读流程上：基于 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"mmap（memory-mapping） 技术"},{"Type":"NodeText","Data":"实现，隐藏与磁盘交互的细节，使用方能够"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"像访问内存中的字节数组一样读取磁盘文件中的内容."}]}]}]},{"ID":"20240226155418-pul89qw","Type":"NodeParagraph","Properties":{"id":"20240226155418-pul89qw","updated":"20240226155418"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"48159d0c5ad1bb2cd6405ba72599a260"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/48159d0c5ad1bb2cd6405ba72599a260-20240226155418-a2yh4on.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226155452-ecw6ar9","Type":"NodeList","ListData":{},"Properties":{"id":"20240226155452-ecw6ar9","updated":"20240226155453"},"Children":[{"ID":"20240226155453-8iuplyp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155453-8iuplyp","updated":"20240226155453"},"Children":[{"ID":"20240226155453-4h3d3ab","Type":"NodeParagraph","Properties":{"id":"20240226155453-4h3d3ab","updated":"20240226155459"},"Children":[{"Type":"NodeText","Data":"在写流程上：基于 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"pwrite + fdatasync，实现数据落盘，"},{"Type":"NodeText","Data":" 兼顾效率与稳定"}]}]}]},{"ID":"20240226155504-p89q0xc","Type":"NodeParagraph","Properties":{"id":"20240226155504-p89q0xc","updated":"20240226155504"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"4ba2d75ee86a8247332058a343e92a34"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/4ba2d75ee86a8247332058a343e92a34-20240226155504-cn8asne.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226155504-gnx2pfz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240226155504-gnx2pfz","updated":"20240226155704"},"Children":[{"Type":"NodeText","Data":"1.2.2 page"}]},{"ID":"20240226155710-d1ng4vg","Type":"NodeParagraph","Properties":{"id":"20240226155710-d1ng4vg","updated":"20240226155710"},"Children":[{"Type":"NodeText","Data":"基于局部性原理，操作系统下，内存与磁盘间数据的交换以页 page 为单位. 与之类似，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"boltdb 也是通过 page 为单位，完成数据库文件内容的组织."}]},{"ID":"20240226155710-r9zhxru","Type":"NodeParagraph","Properties":{"id":"20240226155710-r9zhxru","updated":"20240226155710"},"Children":[{"Type":"NodeText","Data":"在 boltdb 中，page 可以分为以下四类："}]},{"ID":"20240226155710-be4pwde","Type":"NodeList","ListData":{},"Properties":{"id":"20240226155710-be4pwde","updated":"20240226155710"},"Children":[{"ID":"20240226155710-fbcvuyd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155710-fbcvuyd","updated":"20240226155710"},"Children":[{"ID":"20240226155710-k6bsrpf","Type":"NodeParagraph","Properties":{"id":"20240226155710-k6bsrpf","updated":"20240226155710"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"meta page：存储 boltdb 的元数据"},{"Type":"NodeText","Data":"，例如版本号、校验和等，还包括全局递增的事务 id 记录（属于全局维度的内容）"}]}]},{"ID":"20240226155710-3jziptq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155710-3jziptq","updated":"20240226155710"},"Children":[{"ID":"20240226155710-typlz43","Type":"NodeParagraph","Properties":{"id":"20240226155710-typlz43","updated":"20240226155710"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"freelist page：存储空闲 page 信息"},{"Type":"NodeText","Data":"，例如哪些 page 空闲可用，哪些 page 将被事务释放（属于全局维度的内容. 个人觉得"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其定位可类比于 go 语言中的 heap，采取以空间换时间的策略，缓存并管理空闲 page 以供复用"},{"Type":"NodeText","Data":"，减少与操作系统的交互频率）"}]}]},{"ID":"20240226155710-5mbzn3w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155710-5mbzn3w","updated":"20240226155710"},"Children":[{"ID":"20240226155710-af0r8u2","Type":"NodeParagraph","Properties":{"id":"20240226155710-af0r8u2","updated":"20240226155710"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"branch element page：存储索引的节点，"},{"Type":"NodeText","Data":" 对应为 b+树中的分支节点（较细的粒度，与具体数据挂钩）"}]}]},{"ID":"20240226155710-olcljbu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155710-olcljbu","updated":"20240226155710"},"Children":[{"ID":"20240226155710-n6730co","Type":"NodeParagraph","Properties":{"id":"20240226155710-n6730co","updated":"20240226155710"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"leaf element page：存储数据的节点，"},{"Type":"NodeText","Data":" 对应为 b+树中的叶子节点（较细的粒度，与具体数据挂钩）"}]}]}]},{"ID":"20240226155717-mqq1l50","Type":"NodeParagraph","Properties":{"id":"20240226155717-mqq1l50","updated":"20240226155717"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"09a29781fb06117ada2527d6b0b2236d"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/09a29781fb06117ada2527d6b0b2236d-20240226155717-gaappak.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226155748-tkb312p","Type":"NodeParagraph","Properties":{"id":"20240226155748-tkb312p","updated":"20240226155748"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"每个 db 在初始化时，会先完成 4 个 page 的初始化和持久化："}]},{"ID":"20240226155748-z9p70nu","Type":"NodeList","ListData":{},"Properties":{"id":"20240226155748-z9p70nu","updated":"20240226155748"},"Children":[{"ID":"20240226155748-rgdsjed","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155748-rgdsjed","updated":"20240226155748"},"Children":[{"ID":"20240226155748-xyktl9a","Type":"NodeParagraph","Properties":{"id":"20240226155748-xyktl9a","updated":"20240226155748"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"meta page *"},{"Type":"NodeText","Data":" 2：**** 数据库的元数据自然需要初始化完成；之所以数量是两个，与 boltdb 为兼顾效率与稳定性采用的 copy-on-write 机制有关（留待下篇，按下不表）"}]}]},{"ID":"20240226155748-cf1hqm5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155748-cf1hqm5","updated":"20240226155748"},"Children":[{"ID":"20240226155748-i72zli5","Type":"NodeParagraph","Properties":{"id":"20240226155748-i72zli5","updated":"20240226155748"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"freelist："},{"Type":"NodeText","Data":" 全局维度的空闲 page 管理模块，自然需要初始化完成"}]}]},{"ID":"20240226155748-pb9lz3x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226155748-pb9lz3x","updated":"20240226155748"},"Children":[{"ID":"20240226155748-mrqy0o5","Type":"NodeParagraph","Properties":{"id":"20240226155748-mrqy0o5","updated":"20240226155748"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"leaf element page："},{"Type":"NodeText","Data":" 作为一棵空白 b+ 树的根节点，同时也是叶子节点"}]}]}]},{"ID":"20240226155749-yd4aako","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240226155749-yd4aako","updated":"20240226160127"},"Children":[{"Type":"NodeText","Data":"1.2.3 b+树"}]},{"ID":"20240226160242-8w0wpzc","Type":"NodeParagraph","Properties":{"id":"20240226160242-8w0wpzc","updated":"20240226160242"},"Children":[{"Type":"NodeText","Data":"boltdb 中，基于 b+ 树实现数据的存储. 这也是我将其作为学习案例的初衷."}]},{"ID":"20240226160242-7kx2h8j","Type":"NodeParagraph","Properties":{"id":"20240226160242-7kx2h8j","updated":"20240226160242"},"Children":[{"Type":"NodeText","Data":"有关于 b+ 树的详细设定，我将在 b+ 树实现篇中详细展开，这里仅一笔带过："}]},{"ID":"20240226160242-3pt3aop","Type":"NodeParagraph","Properties":{"id":"20240226160242-3pt3aop","updated":"20240226160242"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"b+ 树是 b 树的升级版本，本质上是一颗扁平化的 n 叉树，叶子节点存储真实数据，非叶子节点仅存储索引信息"},{"Type":"NodeText","Data":"，其拓扑结构形如下图："}]},{"ID":"20240226160251-icx7il5","Type":"NodeParagraph","Properties":{"id":"20240226160251-icx7il5","updated":"20240226160251"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"e23f6a297bb118c2285c4aec6ae5298f"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/e23f6a297bb118c2285c4aec6ae5298f-20240226160251-irqja4t.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160256-jydurhi","Type":"NodeParagraph","Properties":{"id":"20240226160256-jydurhi","updated":"20240226160256"},"Children":[{"Type":"NodeText","Data":"b+ 树本身是偏理论性的定义，在落地实践时可能会出现一定的差异化改造. 以 boltdb 的实现为例，其中存在但不仅限的两个较大改造点包括："}]},{"ID":"20240226160256-dd0fxyw","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160256-dd0fxyw","updated":"20240226160304"},"Children":[{"ID":"20240226160256-x3i0e9d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160256-x3i0e9d","updated":"20240226160300"},"Children":[{"ID":"20240226160256-cbc6n1v","Type":"NodeParagraph","Properties":{"id":"20240226160256-cbc6n1v","updated":"20240226160300"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"引入游标工具："},{"Type":"NodeText","Data":" 底层叶子节点未通过链表串联，范围检索会借助一个压栈记录了移动路径的游标指针来完成"}]}]},{"ID":"20240226160256-zajntdo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160256-zajntdo","updated":"20240226160304"},"Children":[{"ID":"20240226160256-sikqytw","Type":"NodeParagraph","Properties":{"id":"20240226160256-sikqytw","updated":"20240226160304"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"降低调整频率："},{"Type":"NodeText","Data":" 为兼顾操作效率与b+树的平衡性，boltdb 仅在数据溢写落盘前，才一次性完成 b+树的平衡性调整"}]}]}]},{"ID":"20240226160411-edegptx","Type":"NodeParagraph","Properties":{"id":"20240226160411-edegptx","updated":"20240226160411"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"52af2e6d16aaeda5a5a2e61488d0ea6d"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/52af2e6d16aaeda5a5a2e61488d0ea6d-20240226160411-bxoaw04.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160417-79r3tjp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240226160417-79r3tjp","updated":"20240226160422"},"Children":[{"Type":"NodeText","Data":"1.2.4 bucket"}]},{"ID":"20240226160428-fdmjoc6","Type":"NodeParagraph","Properties":{"id":"20240226160428-fdmjoc6","updated":"20240226160428"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"d437377b5fa5a49dd6750bfc18262af0"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/d437377b5fa5a49dd6750bfc18262af0-20240226160428-0752b40.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160435-n7fid1r","Type":"NodeParagraph","Properties":{"id":"20240226160435-n7fid1r","updated":"20240226160435"},"Children":[{"Type":"NodeText","Data":"在 boltdb 中引入了桶 bucket 的设定. "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"bucket 的作用是实现业务数据的隔离, 可以简单把 bucket 类比于数据库中的表"},{"Type":"NodeText","Data":"，只不过 bucket 的形式会更加灵活一些，还能支持嵌套式的"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkTextContent":"拓扑关系"},{"Type":"NodeText","Data":"，形如上图，school 和 school-class 是两个合法的 bucket，且彼此为父子关系."}]},{"ID":"20240226160435-e0dk3mm","Type":"NodeParagraph","Properties":{"id":"20240226160435-e0dk3mm","updated":"20240226160435"},"Children":[{"Type":"NodeText","Data":"从每个 db 会有个默认的 root bucket，以此为起点可以衍生出一个 bucket 多叉树，本身也是通过 b+ 树的模型实现."}]},{"ID":"20240226160435-uxfpzhp","Type":"NodeParagraph","Properties":{"id":"20240226160435-uxfpzhp","updated":"20240226160435"},"Children":[{"Type":"NodeText","Data":"在逻辑意义上，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"每个 bucket 会有一棵独立的 b+ 树，用于存放当前 bucket 范围内的 kv 数据."}]},{"ID":"20240226160438-jaazj2r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160438-jaazj2r","updated":"20240226160529"},"Children":[{"Type":"NodeText","Data":"1.3 事务执行"}]},{"ID":"20240226160534-ju2iyq8","Type":"NodeParagraph","Properties":{"id":"20240226160534-ju2iyq8","updated":"20240226160534"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1e0e43c55c58ab87621c8054936f9ec4"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1e0e43c55c58ab87621c8054936f9ec4-20240226160534-weqdhcm.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160540-0d079et","Type":"NodeParagraph","Properties":{"id":"20240226160540-0d079et","updated":"20240226160540"},"Children":[{"Type":"NodeText","Data":"最后是关于事务 transaction 的部分."}]},{"ID":"20240226160540-ioapy7k","Type":"NodeParagraph","Properties":{"id":"20240226160540-ioapy7k","updated":"20240226160540"},"Children":[{"Type":"NodeText","Data":"boltdb 中的事务分为只读事务 read-only tx 和读写事务 read-write tx 两类："}]},{"ID":"20240226160540-8utvpc8","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160540-8utvpc8","updated":"20240226160540"},"Children":[{"ID":"20240226160540-pbsykre","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160540-pbsykre","updated":"20240226160540"},"Children":[{"ID":"20240226160540-f8b1md6","Type":"NodeParagraph","Properties":{"id":"20240226160540-f8b1md6","updated":"20240226160540"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"读写事务："},{"Type":"NodeText","Data":" 顾名思义，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"事务中可以存在非"},{"Type":"NodeTextMark","TextMarkType":"strong a","TextMarkTextContent":"幂等"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的写操作. 同一时刻只能有一个读写事务执行"},{"Type":"NodeText","Data":"，但"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可以和多个只读事务并行执行"}]}]},{"ID":"20240226160540-jzf2fep","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160540-jzf2fep","updated":"20240226160540"},"Children":[{"ID":"20240226160540-p72y9y2","Type":"NodeParagraph","Properties":{"id":"20240226160540-p72y9y2","updated":"20240226160540"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"只读事务：事务内只存在查询操作. 多个只读事务可以并行执行"},{"Type":"NodeText","Data":"，也可以和读写事务并行执行"}]}]}]},{"ID":"20240226160540-gr45zc5","Type":"NodeParagraph","Properties":{"id":"20240226160540-gr45zc5","updated":"20240226160540"},"Children":[{"Type":"NodeText","Data":"有关 boltdb 事务的更多设定、acid 性质的保证机制及事务的实现细节等内容，我们放在事务实现篇中详细讲解."}]},{"ID":"20240226160541-rtt6wdj","Type":"NodeParagraph","Properties":{"id":"20240226160541-rtt6wdj","updated":"20240226160541"}},{"ID":"20240226160543-moyqvzc","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240226160543-moyqvzc","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"2 使用示例"}]},{"ID":"20240226160623-gcqk1zf","Type":"NodeParagraph","Properties":{"id":"20240226160623-gcqk1zf","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"本章通过一个单测示例向大家展示 boltdb 的基本用法."}]},{"ID":"20240226160623-biuk0q0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-biuk0q0","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"2.1 启动"}]},{"ID":"20240226160623-ymh2b9v","Type":"NodeParagraph","Properties":{"id":"20240226160623-ymh2b9v","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"启动 boltdb 时，需要指定数据库文件的路径，并将文件权限设置为可读写："}]},{"ID":"20240226160623-48i4bdq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-48i4bdq","updated":"20240226160549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"import (\n    \"testing\"\n\n\n    \"go.etcd.io/bbolt\"\n)\n\n\nfunc Test_boltDB(t *testing.T) {\n    // 1 启动数据库\n    db, err := bbolt.Open(\"./test_b.db\", 0600, nil)\n    if err != nil {\n        t.Error(err)\n        return\n    }\n    defer db.Close()\n    // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-2evq7gx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-2evq7gx","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"2.2 建bucket（表）"}]},{"ID":"20240226160623-mqqj75s","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-mqqj75s","updated":"20240226160549"},"Children":[{"ID":"20240226160623-y73fpef","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-y73fpef","updated":"20240226160623"},"Children":[{"ID":"20240226160623-stt94af","Type":"NodeParagraph","Properties":{"id":"20240226160623-stt94af","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过 db.Update 方法，启动隐式读写事务（方法结束时，boltdb 会自动帮忙 commit 事务）"}]}]},{"ID":"20240226160623-323jmlw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-323jmlw","updated":"20240226160623"},"Children":[{"ID":"20240226160623-69455ew","Type":"NodeParagraph","Properties":{"id":"20240226160623-69455ew","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 在其中通过 tx.CreateBucketIfNotExists 方法完成一个名为 \"test\" 的 bucket 的创建："}]}]}]},{"ID":"20240226160623-thmdwqq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-thmdwqq","updated":"20240226160549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"import (\n    \"testing\"\n\n\n    \"go.etcd.io/bbolt\"\n)\n\n\nfunc Test_boltDB(t *testing.T) {\n    // 1 启动数据库\n    // ...\n    \n    // 2 建表\n    if err = db.Update(func(tx *bbolt.Tx) error {\n        _, err := tx.CreateBucketIfNotExists([]byte(\"test\"))\n        return err\n    }); err != nil {\n        t.Error(err)\n        return\n    }\n\n\n    // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-8fegvl9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-8fegvl9","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"2.3 增改"}]},{"ID":"20240226160623-5f4uihq","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-5f4uihq","updated":"20240226160549"},"Children":[{"ID":"20240226160623-hx2ux30","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-hx2ux30","updated":"20240226160623"},"Children":[{"ID":"20240226160623-16owd18","Type":"NodeParagraph","Properties":{"id":"20240226160623-16owd18","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过 tx.Bucket 方法获取到 bucket"}]}]},{"ID":"20240226160623-cnt6utv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-cnt6utv","updated":"20240226160623"},"Children":[{"ID":"20240226160623-85emhln","Type":"NodeParagraph","Properties":{"id":"20240226160623-85emhln","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 调用 bucket.Put 方法，完成 kv 数据的写入"}]}]}]},{"ID":"20240226160623-jacsmz1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-jacsmz1","updated":"20240226160549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"import (\n    \"testing\"\n\n\n    \"go.etcd.io/bbolt\"\n)\n\n\nfunc Test_boltDB(t *testing.T) {\n    // 1 启动数据库\n    // ...\n    \n    // 2 建表\n    // ...\n\n\n    // 3 增、改\n    if err = db.Update(func(tx *bbolt.Tx) error {\n        table := tx.Bucket([]byte(\"test\"))\n        if err := table.Put([]byte(\"a\"), []byte(\"b\")); err != nil {\n            return err\n        }\n        return table.Put([]byte(\"c\"), []byte(\"d\"))\n    }); err != nil {\n        t.Error(err)\n        return\n    }\n\n\n    // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-p0qi4if","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-p0qi4if","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"2.4 删"}]},{"ID":"20240226160623-2suari5","Type":"NodeParagraph","Properties":{"id":"20240226160623-2suari5","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"通过 bucket.Delete 方法，完成 key 的删除："}]},{"ID":"20240226160623-jkyo4uz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-jkyo4uz","updated":"20240226160549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"import (\n    \"testing\"\n\n\n    \"go.etcd.io/bbolt\"\n)\n\n\nfunc Test_boltDB(t *testing.T) {\n    // 1 启动数据库\n    // ...\n    \n    // 2 建表\n    // ...\n\n\n    // 3 增、改\n    // ...\n    \n    // 4 删\n    if err = db.Update(func(tx *bbolt.Tx) error {\n        table := tx.Bucket([]byte(\"test\"))\n        return table.Delete([]byte(\"a\"))\n    }); err != nil {\n        t.Error(err)\n        return\n    }\n\n\n    // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-0ua3r3u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-0ua3r3u","updated":"20240226160549"},"Children":[{"Type":"NodeText","Data":"2.5 查"}]},{"ID":"20240226160623-t0b691b","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-t0b691b","updated":"20240226160549"},"Children":[{"ID":"20240226160623-r66orf1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-r66orf1","updated":"20240226160623"},"Children":[{"ID":"20240226160623-25241ak","Type":"NodeParagraph","Properties":{"id":"20240226160623-25241ak","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过 db.View 方法，启动隐式只读事务（方法结束时，boltdb 会自动帮忙 commit 事务）"}]}]},{"ID":"20240226160623-luz94jy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-luz94jy","updated":"20240226160623"},"Children":[{"ID":"20240226160623-f5qxt37","Type":"NodeParagraph","Properties":{"id":"20240226160623-f5qxt37","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过 bucket.Get 方法，完成 key value 数据的查询"}]}]}]},{"ID":"20240226160623-1v5mz5s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-1v5mz5s","updated":"20240226160549"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"import (\n    \"testing\"\n\n\n    \"go.etcd.io/bbolt\"\n)\n\n\nfunc Test_boltDB(t *testing.T) {\n    // 1 启动数据库\n    // ...\n    \n    // 2 建表\n    // ...\n\n\n    // 3 增、改\n    // ...\n    \n    // 4 删\n    // ...\n\n\n    // 5 查\n    if err = db.View(func(tx *bbolt.Tx) error {\n        table := tx.Bucket([]byte(\"test\"))\n        v1 := table.Get([]byte(\"c\"))\n        t.Logf(\"v of key c: %s\", v1)\n        v2 := table.Get([]byte(\"a\"))\n        t.Logf(\"v of key a: %s\", v2)\n        return nil\n    }); err != nil {\n        t.Error(err)\n        return\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-mfwx1c2","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240226160623-mfwx1c2","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"3 主流程走读"}]},{"ID":"20240226160623-cdjem0c","Type":"NodeParagraph","Properties":{"id":"20240226160623-cdjem0c","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"在本章中，我们将以第 2 章示例代码为入口，进行几个核心操作流程的源码流程走读，但涉足的源码深度相对较浅："}]},{"ID":"20240226160623-hiwngmr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-hiwngmr","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.1 db定义"}]},{"ID":"20240226160623-avs1h4a","Type":"NodeParagraph","Properties":{"id":"20240226160623-avs1h4a","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/sz_mmbiz_png/3ic3aBqT2ibZtC2JjuibMpX9KlWmGosd7JMU3Xiacoj3Azp58x24ao40fvpvDQlWiaVByfxNuT7l3Slu08iamI4AViarw/640?wx_fmt=png\u0026from=appmsg\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160623-jkwchzo","Type":"NodeParagraph","Properties":{"id":"20240226160623-jkwchzo","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"首先介绍 boltdb 中的一个核心类——"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"DB. 对应为一个数据库实例的代码抽象"},{"Type":"NodeText","Data":"，其中包含的核心成员属性，已通过图解和源码注释的方式给出："}]},{"ID":"20240226160623-8wjs5s5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-8wjs5s5","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// boltdb 抽象的数据库\ntype DB struct {\n    // ...\n    // 数据库文件名称\n    path     string\n    // 打开文件方法\n    openFile func(string, int, os.FileMode) (*os.File, error)\n    // 数据库文件，所有数据存储于此\n    file     *os.File\n    // 基于 mmap 技术映射的数据库文件内容\n    data     *[maxMapSize]byte\n    // ...\n    // 两个轮换使用的 meta page\n    meta0    *meta\n    meta1    *meta\n    // 数据库单个 page 的大小，单位 byte\n    pageSize int\n    // 数据库是否已启动\n    opened   bool\n    // 全局唯一的读写事务\n    rwtx     *Tx\n    // 一系列只读事务\n    txs      []*Tx\n    // freelist，管理空闲的 page\n    freelist     *freelist\n    freelistLoad sync.Once\n    // 提高 page 字节数组复用率的对象池\n    pagePool sync.Pool\n    // ...\n    \n    // 互斥锁，保证读写事务全局唯一\n    rwlock   sync.Mutex   \n    // 保护 meta page 的互斥锁\n    metalock sync.Mutex   \n    // 保护 mmap 的读写锁\n    mmaplock sync.RWMutex \n    // 数据落盘持久化时使用的操作方法，对应为 pwrite 操作\n    ops struct {\n        writeAt func(b []byte, off int64) (n int, err error)\n    }\n\n\n    // 是否已只读模式启动数据库\n    readOnly bool\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-0mnacum","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-0mnacum","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.2 启动"}]},{"ID":"20240226160623-6cen8cx","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240226160623-6cen8cx","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.2.1 主流程"}]},{"ID":"20240226160623-4mb3230","Type":"NodeParagraph","Properties":{"id":"20240226160623-4mb3230","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/sz_mmbiz_png/3ic3aBqT2ibZtC2JjuibMpX9KlWmGosd7JMMtdKdcJBQn6Qara3ea9OYGGuvh3T5W9cf3smyw9a0sA0iaDq6vSQQ6Q/640?wx_fmt=png\u0026from=appmsg\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160623-czk90ip","Type":"NodeParagraph","Properties":{"id":"20240226160623-czk90ip","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"通过 Open 方法可以启动 db，核心流程包括："}]},{"ID":"20240226160623-p8vl8qb","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-p8vl8qb","updated":"20240226160624"},"Children":[{"ID":"20240226160623-elox9w5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-elox9w5","updated":"20240226160623"},"Children":[{"ID":"20240226160623-x39grvp","Type":"NodeParagraph","Properties":{"id":"20240226160623-x39grvp","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 构造 db 实例，并读取各项 option 完成配置"}]}]},{"ID":"20240226160623-fgn4bk7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-fgn4bk7","updated":"20240226160623"},"Children":[{"ID":"20240226160623-ymvrh0q","Type":"NodeParagraph","Properties":{"id":"20240226160623-ymvrh0q","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过传入的 path，打开对应的数据库文件（如果文件之前不存在，则会进行全新文件的创建）"}]}]},{"ID":"20240226160623-xx7eta1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-xx7eta1","updated":"20240226160623"},"Children":[{"ID":"20240226160623-sc71hue","Type":"NodeParagraph","Properties":{"id":"20240226160623-sc71hue","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 倘若在创建新的数据库文件，则需要完成 2 个 meta page、1 个 freelist page 和 1 个 leaf element page 的初始化"}]}]},{"ID":"20240226160623-1svww5t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-1svww5t","updated":"20240226160623"},"Children":[{"ID":"20240226160623-jw49ik1","Type":"NodeParagraph","Properties":{"id":"20240226160623-jw49ik1","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 构造 pagePool 对象池，后续可复用 page 的字节数组"}]}]},{"ID":"20240226160623-hm8a7g1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-hm8a7g1","updated":"20240226160623"},"Children":[{"ID":"20240226160623-yur3gmp","Type":"NodeParagraph","Properties":{"id":"20240226160623-yur3gmp","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 执行 mmap 操作，完成数据库文件和内存空间的映射"}]}]},{"ID":"20240226160623-kjdnj6a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-kjdnj6a","updated":"20240226160623"},"Children":[{"ID":"20240226160623-nivc9qu","Type":"NodeParagraph","Properties":{"id":"20240226160623-nivc9qu","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 返回构造好的 db 实例"}]}]}]},{"ID":"20240226160623-l5c1p88","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-l5c1p88","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func Open(path string, mode os.FileMode, options *Options) (*DB, error) {\n    // 构造 db 实例\n    db := \u0026DB{\n        opened: true,\n    }\n    // 启用默认配置\n    if options == nil {\n        options = DefaultOptions\n    }\n    \n    // ...\n    // 默认不启用只读模式\n    if options.ReadOnly {\n        flag = os.O_RDONLY\n        db.readOnly = true\n    } else {\n        // always load free pages in write mode\n        db.PreLoadFreelist = true\n    }\n\n\n    // 打开数据库文件的操作方法\n    db.openFile = options.OpenFile\n    if db.openFile == nil {\n        db.openFile = os.OpenFile\n    }\n\n\n    // 打开数据库文件\n    var err error\n    if db.file, err = db.openFile(path, flag|os.O_CREATE, mode); err != nil {\n        _ = db.close()\n        return nil, err\n    }\n    // 数据库文件名称赋值\n    db.path = db.file.Name()\n\n\n    // ...\n    // 数据落盘操作\n    db.ops.writeAt = db.file.WriteAt\n\n\n    // 数据 page 大小\n    if db.pageSize = options.PageSize; db.pageSize == 0 {\n        // 默认等于操作系统 page 大小\n        db.pageSize = defaultPageSize\n    }\n\n\n    // 倘若从零到一创建一个新的 db 文件，则需要进行初始化\n    if info, err := db.file.Stat(); err != nil {\n        _ = db.close()\n        return nil, err\n    } else if info.Size() == 0 {\n        // 初始化 db\n        if err := db.init(); err != nil {\n            // ...\n            _ = db.close()\n            return nil, err\n        }\n    } \n    // ...\n\n\n    // 对象池，用于复用 page 的字节数组\n    db.pagePool = sync.Pool{\n        New: func() interface{} {\n            return make([]byte, db.pageSize)\n        },\n    }\n\n\n    // 基于 mmap 建立数据库文件和内存空间的映射\n    if err := db.mmap(options.InitialMmapSize); err != nil {\n        _ = db.close()\n        return nil, err\n    }\n\n\n    // 预加载 freelist\n    if db.PreLoadFreelist {\n        db.loadFreelist()\n    }\n\n\n    // ...\n    return db, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-qwfz9de","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240226160623-qwfz9de","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.2.2 初始化"}]},{"ID":"20240226160623-80kv9sn","Type":"NodeParagraph","Properties":{"id":"20240226160623-80kv9sn","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"下面是启用一个全新数据库文件时，需要执行的初始化方法："}]},{"ID":"20240226160623-xkdpqb3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-xkdpqb3","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// 初始化一个全新的数据库文件\nfunc (db *DB) init() error {\n    // 初始化数据库的 4 个 page：meta page * 2 + freelist page + leaf page\n    buf := make([]byte, db.pageSize*4)\n    // 初始化 mata page\n    for i := 0; i \u003c 2; i++ {\n        p := db.pageInBuffer(buf, pgid(i))\n        p.id = pgid(i)\n        p.flags = metaPageFlag\n\n\n        // Initialize the meta page.\n        m := p.meta()\n        m.magic = magic\n        m.version = version\n        m.pageSize = uint32(db.pageSize)\n        m.freelist = 2\n        m.root = bucket{root: 3}\n        m.pgid = 4\n        m.txid = txid(i)\n        m.checksum = m.sum64()\n    }\n\n\n    // 初始化 freelist page\n    p := db.pageInBuffer(buf, pgid(2))\n    p.id = pgid(2)\n    p.flags = freelistPageFlag\n    p.count = 0\n\n\n    // 初始化空的 leaf page\n    p = db.pageInBuffer(buf, pgid(3))\n    p.id = pgid(3)\n    p.flags = leafPageFlag\n    p.count = 0\n\n\n    // 将初始化的 4 个 page 落盘，基于 pwrite + fdatasync 操作\n    if _, err := db.ops.writeAt(buf, 0); err != nil {\n        return err\n    }\n    if err := fdatasync(db); err != nil {\n        return err\n    }\n    db.filesz = len(buf)\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-390xnqe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240226160623-390xnqe","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.2.3 mmap"}]},{"ID":"20240226160623-oeq2nea","Type":"NodeParagraph","Properties":{"id":"20240226160623-oeq2nea","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"下面是通过 mmap 实现数据文件与内存映射的源码，核心步骤包括："}]},{"ID":"20240226160623-mmektod","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-mmektod","updated":"20240226160624"},"Children":[{"ID":"20240226160623-n3xoowy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-n3xoowy","updated":"20240226160623"},"Children":[{"ID":"20240226160623-lhd52vx","Type":"NodeParagraph","Properties":{"id":"20240226160623-lhd52vx","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 加锁保证 mmap 操作并发安全"}]}]},{"ID":"20240226160623-0hslimw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-0hslimw","updated":"20240226160623"},"Children":[{"ID":"20240226160623-irkvg0t","Type":"NodeParagraph","Properties":{"id":"20240226160623-irkvg0t","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 设置合适的 mmap 空间大小"}]}]},{"ID":"20240226160623-lq3agg8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-lq3agg8","updated":"20240226160623"},"Children":[{"ID":"20240226160623-ncf4zr6","Type":"NodeParagraph","Properties":{"id":"20240226160623-ncf4zr6","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 倘若之前已经执行过 mmap，则需要善后处理"}]}]},{"ID":"20240226160623-m9lv5ro","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-m9lv5ro","updated":"20240226160623"},"Children":[{"ID":"20240226160623-wl4uul3","Type":"NodeParagraph","Properties":{"id":"20240226160623-wl4uul3","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 执行新一轮 mmap 操作"}]}]}]},{"ID":"20240226160623-ab4gyug","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-ab4gyug","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func (db *DB) mmap(minsz int) (err error) {\n    // 互斥锁，保护 mmap 并发安全\n    db.mmaplock.Lock()\n    defer db.mmaplock.Unlock()\n\n\n    info, err := db.file.Stat()\n    // ...\n\n\n    // 调整合适的 mmap 容量\n    fileSize := int(info.Size())\n    var size = fileSize\n    if size \u003c minsz {\n        size = minsz\n    }\n    size, err = db.mmapSize(size)\n    if err != nil {\n        return err\n    }\n\n\n    // ...\n\n\n    // 倘若此前已经有读写事务在运行，此时因为要执行 mmap 操作，则需要对 bucket 内容进行重塑\n    if db.rwtx != nil {\n        db.rwtx.root.dereference()\n    }\n\n\n    // 解除之前建立的 mmap 映射\n    if err = db.munmap(); err != nil {\n        return err\n    }\n\n\n    // 建立新的 mmap 映射\n    if err = mmap(db, size); err != nil {\n        return err\n    }\n\n\n    // ...\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-iuqx38b","Type":"NodeParagraph","Properties":{"id":"20240226160623-iuqx38b","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"mmap 底层通过系统调用实现，不同的操作系统会有不同的实现细节. 以我当前所用的 mac 为例，对应的 unix 系统版本实现源码如下："}]},{"ID":"20240226160623-cbz2d1v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-cbz2d1v","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// mmap memory maps a DB's data file.\nfunc mmap(db *DB, sz int) error {\n    // Map the data file to memory.\n    b, err := unix.Mmap(int(db.file.Fd()), 0, sz, syscall.PROT_READ, syscall.MAP_SHARED|db.MmapFlags)\n    if err != nil {\n        return err\n    }\n\n\n    // Advise the kernel that the mmap is accessed randomly.\n    err = unix.Madvise(b, syscall.MADV_RANDOM)\n    if err != nil \u0026\u0026 err != syscall.ENOSYS {\n        // Ignore not implemented error in kernel because it still works.\n        return fmt.Errorf(\"madvise: %s\", err)\n    }\n\n\n    // Save the original byte slice and convert to a byte array pointer.\n    db.dataref = b\n    db.data = (*[maxMapSize]byte)(unsafe.Pointer(\u0026b[0]))\n    db.datasz = sz\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-oca2q0c","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-oca2q0c","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.3 建bucket（表）"}]},{"ID":"20240226160623-z7cfzuq","Type":"NodeParagraph","Properties":{"id":"20240226160623-z7cfzuq","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160623-pksdtyq","Type":"NodeParagraph","Properties":{"id":"20240226160623-pksdtyq","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"一个 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"bucket 本质上是从属于其父 bucket b+ 树中的一笔特殊的 kv 对数据"},{"Type":"NodeText","Data":". 因此创建 bucket 的过程会和写入 kv 数据的流程相类似："}]},{"ID":"20240226160623-uya52oh","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-uya52oh","updated":"20240226160624"},"Children":[{"ID":"20240226160623-hzvcqd5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-hzvcqd5","updated":"20240226160623"},"Children":[{"ID":"20240226160623-nvsg6of","Type":"NodeParagraph","Properties":{"id":"20240226160623-nvsg6of","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 借助游标，找到 bucket key 所应当从属的父 bucket b+ 树的位置"}]}]},{"ID":"20240226160623-hrgej3a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-hrgej3a","updated":"20240226160623"},"Children":[{"ID":"20240226160623-ga1l822","Type":"NodeParagraph","Properties":{"id":"20240226160623-ga1l822","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 创建子 bucket实例，并取得序列化后的结果"}]}]},{"ID":"20240226160623-kbr5hwv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-kbr5hwv","updated":"20240226160623"},"Children":[{"ID":"20240226160623-hst8sqk","Type":"NodeParagraph","Properties":{"id":"20240226160623-hst8sqk","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 将 bucket 名称作为 key，bucket 序列化结果作为 value，以一组 kv 对的形式插入到父 bucket b+ 树中"}]}]}]},{"ID":"20240226160623-zvj87w1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-zvj87w1","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func (b *Bucket) CreateBucket(key []byte) (*Bucket, error) {\n    // ...\n    // 获取游标\n    c := b.Cursor()\n    \n    // 借助游标找到桶名 key 对应的位置\n    k, _, flags := c.seek(key)\n\n\n    // 桶已存在\n    if bytes.Equal(key, k) {\n        if (flags \u0026 bucketLeafFlag) != 0 {\n            return nil, ErrBucketExists\n        }\n        return nil, ErrIncompatibleValue\n    }\n\n\n    // 创建新的桶实例\n    var bucket = Bucket{\n        bucket:      \u0026bucket{},\n        rootNode:    \u0026node{isLeaf: true},\n        FillPercent: DefaultFillPercent,\n    }\n    \n    // 取得桶的序列化结果\n    var value = bucket.write()\n\n\n    // 将这个新桶对应的 kv 对数据写入到 b+ 树中\n    key = cloneBytes(key)\n    c.node().put(key, key, value, 0, bucketLeafFlag)\n\n\n    // ...\n    // 返回创建好的新桶\n    return b.Bucket(key), nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-p8m9iqb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-p8m9iqb","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.4 查bucket（表）"}]},{"ID":"20240226160623-08e1brk","Type":"NodeParagraph","Properties":{"id":"20240226160623-08e1brk","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160623-ft5zjd7","Type":"NodeParagraph","Properties":{"id":"20240226160623-ft5zjd7","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"通过名称检索 bucket 的流程，一定程度上和数据的查询流程相类似："}]},{"ID":"20240226160623-jve8ggp","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-jve8ggp","updated":"20240226160624"},"Children":[{"ID":"20240226160623-7bgdvyw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-7bgdvyw","updated":"20240226160623"},"Children":[{"ID":"20240226160623-amsub7t","Type":"NodeParagraph","Properties":{"id":"20240226160623-amsub7t","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 查看父 bucket 的缓存 map，如果子 bucket 已反序列化过，则直接复用"}]}]},{"ID":"20240226160623-mg8f6df","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-mg8f6df","updated":"20240226160623"},"Children":[{"ID":"20240226160623-uyfwhf2","Type":"NodeParagraph","Properties":{"id":"20240226160623-uyfwhf2","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过游标 cursor 检索父 bucket 的 b+ 树，找到对应子 bucket 的 kv 对数据"}]}]},{"ID":"20240226160623-b7t6qqp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-b7t6qqp","updated":"20240226160623"},"Children":[{"ID":"20240226160623-m7cjs5n","Type":"NodeParagraph","Properties":{"id":"20240226160623-m7cjs5n","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 根据 kv 数据反序列化生成子 bucket 实例"}]}]},{"ID":"20240226160623-mn2vn6a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-mn2vn6a","updated":"20240226160623"},"Children":[{"ID":"20240226160623-nn1ptaf","Type":"NodeParagraph","Properties":{"id":"20240226160623-nn1ptaf","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 将子 bucket 添加到父 bucket 的缓存 map 中"}]}]},{"ID":"20240226160623-zhnudmg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-zhnudmg","updated":"20240226160623"},"Children":[{"ID":"20240226160623-a5d8of7","Type":"NodeParagraph","Properties":{"id":"20240226160623-a5d8of7","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 返回检索得到的子 bucket"}]}]}]},{"ID":"20240226160623-blgt5j2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-blgt5j2","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func (b *Bucket) Bucket(name []byte) *Bucket {\n    // 如果 map 中已经缓存了对应的桶，直接返回\n    if b.buckets != nil {\n        if child := b.buckets[string(name)]; child != nil {\n            return child\n        }\n    }\n\n\n    // 借助游标在 b+ 树中检索 kv 对\n    c := b.Cursor()\n    k, v, flags := c.seek(name)\n\n\n    // ...\n    // 找到桶后，对其反序列化\n    var child = b.openBucket(v)\n    // 缓存到 map 中\n    if b.buckets != nil {\n        b.buckets[string(name)] = child\n    }\n    // 返回桶\n    return child\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-8lbin2o","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-8lbin2o","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.5 数据crud"}]},{"ID":"20240226160623-pp2s81x","Type":"NodeParagraph","Properties":{"id":"20240226160623-pp2s81x","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160623-b6y3ncu","Type":"NodeParagraph","Properties":{"id":"20240226160623-b6y3ncu","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"数据的 crud 过程同样是借助在 b+ 树上游走的游标 cursor 加以完成，下面分别示意增改、删、查操作的源码主流程："}]},{"ID":"20240226160623-10f9pn8","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-10f9pn8","updated":"20240226160624"},"Children":[{"ID":"20240226160623-leihhi1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-leihhi1","updated":"20240226160623"},"Children":[{"ID":"20240226160623-g5wmltu","Type":"NodeParagraph","Properties":{"id":"20240226160623-g5wmltu","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 增改"}]}]}]},{"ID":"20240226160623-xcg59mg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-xcg59mg","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func (b *Bucket) Put(key []byte, value []byte) error {\n    // 前置校验 \n    // ...\n\n\n    // 借助游标检索到 k v 对所在的位置\n    c := b.Cursor()\n    k, _, flags := c.seek(key)\n\n\n    // ...\n    // 在对应位置中插入 kv 对内容\n    key = cloneBytes(key)\n    c.node().put(key, key, value, 0, 0)\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-3tbe7ov","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-3tbe7ov","updated":"20240226160624"},"Children":[{"ID":"20240226160623-2n6j16d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-2n6j16d","updated":"20240226160623"},"Children":[{"ID":"20240226160623-sslp90w","Type":"NodeParagraph","Properties":{"id":"20240226160623-sslp90w","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 删"}]}]}]},{"ID":"20240226160623-d21y5x3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-d21y5x3","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// 在表中删除 key\nfunc (b *Bucket) Delete(key []byte) error {\n    // ...\n    // 借助游标移动到 key 对应位置\n    c := b.Cursor()\n    k, _, flags := c.seek(key)\n\n\n    // 倘若 key 不存在\n    if !bytes.Equal(key, k) {\n        return nil\n    }\n\n\n    // ...\n\n\n    // 在 b+ 树节点中删除对应的 key\n    c.node().del(key)\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-tqpd11h","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-tqpd11h","updated":"20240226160624"},"Children":[{"ID":"20240226160623-intbybm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-intbybm","updated":"20240226160623"},"Children":[{"ID":"20240226160623-dpc6uyv","Type":"NodeParagraph","Properties":{"id":"20240226160623-dpc6uyv","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 查"}]}]}]},{"ID":"20240226160623-i3upn1i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-i3upn1i","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func (b *Bucket) Get(key []byte) []byte {\n    // 借助游标检索到 kv 对所在位置\n    k, v, flags := b.Cursor().seek(key)\n\n\n    // ...\n    // key 不存在，则返回空\n    if !bytes.Equal(key, k) {\n        return nil\n    }\n    \n    // 返回对应的 value\n    return v\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-bf0kpj4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240226160623-bf0kpj4","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"3.6 数据落盘"}]},{"ID":"20240226160623-vcsry06","Type":"NodeParagraph","Properties":{"id":"20240226160623-vcsry06","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240226160623-p6fcei0","Type":"NodeParagraph","Properties":{"id":"20240226160623-p6fcei0","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"在 boltdb "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"提交读写事务时，会一次性将更新的脏数据溢写落盘："}]},{"ID":"20240226160623-luoo3nc","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-luoo3nc","updated":"20240226160624"},"Children":[{"ID":"20240226160623-9094avr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-9094avr","updated":"20240226160623"},"Children":[{"ID":"20240226160623-j37t4te","Type":"NodeParagraph","Properties":{"id":"20240226160623-j37t4te","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"rebalance 和 spill"},{"Type":"NodeText","Data":" 操作，保证 b+ 树的平衡性满足要求"}]}]},{"ID":"20240226160623-8ughiyd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-8ughiyd","updated":"20240226160623"},"Children":[{"ID":"20240226160623-wbaak9g","Type":"NodeParagraph","Properties":{"id":"20240226160623-wbaak9g","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 执行 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"pwrite+fdatasync"},{"Type":"NodeText","Data":" 操作，完成脏数据的 page 的一些落盘"}]}]},{"ID":"20240226160623-1ihgfsq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-1ihgfsq","updated":"20240226160623"},"Children":[{"ID":"20240226160623-hk5v05v","Type":"NodeParagraph","Properties":{"id":"20240226160623-hk5v05v","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 通过 pagePool 回收用于指向这部分 page 对应的字节数组"}]}]},{"ID":"20240226160623-dzf0ycl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-dzf0ycl","updated":"20240226160623"},"Children":[{"ID":"20240226160623-rp8001v","Type":"NodeParagraph","Properties":{"id":"20240226160623-rp8001v","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 由于更新了事务进度，meta page 也需要溢写落盘"}]}]},{"ID":"20240226160623-joqfsbx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-joqfsbx","updated":"20240226160623"},"Children":[{"ID":"20240226160623-drw8huc","Type":"NodeParagraph","Properties":{"id":"20240226160623-drw8huc","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• 关闭读写事务"}]}]}]},{"ID":"20240226160623-4lodoyb","Type":"NodeParagraph","Properties":{"id":"20240226160623-4lodoyb","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"更多细节参见下方的源码注释："}]},{"ID":"20240226160623-y66w475","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-y66w475","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func (tx *Tx) Commit() error {\n    // ...\n    \n    // 数据溢写磁盘前，需要调整一轮 b+ 树，保证其平衡性\n    // rebalance 是为了避免因为 delete 操作，导致某些节点 kv 对数量太少，不满足 b+ 树平衡性要求\n    tx.root.rebalance()\n    // ...\n \n    // spill 是为了避免因为 put 操作，导致某些节点 kv 对数量太多，不满足 b+ 树平衡性要求\n    if err := tx.root.spill(); err != nil {\n        tx.rollback()\n        return err\n    }\n    \n    \n    // 事务更新到的脏数据溢写落盘\n    if err := tx.write(); err != nil {\n        tx.rollback()\n        return err\n    }\n\n\n    // ...\n\n\n    // meta page 溢写落盘\n    if err := tx.writeMeta(); err != nil {\n        tx.rollback()\n        return err\n    }\n    // ...\n\n\n    // 关闭事务\n    tx.close()\n    // ...\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-zwoiwyy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240226160623-zwoiwyy","updated":"20240226160624"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// 事务脏页溢写落盘\nfunc (tx *Tx) write() error {\n    // 事务缓存的脏页\n    pages := make(pages, 0, len(tx.pages))\n    for _, p := range tx.pages {\n        pages = append(pages, p)\n    }\n    // 清空缓存\n    tx.pages = make(map[pgid]*page)\n    // 对脏页进行排序\n    sort.Sort(pages)\n\n\n    // 按照顺序，将脏页溢写落盘\n    for _, p := range pages {\n        // page 总大小，包含 overflow 不分\n        rem := (uint64(p.overflow) + 1) * uint64(tx.db.pageSize)\n        // page 的 offset，可以根据 page id 推算得到\n        offset := int64(p.id) * int64(tx.db.pageSize)\n        var written uintptr\n\n\n        // Write out page in \"max allocation\" sized chunks.\n        for {\n            sz := rem\n            if sz \u003e maxAllocSize-1 {\n                sz = maxAllocSize - 1\n            }\n            buf := unsafeByteSlice(unsafe.Pointer(p), written, 0, int(sz))\n            // 将 page 溢写到文件对应 offset 的位置\n            if _, err := tx.db.ops.writeAt(buf, offset); err != nil {\n                return err\n            }\n\n\n            rem -= sz\n            // 一次性写完了\n            if rem == 0 {\n                break\n            }\n\n\n            // 如果没有一次性写完，下一轮接着写\n            offset += int64(sz)\n            written += uintptr(sz)\n        }\n    }\n\n\n    // fdatasync 操作，确保数据溢写落盘完成\n    if !tx.db.NoSync || IgnoreNoSync {\n        if err := fdatasync(tx.db); err != nil {\n            return err\n        }\n    }\n\n\n    // 释放这部分已落盘 page，倘若其不存在 overflow，说明是标准规格的字节数组，则清空内容，然后添加到对象池中进行复用\n    for _, p := range pages {\n        // Ignore page sizes over 1 page.\n        // These are allocated using make() instead of the page pool.\n        if int(p.overflow) != 0 {\n            continue\n        }\n\n\n        buf := unsafeByteSlice(unsafe.Pointer(p), 0, 0, tx.db.pageSize)\n\n\n        // See https://go.googlesource.com/go/+/f03c9202c43e0abb130669852082117ca50aa9b1\n        for i := range buf {\n            buf[i] = 0\n        }\n        tx.db.pagePool.Put(buf) //nolint:staticcheck\n    }\n\n\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240226160623-m2cmj32","Type":"NodeParagraph","Properties":{"id":"20240226160623-m2cmj32","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":" 至此，本篇结束."}]},{"ID":"20240226160623-7hu860k","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240226160623-7hu860k","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"4 展望"}]},{"ID":"20240226160623-qbqs49e","Type":"NodeParagraph","Properties":{"id":"20240226160623-qbqs49e","updated":"20240226160624"},"Children":[{"Type":"NodeText","Data":"本文作为 etcd 存储引擎系列的开篇，带着大家一起以一个相关宏观的视角总览了 boltdb 的架构设计与核心概念. 本文内容相对停滞于浅层，针对几个核心方向的挖深力度有所不足，主要通过后续几个篇章持续发力展开，在此做个展望："}]},{"ID":"20240226160623-buwzqpv","Type":"NodeList","ListData":{},"Properties":{"id":"20240226160623-buwzqpv","updated":"20240226160624"},"Children":[{"ID":"20240226160623-h183o1a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-h183o1a","updated":"20240226160623"},"Children":[{"ID":"20240226160623-jnqj1li","Type":"NodeParagraph","Properties":{"id":"20240226160623-jnqj1li","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"etcd存储引擎之主干框架（本篇）：偏宏观视角下介绍 boltdb 的定位、架构、特性，通过几个核心流程浅探 boltdb 实现源码"}]}]},{"ID":"20240226160623-lexu3sb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-lexu3sb","updated":"20240226160623"},"Children":[{"ID":"20240226160623-s6yyq51","Type":"NodeParagraph","Properties":{"id":"20240226160623-s6yyq51","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• etcd存储引擎之存储设计（待填坑）：介绍 boltdb 存储模型、机制的设计实现，包含磁盘、内存两部分"}]}]},{"ID":"20240226160623-f4j0n0y","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-f4j0n0y","updated":"20240226160623"},"Children":[{"ID":"20240226160623-wh8px02","Type":"NodeParagraph","Properties":{"id":"20240226160623-wh8px02","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• etcd存储引擎之b+树实现（待填坑）：介绍 b+ 树理论模型及 boltdb 实现案例，包括模型定义及 crud 流程梳理"}]}]},{"ID":"20240226160623-63yjwg6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240226160623-63yjwg6","updated":"20240226160623"},"Children":[{"ID":"20240226160623-za38v3i","Type":"NodeParagraph","Properties":{"id":"20240226160623-za38v3i","updated":"20240226160623"},"Children":[{"Type":"NodeText","Data":"• etcd存储引擎之事务实现（待填坑）：介绍 boltdb 事务的执行模式及实现原理"}]}]}]}]}