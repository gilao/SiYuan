{"ID":"20231227100814-dzn1jdy","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f5a8","id":"20231227100814-dzn1jdy","tags":"Go-依赖注入,Go-wire,需要仔细看","title":"在Golang中玩转依赖注入-wire篇","updated":"20240102113050"},"Children":[{"ID":"20231227101135-w7qtqeb","Type":"NodeParagraph","Properties":{"id":"20231227101135-w7qtqeb","updated":"20231227101154"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"什么是依赖注入"},{"Type":"NodeText","Data":"？"},{"Type":"NodeTextMark","TextMarkType":"u","TextMarkTextContent":"有时候一个结构体非常复杂，包含了非常多各种类型的属性，这些属性又包含了更多的属性，当我们创建这样一个结构体时需要编写大量的代码。"},{"Type":"NodeText","Data":"面向接口编程可以让我们的代码避免耦合更具扩展性，但统一更换接口实现时需要大范围的修改代码。"}]},{"ID":"20231227101135-nd2fi3w","Type":"NodeParagraph","Properties":{"id":"20231227101135-nd2fi3w","updated":"20231227101212"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"依赖注入帮助我们解决类似的问题，依赖注入框架能够自动解析依赖关系，帮助我们自动构建结构体实例。依赖注入可以对接口注入实例，让整个代码系统不用关注具体的接口实现。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231227101135-t99xzko","Type":"NodeParagraph","Properties":{"id":"20231227101135-t99xzko","updated":"20231227101135"},"Children":[{"Type":"NodeText","Data":"由于Go语言静态的特性，依赖注入在Go中应用并不广泛，主要有两种实现方式：代码生成和反射。"}]},{"ID":"20231227101135-fh577vn","Type":"NodeParagraph","Properties":{"id":"20231227101135-fh577vn","updated":"20231227101135"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[1]"},{"Type":"NodeText","Data":"是 Google 开源的一个依赖注入工具，它使用代码生成的方式实现。我们只需要在一个特殊的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go"},{"Type":"NodeText","Data":"​文件中告诉"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​类型之间的依赖关系，它会自动帮我们生成代码，帮助我们创建指定类型的对象，并组装它的依赖。"}]},{"ID":"20231227101454-r8uqr4o","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231227101454-r8uqr4o","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"安装"}]},{"ID":"20231227101454-y5si67v","Type":"NodeParagraph","Properties":{"id":"20231227101454-y5si67v","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如上所述，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​利用代码生成来实现依赖注入，所以我们需要安装"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​命令到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PATH"},{"Type":"NodeText","Data":"​中"}]},{"ID":"20231227101454-f7ybkmj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-f7ybkmj","updated":"20231227101621"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2g="},{"Type":"NodeCodeBlockCode","Data":"$ go install github.com/google/wire/cmd/wire@latest\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-zy93oyq","Type":"NodeParagraph","Properties":{"id":"20231227101454-zy93oyq","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"执行"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire -h"},{"Type":"NodeText","Data":"​ 有如下显示说明安装成功"}]},{"ID":"20231227101454-lzc8u1m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-lzc8u1m","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"$ wire -h\nUsage: wire \u003cflags\u003e \u003csubcommand\u003e \u003csubcommand args\u003e\n\nSubcommands:\n check            print any Wire errors found\n commands         list all command names\n diff             output a diff between existing wire_gen.go files and what gen would generate\n flags            describe all known top-level flags\n gen              generate the wire_gen.go file for each package\n help             describe subcommands and their syntax\n show             describe all top-level provider sets\n\n\nUse \"wire flags\" for a list of top-level flags\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-2oufany","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231227101454-2oufany","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"快速入门"}]},{"ID":"20231227101454-w0etez0","Type":"NodeParagraph","Properties":{"id":"20231227101454-w0etez0","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"设计一个程序，其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Event"},{"Type":"NodeText","Data":"​依赖"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​依赖"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Message"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101454-mtplsjt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-mtplsjt","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"type Message string\n\nfunc NewMessage() Message {\n return Message(\"Hi there!\")\n}\n\ntype Greeter struct {\n Message Message\n}\n\nfunc NewGreeter(m Message) Greeter {\n return Greeter{Message: m}\n}\n\nfunc (g Greeter) Greet() Message {\n return g.Message\n}\n\ntype Event struct {\n Greeter Greeter // \u003c- adding a Greeter field\n}\n\nfunc NewEvent(g Greeter) Event {\n return Event{Greeter: g}\n}\n\nfunc (e Event) Start() {\n msg := e.Greeter.Greet()\n fmt.Println(msg)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-mmvmuel","Type":"NodeParagraph","Properties":{"id":"20231227101454-mmvmuel","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/mmbiz_png/kWF4acROZUDnLq2geic6waiaSibBlUmkdtTASkvlJK3ADH18sp5naEUzB8H3bp4IBqV5cApkTKXoXaafoQBYCND0A/640?wx_fmt=png\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101454-lkt761d","Type":"NodeParagraph","Properties":{"id":"20231227101454-lkt761d","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如果运行"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Event"},{"Type":"NodeText","Data":"​需要逐个构建依赖，代码如下"}]},{"ID":"20231227101454-vw9mqk9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-vw9mqk9","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    message := NewMessage()\n    greeter := NewGreeter(message)\n    event := NewEvent(greeter)\n\n    event.Start()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-l1xtfk5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-l1xtfk5","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"两个概念"}]},{"ID":"20231227101454-0f14o6s","Type":"NodeParagraph","Properties":{"id":"20231227101454-0f14o6s","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"正式开始前需要先了解一下 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​ 当中的两个概念："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101454-zhohagw","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20231227101454-zhohagw","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"Provider"}]},{"ID":"20231227101454-bbvbhkq","Type":"NodeParagraph","Properties":{"id":"20231227101454-bbvbhkq","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Provider"},{"Type":"NodeText","Data":"​ 你可以把它理解成工厂函数，这个函数的入参是依赖的属性，返回值为新一个新的类型实例"}]},{"ID":"20231227101454-8tqoh2l","Type":"NodeParagraph","Properties":{"id":"20231227101454-8tqoh2l","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如下所示都是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​ 函数，在实际使用的时候，往往是一些简单的工厂函数，这个函数不会太复杂。"}]},{"ID":"20231227101454-zte91dt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-zte91dt","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func NewMessage() Message {\n return Message(\"Hi there!\")\n}\n\nfunc NewGreeter(m Message) Greeter {\n return Greeter{Message: m}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-prqrx4p","Type":"NodeParagraph","Properties":{"id":"20231227101454-prqrx4p","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"不过需要注意的是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在 wire 中不能存在两个 provider 返回相同的组件类型"},{"Type":"NodeText","Data":"。即如下两个函数不能同时存在"}]},{"ID":"20231227101454-a58l425","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-a58l425","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func NewMessage1() Message {\n return Message(\"Hi there!\")\n}\n\nfunc NewMessage2() Message {\n return Message(\"Hi there!\")\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-hgcb3fu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20231227101454-hgcb3fu","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"Injector"}]},{"ID":"20231227101454-a7yaabq","Type":"NodeParagraph","Properties":{"id":"20231227101454-a7yaabq","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"我们常常在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.go"},{"Type":"NodeText","Data":"​ 文件中定义 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​ ，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​也是一个普通函数，它用来声明组件之间的依赖关系"}]},{"ID":"20231227101454-lc1xaqp","Type":"NodeParagraph","Properties":{"id":"20231227101454-lc1xaqp","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如下代码，我们把"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Event"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Message"},{"Type":"NodeText","Data":"​ 的工厂函数("},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​)一股脑塞入"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Build()"},{"Type":"NodeText","Data":"​中，代表着构建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Event"},{"Type":"NodeText","Data":"​依赖"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Message"},{"Type":"NodeText","Data":"​。我们不必关心"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Message"},{"Type":"NodeText","Data":"​之间的依赖关系，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​会帮我们处理"}]},{"ID":"20231227101454-ikti5w0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-ikti5w0","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// wire.go\nfunc InitializeEvent() Event {\n    wire.Build(NewEvent, NewGreeter, NewMessage)\n    return Event{}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-64t3d62","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-64t3d62","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"使用wire生成代码"}]},{"ID":"20231227101454-byz0q9y","Type":"NodeParagraph","Properties":{"id":"20231227101454-byz0q9y","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"当准备好"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​之后，通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​ 命令可以自动生成一个完整的函数。如果 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.go"},{"Type":"NodeText","Data":"​ 不再当前路径下，也可以指定包名"}]},{"ID":"20231227101454-l5b3ch4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-l5b3ch4","updated":"20240102113044"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"# 等价 wire ./internal \n$ wire gen ./internal\nwire: github.com/liangwt/note/golang/demo/wire/internal: wrote /golang/demo/wire/internal/wire_gen.go\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-qh04h8l","Type":"NodeParagraph","Properties":{"id":"20231227101454-qh04h8l","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"在执行完"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​命令之后就会生成"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire_gen.go"},{"Type":"NodeText","Data":"​，它的内容就是构建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Event"},{"Type":"NodeText","Data":"​。我们需要连同"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire_gen.go"},{"Type":"NodeText","Data":"​一起提交到版本控制系统里"}]},{"ID":"20231227101454-gt7nmon","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-gt7nmon","updated":"20240102113050"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Code generated by Wire. DO NOT EDIT.\n\n//go:generate go run github.com/google/wire/cmd/wire\n//go:build !wireinject\n// +build !wireinject\n\npackage internal\n\n// Injectors from wire.go:\n\nfunc InitializeEvent() Event {\n message := NewMessage()\n greeter := NewGreeter(message)\n event := NewEvent(greeter)\n return event\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-veu4gdp","Type":"NodeParagraph","Properties":{"id":"20231227101454-veu4gdp","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"此时我们就可以直接在main里这样用，省去逐个构建依赖的麻烦"}]},{"ID":"20231227101454-lzpbab6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-lzpbab6","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main() {\n event := internal.InitializeEvent()\n event.Start()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-l13odul","Type":"NodeParagraph","Properties":{"id":"20231227101454-l13odul","updated":"20231227101454"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"小技巧"}]},{"ID":"20231227101454-fvft186","Type":"NodeParagraph","Properties":{"id":"20231227101454-fvft186","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"可以在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.go"},{"Type":"NodeText","Data":"​第一行加入 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"//+build wireinject"},{"Type":"NodeText","Data":"​ （与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"//go:build wireinject"},{"Type":"NodeText","Data":"​等效）注释，确保了这个文件在我们正常编译的时候不会被引用"}]},{"ID":"20231227101454-mqufc31","Type":"NodeParagraph","Properties":{"id":"20231227101454-mqufc31","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire ."},{"Type":"NodeText","Data":"​ 生成的文件 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire_gen.go"},{"Type":"NodeText","Data":"​ 会包含 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"//+build !wireinject"},{"Type":"NodeText","Data":"​ 注释，正常编译的时候，不指定 tag 的情况下会引用这个文件"}]},{"ID":"20231227101454-x1gl44u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-x1gl44u","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"//go:build wireinject\n// +build wireinject\n\n// wire.go\npackage internal\n\nimport \"github.com/google/wire\"\n\nfunc InitializeEvent() Event {\n wire.Build(NewEvent, NewGreeter, NewMessage)\n return Event{}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-g4m83oi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231227101454-g4m83oi","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"进阶用法"}]},{"ID":"20231227101454-4xjkdes","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-4xjkdes","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"返回错误"}]},{"ID":"20231227101454-pqgtpkn","Type":"NodeParagraph","Properties":{"id":"20231227101454-pqgtpkn","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"在Go中如果遇到错误，我们会在最后一个返回值返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"error"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​同样也支持返回错误的情况，只需要在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​的函数签名中加上"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"error"},{"Type":"NodeText","Data":"​返回值即可"}]},{"ID":"20231227101454-xt2gcpm","Type":"NodeParagraph","Properties":{"id":"20231227101454-xt2gcpm","updated":"20231227101454"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"调整"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的签名"}]},{"ID":"20231227101454-613bmm5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-613bmm5","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"type Event struct {\n Greeter Greeter\n}\n\n//func NewEvent(g Greeter) Event {\n// return Event{Greeter: g}\n//}\nfunc NewEvent(g Greeter) (Event, error) {\n if time.Now().Unix()%2 == 0 {\n  return Event{}, errors.New(\"could not create event: event greeter is grumpy\")\n }\n\n return Event{Greeter: g}, nil\n}\n\nfunc (e Event) Start() {\n msg := e.Greeter.Greet()\n fmt.Println(msg)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-6aqxq5r","Type":"NodeParagraph","Properties":{"id":"20231227101454-6aqxq5r","updated":"20231227101454"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"调整"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的签名"}]},{"ID":"20231227101454-10q7t48","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-10q7t48","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// wire.go\nfunc InitializeEvent() (Event, error) {\n panic(wire.Build(NewEvent, NewGreeter, NewMessage))\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-owxdl5q","Type":"NodeParagraph","Properties":{"id":"20231227101454-owxdl5q","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"生成的代码如下所示，可以发现会像我们自己写代码一样判断一下 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if err"},{"Type":"NodeText","Data":"​ 然后返回"}]},{"ID":"20231227101454-1r5vnls","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-1r5vnls","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Code generated by Wire. DO NOT EDIT.\n\n//go:generate go run github.com/google/wire/cmd/wire\n//go:build !wireinject\n// +build !wireinject\n\npackage main\n\n// Injectors from wire.go:\n\nfunc InitializeEvent() (Event, error) {\n message := NewMessage()\n greeter := NewGreeter(message)\n event, err := NewEvent(greeter)\n if err != nil {\n  return Event{}, err\n }\n return event, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-zgn2zso","Type":"NodeParagraph","Properties":{"id":"20231227101454-zgn2zso","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"main中的调用"}]},{"ID":"20231227101454-xogp8h3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-xogp8h3","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    e, err := InitializeEvent()\n    if err != nil {\n        fmt.Printf(\"failed to create event: %s\\n\", err)\n        os.Exit(2)\n    }\n    e.Start()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-4p3kprl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-4p3kprl","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"传入参数"}]},{"ID":"20231227101454-1lt6j1i","Type":"NodeParagraph","Properties":{"id":"20231227101454-1lt6j1i","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如果要构建的目标组件需要外部的输入时，可以在定义"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​时同步加上输入"}]},{"ID":"20231227101454-qs7hctm","Type":"NodeParagraph","Properties":{"id":"20231227101454-qs7hctm","updated":"20231227101454"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"调整"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的签名"}]},{"ID":"20231227101454-30t7a7i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-30t7a7i","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// provider.go\ntype Message string\n\nfunc NewMessage(phrase string) Message {\n return Message(phrase)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-s72vfsa","Type":"NodeParagraph","Properties":{"id":"20231227101454-s72vfsa","updated":"20231227101454"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"调整"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的签名"}]},{"ID":"20231227101454-mxvep95","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-mxvep95","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// wire.go\nfunc InitializeEvent(phrase string) (Event, error) {\n wire.Build(NewEvent, NewGreeter, NewMessage)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-g3b5u49","Type":"NodeParagraph","Properties":{"id":"20231227101454-g3b5u49","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"不展示生成的代码了，main中的调用"}]},{"ID":"20231227101454-pdpv5sz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-pdpv5sz","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main() {\n event, err := InitializeEvent(\"Hi there!\")\n if err != nil {\n  fmt.Printf(\"failed to create event: %s\\n\", err)\n  os.Exit(2)\n }\n\n event.Start()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-p95kse6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-p95kse6","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"ProviderSet"}]},{"ID":"20231227101454-mdfvdxt","Type":"NodeParagraph","Properties":{"id":"20231227101454-mdfvdxt","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"有时候可能多个类型有相同的依赖，我们每次都将相同的构造器传给"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Build()"},{"Type":"NodeText","Data":"​不仅繁琐，而且不易维护，一个依赖修改了，所有传入"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Build()"},{"Type":"NodeText","Data":"​的地方都要修改。为此，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​提供了一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ProviderSet"},{"Type":"NodeText","Data":"​（构造器集合），可以将多个构造器打包成一个集合，后续只需要使用这个集合即可。"}]},{"ID":"20231227101454-en4fcim","Type":"NodeParagraph","Properties":{"id":"20231227101454-en4fcim","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如下，后续再调整"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewGreeter"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewMessage"},{"Type":"NodeText","Data":"​，就可以统一改了"}]},{"ID":"20231227101454-rp8sbih","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-rp8sbih","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// wire.go\n\nvar wireSet = wire.NewSet(NewGreeter, NewMessage)\n\nfunc InitializeEvent(phrase string) (Event, error) {\n wire.Build(wireSet, NewEvent)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-c3zw2l0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-c3zw2l0","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"结构构造器"}]},{"ID":"20231227101454-pstfltt","Type":"NodeParagraph","Properties":{"id":"20231227101454-pstfltt","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"对于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​，前文使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewGreeter"},{"Type":"NodeText","Data":"​作为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101454-519kqcw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-519kqcw","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"type Greeter struct {\n Message Message\n}\n\nfunc NewGreeter(m Message) Greeter {\n return Greeter{Message: m}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-7ccyhgo","Type":"NodeParagraph","Properties":{"id":"20231227101454-7ccyhgo","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如果不显式实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewGreeter"},{"Type":"NodeText","Data":"​，可以直接使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​提供的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"结构构造器"},{"Type":"NodeText","Data":"（Struct Provider）。结构构造器创建某个类型的结构，然后用参数或调用其它构造器填充它的字段"}]},{"ID":"20231227101454-gdmng6f","Type":"NodeParagraph","Properties":{"id":"20231227101454-gdmng6f","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"结构构造器使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Struct"},{"Type":"NodeText","Data":"​函数，第一个参数固定为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new(结构名)"},{"Type":"NodeText","Data":"​，后面可接任意多个参数，表示需要为该结构的哪些字段注入值"}]},{"ID":"20231227101454-02ywmkd","Type":"NodeParagraph","Properties":{"id":"20231227101454-02ywmkd","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"我们也可以使用通配符"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"*"},{"Type":"NodeText","Data":"​表示注入所有字段"}]},{"ID":"20231227101454-833uolm","Type":"NodeParagraph","Properties":{"id":"20231227101454-833uolm","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"如下的例子代表"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​需要注入"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Message"},{"Type":"NodeText","Data":"​字段，不用再单独实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewGreeter"},{"Type":"NodeText","Data":"​了"}]},{"ID":"20231227101454-bxkmgwt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-bxkmgwt","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"Greeter\nvar wireSet = wire.NewSet(NewMessage, wire.Struct(new(Greeter), \"Message\"))\n\nfunc InitializeEvent(phrase string) (Event, error) {\n wire.Build(wireSet, NewEvent)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-79z7v9j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-79z7v9j","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"结构字段作为构造器"}]},{"ID":"20231227101454-wgvarnm","Type":"NodeParagraph","Properties":{"id":"20231227101454-wgvarnm","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"有时候我们编写一个构造器，只是简单的返回某个结构的一个字段，这时可以使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.FieldsOf"},{"Type":"NodeText","Data":"​简化操作。"}]},{"ID":"20231227101454-95lmzh3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-95lmzh3","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"type Foo struct {\n    S string\n    N int\n    F float64\n}\n\nfunc getS(foo Foo) string {\n    // Bad! Use wire.FieldsOf instead.\n    return foo.S\n}\n\nfunc provideFoo() Foo {\n    return Foo{ S: \"Hello, World!\", N: 1, F: 3.14 }\n}\n\nfunc injectedMessage() string {\n    wire.Build(\n        provideFoo,\n        getS)\n    return \"\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-t4azsaf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-t4azsaf","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func injectedMessage() string {\n    wire.Build(\n        provideFoo,\n        wire.FieldsOf(new(Foo), \"S\"))\n    return \"\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-1s26ml6","Type":"NodeParagraph","Properties":{"id":"20231227101454-1s26ml6","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"同样的，第一个参数为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"new(结构名)"},{"Type":"NodeText","Data":"​，后面跟多个参数表示将哪些字段作为构造器，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"*"},{"Type":"NodeText","Data":"​表示全部。"}]},{"ID":"20231227101454-hp6tz7p","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-hp6tz7p","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"绑定值"}]},{"ID":"20231227101454-daq7wsn","Type":"NodeParagraph","Properties":{"id":"20231227101454-daq7wsn","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"有时候，我们需要为某个类型绑定一个值，而不想依赖构造器每次都创建一个新的值。有些类型天生就是单例，例如配置，数据库对象（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sql.DB"},{"Type":"NodeText","Data":"​）。这时我们可以使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Value"},{"Type":"NodeText","Data":"​绑定值，使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.InterfaceValue"},{"Type":"NodeText","Data":"​绑定接口"}]},{"ID":"20231227101454-28zeeeq","Type":"NodeParagraph","Properties":{"id":"20231227101454-28zeeeq","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"修改一下 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Greeter"},{"Type":"NodeText","Data":"​ 使他依赖一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":"​然后为它直接绑定 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"a=10"},{"Type":"NodeText","Data":"​ 、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"io.Reader = os.Stdin"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101454-tt3r9tf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-tt3r9tf","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// main.go\nvar singletonMessage = NewMessage(\"Hello, world!\")\n\ntype Message string\n\nfunc NewMessage(phrase string) Message {\n return Message(phrase)\n}\n\ntype Greeter struct {\n a int\n r io.Reader\n\n Message Message\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-l34nhit","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-l34nhit","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var wireSet = wire.NewSet(\n wire.Struct(new(Greeter), \"*\"),\n wire.Value(10),\n wire.InterfaceValue(new(io.Reader), os.Stdin),\n wire.Value(singletonMessage),\n)\n\nfunc InitializeEvent(phrase string) (Event, error) {\n panic(wire.Build(wireSet, NewEvent))\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-ypapv5w","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231227101454-ypapv5w","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"绑定接口"}]},{"ID":"20231227101454-w3558ce","Type":"NodeParagraph","Properties":{"id":"20231227101454-w3558ce","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Bind"},{"Type":"NodeText","Data":"​ 将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Struct"},{"Type":"NodeText","Data":"​ 和接口进行绑定，表示这个结构体实现了这个接口，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Bind"},{"Type":"NodeText","Data":"​ 的使用方法就是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Bind(new(接口), new(实现))"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101454-k81p77w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-k81p77w","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func NewGreeter(m Message, phrase string) Greeter {\n return Greeter{Message: m}\n}\n\nfunc (g Greeter) Greet() Message {\n return g.Message\n}\n\ntype IGreeter interface{\n Greet() Message\n}\n\ntype Event struct {\n Greeter IGreeter\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-ksr6wrq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227101454-ksr6wrq","updated":"20231227101454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var wireSet = wire.NewSet(\n wire.Struct(new(Greeter), \"*\"),\n wire.Value(10),\n wire.InterfaceValue(new(io.Reader), os.Stdin),\n wire.Value(singletonMessage),\n)\n\nfunc InitializeEvent(phrase string) (Event, error) {\n panic(wire.Build(wireSet, NewEvent, wire.Bind(new(IGreeter), new(*Greeter))))\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227101454-hmsl4vo","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231227101454-hmsl4vo","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231227101454-p2kwqa5","Type":"NodeParagraph","Properties":{"id":"20231227101454-p2kwqa5","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"本文介绍依赖注入框架"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​的基础用法："}]},{"ID":"20231227101454-nz5bh4w","Type":"NodeList","ListData":{},"Properties":{"id":"20231227101454-nz5bh4w","updated":"20231227101454"},"Children":[{"ID":"20231227101454-se1n6bm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231227101454-se1n6bm","updated":"20231227101454"},"Children":[{"ID":"20231227101454-6tj3bmt","Type":"NodeParagraph","Properties":{"id":"20231227101454-6tj3bmt","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"实现各"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"struct"},{"Type":"NodeText","Data":"​的工厂函数，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​称之为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"provider"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20231227101454-4zri1wv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231227101454-4zri1wv","updated":"20231227101454"},"Children":[{"ID":"20231227101454-ed8cunq","Type":"NodeParagraph","Properties":{"id":"20231227101454-ed8cunq","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.go"},{"Type":"NodeText","Data":"​中利用函数签名和函数体中调用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire.Build"},{"Type":"NodeText","Data":"​描述一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"struct"},{"Type":"NodeText","Data":"​的所有依赖，此函数被称为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20231227101454-fxzrjlw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231227101454-fxzrjlw","updated":"20231227101454"},"Children":[{"ID":"20231227101454-a7dwr2m","Type":"NodeParagraph","Properties":{"id":"20231227101454-a7dwr2m","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"执行"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire"},{"Type":"NodeText","Data":"​命令，会生成"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire_gen.go"},{"Type":"NodeText","Data":"​ 其中包含和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"injector"},{"Type":"NodeText","Data":"​签名相同的函数，函数的内容为构建的相关依赖并组合"}]}]},{"ID":"20231227101454-4amd8wq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231227101454-4amd8wq","updated":"20231227101454"},"Children":[{"ID":"20231227101454-toss08p","Type":"NodeParagraph","Properties":{"id":"20231227101454-toss08p","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"wire_gen.go"},{"Type":"NodeText","Data":"​中的函数创建我们的实例"}]}]}]},{"ID":"20231227101454-edh71a1","Type":"NodeParagraph","Properties":{"id":"20231227101454-edh71a1","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"除了基础用法之外，还有很多高级用法，例如绑定接口、绑定值，来实现面向接口编程和单例模式，此部分可以参考官方文档"}]},{"ID":"20231227101454-3hai4vd","Type":"NodeThematicBreak","Properties":{"id":"20231227101454-3hai4vd","updated":"20231227101454"}},{"ID":"20231227101454-avytheo","Type":"NodeParagraph","Properties":{"id":"20231227101454-avytheo","updated":"20231227101454"},"Children":[{"Type":"NodeText","Data":"关注我，下篇为大家介绍Go中基于反射实现的依赖注入代表作"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dig"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231227101405-zkw8ms0","Type":"NodeParagraph","Properties":{"id":"20231227101405-zkw8ms0","updated":"20231227101405"}}]}