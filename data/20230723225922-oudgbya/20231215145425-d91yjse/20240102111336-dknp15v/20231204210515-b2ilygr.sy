{"ID":"20231204210515-b2ilygr","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f355","id":"20231204210515-b2ilygr","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231204210515-b2ilygr\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231204210558-wnyh02c\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231208032825-dio5x9c\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231204210616-vz7u3nz\u0026quot;,\u0026quot;focusStart\u0026quot;:127,\u0026quot;focusEnd\u0026quot;:127\u0026#125;","tags":"Go-Handler,公众号-凉凉的知识库,Go-http,Go-http-server,设计模式-组合模式","title":"深入理解Go标准库-http server 启动","updated":"20231208032825"},"Children":[{"ID":"20231204210558-wnyh02c","Type":"NodeParagraph","Properties":{"id":"20231204210558-wnyh02c","updated":"20231204210616"},"Children":[{"Type":"NodeText","Data":"如何用最少的代码创建一个HTTP server？"}]},{"ID":"20231204210616-vz7u3nz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231204210616-vz7u3nz","updated":"20231204211031"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"net/http\"\n\nfunc main() {\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231204210515-jpl4a4e","Type":"NodeParagraph","Properties":{"id":"20231204210515-jpl4a4e","updated":"20231204211124"},"Children":[{"Type":"NodeText","Data":"点开 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ListenAndServer"},{"Type":"NodeText","Data":"​ 可以看到函数只是创建了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Server"},{"Type":"NodeText","Data":"​ 类型并调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"server.ListenAndServer()"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231204211125-0br2shz","Type":"NodeParagraph","Properties":{"id":"20231204211125-0br2shz","updated":"20231204211131"},"Children":[{"Type":"NodeText","Data":"所以下面的和上面的代码没有区别"}]},{"ID":"20231204211132-g3c7ws0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231204211132-g3c7ws0","updated":"20231204211242"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"net/http\"\n\nfunc main() {\n\tserver := \u0026http.Server{Addr: \":8080\"}\n\terr := server.ListenAndServe()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231204211250-2n0wmhp","Type":"NodeParagraph","Properties":{"id":"20231204211250-2n0wmhp","updated":"20231204211250"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ListenAndServe()"},{"Type":"NodeText","Data":"​如其名会干两件事"}]},{"ID":"20231204211250-q00x76c","Type":"NodeList","ListData":{},"Properties":{"id":"20231204211250-q00x76c","updated":"20231204211250"},"Children":[{"ID":"20231204211250-gja4h85","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231204211250-gja4h85","updated":"20231204211250"},"Children":[{"ID":"20231204211250-w1lz9s9","Type":"NodeParagraph","Properties":{"id":"20231204211250-w1lz9s9","updated":"20231204211250"},"Children":[{"Type":"NodeText","Data":"监听一个端口，即"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Listen"},{"Type":"NodeText","Data":"​的过程"}]}]},{"ID":"20231204211250-0rak7hp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231204211250-0rak7hp","updated":"20231204211250"},"Children":[{"ID":"20231204211250-antiy01","Type":"NodeParagraph","Properties":{"id":"20231204211250-antiy01","updated":"20231204211250"},"Children":[{"Type":"NodeText","Data":"处理进入端口的连接，即"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Serve"},{"Type":"NodeText","Data":"​的过程"}]}]}]},{"ID":"20231204211250-9b3ewy0","Type":"NodeParagraph","Properties":{"id":"20231204211250-9b3ewy0","updated":"20231204211250"},"Children":[{"Type":"NodeText","Data":"所以下面的代码和上面的代码也没区别"}]},{"ID":"20231204211253-6vzqitj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231204211253-6vzqitj","updated":"20231204211311"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n \"net\"\n \"net/http\"\n)\n\nfunc main() {\n // 方式3\n ln, err := net.Listen(\"tcp\", \":8080\")\n if err != nil {\n  panic(err)\n }\n\n server := \u0026http.Server{}\n err = server.Serve(ln)\n if err != nil {\n  panic(err)\n }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231204211336-n1obgls","Type":"NodeParagraph","Properties":{"id":"20231204211336-n1obgls","updated":"20231204211336"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"4bb65525ef165890baa2c3783de5a87c"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/4bb65525ef165890baa2c3783de5a87c-20231204211336-g36e13s.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231204211337-54wkzn6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231204211337-54wkzn6","updated":"20231204211357"},"Children":[{"Type":"NodeText","Data":"路由？ no！ Handler！"}]},{"ID":"20231204211357-5n1v8ex","Type":"NodeParagraph","Properties":{"id":"20231204211357-5n1v8ex","updated":"20231204211403"},"Children":[{"Type":"NodeText","Data":"按上面的代码启动HTTP Server没有太大意义，因为我们还没有设定路由，所以无法正常响应请求"}]},{"ID":"20231204211404-ccir2bo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231204211404-ccir2bo","updated":"20231204211415"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"curl 127.0.0.1:8080\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231204211428-ovesu9f","Type":"NodeParagraph","Properties":{"id":"20231204211428-ovesu9f","updated":"20231204211429"},"Children":[{"Type":"NodeText","Data":"暂停思考一下，服务器返回404是因为没有设定路由么？no，no，no，你需要转变一下思维。服务器返回404不是因为我们没有设置"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"路由"},{"Type":"NodeText","Data":"，而是因为没有设置请求的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"处理程序"},{"Type":"NodeText","Data":"，这个处理程序在Go中叫作："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​！"}]},{"ID":"20231204211725-8xss5oq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231204211725-8xss5oq","updated":"20231204211726"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231204211612-2c4ayyo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231204211612-2c4ayyo","updated":"20231204211644"},"Children":[{"Type":"NodeText","Data":"怎么定义请求的处理程序"}]},{"ID":"20231204211650-7q47l97","Type":"NodeParagraph","Properties":{"id":"20231204211650-7q47l97","updated":"20231204211650"},"Children":[{"Type":"NodeText","Data":"由上可知，仅需要实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServeHTTP(ResponseWriter, *Request)"},{"Type":"NodeText","Data":"​接口即可"}]},{"ID":"20231204211650-1emossq","Type":"NodeParagraph","Properties":{"id":"20231204211650-1emossq","updated":"20231204211650"},"Children":[{"Type":"NodeText","Data":"注意，示例代码没有判断任何路由（PATH）"}]},{"ID":"20231204211651-6pn16vb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231204211651-6pn16vb","updated":"20231204211744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type handlerImp struct {\n}\n\nfunc (imp handlerImp) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tw.Write([]byte(\"Receive GET request\"))\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tw.Write([]byte(\"Receive POST request\"))\n\t\treturn\n\t}\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231204211745-crtvc8r","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231204211745-crtvc8r","updated":"20231204211801"},"Children":[{"Type":"NodeText","Data":"怎么设置请求的处理程序"}]},{"ID":"20231208015046-91efdg7","Type":"NodeParagraph","Properties":{"id":"20231208015046-91efdg7","updated":"20231208015046"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231208015046-mad9f8v.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208015049-05dea8w","Type":"NodeParagraph","Properties":{"id":"20231208015049-05dea8w","updated":"20231208015416"},"Children":[{"Type":"NodeText","Data":"三种方式本质上都是把自定义的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​ 赋值到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Server"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​属性中。"}]},{"ID":"20231208020650-5blkgwu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208020650-5blkgwu","updated":"20231208021324"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type handlerImp struct {\n}\n\nfunc (imp handlerImp) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tw.Write([]byte(\"Receiver GET request\"))\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tw.Write([]byte(\"Receiver POST request\"))\n\t\treturn\n\t}\n\treturn\n}\n\nfunc main() {\n\n\t// 方式一\n\t//err := http.ListenAndServe(\":8080\", handlerImp{})\n\t//if err != nil {\n\t//\tpanic(err)\n\t//}\n\n\t// 方式2\n\t//server := \u0026http.Server{Addr: \":8080\",Handler: handlerImp{}}\n\t//err := server.ListenAndServe()\n\t//if err != nil {\n\t//\tpanic(err)\n\t//}\n\n\t// 方式3\n\tIn, err := net.Listen(\"tcp\", \":8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tserver := \u0026http.Server{Handler: handlerImp{}}\n\terr = server.Serve(In)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208020654-re57q88","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208020654-re57q88","updated":"20231208020725"},"Children":[{"Type":"NodeText","Data":"设置请求的处理程序之后的效果"}]},{"ID":"20231208020727-6487tl1","Type":"NodeParagraph","Properties":{"id":"20231208020727-6487tl1","updated":"20231208021339"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp"},{"Type":"NodeText","Data":"​只针对Method做了不同的响应，没有对PATH做任何的判断，所以无论请求什么样的路径都能拿到一个预期的响应。"}]},{"ID":"20231208021326-08hdo14","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208021326-08hdo14","updated":"20231208021359"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw="},{"Type":"NodeCodeBlockCode","Data":"$ curl  -X POST 127.0.0.1:8080/foo\nReceive POST request%  \n\n$ curl  127.0.0.1:8080/foo/bar \nReceive GET request%  \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208021401-cwskyyy","Type":"NodeParagraph","Properties":{"id":"20231208021401-cwskyyy","updated":"20231208021407"},"Children":[{"Type":"NodeText","Data":"此时再体会一下这句话：我们设置的不是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"路由"},{"Type":"NodeText","Data":"，而是设置请求的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"处理程序"}]},{"ID":"20231208021407-bhmx5t3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231208021407-bhmx5t3","updated":"20231208021628"},"Children":[{"Type":"NodeText","Data":"再聊 Handler"}]},{"ID":"20231208021922-28537gm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208021922-28537gm","updated":"20231208022614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type handlerImp struct {\n}\n\nfunc (imp handlerImp) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.Method == \"GET\" {\n\t\tw.Write([]byte(\"Receiver GET request\"))\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\tw.Write([]byte(\"Receiver POST request\"))\n\t\treturn\n\t}\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208021951-i1f536a","Type":"NodeParagraph","Properties":{"id":"20231208021951-i1f536a","updated":"20231208021951"},"Children":[{"Type":"NodeText","Data":"如上所述，无论任何PATH，任何Method等，所有的请求都会被"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp.ServeHTTP"},{"Type":"NodeText","Data":"​处理。"}]},{"ID":"20231208021951-99b0y5l","Type":"NodeParagraph","Properties":{"id":"20231208021951-99b0y5l","updated":"20231208021951"},"Children":[{"Type":"NodeText","Data":"我们可以判断PATH、Method等，根据不同的请求特征执行不同的逻辑，并且全部在这一个函数中全部完成"}]},{"ID":"20231208021951-w1y5cek","Type":"NodeParagraph","Properties":{"id":"20231208021951-w1y5cek","updated":"20231208021951"},"Children":[{"Type":"NodeText","Data":"很明显，这违反了高内聚，低耦合的编程范式"}]},{"ID":"20231208021951-qf5iisa","Type":"NodeParagraph","Properties":{"id":"20231208021951-qf5iisa","updated":"20231208021951"},"Children":[{"Type":"NodeText","Data":"停下来思考下，如何编写一个高内聚，低耦合的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp.ServeHTTP"},{"Type":"NodeText","Data":"​，使之针对不同HTTP请求执行不同的逻辑呢"}]},{"ID":"20231208022002-mena3r4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208022002-mena3r4","updated":"20231208022610"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type handlerImp struct {\n}\n\nfunc (imp handlerImp) handleMethodGet(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive GET request\"))\n\treturn\n}\n\nfunc (imp handlerImp) handleMethodPost(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Recevice POST request\"))\n}\n\nfunc (imp handlerImp) handlePathFoo(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive path foo\"))\n\treturn\n}\n\nfunc (imp handlerImp) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif r.URL.Path == \"/foo\" {\n\t\timp.handlePathFoo(w, r)\n\t\treturn\n\t}\n\tif r.Method == \"GET\" {\n\t\timp.handleMethodGet(w, r)\n\t\treturn\n\t}\n\tif r.Method == \"POST\" {\n\t\timp.handleMethodPost(w, r)\n\t\treturn\n\t}\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208022318-dagh1ta","Type":"NodeParagraph","Properties":{"id":"20231208022318-dagh1ta","updated":"20231208022319"},"Children":[{"Type":"NodeText","Data":"如果你的答案和上面的代码类似，那么我对于这段代码的点评是："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不太高明"},{"Type":"NodeText","Data":"☹️"}]},{"ID":"20231208022320-jbhfzgh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208022320-jbhfzgh","updated":"20231208022415"},"Children":[{"Type":"NodeText","Data":"如何编写一个高内聚，低耦合的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServeHTTP"},{"Type":"NodeText","Data":"​, 针对不同HTTP请求执行不同的逻辑？"}]},{"ID":"20231208022416-kmbriz8","Type":"NodeParagraph","Properties":{"id":"20231208022416-kmbriz8","updated":"20231208022424"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不知道你有没有听过设计模式中，组合模式。没有了解可以去了解下，或者看下图"}]},{"ID":"20231208022442-db5mi1v","Type":"NodeParagraph","Properties":{"id":"20231208022442-db5mi1v","updated":"20231208022442"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"acd3604f0879ea4f96b826a514e86a69"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/acd3604f0879ea4f96b826a514e86a69-20231208022442-s4wrtl9.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208022505-4n9g0dy","Type":"NodeParagraph","Properties":{"id":"20231208022505-4n9g0dy","updated":"20231208022505"},"Children":[{"Type":"NodeText","Data":"经过组合模式重新设计的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp"},{"Type":"NodeText","Data":"​，已经不再包含具体的逻辑了，它先搜索有没有针对PATH处理的逻辑，再搜索有没有针对Method处理的逻辑，它专注于逻辑分派，它是组合模式中的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"容器"},{"Type":"NodeText","Data":"。"}]},{"ID":"20231208022519-2jux22o","Type":"NodeParagraph","Properties":{"id":"20231208022519-2jux22o","updated":"20231208022520"},"Children":[{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"容器（Container）：容器接收到请求后会将工作分配给自己的子项目， 处理中间结果， 然后将最终结果返回给客户端。"}]},{"ID":"20231208022521-kppybq0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208022521-kppybq0","updated":"20231208022603"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type handlerImp struct {\n\tpathHandlers   map[string]http.Handler\n\tmethodHandlers map[string]http.Handler\n}\n\nfunc NewHandlerImp() handlerImp {\n\treturn handlerImp{\n\t\tpathHandlers:   make(map[string]http.Handler),\n\t\tmethodHandlers: make(map[string]http.Handler),\n\t}\n}\n\nfunc (imp handlerImp) AddPathHandler(path string, h http.Handler) {\n\timp.pathHandlers[path] = h\n}\n\nfunc (imp handlerImp) AddMethodHandler(method string, h http.Handler) {\n\timp.methodHandlers[method] = h\n}\n\nfunc (imp handlerImp) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tif h, ok := imp.pathHandlers[r.URL.Path]; ok {\n\t\th.ServeHTTP(w, r)\n\t\treturn\n\t}\n\n\tif h, ok := imp.methodHandlers[r.Method]; ok {\n\t\th.ServeHTTP(w, r)\n\t\treturn\n\t}\n\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208022648-s6i2w5k","Type":"NodeParagraph","Properties":{"id":"20231208022648-s6i2w5k","updated":"20231208022648"},"Children":[{"Type":"NodeText","Data":"重新设计的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp"},{"Type":"NodeText","Data":"​不执行逻辑，实际的逻辑被分离到每一个叶子结点中，而每一个叶子结点也都实现了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServeHTTP"},{"Type":"NodeText","Data":"​函数，即"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​接口"}]},{"ID":"20231208030941-7vxcenc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208030941-7vxcenc","updated":"20231208031025"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type PathFoo struct {\n}\n\nfunc (m PathFoo) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive path foo\"))\n\treturn\n}\n\ntype MethodGet struct {\n}\n\nfunc (m MethodGet) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive GET request\"))\n\treturn\n}\n\ntype MethodPost struct {\n}\n\nfunc (m MethodPost) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive POST request\"))\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208031037-klyxfgb","Type":"NodeParagraph","Properties":{"id":"20231208031037-klyxfgb","updated":"20231208031037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"6b90bf4e2bf1fe1c450620c413f1f2c3"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/6b90bf4e2bf1fe1c450620c413f1f2c3-20231208031037-uraarkt.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208031038-b0s0ccz","Type":"NodeParagraph","Properties":{"id":"20231208031038-b0s0ccz","updated":"20231208031046"},"Children":[{"Type":"NodeText","Data":"再次强调，通过对组合模式的运用，我们把逻辑分派的功能聚合到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp"},{"Type":"NodeText","Data":"​，把具体的逻辑聚合到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PathFoo"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodGet"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MethodPost"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208031103-n0vsj6q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208031103-n0vsj6q","updated":"20231208031105"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n // 方式3\n ln, err := net.Listen(\"tcp\", \":8080\")\n if err != nil {\n  panic(err)\n }\n\n h := NewHandlerImp()\n h.AddMethodHandler(\"GET\", MethodGet{})\n h.AddMethodHandler(\"POST\", MethodPost{})\n h.AddPathHandler(\"/foo\", PathFoo{})\n\n server := \u0026http.Server{Handler: h}\n err = server.Serve(ln)\n if err != nil {\n  panic(err)\n }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208031112-cr84c4r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231208031112-cr84c4r","updated":"20231208031120"},"Children":[{"Type":"NodeText","Data":"一些 Handlers"}]},{"ID":"20231208031121-wr8rb0l","Type":"NodeParagraph","Properties":{"id":"20231208031121-wr8rb0l","updated":"20231208031126"},"Children":[{"Type":"NodeText","Data":"上面实现的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handlerImp"},{"Type":"NodeText","Data":"​利用组合设计模式，已经能针对Path和Method设定和处理不同的逻辑，但整体功能略显简单。有哪些可以供我们使用且功能强大的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handlers"},{"Type":"NodeText","Data":"​呢？"}]},{"ID":"20231208031249-5kvjflo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208031249-5kvjflo","updated":"20231208031257"},"Children":[{"Type":"NodeText","Data":"http.ServeMux"}]},{"ID":"20231208031257-ipi3gxa","Type":"NodeParagraph","Properties":{"id":"20231208031257-ipi3gxa","updated":"20231208031327"}},{"ID":"20231208031327-q6r540d","Type":"NodeParagraph","Properties":{"id":"20231208031327-q6r540d","updated":"20231208031327"},"Children":[{"Type":"NodeText","Data":"Go标准库中就提供了一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​实现叫作"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ServeMux"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208031327-ucoks90","Type":"NodeParagraph","Properties":{"id":"20231208031327-ucoks90","updated":"20231208031327"},"Children":[{"Type":"NodeText","Data":"⚠️ 当前（go1.21.*）版本仅支持匹配Path，但目前已经在讨论支持Method匹配和占位符了：net/http: add methods and path variables to ServeMux patterns #60227"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[1]"}]},{"ID":"20231208031327-wc85c57","Type":"NodeParagraph","Properties":{"id":"20231208031327-wc85c57","updated":"20231208031327"},"Children":[{"Type":"NodeText","Data":"使用的方式如下"}]},{"ID":"20231208031327-gvcx7xc","Type":"NodeParagraph","Properties":{"id":"20231208031327-gvcx7xc","updated":"20231208031327"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ServeMux"},{"Type":"NodeText","Data":"​提供两个函数用于注册不同Path的处理函数"}]},{"ID":"20231208031327-dztv4i7","Type":"NodeList","ListData":{},"Properties":{"id":"20231208031327-dztv4i7","updated":"20231208031327"},"Children":[{"ID":"20231208031327-n94t8h1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231208031327-n94t8h1","updated":"20231208031327"},"Children":[{"ID":"20231208031327-9zn2pk2","Type":"NodeParagraph","Properties":{"id":"20231208031327-9zn2pk2","updated":"20231208031327"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServeMux.Handle"},{"Type":"NodeText","Data":"​ 接收的是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​接口实现"}]}]},{"ID":"20231208031327-g3ro1yi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231208031327-g3ro1yi","updated":"20231208031327"},"Children":[{"ID":"20231208031327-73msibb","Type":"NodeParagraph","Properties":{"id":"20231208031327-73msibb","updated":"20231208031327"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServeMux.HandleFunc\u0026lt;span\u0026gt; \u0026lt;/span\u0026gt;"},{"Type":"NodeText","Data":"​接收的是匿名函数"}]}]}]},{"ID":"20231208031612-jgwe8eh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208031612-jgwe8eh","updated":"20231208031641"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type PathBar struct {\n}\n\nfunc (m PathBar) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive path bar\"))\n\treturn\n}\n\nfunc main() {\n\t// 方式3\n\tln, err := net.Listen(\"tcp\", \":8080\")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\tmx := http.NewServeMux()\n\tmx.Handle(\"/bar/\", PathBar{})\n\tmx.HandleFunc(\"/foo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Receive path foo\"))\n\t})\n\n\tserver := \u0026http.Server{Handler: mx}\n\terr = server.Serve(ln)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208031941-vje5p2t","Type":"NodeParagraph","Properties":{"id":"20231208031941-vje5p2t","updated":"20231208031941"},"Children":[{"Type":"NodeText","Data":"代码"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mx.Handle(\u0026quot;/bar/\u0026quot;, PathBar{})"},{"Type":"NodeText","Data":"​中"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/bar/"},{"Type":"NodeText","Data":"​由"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/"},{"Type":"NodeText","Data":"​结尾，所以它可以匹配"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/bar/*"},{"Type":"NodeText","Data":"​所有的Path"}]},{"ID":"20231208031941-kx72xi8","Type":"NodeParagraph","Properties":{"id":"20231208031941-kx72xi8","updated":"20231208031941"},"Children":[{"Type":"NodeText","Data":"关于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ServeMux"},{"Type":"NodeText","Data":"​的细节不是本篇重点，后续会单独介绍"}]},{"ID":"20231208032056-hef6wfc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208032056-hef6wfc","updated":"20231208032106"},"Children":[{"Type":"NodeText","Data":"默认的Handler"}]},{"ID":"20231208032106-bu0yi93","Type":"NodeParagraph","Properties":{"id":"20231208032106-bu0yi93","updated":"20231208032114"},"Children":[{"Type":"NodeText","Data":"因为是标准库内置的实现，当没有设置"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.Server.Handler"},{"Type":"NodeText","Data":"​属性时，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.Server"},{"Type":"NodeText","Data":"​就会使用一个全局的变量"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DefaultServeMux *ServeMux"},{"Type":"NodeText","Data":"​来作为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.Server.Handler"},{"Type":"NodeText","Data":"​的值"}]},{"ID":"20231208032115-7d00ai8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032115-7d00ai8","updated":"20231208032121"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var DefaultServeMux = \u0026defaultServeMux\n\nvar defaultServeMux ServeMux\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032122-a9t967o","Type":"NodeParagraph","Properties":{"id":"20231208032122-a9t967o","updated":"20231208032125"},"Children":[{"Type":"NodeText","Data":"http包同时提供了两个函数可以在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DefaultServeMux"},{"Type":"NodeText","Data":"​注册不同Path的处理函数"}]},{"ID":"20231208032231-92dvt2y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032231-92dvt2y","updated":"20231208032232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\thttp.Handle(\"/bar/\", PathBar{})\n\thttp.HandleFunc(\"/foo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Receive path foo\"))\n\t})\n\n\t// 方式1\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032241-9ao3n13","Type":"NodeParagraph","Properties":{"id":"20231208032241-9ao3n13","updated":"20231208032241"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.Handle"},{"Type":"NodeText","Data":"​ 接收的是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​接口实现，对应的是"}]},{"ID":"20231208032243-0swaoiv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032243-0swaoiv","updated":"20231208032249"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func Handle(pattern string, handler Handler) { DefaultServeMux.Handle(pattern, handler) }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032249-9f2bdk5","Type":"NodeParagraph","Properties":{"id":"20231208032249-9f2bdk5","updated":"20231208032300"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.HandleFunc"},{"Type":"NodeText","Data":"​接收的是匿名函数，对应的是"}]},{"ID":"20231208032254-lk2ii79","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032254-lk2ii79","updated":"20231208032334"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func HandleFunc(pattern string, handler func(ResponseWriter, *Request)) {\n\tDefaultServeMux.HandleFunc(pattern, handler)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032355-547vq0i","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208032355-547vq0i","updated":"20231208032402"},"Children":[{"Type":"NodeText","Data":"gorilla/mux"}]},{"ID":"20231208032409-j81aw0z","Type":"NodeParagraph","Properties":{"id":"20231208032409-j81aw0z","updated":"20231208032409"},"Children":[{"Type":"NodeText","Data":"gorilla/mux是一个相当流行的第三方库，用法这里简单写下"}]},{"ID":"20231208032409-l4gsgkv","Type":"NodeParagraph","Properties":{"id":"20231208032409-l4gsgkv","updated":"20231208032409"},"Children":[{"Type":"NodeText","Data":"除了经典的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handle"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"HandleFunc"},{"Type":"NodeText","Data":"​函数，gorilla/mux还提供了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Methods"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Schemes"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Host"},{"Type":"NodeText","Data":"​等非常复杂的功能"}]},{"ID":"20231208032409-yb7jjsz","Type":"NodeParagraph","Properties":{"id":"20231208032409-yb7jjsz","updated":"20231208032409"},"Children":[{"Type":"NodeText","Data":"但无论多复杂，其一定包含了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ServeHTTP"},{"Type":"NodeText","Data":"​函数，即实现了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​接口"}]},{"ID":"20231208032411-igruthv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032411-igruthv","updated":"20231208032450"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\tr := mux.NewRouter()\n\tr.Handle(\"/foo/{bar}\", PathBar{})\n\tr.Handle(\"/bar/\", PathBar{})\n\tr.HandleFunc(\"/foo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Receive path foo\"))\n\t})\n\tr.Methods(\"GET\").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Receive GET request\"))\n\t})\n\n\t// 方式1\n\terr := http.ListenAndServe(\":8080\", r)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032500-yckxoae","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208032500-yckxoae","updated":"20231208032500"},"Children":[{"Type":"NodeText","Data":"其他"}]},{"ID":"20231208032500-6hokjnl","Type":"NodeParagraph","Properties":{"id":"20231208032500-6hokjnl","updated":"20231208032500"},"Children":[{"Type":"NodeText","Data":"还有很多其他优秀的mux实现，具体可以参考各自的官方文档。"}]},{"ID":"20231208032500-w801hl5","Type":"NodeParagraph","Properties":{"id":"20231208032500-w801hl5","updated":"20231208032500"},"Children":[{"Type":"NodeText","Data":"https://github.com/go-chi/chi star 15.9k"}]},{"ID":"20231208032500-6gx9w8f","Type":"NodeParagraph","Properties":{"id":"20231208032500-6gx9w8f","updated":"20231208032500"},"Children":[{"Type":"NodeText","Data":"https://github.com/julienschmidt/httprouter star 15.6k"}]},{"ID":"20231208032500-ptg3poy","Type":"NodeParagraph","Properties":{"id":"20231208032500-ptg3poy","updated":"20231208032500"},"Children":[{"Type":"NodeText","Data":"关于Go标准库、第三方库中这些结构的关系通过下图展示"}]},{"ID":"20231208032513-4y62wcx","Type":"NodeParagraph","Properties":{"id":"20231208032513-4y62wcx","updated":"20231208032513"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"2a46990c2a631b64e256860e4b38ed8c"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/2a46990c2a631b64e256860e4b38ed8c-20231208032513-q2xhbae.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208032600-jvxcomy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032600-jvxcomy","updated":"20231208032622"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"mx := http.NewServeMux()\nmx.Handle(\"/servemux/bar/\", PathBar{})\nmx.HandleFunc(\"/servemux/foo\", func(w http.ResponseWriter, r *http.Request) {\n\tw.Write([]byte(\"Receive servemux path foo\"))\n})\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032623-n1eajgi","Type":"NodeParagraph","Properties":{"id":"20231208032623-n1eajgi","updated":"20231208032629"},"Children":[{"Type":"NodeText","Data":"但此时还有另外一组路由"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/gorilla/*"},{"Type":"NodeText","Data":"​，使用了开源库gorilla/mux"}]},{"ID":"20231208032630-n6ktskz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032630-n6ktskz","updated":"20231208032638"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"r := mux.NewRouter()\nr.Handle(\"/gorilla/bar/\", PathBar{})\nr.HandleFunc(\"/gorilla/foo\", func(w http.ResponseWriter, r *http.Request) {\n    w.Write([]byte(\"Receive gorilla path foo\"))\n})\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032639-ht7h5c6","Type":"NodeParagraph","Properties":{"id":"20231208032639-ht7h5c6","updated":"20231208032645"},"Children":[{"Type":"NodeText","Data":"如何启动这样的服务器呢？"}]},{"ID":"20231208032646-o7h33yw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032646-o7h33yw","updated":"20231208032706"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\tmx := http.NewServeMux()\n\tmx.Handle(\"/servemux/bar/\", PathBar{})\n\tmx.HandleFunc(\"/servemux/foo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Receive servemux path foo\"))\n\t})\n\n\tr := mux.NewRouter()\n\tr.Handle(\"/gorilla/bar/\", PathBar{})\n\tr.HandleFunc(\"/gorilla/foo\", func(w http.ResponseWriter, r *http.Request) {\n\t\tw.Write([]byte(\"Receive gorilla path foo\"))\n\t})\n\n\th := http.NewServeMux()\n\th.Handle(\"/servemux/\", mx)\n\th.Handle(\"/gorilla/\", r)\n\n\t// 方式1\n\terr := http.ListenAndServe(\":8080\", h)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032714-04solcy","Type":"NodeParagraph","Properties":{"id":"20231208032714-04solcy","updated":"20231208032714"},"Children":[{"Type":"NodeText","Data":"利用组合设计模式，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"h := http.NewServeMux()"},{"Type":"NodeText","Data":"​作为新的容器，将不同的路由分配给另外两个容器"}]},{"ID":"20231208032714-mezs00c","Type":"NodeList","ListData":{},"Properties":{"id":"20231208032714-mezs00c","updated":"20231208032714"},"Children":[{"ID":"20231208032714-jevj07m","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231208032714-jevj07m","updated":"20231208032714"},"Children":[{"ID":"20231208032714-38rtxoq","Type":"NodeParagraph","Properties":{"id":"20231208032714-38rtxoq","updated":"20231208032714"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"mx := http.NewServeMux()"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20231208032714-941d8dj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231208032714-941d8dj","updated":"20231208032714"},"Children":[{"ID":"20231208032714-mamjqzg","Type":"NodeParagraph","Properties":{"id":"20231208032714-mamjqzg","updated":"20231208032714"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"r := mux.NewRouter()"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20231208032721-m48wz2x","Type":"NodeParagraph","Properties":{"id":"20231208032721-m48wz2x","updated":"20231208032721"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"b660c785479f8f22236907f7eb9d96bf"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/b660c785479f8f22236907f7eb9d96bf-20231208032721-z7gte88.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231208032737-4d7usdx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231208032737-4d7usdx","updated":"20231208032737"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231208032737-1sc0gwn","Type":"NodeParagraph","Properties":{"id":"20231208032737-1sc0gwn","updated":"20231208032737"},"Children":[{"Type":"NodeText","Data":"本文主要介绍了Go http server的启动方式，重点介绍了http server的请求处理器"}]},{"ID":"20231208032738-oqp6c57","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231208032738-oqp6c57","updated":"20231208032756"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Handler interface {\n\tServeHTTP(ResponseWriter, *Request)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231208032802-8a8royo","Type":"NodeParagraph","Properties":{"id":"20231208032802-8a8royo","updated":"20231208032802"},"Children":[{"Type":"NodeText","Data":"别看它仅包含一个方法，但在组合模式的加成下，可以实现千变万化的形态。"}]},{"ID":"20231208032802-6dduhr8","Type":"NodeParagraph","Properties":{"id":"20231208032802-6dduhr8","updated":"20231208032802"},"Children":[{"Type":"NodeText","Data":"除了Go标准库中提供了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ServeMux"},{"Type":"NodeText","Data":"​还有一系列开源库"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gorilla/mux"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go-chi/chi"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"julienschmidt/httprouter"},{"Type":"NodeText","Data":"​对"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​进行了实现。"}]},{"ID":"20231208032802-cbdqclm","Type":"NodeParagraph","Properties":{"id":"20231208032802-cbdqclm","updated":"20231208032802"},"Children":[{"Type":"NodeText","Data":"每一个库具有的能力、使用方式、性能不同，但万变不离其宗，都绕不开组合模式和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Handler"},{"Type":"NodeText","Data":"​接口"}]},{"ID":"20231208032822-583dbxe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231208032822-583dbxe","updated":"20231208032822"},"Children":[{"Type":"NodeText","Data":"参考资料"}]},{"ID":"20231208032822-7nqo0jh","Type":"NodeParagraph","Properties":{"id":"20231208032822-7nqo0jh","updated":"20231208032822"},"Children":[{"Type":"NodeText","Data":"[1]net/http: add methods and path variables to ServeMux patterns #60227: "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"https://github.com/golang/go/discussions/60227"}]},{"ID":"20231208032822-ms0du8v","Type":"NodeParagraph","Properties":{"id":"20231208032822-ms0du8v","updated":"20231208032822"},"Children":[{"Type":"NodeText","Data":"[2]gorilla/mux: "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"https://github.com/gorilla/mux#gorillamux"}]},{"ID":"20231208032822-3cqmys9","Type":"NodeParagraph","Properties":{"id":"20231208032822-3cqmys9","updated":"20231208032822"},"Children":[{"Type":"NodeText","Data":"[3]设计模式/结构型模式/组合模式: "},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"https://refactoringguru.cn/design-patterns/composite"}]},{"ID":"20231208032825-dio5x9c","Type":"NodeParagraph","Properties":{"id":"20231208032825-dio5x9c"}}]}