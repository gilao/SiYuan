{"ID":"20240311093157-np7bgtm","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f407","id":"20240311093157-np7bgtm","tags":"Go-反射","title":"一篇带你全面掌握go反射的用法","updated":"20240311100914"},"Children":[{"ID":"20240311093157-kob32eh","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240311093157-kob32eh","updated":"20240311093336"},"Children":[{"Type":"NodeText","Data":"最重要的"}]},{"ID":"20240311093344-p8x1mfk","Type":"NodeParagraph","Properties":{"id":"20240311093344-p8x1mfk","updated":"20240311093344"},"Children":[{"Type":"NodeText","Data":"你为什么要用反射？这个问题请读者自己回答。我强调一下反射的2个弊端："}]},{"ID":"20240311093344-wkuuiet","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240311093344-wkuuiet","updated":"20240311093344"},"Children":[{"ID":"20240311093344-6jjusee","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240311093344-6jjusee","updated":"20240311093344"},"Children":[{"ID":"20240311093344-jnbg16g","Type":"NodeParagraph","Properties":{"id":"20240311093344-jnbg16g","updated":"20240311093344"},"Children":[{"Type":"NodeText","Data":"代码不易阅读，不易维护，容易发生线上panic"}]}]},{"ID":"20240311093344-bu68fuy","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240311093344-bu68fuy","updated":"20240311093344"},"Children":[{"ID":"20240311093344-pjos1yg","Type":"NodeParagraph","Properties":{"id":"20240311093344-pjos1yg","updated":"20240311093344"},"Children":[{"Type":"NodeText","Data":"性能很差，比正常代码慢一到两个数量级"}]}]}]},{"ID":"20240311093346-hiepeur","Type":"NodeParagraph","Properties":{"id":"20240311093346-hiepeur","updated":"20240311093355"},"Children":[{"Type":"NodeText","Data":"go语言反射里最重要的两个概念是Type和Value，Type用于获取类型相关的信息（比如Slice的长度，struct的成员，函数的参数个数），Value用于获取和修改原始数据的值（比如修改slice和map中的元素，修改struct的成员变量）。它们和go原始数据类型（比如int、float、map、struct等）的转换方式如下图："}]},{"ID":"20240311093405-unkcb9k","Type":"NodeParagraph","Properties":{"id":"20240311093405-unkcb9k","updated":"20240311093405"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240311093405-wfdatrh.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240311093407-6kazk7j","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240311093407-6kazk7j","updated":"20240311093421"},"Children":[{"Type":"NodeText","Data":"reflect.Type"}]},{"ID":"20240311093421-6cuwezy","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311093421-6cuwezy","updated":"20240311093437"},"Children":[{"Type":"NodeText","Data":"如何得到 Type"}]},{"ID":"20240311093437-ravcpx5","Type":"NodeParagraph","Properties":{"id":"20240311093437-ravcpx5","updated":"20240311093449"},"Children":[{"Type":"NodeText","Data":"通过 TypeOf() 得到Type 类型"}]},{"ID":"20240311093450-9nvjghi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311093450-9nvjghi","updated":"20240311093758"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"typeI := reflect.TypeOf(1)\ntypeS := reflect.TypeOf(\"hello\")\nfmt.Println(typeI)     // int\nfmt.Println(typeS)    // string\n\ntypeUser := reflect.TypeOf(\u0026scommon.User{})\nfmt.Println(typeUser)  // *common.User\nfmt.Println(typeUser.Kind())  // ptr\nfmt.Println(typeUser.Elem().Kind())    // struct\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311094801-4kgmehe","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311094801-4kgmehe","updated":"20240311094820"},"Children":[{"Type":"NodeText","Data":"指针Type转为非指针Type"}]},{"ID":"20240311094820-hbcumjd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311094820-hbcumjd","updated":"20240311094958"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"typeUser  := reflect.TypeOf(\u0026common.User{})\ntypeUser2 := reflect.TypeOf(common.User{})\nassert.IsEqual(typeUser.Elem(), typeUser2)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095000-vyywv8u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095000-vyywv8u","updated":"20240311095521"},"Children":[{"Type":"NodeText","Data":"获取struct 成员变量的信息"}]},{"ID":"20240311095521-bklsku5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311095521-bklsku5","updated":"20240311095532"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"typeUser := reflect.TypeOf(common.User{}) //需要用struct的Type，不能用指针的Type\nfieldNum := typeUser.NumField()           //成员变量的个数\nfor i := 0; i \u003c fieldNum; i++ {\n\tfield := typeUser.Field(i)\n\tfmt.Printf(\"%d %s offset %d anonymous %t type %s exported %t json tag %s\\n\", i,\n\t\tfield.Name,            //变量名称\n\t\tfield.Offset,          //相对于结构体首地址的内存偏移量，string类型会占据16个字节\n\t\tfield.Anonymous,       //是否为匿名成员\n\t\tfield.Type,            //数据类型，reflect.Type类型\n\t\tfield.IsExported(),    //包外是否可见（即是否以大写字母开头）\n\t\tfield.Tag.Get(\"json\")) //获取成员变量后面``里面定义的tag\n}\nfmt.Println()\n\n//可以通过FieldByName获取Field\nif nameField, ok := typeUser.FieldByName(\"Name\"); ok {\n\tfmt.Printf(\"Name is exported %t\\n\", nameField.IsExported())\n}\n//也可以根据FieldByIndex获取Field\nthirdField := typeUser.FieldByIndex([]int{2}) //参数是个slice，因为有struct嵌套的情况\nfmt.Printf(\"third field name %s\\n\", thirdField.Name)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095633-dwta3b0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095633-dwta3b0","updated":"20240311095704"},"Children":[{"Type":"NodeText","Data":"获取struct 成员方法的信息"}]},{"ID":"20240311095704-4yxm465","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311095704-4yxm465","updated":"20240311095710"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"typeUser := reflect.TypeOf(common.User{})\nmethodNum := typeUser.NumMethod() //成员方法的个数。接收者为指针的方法【不】包含在内\nfor i := 0; i \u003c methodNum; i++ {\n\tmethod := typeUser.Method(i)\n\tfmt.Printf(\"method name:%s ,type:%s, exported:%t\\n\", method.Name, method.Type, method.IsExported())\n}\nfmt.Println()\n\ntypeUser2 := reflect.TypeOf(\u0026common.User{})\nmethodNum = typeUser2.NumMethod() //成员方法的个数。接收者为指针或值的方法【都】包含在内，也就是说值实现的方法指针也实现了（反之不成立）\nfor i := 0; i \u003c methodNum; i++ {\n\tmethod := typeUser2.Method(i)\n\tfmt.Printf(\"method name:%s ,type:%s, exported:%t\\n\", method.Name, method.Type, method.IsExported())\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095718-miyq54s","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095718-miyq54s","updated":"20240311095723"},"Children":[{"Type":"NodeText","Data":"获取函数信息"}]},{"ID":"20240311095723-kftko5v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311095723-kftko5v","updated":"20240311095736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func Add(a, b int) int {\n\treturn a + b\n}\n\ntypeFunc := reflect.TypeOf(Add) //获取函数类型\nfmt.Printf(\"is function type %t\\n\", typeFunc.Kind() == reflect.Func)\nargInNum := typeFunc.NumIn()   //输入参数的个数\nargOutNum := typeFunc.NumOut() //输出参数的个数\nfor i := 0; i \u003c argInNum; i++ {\n\targTyp := typeFunc.In(i)\n\tfmt.Printf(\"第%d个输入参数的类型%s\\n\", i, argTyp)\n}\nfor i := 0; i \u003c argOutNum; i++ {\n\targTyp := typeFunc.Out(i)\n\tfmt.Printf(\"第%d个输出参数的类型%s\\n\", i, argTyp)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095811-mshhwic","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095811-mshhwic","updated":"20240311095827"},"Children":[{"Type":"NodeText","Data":"判断类型是否实现了某接口"}]},{"ID":"20240311095827-xfd2hcn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311095827-xfd2hcn","updated":"20240311095835"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"//通过reflect.TypeOf((*\u003cinterface\u003e)(nil)).Elem()获得接口类型。因为People是个接口不能创建实例，所以把nil强制转为*common.People类型\ntypeOfPeople := reflect.TypeOf((*common.People)(nil)).Elem()\nfmt.Printf(\"typeOfPeople kind is interface %t\\n\", typeOfPeople.Kind() == reflect.Interface)\nt1 := reflect.TypeOf(common.User{})\nt2 := reflect.TypeOf(\u0026common.User{})\n//如果值类型实现了接口，则指针类型也实现了接口；反之不成立\nfmt.Printf(\"t1 implements People interface %t\\n\", t1.Implements(typeOfPeople))\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095836-8whdvti","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240311095836-8whdvti","updated":"20240311095848"},"Children":[{"Type":"NodeText","Data":"reflect.Value"}]},{"ID":"20240311095849-3eubiju","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095849-3eubiju","updated":"20240311095859"},"Children":[{"Type":"NodeText","Data":"如何获取Value"}]},{"ID":"20240311095859-kz784v7","Type":"NodeParagraph","Properties":{"id":"20240311095859-kz784v7","updated":"20240311095919"},"Children":[{"Type":"NodeText","Data":"通过 ValueOf() 得到Value"}]},{"ID":"20240311095920-i0bqmqy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311095920-i0bqmqy","updated":"20240311095927"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"iValue := reflect.ValueOf(1)\nsValue := reflect.ValueOf(\"hello\")\nuserPtrValue := reflect.ValueOf(\u0026common.User{\n\tId:     7,\n\tName:   \"杰克逊\",\n\tWeight: 65,\n\tHeight: 1.68,\n})\nfmt.Println(iValue)       //1\nfmt.Println(sValue)       //hello\nfmt.Println(userPtrValue) //\u0026{7 杰克逊  65 1.68}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095928-o7a3xg0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095928-o7a3xg0","updated":"20240311095940"},"Children":[{"Type":"NodeText","Data":"Value 转为Type"}]},{"ID":"20240311095940-rw7nrtq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311095940-rw7nrtq","updated":"20240311095954"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"iType := iValue.Type()\nsType := sValue.Type()\nuserType := userPtrValue.Type()\n//在Type和相应Value上调用Kind()结果一样的\nfmt.Println(iType.Kind() == reflect.Int, iValue.Kind() == reflect.Int, iType.Kind() == iValue.Kind())  \nfmt.Println(sType.Kind() == reflect.String, sValue.Kind() == reflect.String, sType.Kind() == sValue.Kind()) \nfmt.Println(userType.Kind() == reflect.Ptr, userPtrValue.Kind() == reflect.Ptr, userType.Kind() == userPtrValue.Kind())\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311095956-rcmslqr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311095956-rcmslqr","updated":"20240311100014"},"Children":[{"Type":"NodeText","Data":"指针Value和非指针Value 互相转化"}]},{"ID":"20240311100014-b2qkrgn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100014-b2qkrgn","updated":"20240311100023"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"userValue := userPtrValue.Elem()                    //Elem() 指针Value转为非指针Value\nfmt.Println(userValue.Kind(), userPtrValue.Kind())  //struct ptr\nuserPtrValue3 := userValue.Addr()                   //Addr() 非指针Value转为指针Value\nfmt.Println(userValue.Kind(), userPtrValue3.Kind()) //struct ptr\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100024-zkhmkxd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100024-zkhmkxd","updated":"20240311100039"},"Children":[{"Type":"NodeText","Data":"得到Value对应的原始数据"}]},{"ID":"20240311100040-6dop2gs","Type":"NodeParagraph","Properties":{"id":"20240311100040-6dop2gs","updated":"20240311100211"},"Children":[{"Type":"NodeText","Data":"通过Interface()函数把Value转为interface{},再从interface{}强制类型转换，转为原始数据类型。或者在Value上直接调用 Int()、String()等一步到位。"}]},{"ID":"20240311100211-ryhvpv6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100211-ryhvpv6","updated":"20240311100219"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"fmt.Printf(\"origin value iValue is %d %d\\n\", iValue.Interface().(int), iValue.Int())\nfmt.Printf(\"origin value sValue is %s %s\\n\", sValue.Interface().(string), sValue.String())\nuser := userValue.Interface().(common.User)\nfmt.Printf(\"id=%d name=%s weight=%.2f height=%.2f\\n\", user.Id, user.Name, user.Weight, user.Height)\nuser2 := userPtrValue.Interface().(*common.User)\nfmt.Printf(\"id=%d name=%s weight=%.2f height=%.2f\\n\", user2.Id, user2.Name, user2.Weight, user2.Height)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100230-2l59ly7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100230-2l59ly7","updated":"20240311100238"},"Children":[{"Type":"NodeText","Data":"空Value 的判断"}]},{"ID":"20240311100238-m3e1xsk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100238-m3e1xsk","updated":"20240311100248"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var i interface{} //接口没有指向具体的值\nv := reflect.ValueOf(i)\nfmt.Printf(\"v持有值 %t, type of v is Invalid %t\\n\", v.IsValid(), v.Kind() == reflect.Invalid)\n\nvar user *common.User = nil\nv = reflect.ValueOf(user) //Value指向一个nil\nif v.IsValid() {\n\tfmt.Printf(\"v持有的值是nil %t\\n\", v.IsNil()) //调用IsNil()前先确保IsValid()，否则会panic\n}\n\nvar u common.User //只声明，里面的值都是0值\nv = reflect.ValueOf(u)\nif v.IsValid() {\n\tfmt.Printf(\"v持有的值是对应类型的0值 %t\\n\", v.IsZero()) //调用IsZero()前先确保IsValid()，否则会panic\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100255-dv4e86i","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100255-dv4e86i","updated":"20240311100312"},"Children":[{"Type":"NodeText","Data":"通过 Value 修改原始数据的值"}]},{"ID":"20240311100312-sidxw8p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100312-sidxw8p","updated":"20240311100321"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var i int = 10\nvar s string = \"hello\"\nuser := common.User{\n\tId:     7,\n\tName:   \"杰克逊\",\n\tWeight: 65.5,\n\tHeight: 1.68,\n}\n\nvalueI := reflect.ValueOf(\u0026i) //由于go语言所有函数传的都是值，所以要想修改原来的值就需要传指针\nvalueS := reflect.ValueOf(\u0026s)\nvalueUser := reflect.ValueOf(\u0026user)\nvalueI.Elem().SetInt(8) //由于valueI对应的原始对象是指针，通过Elem()返回指针指向的对象\nvalueS.Elem().SetString(\"golang\")\nvalueUser.Elem().FieldByName(\"Weight\").SetFloat(68.0) //FieldByName()通过Name返回类的成员变量\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100327-uj4q9ia","Type":"NodeParagraph","Properties":{"id":"20240311100327-uj4q9ia","updated":"20240311100327"},"Children":[{"Type":"NodeText","Data":"强调一下，要想修改原始数据的值，给ValueOf传的必须是指针，而指针Value不能调用Set和FieldByName方法，所以得先通过Elem()转为非指针Value。"}]},{"ID":"20240311100327-oe7qcs2","Type":"NodeParagraph","Properties":{"id":"20240311100327-oe7qcs2","updated":"20240311100327"},"Children":[{"Type":"NodeText","Data":"未导出成员的值不能通过反射进行修改。"}]},{"ID":"20240311100328-wc0pokm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100328-wc0pokm","updated":"20240311100607"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"addrValue  := valueUser.Elem().FiledByName(\"addr\")\nif addrValue.CanSet() {\n    addrValues.SetString(\"北京\")\n} else {\n    fmt.Println(\"addr 是未导出成员， 不可Set\")  // 以小写字母开头的成员相当于是私有成员\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100613-fn0cvs6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100613-fn0cvs6","updated":"20240311100625"},"Children":[{"Type":"NodeText","Data":"通过Value 修改 Slice"}]},{"ID":"20240311100625-l4oh0ui","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100625-l4oh0ui","updated":"20240311100642"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"users := make([]*common.User, 1, 5) //len=1，cap=5\nusers[0] = \u0026common.User{\n\tId:     7,\n\tName:   \"杰克逊\",\n\tWeight: 65.5,\n\tHeight: 1.68,\n}\n\nsliceValue := reflect.ValueOf(\u0026users) //准备通过Value修改users，所以传users的地址\nif sliceValue.Elem().Len() \u003e 0 {      //取得slice的长度\n\tsliceValue.Elem().Index(0).Elem().FieldByName(\"Name\").SetString(\"令狐一刀\")\n\tfmt.Printf(\"1st user name change to %s\\n\", users[0].Name)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100651-323tich","Type":"NodeParagraph","Properties":{"id":"20240311100651-323tich","updated":"20240311100651"},"Children":[{"Type":"NodeText","Data":"甚至可以修改slice的cap，新的cap必须位于原始的len到cap之间，即只能把cap改小。"}]},{"ID":"20240311100651-lhf8tq2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100651-lhf8tq2","updated":"20240311100651"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA=="},{"Type":"NodeCodeBlockCode","Data":"sliceValue.Elem().SetCap(3)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100657-nds2woi","Type":"NodeParagraph","Properties":{"id":"20240311100657-nds2woi","updated":"20240311100657"},"Children":[{"Type":"NodeText","Data":"通过把len改大，可以实现向slice中追加元素的功能。"}]},{"ID":"20240311100657-3y8ouzm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100657-3y8ouzm","updated":"20240311100657"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"sliceValue.Elem().SetLen(2)\n//调用reflect.Value的Set()函数修改其底层指向的原始数据\nsliceValue.Elem().Index(1).Set(reflect.ValueOf(\u0026common.User{\n\tId:     8,\n\tName:   \"李达\",\n\tWeight: 80,\n\tHeight: 180,\n}))\nfmt.Printf(\"2nd user name %s\\n\", users[1].Name)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100659-zxkj02w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100659-zxkj02w","updated":"20240311100707"},"Children":[{"Type":"NodeText","Data":"修改 map"}]},{"ID":"20240311100713-60z3bjy","Type":"NodeParagraph","Properties":{"id":"20240311100713-60z3bjy","updated":"20240311100713"},"Children":[{"Type":"NodeText","Data":"Value.SetMapIndex()函数：往map里添加一个key-value对"}]},{"ID":"20240311100713-usjxx64","Type":"NodeParagraph","Properties":{"id":"20240311100713-usjxx64","updated":"20240311100713"},"Children":[{"Type":"NodeText","Data":"Value.MapIndex()函数： 根据Key取出对应的map"}]},{"ID":"20240311100714-de18h93","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100714-de18h93","updated":"20240311100723"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"u1 := \u0026common.User{\n\tId:     7,\n\tName:   \"杰克逊\",\n\tWeight: 65.5,\n\tHeight: 1.68,\n}\nu2 := \u0026common.User{\n\tId:     8,\n\tName:   \"杰克逊\",\n\tWeight: 65.5,\n\tHeight: 1.68,\n}\nuserMap := make(map[int]*common.User, 5)\nuserMap[u1.Id] = u1\n\nmapValue := reflect.ValueOf(\u0026userMap)                                                         //准备通过Value修改userMap，所以传userMap的地址\nmapValue.Elem().SetMapIndex(reflect.ValueOf(u2.Id), reflect.ValueOf(u2))                      //SetMapIndex 往map里添加一个key-value对\nmapValue.Elem().MapIndex(reflect.ValueOf(u1.Id)).Elem().FieldByName(\"Name\").SetString(\"令狐一刀\") //MapIndex 根据Key取出对应的map\nfor k, user := range userMap {\n\tfmt.Printf(\"key %d name %s\\n\", k, user.Name)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100725-0wxlg66","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100725-0wxlg66","updated":"20240311100731"},"Children":[{"Type":"NodeText","Data":"调用函数"}]},{"ID":"20240311100732-u4ymp5j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100732-u4ymp5j","updated":"20240311100740"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"valueFunc := reflect.ValueOf(Add) //函数也是一种数据类型\ntypeFunc := reflect.TypeOf(Add)\nargNum := typeFunc.NumIn()            //函数输入参数的个数\nargs := make([]reflect.Value, argNum) //准备函数的输入参数\nfor i := 0; i \u003c argNum; i++ {\n\tif typeFunc.In(i).Kind() == reflect.Int {\n\t\targs[i] = reflect.ValueOf(3) //给每一个参数都赋3\n\t}\n}\nsumValue := valueFunc.Call(args) //返回[]reflect.Value，因为go语言的函数返回可能是一个列表\nif typeFunc.Out(0).Kind() == reflect.Int {\n\tsum := sumValue[0].Interface().(int) //从Value转为原始数据类型\n\tfmt.Printf(\"sum=%d\\n\", sum)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100744-39o8wgr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100744-39o8wgr","updated":"20240311100750"},"Children":[{"Type":"NodeText","Data":"调用成员方法"}]},{"ID":"20240311100759-onxapyr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100759-onxapyr","updated":"20240311100759"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":" common.User{\n\tId:     7,\n\tName:   \"杰克逊\",\n\tWeight: 65.5,\n\tHeight: 1.68,\n}\nvalueUser := reflect.ValueOf(\u0026user)              //必须传指针，因为BMI()在定义的时候它是指针的方法\nbmiMethod := valueUser.MethodByName(\"BMI\")       //MethodByName()通过Name返回类的成员变量\nresultValue := bmiMethod.Call([]reflect.Value{}) //无参数时传一个空的切片\nresult := resultValue[0].Interface().(float32)\nfmt.Printf(\"bmi=%.2f\\n\", result)\n\n//Think()在定义的时候用的不是指针，valueUser可以用指针也可以不用指针\nthinkMethod := valueUser.MethodByName(\"Think\")\nthinkMethod.Call([]reflect.Value{})\n\nvalueUser2 := reflect.ValueOf(user)\nthinkMethod = valueUser2.MethodByName(\"Think\")\nthinkMethod.Call([]reflect.Value{})\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100806-mechd10","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240311100806-mechd10","updated":"20240311100823"},"Children":[{"Type":"NodeText","Data":"创建对象"}]},{"ID":"20240311100824-2zk7gms","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100824-2zk7gms","updated":"20240311100829"},"Children":[{"Type":"NodeText","Data":"创建 struct"}]},{"ID":"20240311100829-wtj0f5q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100829-wtj0f5q","updated":"20240311100836"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"user :=t := reflect.TypeOf(common.User{})\nvalue := reflect.New(t) //根据reflect.Type创建一个对象，得到该对象的指针，再根据指针提到reflect.Value\nvalue.Elem().FieldByName(\"Id\").SetInt(10)\nuser := value.Interface().(*common.User) //把反射类型转成go原始数据类型Call([]reflect.Value{})\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100837-x3ty42h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100837-x3ty42h","updated":"20240311100847"},"Children":[{"Type":"NodeText","Data":"创建Slice"}]},{"ID":"20240311100847-5cas9if","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100847-5cas9if","updated":"20240311100854"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var slice []common.User\nsliceType := reflect.TypeOf(slice)\nsliceValue := reflect.MakeSlice(sliceType, 1, 3)\nsliceValue.Index(0).Set(reflect.ValueOf(common.User{\n\tId:     8,\n\tName:   \"李达\",\n\tWeight: 80,\n\tHeight: 180,\n}))\nusers := sliceValue.Interface().([]common.User)\nfmt.Printf(\"1st user name %s\\n\", users[0].Name)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100855-ihrepzb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240311100855-ihrepzb","updated":"20240311100900"},"Children":[{"Type":"NodeText","Data":"创建map"}]},{"ID":"20240311100900-ez3v8so","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240311100900-ez3v8so","updated":"20240311100909"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var userMap map[int]*common.User\nmapType := reflect.TypeOf(userMap)\n// mapValue:=reflect.MakeMap(mapType)\nmapValue := reflect.MakeMapWithSize(mapType, 10)\n\nuser := \u0026common.User{\n\tId:     7,\n\tName:   \"杰克逊\",\n\tWeight: 65.5,\n\tHeight: 1.68,\n}\nkey := reflect.ValueOf(user.Id)\nmapValue.SetMapIndex(key, reflect.ValueOf(user))                    //SetMapIndex 往map里添加一个key-value对\nmapValue.MapIndex(key).Elem().FieldByName(\"Name\").SetString(\"令狐一刀\") //MapIndex 根据Key取出对应的map\nuserMap = mapValue.Interface().(map[int]*common.User)\nfmt.Printf(\"user name %s %s\\n\", userMap[7].Name, user.Name)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240311100914-5nhmnwb","Type":"NodeParagraph","Properties":{"id":"20240311100914-5nhmnwb","updated":"20240311100914"},"Children":[{"Type":"NodeText","Data":"reflect包里除了MakeSlice()和MakeMap()，还有MakeChan()和MakeFunc()。"}]}]}