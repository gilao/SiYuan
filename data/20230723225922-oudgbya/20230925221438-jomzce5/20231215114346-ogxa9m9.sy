{"ID":"20231215114346-ogxa9m9","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231215114346-ogxa9m9","title":"Go 1.18 新增三大功能之一“泛型”怎么使用？","updated":"20231215140325"},"Children":[{"ID":"20231215114346-2qlqhtu","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231215114346-2qlqhtu","updated":"20231215140051"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231215140142-pdakabl","Type":"NodeParagraph","Properties":{"id":"20231215140142-pdakabl","updated":"20231215140142"},"Children":[{"Type":"NodeText","Data":"在 Go v1.18 中，Go 语言新增三个功能，分别是“泛型”、“模糊测试” 和 “工作区”。"}]},{"ID":"20231215140142-dlupwkr","Type":"NodeParagraph","Properties":{"id":"20231215140142-dlupwkr","updated":"20231215140142"},"Children":[{"Type":"NodeText","Data":"本文我们介绍 Go 社区呼声最高的 “泛型” 的使用方式。"}]},{"ID":"20231215140142-0k79nm6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231215140142-0k79nm6","updated":"20231215140155"},"Children":[{"Type":"NodeText","Data":"引言"}]},{"ID":"20231215140156-9a6wj7j","Type":"NodeParagraph","Properties":{"id":"20231215140156-9a6wj7j","updated":"20231215140207"},"Children":[{"Type":"NodeText","Data":"读者朋友们应该了解 Go 语言是一门强类型语言，如果你是从弱类型语言转过来的话，刚开始上手时可能会比较别扭。"}]},{"ID":"20231215140208-x0uedzb","Type":"NodeParagraph","Properties":{"id":"20231215140208-x0uedzb","updated":"20231215140224"},"Children":[{"Type":"NodeText","Data":"比如，我列举一个简单的示例："}]},{"ID":"20231215140225-rcinfp3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215140225-rcinfp3","updated":"20231215140234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MinInt(x, y int) int {\n    if x \u003c y {\n        return x\n    }\n    return y\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215140238-c09jsc6","Type":"NodeParagraph","Properties":{"id":"20231215140238-c09jsc6","updated":"20231215140239"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们定义一个比较大小的函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MinInt()"},{"Type":"NodeText","Data":"​，需要注意的是，该函数参数列表和返回值的类型是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int"},{"Type":"NodeText","Data":"​，如果我们想要比较的数值是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float64"},{"Type":"NodeText","Data":"​ 浮点数类型，我们就无法使用该函数。"}]},{"ID":"20231215140252-ex0lb6k","Type":"NodeParagraph","Properties":{"id":"20231215140252-ex0lb6k","updated":"20231215140300"},"Children":[{"Type":"NodeText","Data":"聪明的读者朋友们可能会想到，再定义一个函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MinFloat64()"},{"Type":"NodeText","Data":"​ 函数。"}]},{"ID":"20231215140301-jdoblcq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215140301-jdoblcq","updated":"20231215140307"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func MinFloat64(x, y float64) float64 {\n    if x \u003c y {\n        return x\n    }\n    return y\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215140307-kt5zppd","Type":"NodeParagraph","Properties":{"id":"20231215140307-kt5zppd","updated":"20231215140313"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们又定义一个比较 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float64"},{"Type":"NodeText","Data":"​ 类型的数值大小的函数，这种办法也不是不可以，但是，我们知道 Go 语言的数值类型还有其他很多种，比如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int8"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int32"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int64"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"uint8"},{"Type":"NodeText","Data":"​ ..."}]},{"ID":"20231215140318-6k0i0d4","Type":"NodeParagraph","Properties":{"id":"20231215140318-6k0i0d4","updated":"20231215140318"},"Children":[{"Type":"NodeText","Data":"所以，我们难道需要为每种数值类型都定义一个比较大小的函数吗？"}]},{"ID":"20231215140318-qn13bwj","Type":"NodeParagraph","Properties":{"id":"20231215140318-qn13bwj","updated":"20231215140318"},"Children":[{"Type":"NodeText","Data":"此时，经验丰富的读者朋友们想到了使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"interface{}"},{"Type":"NodeText","Data":"​ 空接口类型，代码如下："}]},{"ID":"20231215140318-9m86ypg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215140318-9m86ypg","updated":"20231215140325"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}