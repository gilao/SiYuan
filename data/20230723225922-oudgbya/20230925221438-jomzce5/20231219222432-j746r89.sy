{"ID":"20231219222432-j746r89","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f986","id":"20231219222432-j746r89","tags":"公众号-Golang语言开发栈,Go-Channel","title":"Golang 语言中的 channel 实现原理","updated":"20231219230532"},"Children":[{"ID":"20231219222432-8a693qw","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231219222432-8a693qw","updated":"20231219222708"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231219222715-hxn6qhi","Type":"NodeParagraph","Properties":{"id":"20231219222715-hxn6qhi","updated":"20231219222715"},"Children":[{"Type":"NodeText","Data":"Golang 语言社区流传一句口号："}]},{"ID":"20231219222715-g7hdowb","Type":"NodeBlockquote","Properties":{"id":"20231219222715-g7hdowb","updated":"20231219222715"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20231219222715-6hctobj","Type":"NodeParagraph","Properties":{"id":"20231219222715-6hctobj","updated":"20231219222715"},"Children":[{"Type":"NodeText","Data":"Do not communicate by sharing memory; instead, share memory by communicating."}]}]},{"ID":"20231219222715-f5mrf1x","Type":"NodeParagraph","Properties":{"id":"20231219222715-f5mrf1x","updated":"20231219222715"},"Children":[{"Type":"NodeText","Data":"安全访问共享变量是并发编程的一个难点，在 Golang 语言中，倡导通过通信共享内存，实际上就是使用 channel 传递共享变量，在任何给定时间，只有一个 goroutine 可以访问该变量的值，从而避免发生数据竞争。"}]},{"ID":"20231219222715-el2ar7t","Type":"NodeParagraph","Properties":{"id":"20231219222715-el2ar7t","updated":"20231219222715"},"Children":[{"Type":"NodeText","Data":"关于 channel 的使用方法，我们在之前的文章中「"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==\u0026amp;mid=2247483797\u0026amp;idx=1\u0026amp;sn=1771e9aa99c0f591706572620ce6de6b\u0026amp;chksm=9f81abfba8f622ed1a16eb428ec1c7655444ab2373354f53740b97e2dee0e42c248377982db6\u0026amp;scene=21#wechat_redirect","TextMarkTextContent":"Go 语言学习之 goroutine 和 channel"},{"Type":"NodeText","Data":"」介绍过，本文我们从 channel 的数据结构和执行逻辑两个方面介绍一下它的实现原理。"}]},{"ID":"20231219222715-1rht4mg","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231219222715-1rht4mg","updated":"20231219222726"},"Children":[{"Type":"NodeText","Data":"数据结构"}]},{"ID":"20231219223435-0i0euyz","Type":"NodeParagraph","Properties":{"id":"20231219223435-0i0euyz","updated":"20231219223435"},"Children":[{"Type":"NodeText","Data":"我们看一下 Golang 源码中 channel 的数据结构。"}]},{"ID":"20231219223435-djsrr2j","Type":"NodeParagraph","Properties":{"id":"20231219223435-djsrr2j","updated":"20231219223435"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"$GOROOT/src/runtime/chan.go"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231219223437-yqhgn97","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219223437-yqhgn97","updated":"20231219223446"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type hchan struct {\n qcount   uint           // total data in the queue\n dataqsiz uint           // size of the circular queue\n buf      unsafe.Pointer // points to an array of dataqsiz elements\n elemsize uint16\n closed   uint32\n elemtype *_type // element type\n sendx    uint   // send index\n recvx    uint   // receive index\n recvq    waitq  // list of recv waiters\n sendq    waitq  // list of send waiters\n lock mutex\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219223623-yyxzp32","Type":"NodeParagraph","Properties":{"id":"20231219223623-yyxzp32","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"阅读 channel 的源码，可以发现 channel 的数据结构是 hchan 结构体，包含以下字段："}]},{"ID":"20231219223623-7zhhcbg","Type":"NodeList","ListData":{},"Properties":{"id":"20231219223623-7zhhcbg","updated":"20231219223623"},"Children":[{"ID":"20231219223623-5tbnhgu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-5tbnhgu","updated":"20231219223623"},"Children":[{"ID":"20231219223623-9zbcb77","Type":"NodeParagraph","Properties":{"id":"20231219223623-9zbcb77","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"qcount 当前队列中剩余的元素个数"}]}]},{"ID":"20231219223623-5de86kd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-5de86kd","updated":"20231219223623"},"Children":[{"ID":"20231219223623-f6poryf","Type":"NodeParagraph","Properties":{"id":"20231219223623-f6poryf","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"datasize 环形队列的长度"}]}]},{"ID":"20231219223623-abdfo4d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-abdfo4d","updated":"20231219223623"},"Children":[{"ID":"20231219223623-p8r4c9g","Type":"NodeParagraph","Properties":{"id":"20231219223623-p8r4c9g","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"buf 环形队列的指针"}]}]},{"ID":"20231219223623-7j2ri9j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-7j2ri9j","updated":"20231219223623"},"Children":[{"ID":"20231219223623-me9jfjg","Type":"NodeParagraph","Properties":{"id":"20231219223623-me9jfjg","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"elemsize 元素的大小"}]}]},{"ID":"20231219223623-pbdehaq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-pbdehaq","updated":"20231219223623"},"Children":[{"ID":"20231219223623-ddjdk2q","Type":"NodeParagraph","Properties":{"id":"20231219223623-ddjdk2q","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"closed 关闭标识"}]}]},{"ID":"20231219223623-ij5pn08","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-ij5pn08","updated":"20231219223623"},"Children":[{"ID":"20231219223623-7abdk6r","Type":"NodeParagraph","Properties":{"id":"20231219223623-7abdk6r","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"elemtype 元素的类型"}]}]},{"ID":"20231219223623-zh5yfsl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-zh5yfsl","updated":"20231219223623"},"Children":[{"ID":"20231219223623-ay6rfxl","Type":"NodeParagraph","Properties":{"id":"20231219223623-ay6rfxl","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"sendx 发送索引位置"}]}]},{"ID":"20231219223623-ah1qsme","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-ah1qsme","updated":"20231219223623"},"Children":[{"ID":"20231219223623-w91yqu3","Type":"NodeParagraph","Properties":{"id":"20231219223623-w91yqu3","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"recvx 接收索引位置"}]}]},{"ID":"20231219223623-o3i0na7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-o3i0na7","updated":"20231219223623"},"Children":[{"ID":"20231219223623-18lnot3","Type":"NodeParagraph","Properties":{"id":"20231219223623-18lnot3","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"recvq 等待接收的协程队列"}]}]},{"ID":"20231219223623-psspzo8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-psspzo8","updated":"20231219223623"},"Children":[{"ID":"20231219223623-rq2fixm","Type":"NodeParagraph","Properties":{"id":"20231219223623-rq2fixm","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"sendq 等待发送的协程队列"}]}]},{"ID":"20231219223623-bdawvzh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219223623-bdawvzh","updated":"20231219223623"},"Children":[{"ID":"20231219223623-ues5vmn","Type":"NodeParagraph","Properties":{"id":"20231219223623-ues5vmn","updated":"20231219223623"},"Children":[{"Type":"NodeText","Data":"lock 互斥锁"}]}]}]},{"ID":"20231219223637-ojshgp0","Type":"NodeParagraph","Properties":{"id":"20231219223637-ojshgp0","updated":"20231219223637"},"Children":[{"Type":"NodeText","Data":"通过阅读 channel 的数据结构，可以发现 channel 是使用环形队列作为 channel 的缓冲区，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"datasize"},{"Type":"NodeText","Data":"​ 环形队列的长度是在创建 channel 时指定的，通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sendx"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"recvx"},{"Type":"NodeText","Data":"​ 两个字段分别表示环形队列的队尾和队首，其中，sendx 表示数据写入的位置，recvx 表示数据读取的位置。"}]},{"ID":"20231219223637-bonef30","Type":"NodeParagraph","Properties":{"id":"20231219223637-bonef30","updated":"20231219223637"},"Children":[{"Type":"NodeText","Data":"字段 recvq 和 sendq 分别表示等待接收的协程队列和等待发送的协程队列，当 channel 缓冲区为空或无缓冲区时，当前协程会被阻塞，分别加入到 recvq 和 sendq 协程队列中，等待其它协程操作 channel 时被唤醒。其中，读阻塞的协程被写协程唤醒，写阻塞的协程被读协程唤醒。"}]},{"ID":"20231219223637-wsmha57","Type":"NodeParagraph","Properties":{"id":"20231219223637-wsmha57","updated":"20231219223637"},"Children":[{"Type":"NodeText","Data":"字段 elemtype 和 elemsize 表示 channel 中元素的类型和大小，需要注意的是，一个 channel 只能传递一种类型的值，如果需要传递任意类型的数据，可以使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"interface{}"},{"Type":"NodeText","Data":"​ 类型。"}]},{"ID":"20231219223637-e9yq0c8","Type":"NodeParagraph","Properties":{"id":"20231219223637-e9yq0c8","updated":"20231219223637"},"Children":[{"Type":"NodeText","Data":"字段 lock 是保证同一时间只有一个协程读写 channel。"}]},{"ID":"20231219224619-5e4831g","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231219224619-5e4831g","updated":"20231219225004"},"Children":[{"Type":"NodeText","Data":"执行逻辑"}]},{"ID":"20231219225011-3dbie6y","Type":"NodeParagraph","Properties":{"id":"20231219225011-3dbie6y","updated":"20231219225011"},"Children":[{"Type":"NodeText","Data":"在 Golang 语言中，可以对 channel 进行读写操作，本小节我们分别介绍一下 channel 的读操作和写操作。"}]},{"ID":"20231219225011-x460ttp","Type":"NodeParagraph","Properties":{"id":"20231219225011-x460ttp","updated":"20231219230026"},"Children":[{"Type":"NodeText","Data":"写操作 channel，分为两种情况，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"第一种是 channel 的缓冲区未写满，直接将数据写入缓冲区，结束 send 操作；第二种是 channel 的缓冲区已写满，此时，当前操作 channel 的协程将会被加入 sendq 等待发送的协程队列，等待被读协程唤醒。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231219225011-th6yaxk","Type":"NodeParagraph","Properties":{"id":"20231219225011-th6yaxk","updated":"20231219225011"},"Children":[{"Type":"NodeText","Data":"需要注意的是，当 recvq 队列不为空时，证明缓冲区没有数据，但是有协程等待读取数据，此时，数据将不再写入缓冲区，而是会直接把数据传递给 recvq 队列中的第一个协程。"}]},{"ID":"20231219225011-eqm8b0y","Type":"NodeParagraph","Properties":{"id":"20231219225011-eqm8b0y","updated":"20231219230111"},"Children":[{"Type":"NodeText","Data":"读操作 channel，也分为两种情况，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"第一种是 channel 的缓冲区中有数据，直接读取缓冲区中的数据，结束 recv 操作；第二种是 channel 的缓冲区中没有数据，此时，当前操作 channel 的协程加入 recvq 等待接收的协程队列，等待被写协程唤醒。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231219225011-1pm9lsf","Type":"NodeParagraph","Properties":{"id":"20231219225011-1pm9lsf","updated":"20231219230156"},"Children":[{"Type":"NodeText","Data":"需要注意的是，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当 sendq 队列不为空时，并且缓冲区已写满，此时，将直接从 sendq 队列中的第一个协程读取数据。"}]},{"ID":"20231219225011-1p93wl3","Type":"NodeParagraph","Properties":{"id":"20231219225011-1p93wl3","updated":"20231219230218"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"当 channel 被关闭时，recvq 和 sendq 中的所有协程被唤醒，其中 recvq 中的协程读取到的数据全部是 nil，sendq 中的协程会触发 panic。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231219230204-zzjygnm","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231219230204-zzjygnm","updated":"20231219230257"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231219230257-38xbxmx","Type":"NodeParagraph","Properties":{"id":"20231219230257-38xbxmx","updated":"20231219230308"},"Children":[{"Type":"NodeText","Data":"本文我们在 channel 的数据结构和执行逻辑两个方面介绍了 channel 的实现原理，其中，执行逻辑小节中，重点介绍了 channel 的读写操作。如果读者朋友们想要了解创建 channel 的执行逻辑，可以阅读源码中的函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"func makechan(t *chantype, size int) *hchan"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231219230532-cj83e6v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231219230532-cj83e6v","updated":"20231219230532"},"Children":[{"Type":"NodeText","Data":"Channel的特性"}]},{"ID":"20231219230532-2towhwu","Type":"NodeTable","TableAligns":[0,0,0,0,0],"Properties":{"colgroup":"||||","id":"20231219230532-2towhwu","updated":"20231219230532"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"操作"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"nil"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"已关闭的channel"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"未关闭有缓冲区的channel"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"未关闭无缓冲的channel"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"关闭"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"painc"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"panic"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"成功关闭，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"然后可以读取缓冲区的值，读取完之后，继续读取到的是 channel 类型的默认值"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"成功关闭，之后"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"读取到的是 channel 类型的默认值"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"接受"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"阻塞"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不阻塞，读取到的是channel类型的默认值"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不阻塞，正常读取值"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"阻塞"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"发送"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"阻塞"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"panic"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"不阻塞，正常写入值"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"阻塞"}]}]}]},{"ID":"20231219230532-jbd6wzv","Type":"NodeList","ListData":{},"Properties":{"id":"20231219230532-jbd6wzv","updated":"20231219230532"},"Children":[{"ID":"20231219230532-ene42xo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219230532-ene42xo","updated":"20231219230532"},"Children":[{"ID":"20231219230532-fgt0c5t","Type":"NodeParagraph","Properties":{"id":"20231219230532-fgt0c5t","updated":"20231219230532"},"Children":[{"Type":"NodeText","Data":"给一个 nil Channel 发送数据，造成永远阻塞；"}]}]},{"ID":"20231219230532-7ktkc3s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219230532-7ktkc3s","updated":"20231219230532"},"Children":[{"ID":"20231219230532-dafss17","Type":"NodeParagraph","Properties":{"id":"20231219230532-dafss17","updated":"20231219230532"},"Children":[{"Type":"NodeText","Data":"从一个 nil Channel 接受数据，造成永远阻塞；"}]}]},{"ID":"20231219230532-zuhzi4t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219230532-zuhzi4t","updated":"20231219230532"},"Children":[{"ID":"20231219230532-8bzqze3","Type":"NodeParagraph","Properties":{"id":"20231219230532-8bzqze3","updated":"20231219230532"},"Children":[{"Type":"NodeText","Data":"给一个已经关闭的Channel发送数据，引起 panic；"}]}]},{"ID":"20231219230532-y2ayb9e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219230532-y2ayb9e","updated":"20231219230532"},"Children":[{"ID":"20231219230532-itzk14d","Type":"NodeParagraph","Properties":{"id":"20231219230532-itzk14d","updated":"20231219230532"},"Children":[{"Type":"NodeText","Data":"从一个已经关闭的Channel接受数据，如果缓冲区为空，则返回零值；"}]}]},{"ID":"20231219230532-7e3gr6k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231219230532-7e3gr6k","updated":"20231219230532"},"Children":[{"ID":"20231219230532-h1kvtvn","Type":"NodeParagraph","Properties":{"id":"20231219230532-h1kvtvn","updated":"20231219230532"},"Children":[{"Type":"NodeText","Data":"无缓冲的Channel是同步的，而有缓冲的Channel是非同步的"}]}]}]}]}