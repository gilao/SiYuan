{"ID":"20231218223024-vst53mt","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f331","id":"20231218223024-vst53mt","tags":"Go-goroutine,协程,线程\u0026amp;进程,公众号-Golang语言开发栈","title":"Go 协程为什么比进程和线程占用的系统资源低？","updated":"20231218224258"},"Children":[{"ID":"20231218223454-ot69mmm","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218223454-ot69mmm","updated":"20231218223459"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231218223532-mtk0le6","Type":"NodeParagraph","Properties":{"id":"20231218223532-mtk0le6","updated":"20231218223541"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"进程是一个可执行程序在运行时的一块独立的虚拟内存"},{"Type":"NodeTextMark","TextMarkType":"sup strong","TextMarkTextContent":"[1]"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"空间，Linux 给每个进程分配一个虚拟内存空间，包括栈空间、未使用内存、堆空间、BSS、DATA、TEXT 等。"}]},{"ID":"20231218223532-iph9vhg","Type":"NodeParagraph","Properties":{"id":"20231218223532-iph9vhg","updated":"20231218223555"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"线程可以理解为轻量级进程，多个线程“寄生”在一个进程中，每个线程有独立的栈空间，其它虚拟内存空间，多个线程共享，所以线程之间通信比较简单，也就是说线程之间可以通过共享内存通信。"}]},{"ID":"20231218223532-dmkkb4x","Type":"NodeParagraph","Properties":{"id":"20231218223532-dmkkb4x","updated":"20231218223604"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"进程和线程都是 CPU 的一个执行单元，在内核态切换，切换成本较高。"}]},{"ID":"20231218223532-e7tx4k4","Type":"NodeParagraph","Properties":{"id":"20231218223532-e7tx4k4","updated":"20231218223615"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"协程是用户态的一个伪执行单元，在用户态切换执行流程，切换成本较低。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231218223609-ffigjer","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218223609-ffigjer","updated":"20231218223626"},"Children":[{"Type":"NodeText","Data":"切换执行单元的成本"}]},{"ID":"20231218223635-te75abe","Type":"NodeParagraph","Properties":{"id":"20231218223635-te75abe","updated":"20231218223635"},"Children":[{"Type":"NodeText","Data":"我们通过介绍线程和协程的切换流程，讲述为什么在内核态切换的成本较高，而在用户态切换的成本较低？"}]},{"ID":"20231218223635-qadoc12","Type":"NodeParagraph","Properties":{"id":"20231218223635-qadoc12","updated":"20231218223635"},"Children":[{"Type":"NodeText","Data":"因为进程和线程都是内核态切换，并且进程切换成本比线程切换成本更高，所以只介绍线程切换和协程切换的切换成本。"}]},{"ID":"20231218223636-ewqfakr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231218223636-ewqfakr","updated":"20231218223650"},"Children":[{"Type":"NodeText","Data":"内核态切换-线程"}]},{"ID":"20231218223845-qry1qld","Type":"NodeParagraph","Properties":{"id":"20231218223845-qry1qld","updated":"20231218223845"},"Children":[{"Type":"NodeText","Data":"在了解线程在内核态切换之前，我们先了解一下什么是 CPU 时间片"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[2]"},{"Type":"NodeText","Data":"，在操作系统中，我们会安装很多软件，并且我们会同时使用多个软件，而 CPU 资源有限。"}]},{"ID":"20231218223845-tw53hz0","Type":"NodeParagraph","Properties":{"id":"20231218223845-tw53hz0","updated":"20231218224016"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color2);"},"TextMarkType":"text","TextMarkTextContent":"为了让多个软件可以在操作系统中同时运行，CPU 分成一个个的时间片，在每个时间片中运行一个软件的一个线程，因为时间片非常短，所以我们会感觉多个软件在同时运行。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color2);\"}"}]},{"ID":"20231218223845-ex4gmfu","Type":"NodeParagraph","Properties":{"id":"20231218223845-ex4gmfu","updated":"20231218223845"},"Children":[{"Type":"NodeText","Data":"在编写代码时，我们为了可以让程序被分配到更多的 CPU 资源，可以多创建一些线程，用于提升程序运行的效率。需要注意的是，线程并不是创建越多越好。"}]},{"ID":"20231218223845-qssjlgn","Type":"NodeParagraph","Properties":{"id":"20231218223845-qssjlgn","updated":"20231218224040"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color4);"},"TextMarkType":"strong text","TextMarkTextContent":"因为 CPU 在内核态切换执行单元（线程）时，会有时间成本，在进行切换执行单元时，需要保存寄存器中的数据，将原执行单元的状态保存，切换操作也会占用 CPU 资源（时间片），从而减少了供线程运行的 CPU 资源（时间片）。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color4);\"}"}]},{"ID":"20231218223845-trh63bm","Type":"NodeParagraph","Properties":{"id":"20231218223845-trh63bm","updated":"20231218223845"},"Children":[{"Type":"NodeText","Data":"除了时间成本之外，还会有性能开销，系统内核调度线程，需要用户空间和内核空间切换，因为只有拥有最高权限的内核空间才可以调度线程，限于篇幅，我们不再展开叙述。"}]},{"ID":"20231218223851-bunmb1r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231218223851-bunmb1r","updated":"20231218224102"},"Children":[{"Type":"NodeText","Data":"用户态切换-协程"}]},{"ID":"20231218224110-w5w1osv","Type":"NodeParagraph","Properties":{"id":"20231218224110-w5w1osv","updated":"20231218224118"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因为通过创建线程（执行单元），为程序争取更多的 CPU 资源，在线程切换时也会浪费 CPU 资源（时间成本），所以可以将执行单元不再在内核态运行，改为在用户态运行，也就是协程。"}]},{"ID":"20231218224110-w2nm9do","Type":"NodeParagraph","Properties":{"id":"20231218224110-w2nm9do","updated":"20231218224132"},"Children":[{"Type":"NodeText","Data":"协程的切换成本较低，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"是因为切换比较简单，并且是在用户态进行切换，切换的时间成本较低（纳秒级），只需将当前协程的 CPU 寄存器的状态先保存起来，然后将需要 CPU 资源的协程的 CPU 寄存器的状态加载到 CPU 寄存器中。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231218224110-p98p11w","Type":"NodeParagraph","Properties":{"id":"20231218224110-p98p11w","updated":"20231218224110"},"Children":[{"Type":"NodeText","Data":"关于 Go 协程的调度，我们在之前的文章中介绍过，此处不再赘述。"}]},{"ID":"20231218224134-lilt77z","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218224134-lilt77z","updated":"20231218224141"},"Children":[{"Type":"NodeText","Data":"内存占用"}]},{"ID":"20231218224216-9prfcfw","Type":"NodeParagraph","Properties":{"id":"20231218224216-9prfcfw","updated":"20231218224216"},"Children":[{"Type":"NodeText","Data":"除了 CPU 资源有限之外，内存资源也是有限的，所以我们还需要了解进程、线程、协程的内存占用。"}]},{"ID":"20231218224216-9c6itbw","Type":"NodeParagraph","Properties":{"id":"20231218224216-9c6itbw","updated":"20231218224216"},"Children":[{"Type":"NodeText","Data":"读者朋友们应该知道 32 位操作系统只支持 4G 内存的内存条，这是因为进程在 32 位操作系统中最多只能占用 4G 内存，而在 64 位操作系统中可以占用更多内存。"}]},{"ID":"20231218224216-c9zg8bb","Type":"NodeParagraph","Properties":{"id":"20231218224216-c9zg8bb","updated":"20231218224216"},"Children":[{"Type":"NodeText","Data":"线程占用内存一般是 10MB，不同的操作系统版本之间有些差异，区间在 4M - 64M。"}]},{"ID":"20231218224216-h41v6xo","Type":"NodeParagraph","Properties":{"id":"20231218224216-h41v6xo","updated":"20231218224239"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"协程占用内存最小，一个协程占用 2KB 左右的内存。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231218224233-smzng2n","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218224233-smzng2n","updated":"20231218224250"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231218224257-33f4px2","Type":"NodeParagraph","Properties":{"id":"20231218224257-33f4px2","updated":"20231218224257"},"Children":[{"Type":"NodeText","Data":"本文我们主要介绍为什么 Go 协程比进程和线程占用的系统资源低，通过进程、线程、协程的 CPU 资源和内存占用的比较，发现无论是在切换时消耗的 CPU 资源（时间片），还是内存占用，Go 协程都有明显优势。"}]},{"ID":"20231218224257-2v0q5dc","Type":"NodeParagraph","Properties":{"id":"20231218224257-2v0q5dc","updated":"20231218224257"},"Children":[{"Type":"NodeText","Data":"一句话总结就是 Go 协程的切换成本和内存占用比线程和进程都低。"}]},{"ID":"20231218224257-j10eto6","Type":"NodeParagraph","Properties":{"id":"20231218224257-j10eto6","updated":"20231218224257"},"Children":[{"Type":"NodeText","Data":"需要注意的是，Go 协程占用系统资源低，并不代表可以无限创建 Go 协程。"}]},{"ID":"20231218224258-uo2dcnh","Type":"NodeParagraph","Properties":{"id":"20231218224258-uo2dcnh"}}]}