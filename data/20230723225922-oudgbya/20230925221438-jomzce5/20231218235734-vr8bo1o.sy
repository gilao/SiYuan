{"ID":"20231218235734-vr8bo1o","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f36e","id":"20231218235734-vr8bo1o","tags":"公众号-Golang语言开发栈,Go-类型转换,Go 常用库,Go-strconv库,Go-cast库","title":"Go 语言类型转换的陷阱","updated":"20231219001812"},"Children":[{"ID":"20231218235805-zs22i8w","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218235805-zs22i8w","updated":"20231218235845"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231218235855-4tvd5ps","Type":"NodeParagraph","Properties":{"id":"20231218235855-4tvd5ps","updated":"20231219001343"},"Children":[{"Type":"NodeText","Data":"Go 语言作为强类型语言，在使用 Golang 开发项目时，经常会遇到类型转换的场景，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"整型之间可以直接转换，字节切片和字符串之间也可以直接转换。"}]},{"ID":"20231218235855-a0ocfel","Type":"NodeParagraph","Properties":{"id":"20231218235855-a0ocfel","updated":"20231219001354"},"Children":[{"Type":"NodeText","Data":"但是，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"如果整型和字符串之间做类型转换，则需要使用 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"strconv"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 标准库提供的函数。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231218235856-pwmqoey","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218235856-pwmqoey","updated":"20231219000132"},"Children":[{"Type":"NodeText","Data":"标准库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​类型转换"}]},{"ID":"20231219000132-7u8b2ws","Type":"NodeParagraph","Properties":{"id":"20231219000132-7u8b2ws","updated":"20231219000606"},"Children":[{"Type":"NodeText","Data":"Go 语言标准库 strconv"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[1]"},{"Type":"NodeText","Data":" 提供了一些类型转换的函数，比如在项目开发中使用比较多的整型和字符串之间的类型转换。"}]},{"ID":"20231219000607-fnna7x0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219000607-fnna7x0","updated":"20231219000614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\nfunc main() {\n salary := 5000\n salaryStr := strconv.Itoa(salary)\n fmt.Printf(\"%T salary=%d\\n\", salary, salary)\n fmt.Printf(\"%T salaryStr=%s\\n\", salaryStr, salaryStr)\n\n age := \"23\"\n ageInt, err := strconv.Atoi(age)\n fmt.Printf(\"%T age=%s\\n\", age, age)\n fmt.Printf(\"%T ageInt=%d err=%v\\n\", ageInt, ageInt, err)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218235734-7ghnl8w","Type":"NodeParagraph","Properties":{"id":"20231218235734-7ghnl8w","updated":"20231219000620"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20231219000620-a7te5bn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219000620-a7te5bn","updated":"20231219000629"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\nint salary=5000\nstring salaryStr=5000\nstring age=23\nint ageInt=23 err=\u003cnil\u003e\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219000636-3luirck","Type":"NodeParagraph","Properties":{"id":"20231219000636-3luirck","updated":"20231219000636"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们使用标准库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​ 将整型变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"salary"},{"Type":"NodeText","Data":"​ 转换为字符串类型变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"salaryStr"},{"Type":"NodeText","Data":"​；将字符串类型变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"age"},{"Type":"NodeText","Data":"​ 转换为整型变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ageInt"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231219000636-wahg4px","Type":"NodeParagraph","Properties":{"id":"20231219000636-wahg4px","updated":"20231219001659"},"Children":[{"Type":"NodeText","Data":"但是，读者朋友们有没有发现一个问题，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们使用标准库 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"strconv"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 提供的函数 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"Atoi"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 将字符串类型变量转换为整型变量，得到的是 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"int"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 类型，如果我们需要得到一个 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"int8"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 类型的变量，我们需要继续做类型转换"},{"Type":"NodeText","Data":"，例如："}]},{"ID":"20231219000636-t1zlnyx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219000636-t1zlnyx","updated":"20231219000653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"age := \"23\"\nageInt, err := strconv.Atoi(age)\nageInt8 := int8(ageInt)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219000724-91588ti","Type":"NodeParagraph","Properties":{"id":"20231219000724-91588ti","updated":"20231219001709"},"Children":[{"Type":"NodeText","Data":"也就是说，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果我们需要将一个字符串类型的变量转换为一个非 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"int"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 类型的整型变量，需要做二次转换，在实际项目开发中，使用起来稍微繁琐一些。"}]},{"ID":"20231219000724-zx197pl","Type":"NodeParagraph","Properties":{"id":"20231219000724-zx197pl","updated":"20231219000724"},"Children":[{"Type":"NodeText","Data":"此外，使用标准库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​ 做类型转换，除了在一些场景中稍微繁琐之外，还有另外一个问题，我们先阅读以下一段代码。"}]},{"ID":"20231219000726-mt6zjtn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219000726-mt6zjtn","updated":"20231219000733"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\nfunc main() {\n  phoneNumber := \"138001380001380013800013800138000\"\n phoneNumberInt, err := strconv.Atoi(phoneNumber)\n fmt.Printf(\"%T phoneNumber=%s\\n\", phoneNumber, phoneNumber)\n fmt.Printf(\"%T phoneNumberInt=%d err=%v\\n\", phoneNumberInt, phoneNumberInt, err)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219000735-y7skxuw","Type":"NodeParagraph","Properties":{"id":"20231219000735-y7skxuw","updated":"20231219000739"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20231219000740-rckmnds","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219000740-rckmnds","updated":"20231219000747"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"string phoneNumber=138001380001380013800013800138000\nint phoneNumberInt=9223372036854775807 err=strconv.Atoi: parsing \"138001380001380013800013800138000\": value out of range\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219000757-87lytzj","Type":"NodeParagraph","Properties":{"id":"20231219000757-87lytzj","updated":"20231219000757"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码输出的错误信息 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"value out of range"},{"Type":"NodeText","Data":"​，也就是说如果我们需要转换的值超出返回，Go 语言标准库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​ 提供的函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Atoi"},{"Type":"NodeText","Data":"​ 会返回错误。"}]},{"ID":"20231219000757-ew2sh5g","Type":"NodeParagraph","Properties":{"id":"20231219000757-ew2sh5g","updated":"20231219001726"},"Children":[{"Type":"NodeText","Data":"所以，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在使用函数 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"Atoi"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 时，我们要做好参数验证和错误处理。"}]},{"ID":"20231219000757-j92y09l","Type":"NodeParagraph","Properties":{"id":"20231219000757-j92y09l","updated":"20231219000757"},"Children":[{"Type":"NodeText","Data":"有没有使用更简单的类型转换库，接下来，我们来看一下流行的三方库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231219000802-ss7u06z","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231219000802-ss7u06z","updated":"20231219000828"},"Children":[{"Type":"NodeText","Data":"三方库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​ 类型转换"}]},{"ID":"20231219000829-oape8zk","Type":"NodeParagraph","Properties":{"id":"20231219000829-oape8zk","updated":"20231219000954"},"Children":[{"Type":"NodeText","Data":"Go 类型转换的三方库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​ 是一个使用比较多的库，我们使用 cast"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[2]"},{"Type":"NodeText","Data":" 来处理 Part02 的类型转换需求，代码如下："}]},{"ID":"20231219000955-x1cx5jo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219000955-x1cx5jo","updated":"20231219001005"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n  age2 := \"23\"\n age2Int8 := cast.ToInt8(age2)\n fmt.Printf(\"%T age2=%s\\n\", age2, age2)\n fmt.Printf(\"%T age2Int8=%d\\n\", age2Int8, age2Int8)\n\n phoneNumber2 := \"138001380001380013800013800138000\"\n phoneNumber2Int := cast.ToInt(phoneNumber2)\n fmt.Printf(\"%T phoneNumber2=%s\\n\", phoneNumber2, phoneNumber2)\n fmt.Printf(\"%T phoneNumber2Int=%d\\n\", phoneNumber2Int, phoneNumber2Int)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219001006-i45jdiy","Type":"NodeParagraph","Properties":{"id":"20231219001006-i45jdiy","updated":"20231219001011"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20231219001012-gy981gy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219001012-gy981gy","updated":"20231219001020"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"string age2=23\nint8 age2Int8=23\nstring phoneNumber2=138001380001380013800013800138000\nint phoneNumber2Int=0\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219001029-v16h8fe","Type":"NodeParagraph","Properties":{"id":"20231219001029-v16h8fe","updated":"20231219001738"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们可以发现，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"cast"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 可以直接将字符串类型的变量转换为我们需要的整型变量，使用起来不再感到繁琐。"}]},{"ID":"20231219001029-v4qwoqg","Type":"NodeParagraph","Properties":{"id":"20231219001029-v4qwoqg","updated":"20231219001745"},"Children":[{"Type":"NodeText","Data":"同时，需要注意的是，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果转换失败，将返回类型零值，字符串类型变量 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"phoneNumber2"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 在使用 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"cast"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 转换为 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"int"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 类型的变量时，返回的结果就是 "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"int"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 的类型零值。"}]},{"ID":"20231219001029-ptvvvcf","Type":"NodeParagraph","Properties":{"id":"20231219001029-ptvvvcf","updated":"20231219001029"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​ 比使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​ 更简单，而且不需要处理错误。但是，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​ 还有一个陷阱，我们需要特别注意一下，我们先阅读以下一段代码："}]},{"ID":"20231219001031-q6j3rf7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219001031-q6j3rf7","updated":"20231219001039"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n  month := \"07\"\n monthInt8 := cast.ToInt8(month)\n fmt.Printf(\"%T month=%s\\n\", month, month)\n fmt.Printf(\"%T monthInt8=%d\\n\", monthInt8, monthInt8)\n\n month2 := \"08\"\n month2Int8 := cast.ToInt8(month2)\n fmt.Printf(\"%T month2=%s\\n\", month2, month2)\n fmt.Printf(\"%T month2Int8=%d\\n\", month2Int8, month2Int8)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219001042-8hpjx6p","Type":"NodeParagraph","Properties":{"id":"20231219001042-8hpjx6p","updated":"20231219001047"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20231219001048-7g6rose","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219001048-7g6rose","updated":"20231219001056"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"string month=07\nint8 monthInt8=7\nstring month2=08\nint8 month2Int8=0\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219001056-v8c6zda","Type":"NodeParagraph","Properties":{"id":"20231219001056-v8c6zda","updated":"20231219001112"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码的输出结果，我们可以发现使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​ 将字符串类型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"month"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"month2"},{"Type":"NodeText","Data":"​ 转换为整型时，字符串是以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;0\u0026quot;"},{"Type":"NodeText","Data":"​ 开头的月份，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;07\u0026quot;"},{"Type":"NodeText","Data":"​ 转换后得到整型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"7"},{"Type":"NodeText","Data":"​，而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;08\u0026quot;"},{"Type":"NodeText","Data":"​ 转换后得到整型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231219001113-8fwjmwv","Type":"NodeParagraph","Properties":{"id":"20231219001113-8fwjmwv","updated":"20231219001118"},"Children":[{"Type":"NodeText","Data":"我们再使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​ 转换 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;08\u0026quot;"},{"Type":"NodeText","Data":"​，代码如下："}]},{"ID":"20231219001120-g9r0doy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219001120-g9r0doy","updated":"20231219001127"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n  month2 := \"08\"\n month2Int8 := cast.ToInt8(month2)\n fmt.Printf(\"%T month2=%s\\n\", month2, month2)\n fmt.Printf(\"%T month2Int8=%d\\n\", month2Int8, month2Int8)\n\n month2Int2, err := strconv.Atoi(month2)\n fmt.Printf(\"%T month2Int2=%d err=%v\\n\", month2Int2, month2Int2, err)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219001128-9g3wiyz","Type":"NodeParagraph","Properties":{"id":"20231219001128-9g3wiyz","updated":"20231219001133"},"Children":[{"Type":"NodeText","Data":"输出结果："}]},{"ID":"20231219001133-pm5o7qo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231219001133-pm5o7qo","updated":"20231219001143"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\nint8 month2Int8=0\nint month2Int2=8 err=\u003cnil\u003e\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231219001143-9m0ztqw","Type":"NodeParagraph","Properties":{"id":"20231219001143-9m0ztqw","updated":"20231219001812"},"Children":[{"Type":"NodeText","Data":"读者朋友们从输出结果可以看到"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"，"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;08\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 使用 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"strconv"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 转换后得到整型 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"8"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"，所以我们在转换以一个或多个 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;0\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 开头的字符串为整型时，字符串 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;0\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 后面的数值大于 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"7"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 将不能使用 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"cast"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 转换，最好就是在转换以一个或多个 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;0\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 开头的字符串为整型时，比如 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;08\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"、"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;009\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"、"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"\u0026quot;00010\u0026quot;"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 等，使用 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"strconv"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 转换，而不要使用 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"cast"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 转换。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231219001156-yan0323","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231219001156-yan0323","updated":"20231219001203"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231219001211-losr41c","Type":"NodeParagraph","Properties":{"id":"20231219001211-losr41c","updated":"20231219001211"},"Children":[{"Type":"NodeText","Data":"本文我们介绍 Go 语言类型转换的两个库，分别是标准库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"strconv"},{"Type":"NodeText","Data":"​ 和三方库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​，其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cast"},{"Type":"NodeText","Data":"​ 更方便、更安全，但是也有陷阱，我们需要特别注意，避免在项目开发中掉进陷阱。"}]},{"ID":"20231219001211-oslrdf1","Type":"NodeParagraph","Properties":{"id":"20231219001211-oslrdf1","updated":"20231219001211"},"Children":[{"Type":"NodeText","Data":"关于这两个类型转换库的更多用法，感兴趣的读者朋友们可以熟读手册，多多动手练习。"}]}]}