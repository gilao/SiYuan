{"ID":"20231220010845-ya1pgod","Spec":"1","Type":"NodeDocument","Properties":{"icon":"26cf","id":"20231220010845-ya1pgod","tags":"公众号-Golang语言开发栈,Go-变量","title":"Golang 语言编程技巧之变量","updated":"20231220011146"},"Children":[{"ID":"20231220010906-bf11no4","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231220010906-bf11no4","updated":"20231220011009"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231220010845-rsr8b08","Type":"NodeParagraph","Properties":{"id":"20231220010845-rsr8b08","updated":"20231220011015"},"Children":[{"Type":"NodeText","Data":"在 Golang 语言中，有多种声明变量的方式，但是每种方式都有它特殊的功能，本文我们介绍一些关于变量的编程技巧。"}]},{"ID":"20231220011015-w5tgcj2","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231220011015-w5tgcj2","updated":"20231220011023"},"Children":[{"Type":"NodeText","Data":"编程技巧"}]},{"ID":"20231220011033-alqd1r0","Type":"NodeParagraph","Properties":{"id":"20231220011033-alqd1r0","updated":"20231220011033"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"类型推断"}]},{"ID":"20231220011033-0yn1lnr","Type":"NodeParagraph","Properties":{"id":"20231220011033-0yn1lnr","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"类型推断就是在声明一个变量时，不指定变量的数据类型，变量的数据类型由右值推断得到。"}]},{"ID":"20231220011033-017egqp","Type":"NodeParagraph","Properties":{"id":"20231220011033-017egqp","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"Golang 语言是一门静态类型的编程语言，我们声明变量或常量时，需要指定变量或常量的数据类型，我们可以显示指定变量的数据类型，也可以使用 Golang 语言的类型推断。"}]},{"ID":"20231220011033-cy8fg2d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231220011033-cy8fg2d","updated":"20231220011033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main () {\n    var name string\n    name = \"frank\"\n    fmt.Printf(\"val:%s type:%T\\n\", name, name)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231220011033-7ip8zo1","Type":"NodeParagraph","Properties":{"id":"20231220011033-7ip8zo1","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"阅读上面的代码，我们声明变量 name 的数据类型是 string，看上去也没什么问题，那么，我们再来看一段代码。"}]},{"ID":"20231220011033-lhx3fs6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231220011033-lhx3fs6","updated":"20231220011033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main () {\n    var name string\n    name = getVal()\n    fmt.Printf(\"val:%s type:%T\\n\", name, name)\n}\n\nfunc getVal () string {\n  return \"frank\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231220011033-5e4o3er","Type":"NodeParagraph","Properties":{"id":"20231220011033-5e4o3er","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们将变量 name 的赋值改为使用函数表达式赋值。目前 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getVal()"},{"Type":"NodeText","Data":"​ 函数的返回结果的数据类型是 string，如果未来我们需要修改 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getVal()"},{"Type":"NodeText","Data":"​ 函数的返回结果的数据类型为 int，我们 main 函数中的变量 name 也需要进行对应的修改，这样使得我们的应用程序不灵活，增加了我们维护（重构）代码的难度。"}]},{"ID":"20231220011033-5xm8st7","Type":"NodeParagraph","Properties":{"id":"20231220011033-5xm8st7","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"如果我们在声明变量 name 时，不使用指定数据类型的方式，而是通过简短声明的方式（也可以使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"var 变量名 = 表达式"},{"Type":"NodeText","Data":"​ 的语法）使用 Golang 语言的类型推断功能，上述的问题就解决了。如果你使用过动态类型（弱类型）的编程语言，比如 Python 或 PHP，是不是感觉这种方式，可能会有所感触。"}]},{"ID":"20231220011033-scdto06","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231220011033-scdto06","updated":"20231220011033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main () {\n    // var name = getVal()\n    name := getVal()\n    fmt.Printf(\"val:%s type:%T\\n\", name, name)\n}\n\n// func getVal () string {\n//     return \"frank\"\n// }\n\nfunc gateVal () int {\n    return 1\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231220011033-oq8wtl3","Type":"NodeParagraph","Properties":{"id":"20231220011033-oq8wtl3","style":"background-color: var(--b3-font-background3); color: var(--b3-font-color1);","updated":"20231220011033"},"Children":[{"Type":"NodeTextMark","Properties":{"parent-style":"background-color: var(--b3-font-background3); color: var(--b3-font-color1);"},"TextMarkType":"strong","TextMarkTextContent":"重新声明变量"},{"Type":"NodeKramdownSpanIAL","Data":"{: parent-style=\"background-color: var(--b3-font-background3); color: var(--b3-font-color1);\"}"}]},{"ID":"20231220011033-nudth1n","Type":"NodeParagraph","Properties":{"id":"20231220011033-nudth1n","style":"background-color: var(--b3-font-background3); color: var(--b3-font-color1);","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"所谓重新声明变量，就是将已经存在的变量重新定义，使用简短声明变量的方式，将同一代码块中的变量重新声明。"}]},{"ID":"20231220011033-mvz3uzz","Type":"NodeParagraph","Properties":{"id":"20231220011033-mvz3uzz","style":"background-color: var(--b3-font-background3); color: var(--b3-font-color1);","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"重新声明变量有一些前提条件："}]},{"ID":"20231220011033-40bbfsb","Type":"NodeList","ListData":{},"Properties":{"id":"20231220011033-40bbfsb","style":"background-color: var(--b3-font-background3); color: var(--b3-font-color1);","updated":"20231220011033"},"Children":[{"ID":"20231220011033-ly5o5xf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231220011033-ly5o5xf","style":"color: var(--b3-font-color1); background-color: var(--b3-font-background3);","updated":"20231220011033"},"Children":[{"ID":"20231220011033-pcpdu67","Type":"NodeParagraph","Properties":{"id":"20231220011033-pcpdu67","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"重新声明变量，必须使用简短声明方式。"}]}]},{"ID":"20231220011033-p2jkd3p","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231220011033-p2jkd3p","style":"color: var(--b3-font-color1); background-color: var(--b3-font-background3);","updated":"20231220011033"},"Children":[{"ID":"20231220011033-mctxbid","Type":"NodeParagraph","Properties":{"id":"20231220011033-mctxbid","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"重新声明变量，不能修改原变量的数据类型。"}]}]},{"ID":"20231220011033-tzk61wb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231220011033-tzk61wb","style":"color: var(--b3-font-color1); background-color: var(--b3-font-background3);","updated":"20231220011033"},"Children":[{"ID":"20231220011033-9w1vkc9","Type":"NodeParagraph","Properties":{"id":"20231220011033-9w1vkc9","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"重新声明变量，左边的变量至少包含一个未声明过的变量。"}]}]},{"ID":"20231220011033-b9yo0iz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231220011033-b9yo0iz","style":"color: var(--b3-font-color1); background-color: var(--b3-font-background3);","updated":"20231220011033"},"Children":[{"ID":"20231220011033-ukvfjaz","Type":"NodeParagraph","Properties":{"id":"20231220011033-ukvfjaz","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"重新声明变量，只作用于同一代码块中的变量。"}]}]}]},{"ID":"20231220011033-uy96p4y","Type":"NodeParagraph","Properties":{"id":"20231220011033-uy96p4y","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"我们了解了重新声明变量，不知道有没有体会到它的好处，在我看来，重新声明变量的好处就是可以减少代码量。"}]},{"ID":"20231220011033-782n5jv","Type":"NodeParagraph","Properties":{"id":"20231220011033-782n5jv","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"未使用重新声明变量："}]},{"ID":"20231220011033-6v2l0z6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231220011033-6v2l0z6","updated":"20231220011033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main () {\n    var name string\n    name = \"lucy\"\n    var age uint\n    age = 18\n    name = \"frank\"\n    fmt.Printf(\"name:%s age:%d\\n\", name, age)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231220011033-sx2fb8f","Type":"NodeParagraph","Properties":{"id":"20231220011033-sx2fb8f","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"使用重新声明变量："}]},{"ID":"20231220011033-juqez6b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231220011033-juqez6b","updated":"20231220011033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main () {\n    var name string\n    name = \"lucy\"\n    name, age := \"frank\", 18\n    fmt.Printf(\"name:%s age:%d\\n\", name, age)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231220011033-klu2nar","Type":"NodeParagraph","Properties":{"id":"20231220011033-klu2nar","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"阅读上面这两段代码，我们发现使用简短声明的方式重新声明变量 name，无需关心被赋值的变量中是否已存在，而且可以减少代码量，并且必须使用简短声明的方式，因为如果使用 var 关键字声明已存在的变量会引发编译错误。"}]},{"ID":"20231220011033-gootvz8","Type":"NodeParagraph","Properties":{"id":"20231220011033-gootvz8","updated":"20231220011033"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"同名变量"}]},{"ID":"20231220011033-ks3s999","Type":"NodeParagraph","Properties":{"id":"20231220011033-ks3s999","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"所谓同名变量，是指在不同代码块，相同变量名的变量，因为在同一代码块，变量名相同会引发编译错误。"}]},{"ID":"20231220011033-hlh76mz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231220011033-hlh76mz","updated":"20231220011033"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"fmt\"\n)\nvar a = 1\nfunc main () {\n    a := \"golang\"\n    fmt.Printf(\"val:%s type:%T\\n\", a, a)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231220011033-yb8x775","Type":"NodeParagraph","Properties":{"id":"20231220011033-yb8x775","updated":"20231220011033"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们分别在 main 包代码块和 main 函数代码块声明了变量 a，通过打印结果可以看出打印的是 main 函数中的变量 a。该示例代码说明位于不同代码块的同名变量，因为其作用域也不同，所以不会引发编译错误。"}]},{"ID":"20231220011138-7hbgn6x","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231220011138-7hbgn6x","updated":"20231220011141"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231220011142-y5mh729","Type":"NodeParagraph","Properties":{"id":"20231220011142-y5mh729","updated":"20231220011146"},"Children":[{"Type":"NodeText","Data":"本文我们介绍了关于变量的一些编程技巧，包括类型推断，重新声明变量和同名变量。如果用好这些关于变量的编程技巧，可以有效提升代码的可维护性和健壮性。"}]}]}