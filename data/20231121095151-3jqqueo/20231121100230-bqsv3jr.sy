{"ID":"20231121100230-bqsv3jr","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231121100230-bqsv3jr","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231121100230-bqsv3jr\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231121100234-tz7oqzp\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231121100234-y5zciey\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;","tags":"需要仔细看","title":"Prometheus Go client library 详解","updated":"20231121100251"},"Children":[{"ID":"20231121100234-tz7oqzp","Type":"NodeParagraph","Properties":{"id":"20231121100234-tz7oqzp","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231121100234-ysbb4q5","Type":"NodeParagraph","Properties":{"id":"20231121100234-ysbb4q5","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"Prometheus 支持 4 种 指标类型，分别是 Counter、Gauge、Histogram 和 Summary。"}]},{"ID":"20231121100234-bhxm6tx","Type":"NodeParagraph","Properties":{"id":"20231121100234-bhxm6tx","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Counter"},{"Type":"NodeText","Data":" 指标类型，指标值是只能递增，不能递减的数值。需要注意的是，当 Prometheus server 重启时，指标值会被重置为 0。该指标类型可用于统计接口的请求数、错误数等使用场景。"}]},{"ID":"20231121100234-73saqy8","Type":"NodeParagraph","Properties":{"id":"20231121100234-73saqy8","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Gauge"},{"Type":"NodeText","Data":" 指标类型，指标值是可增可减的数值。该指标类型可用于统计 CPU、内存和硬盘的使用情况，goroutine 的数量等使用场景。"}]},{"ID":"20231121100234-gdnggkw","Type":"NodeParagraph","Properties":{"id":"20231121100234-gdnggkw","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Histogram"},{"Type":"NodeText","Data":" 指标类型，指标值基于桶分布。开发者可以自定义桶的区间。该指标类型可用于统计接口的延时请求数等使用场景。"}]},{"ID":"20231121100234-sdxxb1m","Type":"NodeParagraph","Properties":{"id":"20231121100234-sdxxb1m","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Summary"},{"Type":"NodeText","Data":" 指标类型，与 Histogram 类似，区别是 Histogram 直接统计了不同区间中的指标数值，而 Summary 是基于客户端级别，因此不能统计多个实例的聚合数据。该指标类型可用于预先不知道指标桶划分区间的场景。"}]},{"ID":"20231121100234-blf7u0a","Type":"NodeParagraph","Properties":{"id":"20231121100234-blf7u0a","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"**02 **"}]},{"ID":"20231121100234-5kvuo74","Type":"NodeParagraph","Properties":{"id":"20231121100234-5kvuo74","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"使用方式"}]},{"ID":"20231121100234-dayrbmt","Type":"NodeParagraph","Properties":{"id":"20231121100234-dayrbmt","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"一般在实际应用场景中，通常一个指标需要对应多条时序数据（Label Name 为维度），此时就需要使用支持标签的指标类型。"}]},{"ID":"20231121100234-dhpn3l0","Type":"NodeParagraph","Properties":{"id":"20231121100234-dhpn3l0","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"Prometheus 有 4 种支持标签的指标类型，分别是 ConterVec、GaugeVec、HistogramVec、SummaryVec。"}]},{"ID":"20231121100234-xnxyd2t","Type":"NodeParagraph","Properties":{"id":"20231121100234-xnxyd2t","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"CounterVec"}]},{"ID":"20231121100234-6wq7i35","Type":"NodeParagraph","Properties":{"id":"20231121100234-6wq7i35","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"CounterVec 与 Counter 的区别是，它支持 Label，我们可以按照 Lable 维度，将同一个指标的数据按照 Lable 分组统计。例如，同一个 Api 接口的请求数，我们可以定义 Lable (Code、Method)，按照状态码和 HTTP 请求方式，分组统计同一个 Api 接口的请求数。"}]},{"ID":"20231121100234-xv02319","Type":"NodeParagraph","Properties":{"id":"20231121100234-xv02319","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20231121100234-bnmxw2n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231121100234-bnmxw2n","updated":"20231121100234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var (\n // 标签名\n labelNames = []string{\"host\", \"code\", \"path\", \"method\"}\n // HttpReqs 实例化 CounterVec\n HttpReqs *prometheus.CounterVec = prometheus.NewCounterVec(prometheus.CounterOpts{\n  Name: \"http_requests_total\",\n  Help: \"How many HTTP requests processed, partitioned by status code and HTTP method.\",\n },\n  labelNames,\n )\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231121100234-c9r72kp","Type":"NodeParagraph","Properties":{"id":"20231121100234-c9r72kp","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewCounterVec"},{"Type":"NodeText","Data":"​ 创建一个实例，它支持多个方法，我们可以使用其中一个性能相对较高的方法 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"WithLabelValues"},{"Type":"NodeText","Data":"​，返回一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Counter"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231121100234-lwwaroh","Type":"NodeParagraph","Properties":{"id":"20231121100234-lwwaroh","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20231121100234-wcp4cwn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231121100234-wcp4cwn","updated":"20231121100234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func Metrics() gin.HandlerFunc {\n return func(c *gin.Context) {\n  c.Next()\n  host := c.RemoteIP()\n  code := fmt.Sprintf(\"%d\", c.Writer.Status())\n  method := c.Request.Method\n  labelsByHttpReqs := []string{host, code, c.FullPath(), method}\n  prometheus_metrics.HttpReqs.WithLabelValues(labelsByHttpReqs...).Inc()\n }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231121100234-y2lec6z","Type":"NodeParagraph","Properties":{"id":"20231121100234-y2lec6z","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Counter"},{"Type":"NodeText","Data":"​ 支持两个方法，分别是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Inc()"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Add()"},{"Type":"NodeText","Data":"​，其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Inc()"},{"Type":"NodeText","Data":"​ 将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Counter"},{"Type":"NodeText","Data":"​ 增加 1，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Add()"},{"Type":"NodeText","Data":"​ 将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Counter"},{"Type":"NodeText","Data":"​ 增加给定值，需要注意的是，给定值必须为非负值，否则会引发 panic。"}]},{"ID":"20231121100234-qjjumlk","Type":"NodeParagraph","Properties":{"id":"20231121100234-qjjumlk","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"需要注意的是，在我们创建指标之后，还需要使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Register()"},{"Type":"NodeText","Data":"​ 接口的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Register()"},{"Type":"NodeText","Data":"​ 方法，注册之后才可以被收集到指标数据。如果需要注册多个指标，可以使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MustRegister()"},{"Type":"NodeText","Data":"​ 方法。"}]},{"ID":"20231121100234-6h1qbe5","Type":"NodeParagraph","Properties":{"id":"20231121100234-6h1qbe5","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20231121100234-mxlfu9g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231121100234-mxlfu9g","updated":"20231121100234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"reg := prometheus.NewRegistry()\nreg.MustRegister(prometheus_metrics.HttpReqs, prometheus_metrics.OpsQueued, prometheus_metrics.Latencies, prometheus_metrics.Temps)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231121100234-3yz14fd","Type":"NodeParagraph","Properties":{"id":"20231121100234-3yz14fd","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GaugeVec"}]},{"ID":"20231121100234-xil3dc1","Type":"NodeParagraph","Properties":{"id":"20231121100234-xil3dc1","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"GaugeVec 与 Gauge 的区别是，它支持 Label，我们可以按照 Lable 维度，将同一个指标的数据按照 Lable 分组统计。"}]},{"ID":"20231121100234-t8eovg1","Type":"NodeParagraph","Properties":{"id":"20231121100234-t8eovg1","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20231121100234-e4nhp3v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231121100234-e4nhp3v","updated":"20231121100234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var (\n labelNamesByOpsQueued = []string{\n  \"user\",\n  \"type\",\n }\n OpsQueued = prometheus.NewGaugeVec(\n  prometheus.GaugeOpts{\n   Name:      \"ops_queued\",\n   Help:      \"Number of blob storage operations waiting to be processed, partitioned by user and type.\",\n  },\n  labelNamesByOpsQueued,\n )\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231121100234-1mjzupw","Type":"NodeParagraph","Properties":{"id":"20231121100234-1mjzupw","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewGaugeVec"},{"Type":"NodeText","Data":"​ 创建实例。"}]},{"ID":"20231121100234-odu390t","Type":"NodeParagraph","Properties":{"id":"20231121100234-odu390t","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"HistogramVec"}]},{"ID":"20231121100234-cxb6uwe","Type":"NodeParagraph","Properties":{"id":"20231121100234-cxb6uwe","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"HistogramVec 与 Histogram 的区别是，它支持 Label，我们可以按照 Lable 维度，将同一个指标的数据按照 Lable 分组统计。"}]},{"ID":"20231121100234-goe3h4s","Type":"NodeParagraph","Properties":{"id":"20231121100234-goe3h4s","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20231121100234-znphfrp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231121100234-znphfrp","updated":"20231121100234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var (\n labelNamesByLatencies = []string{\"method\", \"code\"}\n Latencies             = prometheus.NewHistogramVec(\n  prometheus.HistogramOpts{\n   Name:    \"http_request_duration_seconds\",\n   Help:    \"Tracks the latencies for HTTP requests.\",\n   Buckets: []float64{0.99, 0.9, 0.5},\n  },\n  labelNamesByLatencies,\n )\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231121100234-7gh5ao4","Type":"NodeParagraph","Properties":{"id":"20231121100234-7gh5ao4","updated":"20231121100234"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"SummaryVec"}]},{"ID":"20231121100234-psg6hg0","Type":"NodeParagraph","Properties":{"id":"20231121100234-psg6hg0","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"SummaryVec 与 Summary 的区别是，它支持 Label，我们可以按照 Lable 维度，将同一个指标的数据按照 Lable 分组统计。"}]},{"ID":"20231121100234-on4x8lh","Type":"NodeParagraph","Properties":{"id":"20231121100234-on4x8lh","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20231121100234-3jf6k2j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231121100234-3jf6k2j","updated":"20231121100234"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var (\n labelNamesByTemps = []string{\"species\"}\n Temps             = prometheus.NewSummaryVec(\n  prometheus.SummaryOpts{\n   Name:       \"pond_temperature_celsius\",\n   Help:       \"The temperature of the frog pond.\",\n   Objectives: map[float64]float64{0.5: 0.05, 0.9: 0.01, 0.99: 0.001},\n  },\n  labelNamesByTemps,\n )\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231121100234-38uudw8","Type":"NodeParagraph","Properties":{"id":"20231121100234-38uudw8","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NewSummaryVec"},{"Type":"NodeText","Data":"​ 创建实例。"}]},{"ID":"20231121100234-4m41o72","Type":"NodeParagraph","Properties":{"id":"20231121100234-4m41o72","updated":"20231121100239"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"03"}]},{"ID":"20231121100234-xn8kf8u","Type":"NodeParagraph","Properties":{"id":"20231121100234-xn8kf8u","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20231121100234-y5zciey","Type":"NodeParagraph","Properties":{"id":"20231121100234-y5zciey","updated":"20231121100234"},"Children":[{"Type":"NodeText","Data":"本文我们主要介绍 4 种指标类型的含义，通过 Label 可以将 4 种类型的指标数据，按照 Label 的维度分组统计，我们以支持 Label 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CounterVec"},{"Type":"NodeText","Data":"​ 为例，介绍了它的使用方式，其余 3 种支持 Label 的指标也提供了简单的使用示例。"}]}]}