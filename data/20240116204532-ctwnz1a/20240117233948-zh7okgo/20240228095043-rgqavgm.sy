{"ID":"20240228095043-rgqavgm","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f377","id":"20240228095043-rgqavgm","title":"3-21 Pytorch 与张量的索引与数据筛选","updated":"20240228102520"},"Children":[{"ID":"20240228095104-t0viw61","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240228095104-t0viw61","updated":"20240228095115"},"Children":[{"Type":"NodeText","Data":"Tensor 的索引与数据筛选"}]},{"ID":"20240228095043-hm40q5q","Type":"NodeList","ListData":{},"Properties":{"id":"20240228095043-hm40q5q","updated":"20240228100309"},"Children":[{"ID":"20240228095241-wk06j6a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228095241-wk06j6a","updated":"20240228100309"},"Children":[{"ID":"20240228095241-ms38amv","Type":"NodeParagraph","Properties":{"id":"20240228095241-ms38amv","updated":"20240228100309"},"Children":[{"Type":"NodeText","Data":"torch.where(condition,x,y):按照条件从x和y中选出满足条件的元素组成新的tensor；"}]}]}]},{"ID":"20240228095210-eckws20","Type":"NodeList","ListData":{},"Properties":{"id":"20240228095210-eckws20","updated":"20240228095245"},"Children":[{"ID":"20240228095245-bmoxwll","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228095245-bmoxwll","updated":"20240228095245"},"Children":[{"ID":"20240228095245-qu3ery3","Type":"NodeParagraph","Properties":{"id":"20240228095245-qu3ery3","updated":"20240228095245"},"Children":[{"Type":"NodeText","Data":"torch.gather(input, dim,index,out=None):在指定维度上按照索引赋值输出tensor"}]}]}]},{"ID":"20240228095220-qmvcjen","Type":"NodeList","ListData":{},"Properties":{"id":"20240228095220-qmvcjen","updated":"20240228095248"},"Children":[{"ID":"20240228095248-8aflf4v","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228095248-8aflf4v","updated":"20240228095248"},"Children":[{"ID":"20240228095248-obste4a","Type":"NodeParagraph","Properties":{"id":"20240228095248-obste4a","updated":"20240228095248"},"Children":[{"Type":"NodeText","Data":"torch.index_select(input, dim,index,out=None):按照指定索引输出tensor"}]}]}]},{"ID":"20240228095236-di1j815","Type":"NodeList","ListData":{},"Properties":{"id":"20240228095236-di1j815","updated":"20240228095252"},"Children":[{"ID":"20240228095252-ebuuhll","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228095252-ebuuhll","updated":"20240228095252"},"Children":[{"ID":"20240228095252-ewsf5pu","Type":"NodeParagraph","Properties":{"id":"20240228095252-ewsf5pu","updated":"20240228095252"},"Children":[{"Type":"NodeText","Data":"torch.masked select(input,mask,out=None):按照mask输出tensor，输出为向量"}]}]},{"ID":"20240228095259-hhhb2t9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228095259-hhhb2t9"},"Children":[{"ID":"20240228095259-8bctogi","Type":"NodeParagraph","Properties":{"id":"20240228095259-8bctogi"},"Children":[{"Type":"NodeText","Data":"torch,take(input, indices):将输入看成1D-tensor，按照索引得到输出tensor"}]}]},{"ID":"20240228095306-g8dh5vf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228095306-g8dh5vf"},"Children":[{"ID":"20240228095306-1dh4jme","Type":"NodeParagraph","Properties":{"id":"20240228095306-1dh4jme"},"Children":[{"Type":"NodeText","Data":"torch.nonzero(input,out=None):输出非0元素的坐标"}]}]}]},{"ID":"20240228102520-pv040w3","Type":"NodeParagraph","Properties":{"id":"20240228102520-pv040w3"}},{"ID":"20240228102515-3pxcks1","Type":"NodeParagraph","Properties":{"id":"20240228102515-3pxcks1","updated":"20240228102519"},"Children":[{"Type":"NodeText","Data":"示例代码："}]},{"ID":"20240228101448-i4fsxhp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240228101448-i4fsxhp","updated":"20240228102511"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"import torch\n# torch.where\n\nprint(\"=== torch.where ===\")\na = torch.rand(4,4)\nb = torch.rand(4,4)\nprint(a)\nprint(b)\n\nout = torch.where(a \u003e 0.5, a, b)\nprint(out)\n\n\n\n\n# torch.index_select\nprint(\"=== torch index select\")\na = torch.rand(4,4)\nprint(a)\nout = torch.index_select(a, dim=0,index=torch.tensor([0,3,2]))\nprint(out)\nprint(out.shape)\n\n# torch.gather\nprint(\"=== torch gather ===\")\na = torch.linspace(1,16,16).view(4,4)\nprint(a)\nout = torch.gather(a, dim=0, index=torch.tensor([[0, 1, 1, 1],\n                                           [0, 1, 2, 2],\n                                           [0, 1, 3, 3]]))\nprint(out)\nprint(out.shape)\n# dim = 0, out [i,j,k] = input[index[i,j,k],j,k]\n\n# torch masked_select\nprint(\"=== torch masked_select ===\")\na = torch.linspace(1,16,16).view(4,4)\nmask = torch.gt(a,8)\nprint(a)\nprint(mask)\nout = torch.masked_select(a,mask )\nprint(out)\n\n# torch.take\nprint(\"=== torch take ===\")\na = torch.linspace(1,16,16).view(4,4)\nb = torch.take(a,index=torch.tensor([0,15,13,10]))\nprint(a)\nprint(b)\n\n# torch.nonzero\nprint(\"=== torch nonzero ===\")\na = torch.tensor([[0,1,2,0],[2,3,0,1]])\nout = torch.nonzero(a)\nprint(a)\nprint(out)\n# 稀疏表示\n\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}