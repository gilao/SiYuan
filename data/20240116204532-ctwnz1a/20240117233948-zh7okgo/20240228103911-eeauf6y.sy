{"ID":"20240228103911-eeauf6y","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f375","id":"20240228103911-eeauf6y","title":"3-22 Pytorch 与张量切片","updated":"20240228105447"},"Children":[{"ID":"20240228103927-5umissg","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240228103927-5umissg","updated":"20240228103933"},"Children":[{"Type":"NodeText","Data":"Tensor 的切片"}]},{"ID":"20240228103933-1zuedwi","Type":"NodeList","ListData":{},"Properties":{"id":"20240228103933-1zuedwi","updated":"20240228103936"},"Children":[{"ID":"20240228103936-o23zbr2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228103936-o23zbr2","updated":"20240228103936"},"Children":[{"ID":"20240228103936-kkpo6a7","Type":"NodeParagraph","Properties":{"id":"20240228103936-kkpo6a7","updated":"20240228104029"},"Children":[{"Type":"NodeText","Data":"torch.chunk(tensor, chunks,dim=0) : 按照某个维度平均分块（最后一个可能小于平均值）"}]}]},{"ID":"20240228104032-hhf7leo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240228104032-hhf7leo"},"Children":[{"ID":"20240228104032-pf5issk","Type":"NodeParagraph","Properties":{"id":"20240228104032-pf5issk","updated":"20240228104126"},"Children":[{"Type":"NodeText","Data":"torch.split(tensor, split_size_or_sections,dim=0): 按照某个维度依照第二个参数给出的list 或者int 进行分割 tensor"}]}]}]},{"ID":"20240228104130-8q4gtjc","Type":"NodeParagraph","Properties":{"id":"20240228104130-8q4gtjc","updated":"20240228104131"}},{"ID":"20240228103911-jb0aas7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240228103911-jb0aas7","updated":"20240228105447"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"import torch\na = torch.rand((3,4))\nprint(a)\nout = torch.chunk(a,2,dim=0)\nprint(out[0],out[0].shape)\nprint(out[1],out[1].shape)\nout = torch.chunk(a,2,dim=1)\nprint(out[0],out[0].shape)\nprint(out[1],out[1].shape)\nprint(\"=== torch split ===\")\nout = torch.split(a,2,dim=1)\nprint(out[0],out[0].shape)\nprint(out[1],out[1].shape)\nout = torch.split(a,3,dim=1)\nprint(out[0],out[0].shape)\nprint(out[1],out[1].shape)\na = torch.rand(10,4)\nout = torch.split(a,3,dim=0)\nprint(len(out))\n# print(out)\nfor t in out:\n    print(t, t.shape)\nout = torch.split(a,[1,3,6],dim=0)\nprint(len(out))\n# print(out)\nfor t in out:\n    print(t, t.shape)\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}