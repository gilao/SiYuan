{"ID":"20230724015342-ouob6t8","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f6f8","id":"20230724015342-ouob6t8","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724015342-ouob6t8\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724015344-jt6lpyk\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724015344-ht3h810\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724015344-jt6lpyk\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"需要仔细看,Docker","title":"11. 网络访问","updated":"20230724015350"},"Children":[{"ID":"20230724015344-jt6lpyk","Type":"NodeParagraph","Properties":{"id":"20230724015344-jt6lpyk","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"网络容器原型"}]},{"ID":"20230724015344-fpe9jgs","Type":"NodeParagraph","Properties":{"id":"20230724015344-fpe9jgs","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Docker如何与计算机的网络一同工作"}]},{"ID":"20230724015344-g41bd30","Type":"NodeParagraph","Properties":{"id":"20230724015344-g41bd30","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Docker如何构建网络容器"}]},{"ID":"20230724015344-61tvxjz","Type":"NodeParagraph","Properties":{"id":"20230724015344-61tvxjz","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如何自定义容器网络"}]},{"ID":"20230724015344-h3ptz5j","Type":"NodeParagraph","Properties":{"id":"20230724015344-h3ptz5j","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如何使容器对网络可见"}]},{"ID":"20230724015344-jeud1j3","Type":"NodeParagraph","Properties":{"id":"20230724015344-jeud1j3","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"发现网络上的其他容器"}]},{"ID":"20230724015344-evjsnuh","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015344-evjsnuh","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"1.Docker 的网络"}]},{"ID":"20230724015344-nzs7iiy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724015344-nzs7iiy","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"1. 本地Docker 网络的拓扑结构"}]},{"ID":"20230724015344-dj40gtu","Type":"NodeParagraph","Properties":{"id":"20230724015344-dj40gtu","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"每个容器各自拥有一个本地回环接口和一个分离的以太网接口，其中以太网接口连接着在主机命名空间上的另一个虚拟接口。"}]},{"ID":"20230724015344-vqv692p","Type":"NodeParagraph","Properties":{"id":"20230724015344-vqv692p","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这两个互连的接口在主机网络栈和每个容器的网络栈之间建立了连接。"}]},{"ID":"20230724015344-ceqan0h","Type":"NodeParagraph","Properties":{"id":"20230724015344-ceqan0h","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"就像经典的家庭网络，每一个容器都被赋予了一个唯一的私有IP地址，从外部的网络不能直接连接到该私有IP。"}]},{"ID":"20230724015344-vcpl08g","Type":"NodeParagraph","Properties":{"id":"20230724015344-vcpl08g","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"网络连接需要经过Docker网桥接口路由到另一网络，这个网桥接口被称为docker 0。"}]},{"ID":"20230724015344-w0hy7dp","Type":"NodeParagraph","Properties":{"id":"20230724015344-w0hy7dp","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"你可以把docker 0想象成家庭中的路由器。为每个容器创建的虚拟接口都会连接到 docker 0，这样它们就构成了一个网络。最后，这个网桥接口docker 0会连接到主机所连接的网络上。"}]},{"ID":"20230724015344-f302c6g","Type":"NodeParagraph","Properties":{"id":"20230724015344-f302c6g","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用docker命令行工具，你可以自定义IP地址、网桥接口docker 0连接的主机接口、容器之间通信的方式。"}]},{"ID":"20230724015344-z2orsrk","Type":"NodeParagraph","Properties":{"id":"20230724015344-z2orsrk","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"接口之间的连接决定了容器如何隔离或者暴露在网络中。"}]},{"ID":"20230724015344-3m6t968","Type":"NodeParagraph","Properties":{"id":"20230724015344-3m6t968","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Docker使用内核命名空间来创建这些私有的虚拟接口，但是命名空间本身并不提供网络的隔离。"}]},{"ID":"20230724015344-llpe0dq","Type":"NodeParagraph","Properties":{"id":"20230724015344-llpe0dq","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"网络暴露或者隔离是通过主机的防火墙规则（每一个主流的 Linux 发行版都运行有一个防火墙）来实现的。"}]},{"ID":"20230724015344-drk8nkh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724015344-drk8nkh","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"2. 四种网络容器原型"}]},{"ID":"20230724015344-s43wjbj","Type":"NodeParagraph","Properties":{"id":"20230724015344-s43wjbj","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"四种原型如下："}]},{"ID":"20230724015344-8b7dqln","Type":"NodeParagraph","Properties":{"id":"20230724015344-8b7dqln","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ Closed容器"}]},{"ID":"20230724015344-qls9r05","Type":"NodeParagraph","Properties":{"id":"20230724015344-qls9r05","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ Joined容器"}]},{"ID":"20230724015344-9ou95ii","Type":"NodeParagraph","Properties":{"id":"20230724015344-9ou95ii","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ Bridged容器"}]},{"ID":"20230724015344-sn3ler2","Type":"NodeParagraph","Properties":{"id":"20230724015344-sn3ler2","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ Open容器"}]},{"ID":"20230724015344-9c7c01r","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015344-9c7c01r","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"2. Closed 容器"}]},{"ID":"20230724015344-xnkffac","Type":"NodeParagraph","Properties":{"id":"20230724015344-xnkffac","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"最强大的网络容器意味着不允许任何的网络流量。这一种被称为Closed容器。"}]},{"ID":"20230724015344-me8x8h4","Type":"NodeParagraph","Properties":{"id":"20230724015344-me8x8h4","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"运行在这一种容器中的进程只能够访问本地回环接口。如果进程只需要和本身或者和其他本地进程通信的话，选择这一种是非常合适的。但是，如果容器中有任何进程想访问这种容器不支持的网络时，比如说软件想从互联网下载更新，因为进程不能访问互联网，因此使用这种原型就是不合适的。"}]},{"ID":"20230724015344-bhdyli7","Type":"NodeParagraph","Properties":{"id":"20230724015344-bhdyli7","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"你可以在 docker run 命令后添加--net none 作为参数来告诉 Docker 创建一个Closed 容器："}]},{"ID":"20230724015344-b5yxtxo","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015344-b5yxtxo","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"3. Bridge 容器"}]},{"ID":"20230724015344-3dlkwnd","Type":"NodeParagraph","Properties":{"id":"20230724015344-3dlkwnd","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Bridged容器放开了网络的隔离程度，因此这种容器入手更加容易。这种原型可定制性最高，并且被认为是最佳实践。Bridged容器拥有两个接口，一个是私有的本地回环接口，另外一个私有接口通过网桥连接到主机的其他容器。"}]},{"ID":"20230724015344-2gc5c8p","Type":"NodeParagraph","Properties":{"id":"20230724015344-2gc5c8p","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"所有连接到docker 0接口的接口都是同一个虚拟子网的一部分。这意味着它们能够互相通信，并且能通过docker 0接口和外部的网络进行通信。"}]},{"ID":"20230724015344-jvbo7vr","Type":"NodeParagraph","Properties":{"id":"20230724015344-jvbo7vr","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"选择Bridged容器的最常见理由就是进程需要访问外部网络。为了创建一个Bridge容器，你可以忽略docker run命令中的--net选项，或者将--net的值设置为bridge。下面的例子各自使用了一种方式来创建Brided容器："}]},{"ID":"20230724015344-3xexzuk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724015344-3xexzuk","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"3.1 自定义命名解析"}]},{"ID":"20230724015344-pm1pjz4","Type":"NodeParagraph","Properties":{"id":"20230724015344-pm1pjz4","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"域名系统（DNS）是一种能够将主机名映射成IP地址的协议。使用这种协议，客户端就能从某一个 IP 地址的依赖中解耦出来，转而依赖于一个固定的主机名，不管主机的 IP地址如何改变，主机名都会负责映射到这个IP。"}]},{"ID":"20230724015344-kqxebz7","Type":"NodeParagraph","Properties":{"id":"20230724015344-kqxebz7","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一个改变对外通信的最基础方式就是为IP地址创建名字。"}]},{"ID":"20230724015344-v4gd7x0","Type":"NodeParagraph","Properties":{"id":"20230724015344-v4gd7x0","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"网桥网络上的容器和其他在该网络上的计算机，拥有不具备公共可路由能力的IP地址是非常典型的。"}]},{"ID":"20230724015344-jxguedf","Type":"NodeParagraph","Properties":{"id":"20230724015344-jxguedf","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这意味着除非你运行有自己的DNS服务器，否则你不能够通过名字来映射它们。Docker提供了不同的选项来自定义DNS配置。"}]},{"ID":"20230724015344-ufw1wgx","Type":"NodeParagraph","Properties":{"id":"20230724015344-ufw1wgx","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"docker run命令有一个--hostname选项，你可以使用这个选项来设置一个新容器的主机名。"}]},{"ID":"20230724015344-n170epz","Type":"NodeParagraph","Properties":{"id":"20230724015344-n170epz","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这个选项会在该容器中的DNS覆盖系统中添加一条记录。这条记录会将提供的主机名映射成该容器的桥接IP地址。"}]},{"ID":"20230724015344-nf20kdb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724015344-nf20kdb","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"3.2 开放对容器的访问"}]},{"ID":"20230724015344-2ae7zwy","Type":"NodeParagraph","Properties":{"id":"20230724015344-2ae7zwy","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Bridged容器在默认情况下不能够被主机网络访问。容器被主机的防火墙保护了起来。默认的网络拓扑结构没有提供任何从主机外部接口到容器接口的路由。这意味着想要从主机外部访问到容器是不可能的。"}]},{"ID":"20230724015344-dtletpg","Type":"NodeParagraph","Properties":{"id":"20230724015344-dtletpg","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"。docker run命令提供了一个-p --publish=[]选项，它能够在主机网络栈上的端口和容器端口之间创建映射关系。"}]},{"ID":"20230724015344-gy5okyf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724015344-gy5okyf","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"3.3 跨容器通信"}]},{"ID":"20230724015344-77gapsq","Type":"NodeParagraph","Properties":{"id":"20230724015344-77gapsq","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"所有的容器都是使用Docker桥接网络来与其他容器或者主机网络进行通信。所有的本地 Bridged 容器都是在同一个桥接网络上，并且默认情况能够互相通信。"}]},{"ID":"20230724015344-eh25jad","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724015344-eh25jad","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"3.4 修改网桥接口的配置"}]},{"ID":"20230724015344-5rul5ka","Type":"NodeParagraph","Properties":{"id":"20230724015344-5rul5ka","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Docker提供了三个选项来自定义网桥接口，这个接口在Docker daemon首次启动时就创建了。这些选项能够让使用者做以下事情："}]},{"ID":"20230724015344-zu45evn","Type":"NodeParagraph","Properties":{"id":"20230724015344-zu45evn","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ 定义网桥的地址和子网"}]},{"ID":"20230724015344-exj0phb","Type":"NodeParagraph","Properties":{"id":"20230724015344-exj0phb","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ 定义容器所能够获取的IP地址的范围"}]},{"ID":"20230724015344-c9vfkm1","Type":"NodeParagraph","Properties":{"id":"20230724015344-c9vfkm1","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"■ 定义最大传输单元（MTU）"}]},{"ID":"20230724015344-33711ti","Type":"NodeParagraph","Properties":{"id":"20230724015344-33711ti","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"为了定义网桥的IP地址和子网范围，可以在启动Docker后台进程时使用--bip选项。"}]},{"ID":"20230724015344-6zm7pg8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015344-6zm7pg8","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"4. Joined 容器"}]},{"ID":"20230724015344-b599z64","Type":"NodeParagraph","Properties":{"id":"20230724015344-b599z64","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"容器共享一个网络栈，在这种情况下，容器之间没有任何的隔离。这意味着更少的控制和安全。尽管这不是最不安全的原型，但它是第一个打破容器之间界限的。"}]},{"ID":"20230724015344-igs8de1","Type":"NodeParagraph","Properties":{"id":"20230724015344-igs8de1","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这种类型的原型通过将某一个容器接口的访问权提供给另外一个新的容器来构建。在这种情况下，接口就类似于共享的数据卷。"}]},{"ID":"20230724015344-fi4vsuc","Type":"NodeParagraph","Properties":{"id":"20230724015344-fi4vsuc","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Joined容器的最简单方式就是创建一个具体的容器，然后将它和一个新的容器连接起来。第一个命令启动了一个在本地回环接口监听的服务器，第二个命令列出了当前容器所有的开放端口。你会发现，第二个命令会将第一个命令创建的开放端口也列出来，因为两个容器共享相同的网络接口："}]},{"ID":"20230724015344-3mrp9qc","Type":"NodeParagraph","Properties":{"id":"20230724015344-3mrp9qc","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当你想要不同容器上的程序通过本地回环接口进行通信时，请使用Joined容器。"}]},{"ID":"20230724015344-duewp89","Type":"NodeParagraph","Properties":{"id":"20230724015344-duewp89","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当一个容器中的程序将要改变Joined网络栈，而另外一个程序将要使用那个被改变的网络栈时，请使用Joined容器。"}]},{"ID":"20230724015344-7q69tjn","Type":"NodeParagraph","Properties":{"id":"20230724015344-7q69tjn","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当你想要监控另外一个容器中某个程序的网络流量时，请使用Joined容器。"}]},{"ID":"20230724015344-cvoddm2","Type":"NodeParagraph","Properties":{"id":"20230724015344-cvoddm2","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在你因为Docker允许任何新的容器连接正在运行的容器，而开始讨论Docker如何不安全之前，请记住给Docker发送任何命令都是需要特殊权限的，而那些拥有特权的攻击者可以做任何他们想做的事情，包括攻击任何容器中的代码和数据。在那种情况下，这种网络栈的共享行为就显得不那么严重了。"}]},{"ID":"20230724015344-nkvmjky","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015344-nkvmjky","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"5. Open 容器"}]},{"ID":"20230724015344-k81fgyo","Type":"NodeParagraph","Properties":{"id":"20230724015344-k81fgyo","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Open容器非常的危险。它没有网络容器，并且对主机网络有完全的访问权。包括对重要主机服务的访问权。"}]},{"ID":"20230724015344-4ycxrt5","Type":"NodeParagraph","Properties":{"id":"20230724015344-4ycxrt5","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Open容器没有提供任何隔离，当你没有其他选择时它才应该被考虑。"}]},{"ID":"20230724015344-nv6bz7v","Type":"NodeParagraph","Properties":{"id":"20230724015344-nv6bz7v","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"唯一一个补救的特性就是，没有特权的容器依旧不能够重新配置网络栈。"}]},{"ID":"20230724015344-el7rq2d","Type":"NodeParagraph","Properties":{"id":"20230724015344-el7rq2d","updated":"20230724015344"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当你指定host作为docker run命令的--net选项的值时，这种类型的容器会被创建："}]},{"ID":"20230724015344-ht3h810","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015344-ht3h810","updated":"20230724015344"},"Children":[{"Type":"NodeText","Data":"6. 跨容器依赖"}]}]}