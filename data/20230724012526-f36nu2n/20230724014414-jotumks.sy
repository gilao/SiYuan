{"ID":"20230724014414-jotumks","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f33f","id":"20230724014414-jotumks","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724014414-jotumks\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724014425-xyd57rc\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724014429-e2tygsr\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724014425-xyd57rc\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"Docker,Docker面试问题","title":"5. 容器虚拟化原理","updated":"20230724014425"},"Children":[{"ID":"20230724014425-xyd57rc","Type":"NodeParagraph","Properties":{"id":"20230724014425-xyd57rc"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"“虚拟化是一种资源管理技术，是将计算机的各种实体资源，如服务器、网络、内存及存储等，予以抽象、转换后呈现出来，打破实体结构间的不可切割的障碍，使用户可以比原本的组态更好的方式来应用这些资源。”"}]},{"ID":"20230724014429-5o0kre7","Type":"NodeParagraph","Properties":{"id":"20230724014429-5o0kre7","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"虚拟化的核心是对资源的抽象，目标往往是为了在同一个主机上同时运行多个系统或应用，从而提高系统资源的利用率，并且带来降低成本、方便管理和容错容灾等好处。"}]},{"ID":"20230724014429-e70nvwk","Type":"NodeParagraph","Properties":{"id":"20230724014429-e70nvwk","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"基于软件的虚拟化从对象所在的层次，又可以分为应用虚拟化和平台虚拟化。"}]},{"ID":"20230724014429-3qoo6bu","Type":"NodeParagraph","Properties":{"id":"20230724014429-3qoo6bu","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"·完全虚拟化。虚拟机模拟完整的底层硬件环境和特权指令的执行过程，客户操作系统无需进行修改。"}]},{"ID":"20230724014429-47h24x9","Type":"NodeParagraph","Properties":{"id":"20230724014429-47h24x9","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"硬件辅助虚拟化。利用硬件（主要是CPU）辅助支持（目前x86体系结构上可用的硬件辅助虚拟化技术包括Intel-VT和AMD-V）处理敏感指令来实现完全虚拟化的功能，客户操作系统无需修改，例如VMware Workstation、Xen、KVM。"}]},{"ID":"20230724014429-iwkyjkp","Type":"NodeParagraph","Properties":{"id":"20230724014429-iwkyjkp","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"·部分虚拟化。只针对部分硬件资源进行虚拟化，客户操作系统需要进行修改。现在有些虚拟化技术的早期版本仅支持部分虚拟化。"}]},{"ID":"20230724014429-37h7fou","Type":"NodeParagraph","Properties":{"id":"20230724014429-37h7fou","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"·准虚拟化（paravirtualization）。部分硬件接口以软件的形式提供给客户机操作系统，客户操作系统需要进行修改，例如早期的Xen。"}]},{"ID":"20230724014429-k3o1vil","Type":"NodeParagraph","Properties":{"id":"20230724014429-k3o1vil","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"·操作系统级虚拟化。内核通过创建多个虚拟的操作系统实例（内核和库）来隔离不同的进程。容器相关技术即在这个范畴。"}]},{"ID":"20230724014429-7bgr015","Type":"NodeParagraph","Properties":{"id":"20230724014429-7bgr015","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"操作系统虚拟化最大的特点就是不需要额外的supervisor支持。"}]},{"ID":"20230724014429-g3urgb4","Type":"NodeParagraph","Properties":{"id":"20230724014429-g3urgb4","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"容器和虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。"}]},{"ID":"20230724014429-7uzq0so","Type":"NodeParagraph","Properties":{"id":"20230724014429-7uzq0so","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"容器内的进程直接运行于宿主机（即所在主机）的内核，容器内没有自己的内核，也没有进行硬件虚拟，比传统虚拟机更加的轻便。"}]},{"ID":"20230724014429-e2tygsr","Type":"NodeParagraph","Properties":{"id":"20230724014429-e2tygsr","updated":"20230724014429"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不同于虚拟机，Docker容器不使用硬件虚拟化。运行在Docker容器中的程序接口和主机的 Linux 内核直接打交道。因为容器中运行的程序和计算机的操作系统之间没有额外的中间层，没有资源被冗余软件的运行或虚拟硬件的模拟而浪费掉。这是一个很重要的区别。"}]}]}