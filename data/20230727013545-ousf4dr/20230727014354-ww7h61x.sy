{"ID":"20230727014354-ww7h61x","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f95f","id":"20230727014354-ww7h61x","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230727014354-ww7h61x\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230727014357-i7aa86d\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230727014357-1rs62tf\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230727014357-i7aa86d\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"服务治理,限流,高并发架构","title":"限流的实现","updated":"20230727014406"},"Children":[{"ID":"20230727014357-i7aa86d","Type":"NodeParagraph","Properties":{"id":"20230727014357-i7aa86d","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在高并发场景下，我们经常会使用一些常用方法，去应对流量高峰，比如限流、熔断、降级"},{"Type":"NodeText","Data":"，今天我们聊聊限流。"}]},{"ID":"20230727014357-bsf8v37","Type":"NodeParagraph","Properties":{"id":"20230727014357-bsf8v37","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"什么是限流呢？限流是限制到达系统的并发请求数量，保证系统能够正常响应部分用户请求，而对于超过限制的流量，则通过拒绝服务的方式保证整体系统的可用性。"}]},{"ID":"20230727014357-dl7i6im","Type":"NodeParagraph","Properties":{"id":"20230727014357-dl7i6im","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"根据限流作用范围，可以分为单机限流和分布式限流"},{"Type":"NodeText","Data":"；根据限流方式，又分为"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"计数器、滑动窗口、漏桶限令牌桶限流"},{"Type":"NodeText","Data":"，下面我们对这块详细进行讲解。"}]},{"ID":"20230727014357-4nk824v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727014357-4nk824v","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"常用的限流方式"}]},{"ID":"20230727014357-7h61kjb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727014357-7h61kjb","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"计数器"}]},{"ID":"20230727014357-b98x8vh","Type":"NodeParagraph","Properties":{"id":"20230727014357-b98x8vh","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"计数器是一种最简单的限流算法，其原理是：在一段时间间隔内，对请求进行计数，与阀值进行比较判断是否需要限流，一旦到了时间临界点，将计数器清零。"}]},{"ID":"20230727014357-02cuo2d","Type":"NodeParagraph","Properties":{"id":"20230727014357-02cuo2d","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这个就像你去坐车一样，车厢规定了多少个位置，满了就不让上车了，不然就是超载了，被交警叔叔抓到了就要罚款的，如果我们的系统那就不是罚款的事情了，可能直接崩掉了。"}]},{"ID":"20230727014357-js9j6c1","Type":"NodeParagraph","Properties":{"id":"20230727014357-js9j6c1","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"程序执行逻辑："}]},{"ID":"20230727014357-oj5afgv","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-oj5afgv","updated":"20230727014357"},"Children":[{"ID":"20230727014357-owed9gv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-owed9gv","updated":"20230727014357"},"Children":[{"ID":"20230727014357-xgsb7qk","Type":"NodeParagraph","Properties":{"id":"20230727014357-xgsb7qk","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可以在程序中设置一个变量 count，当过来一个请求我就将这个数 +1，同时记录请求时间。"}]}]},{"ID":"20230727014357-ez3x3qr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-ez3x3qr","updated":"20230727014357"},"Children":[{"ID":"20230727014357-8mabbhe","Type":"NodeParagraph","Properties":{"id":"20230727014357-8mabbhe","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当下一个请求来的时候判断 count 的计数值是否超过设定的频次，以及当前请求的时间和第一次请求时间是否在 1 分钟内。"}]}]},{"ID":"20230727014357-9pc7j38","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-9pc7j38","updated":"20230727014357"},"Children":[{"ID":"20230727014357-fj39iag","Type":"NodeParagraph","Properties":{"id":"20230727014357-fj39iag","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果在 1 分钟内并且超过设定的频次则证明请求过多，后面的请求就拒绝掉。"}]}]},{"ID":"20230727014357-v0fz3zs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-v0fz3zs","updated":"20230727014357"},"Children":[{"ID":"20230727014357-3y0x48b","Type":"NodeParagraph","Properties":{"id":"20230727014357-3y0x48b","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果该请求与第一个请求的间隔时间大于计数周期，且 count 值还在限流范围内，就重置 count。"}]}]}]},{"ID":"20230727014357-ty8t9em","Type":"NodeParagraph","Properties":{"id":"20230727014357-ty8t9em","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"那么问题来了，如果有个需求对于某个接口 /query 每分钟最多允许访问 200 次，假设有个用户在第 59 秒的最后几毫秒瞬间发送 200 个请求，当 59 秒结束后 Counter 清零了，他在下一秒的时候又发送 200 个请求。"}]},{"ID":"20230727014357-43w7z8l","Type":"NodeParagraph","Properties":{"id":"20230727014357-43w7z8l","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"那么在 1 秒钟内这个用户发送了 2 倍的请求，这个是符合我们的设计逻辑的，这也是计数器方法的设计缺陷，系统可能会承受恶意用户的大量请求，甚至击穿系统。这种方法虽然简单，但也有个大问题就是没有很好的处理单位时间的边界。"}]},{"ID":"20230727014357-lwemmn3","Type":"NodeParagraph","Properties":{"id":"20230727014357-lwemmn3","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"img"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\7ba261bc04c7442b8d93d6c159b7a992tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp?lastModify=1690393435"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727014357-4ict08o","Type":"NodeParagraph","Properties":{"id":"20230727014357-4ict08o","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不过说实话，这个计数引用了锁，在高并发场景，这个方式可能不太实用，我建议将锁去掉，然后将 l.count++ 的逻辑通过原子计数处理，这样就可以保证 l.count 自增时不会被多个线程同时执行，即通过原子计数的方式实现限流。"}]},{"ID":"20230727014357-roou2yn","Type":"NodeBlockquote","Properties":{"id":"20230727014357-roou2yn","updated":"20230727014357"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727014357-o1tw097","Type":"NodeParagraph","Properties":{"id":"20230727014357-o1tw097","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"为了不影响阅读，代码详见："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flml200701158%2Fgo_demo%2Fblob%2Fmaster%2Fcurrent_limit%2Fcount.go","TextMarkTextContent":"github.com/lml20070115…"}]}]},{"ID":"20230727014357-l5cyzwf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727014357-l5cyzwf","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"滑动窗口"}]},{"ID":"20230727014357-p9ogoms","Type":"NodeParagraph","Properties":{"id":"20230727014357-p9ogoms","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"滑动窗口是针对计数器存在的临界点缺陷，所谓滑动窗口（Sliding window）是一种流量控制技术，这个词出现在 TCP 协议中。滑动窗口把固定时间片进行划分，并且随着时间的流逝，进行移动，固定数量的可以移动的格子，进行计数并判断阀值。"}]},{"ID":"20230727014357-c5i11c9","Type":"NodeParagraph","Properties":{"id":"20230727014357-c5i11c9","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"img"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\5755d987c19740f1a693f7db5294e2a1tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp?lastModify=1690393435"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727014357-0t541z6","Type":"NodeParagraph","Properties":{"id":"20230727014357-0t541z6","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"上图中我们用红色的虚线代表一个时间窗口（一分钟），每个时间窗口有 6 个格子，每个格子是 10 秒钟。每过 10 秒钟时间窗口向右移动一格，可以看红色箭头的方向。我们为每个格子都设置一个独立的计数器 Counter，假如一个请求在 0:45 访问了那么我们将第五个格子的计数器 +1（也是就是 0:40~0:50），在判断限流的时候需要把所有格子的计数加起来和设定的频次进行比较即可。"}]},{"ID":"20230727014357-f7don37","Type":"NodeParagraph","Properties":{"id":"20230727014357-f7don37","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"那么滑动窗口如何解决我们上面遇到的问题呢？来看下面的图："}]},{"ID":"20230727014357-1nnk7bv","Type":"NodeParagraph","Properties":{"id":"20230727014357-1nnk7bv","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"img"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\fde74d994f12411087e6f3c3f4417b66tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp?lastModify=1690393435"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727014357-520igsl","Type":"NodeParagraph","Properties":{"id":"20230727014357-520igsl","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当用户在 0:59 秒钟发送了 200 个请求就会被第六个格子的计数器记录 +200，当下一秒的时候时间窗口向右移动了一个，此时计数器已经记录了该用户发送的 200 个请求，所以再发送的话就会触发限流，则拒绝新的请求。"}]},{"ID":"20230727014357-nxl3pfe","Type":"NodeParagraph","Properties":{"id":"20230727014357-nxl3pfe","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其实计数器就是滑动窗口啊，只不过只有一个格子而已，所以想让限流做的更精确只需要划分更多的格子就可以了，为了更精确我们也不知道到底该设置多少个格子，格子的数量影响着滑动窗口算法的精度，依然有时间片的概念，无法根本解决临界点问题。"}]},{"ID":"20230727014357-jhbyde5","Type":"NodeBlockquote","Properties":{"id":"20230727014357-jhbyde5","updated":"20230727014357"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727014357-1d4kq83","Type":"NodeParagraph","Properties":{"id":"20230727014357-1d4kq83","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"为了不影响阅读，代码详见："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2FRussellLuo%2Fslidingwindow","TextMarkTextContent":"github.com/RussellLuo/…"}]}]},{"ID":"20230727014357-s6yx9o8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727014357-s6yx9o8","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"漏桶"}]},{"ID":"20230727014357-0lql31k","Type":"NodeParagraph","Properties":{"id":"20230727014357-0lql31k","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"漏桶算法（Leaky Bucket），原理就是一个固定容量的漏桶，按照固定速率流出水滴。"}]},{"ID":"20230727014357-tpwls4g","Type":"NodeParagraph","Properties":{"id":"20230727014357-tpwls4g","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用过水龙头都知道，打开龙头开关水就会流下滴到水桶里，而漏桶指的是水桶下面有个漏洞可以出水,如果水龙头开的特别大那么水流速就会过大，这样就可能导致水桶的水满了然后溢出。"}]},{"ID":"20230727014357-leqqb75","Type":"NodeParagraph","Properties":{"id":"20230727014357-leqqb75","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"img"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\4af9ff00cab84a4fa622cd8e2a279f56tplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp?lastModify=1690393435"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727014357-twoudro","Type":"NodeBlockquote","Properties":{"id":"20230727014357-twoudro","updated":"20230727014357"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727014357-kavql66","Type":"NodeParagraph","Properties":{"id":"20230727014357-kavql66","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"图片如果看不清，可单击图片并放大。"}]}]},{"ID":"20230727014357-2h2cuz2","Type":"NodeParagraph","Properties":{"id":"20230727014357-2h2cuz2","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一个固定容量的桶，有水流进来，也有水流出去。对于流进来的水来说，我们无法预计一共有多少水会流进来，也无法预计水流的速度。但是对于流出去的水来说，这个桶可以固定水流出的速率（处理速度），从而达到流量整形和流量控制的效果。"}]},{"ID":"20230727014357-u9uedim","Type":"NodeParagraph","Properties":{"id":"20230727014357-u9uedim","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"漏桶算法有以下特点："}]},{"ID":"20230727014357-1px6c74","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-1px6c74","updated":"20230727014357"},"Children":[{"ID":"20230727014357-mc5asbn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-mc5asbn","updated":"20230727014357"},"Children":[{"ID":"20230727014357-fytx9fp","Type":"NodeParagraph","Properties":{"id":"20230727014357-fytx9fp","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"漏桶具有固定容量，出水速率是固定常量（流出请求）"}]}]},{"ID":"20230727014357-5yllper","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-5yllper","updated":"20230727014357"},"Children":[{"ID":"20230727014357-d78a3vu","Type":"NodeParagraph","Properties":{"id":"20230727014357-d78a3vu","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果桶是空的，则不需流出水滴"}]}]},{"ID":"20230727014357-4jyv2ay","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-4jyv2ay","updated":"20230727014357"},"Children":[{"ID":"20230727014357-dp4wdr0","Type":"NodeParagraph","Properties":{"id":"20230727014357-dp4wdr0","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可以以任意速率流入水滴到漏桶（流入请求）"}]}]},{"ID":"20230727014357-lrp3xdz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-lrp3xdz","updated":"20230727014357"},"Children":[{"ID":"20230727014357-jwwbm5f","Type":"NodeParagraph","Properties":{"id":"20230727014357-jwwbm5f","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果流入水滴超出了桶的容量，则流入的水滴溢出（新请求被拒绝）"}]}]}]},{"ID":"20230727014357-t0ktqub","Type":"NodeParagraph","Properties":{"id":"20230727014357-t0ktqub","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"漏桶限制的是常量流出速率（即流出速率是一个固定常量值），所以最大的速率就是出水的速率，不能出现突发流量。"}]},{"ID":"20230727014357-ukqikm8","Type":"NodeBlockquote","Properties":{"id":"20230727014357-ukqikm8","updated":"20230727014357"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727014357-tzd8pz1","Type":"NodeParagraph","Properties":{"id":"20230727014357-tzd8pz1","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"为了不影响阅读，代码详见："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flml200701158%2Fgo_demo%2Fblob%2Fmaster%2Fcurrent_limit%2Fleaky_bucket.go","TextMarkTextContent":"github.com/lml20070115…"}]}]},{"ID":"20230727014357-s1iu0au","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727014357-s1iu0au","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"令牌桶"}]},{"ID":"20230727014357-kijbx4d","Type":"NodeParagraph","Properties":{"id":"20230727014357-kijbx4d","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"令牌桶算法（Token Bucket）是网络流量整形（Traffic Shaping）和速率限制（Rate Limiting）中最常使用的一种算法。典型情况下，令牌桶算法用来控制发送到网络上的数据的数目，并允许突发数据的发送。"}]},{"ID":"20230727014357-ys5ew5v","Type":"NodeParagraph","Properties":{"id":"20230727014357-ys5ew5v","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"img"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\68b7fe323e9e4fe0a83eb14897f018batplv-k3u1fbpfcp-zoom-in-crop-mark4536000.webp?lastModify=1690393435"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727014357-ve9ljwo","Type":"NodeBlockquote","Properties":{"id":"20230727014357-ve9ljwo","updated":"20230727014357"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727014357-n1dxo1u","Type":"NodeParagraph","Properties":{"id":"20230727014357-n1dxo1u","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"图片如果看不清，可单击图片并放大。"}]}]},{"ID":"20230727014357-7fxm7sb","Type":"NodeParagraph","Properties":{"id":"20230727014357-7fxm7sb","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们有一个固定的桶，桶里存放着令牌（token）。一开始桶是空的，系统按固定的时间（rate）往桶里添加令牌，直到桶里的令牌数满，多余的请求会被丢弃。当请求来的时候，从桶里移除一个令牌，如果桶是空的则拒绝请求或者阻塞。"}]},{"ID":"20230727014357-99ywy6b","Type":"NodeParagraph","Properties":{"id":"20230727014357-99ywy6b","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"令牌桶有以下特点："}]},{"ID":"20230727014357-pziw0rf","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-pziw0rf","updated":"20230727014357"},"Children":[{"ID":"20230727014357-u0bl256","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-u0bl256","updated":"20230727014357"},"Children":[{"ID":"20230727014357-4vl1o86","Type":"NodeParagraph","Properties":{"id":"20230727014357-4vl1o86","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"令牌按固定的速率被放入令牌桶中"}]}]},{"ID":"20230727014357-6vdtxet","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-6vdtxet","updated":"20230727014357"},"Children":[{"ID":"20230727014357-h0ejkxl","Type":"NodeParagraph","Properties":{"id":"20230727014357-h0ejkxl","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"桶中最多存放 B 个令牌，当桶满时，新添加的令牌被丢弃或拒绝"}]}]},{"ID":"20230727014357-2lor4t5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-2lor4t5","updated":"20230727014357"},"Children":[{"ID":"20230727014357-4po0kx6","Type":"NodeParagraph","Properties":{"id":"20230727014357-4po0kx6","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果桶中的令牌不足 N 个，则不会删除令牌，且请求将被限流（丢弃或阻塞等待）"}]}]}]},{"ID":"20230727014357-qkc8kg3","Type":"NodeParagraph","Properties":{"id":"20230727014357-qkc8kg3","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"令牌桶限制的是平均流入速率"},{"Type":"NodeText","Data":"（允许突发请求，只要有令牌就可以处理，支持一次拿3个令牌，4个令牌...），"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并允许一定程度突发流量，所以也是非常常用的限流算法。"}]},{"ID":"20230727014357-chrjeeh","Type":"NodeBlockquote","Properties":{"id":"20230727014357-chrjeeh","updated":"20230727014357"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727014357-o6o7b66","Type":"NodeParagraph","Properties":{"id":"20230727014357-o6o7b66","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"为了不影响阅读，代码详见："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn?target=https%3A%2F%2Fgithub.com%2Flml200701158%2Fgo_demo%2Fblob%2Fmaster%2Fcurrent_limit%2Ftoken_bucket.go","TextMarkTextContent":"github.com/lml20070115…"}]}]},{"ID":"20230727014357-zgryhtc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727014357-zgryhtc","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"Redis + Lua 分布式限流"}]},{"ID":"20230727014357-vlrbnkf","Type":"NodeParagraph","Properties":{"id":"20230727014357-vlrbnkf","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"单机版限流仅能保护自身节点，但无法保护应用依赖的各种服务，并且在进行节点扩容、缩容时也无法准确控制整个服务的请求限制。"}]},{"ID":"20230727014357-lm650yi","Type":"NodeParagraph","Properties":{"id":"20230727014357-lm650yi","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"而分布式限流，以集群为维度，可以方便的控制这个集群的请求限制，从而保护下游依赖的各种服务资源。"}]},{"ID":"20230727014357-5gv9lp7","Type":"NodeParagraph","Properties":{"id":"20230727014357-5gv9lp7","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分布式限流最关键的是要将限流服务做成原子化"},{"Type":"NodeText","Data":"，我们可以借助 Redis 的计数器，Lua 执行的原子性，进行分布式限流，大致的 Lua 脚本代码如下："}]},{"ID":"20230727014357-m7utcph","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230727014357-m7utcph","updated":"20230727014357"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"local key = \"rate.limit:\" .. KEYS[1] --限流KEY\nlocal limit = tonumber(ARGV[1])        --限流大小\nlocal current = tonumber(redis.call('get', key) or \"0\")\nif current + 1 \u003e limit then --如果超出限流大小\n  return 0\nelse  --请求数+1，并设置1秒过期\n  redis.call(\"INCRBY\", key,\"1\")\n   redis.call(\"expire\", key,\"1\")\n   return current + 1\nend\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230727014357-95zo2db","Type":"NodeParagraph","Properties":{"id":"20230727014357-95zo2db","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"限流逻辑（Java 语言）："}]},{"ID":"20230727014357-x1fz7e9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230727014357-x1fz7e9","updated":"20230727014357"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"public static boolean accquire() throws IOException, URISyntaxException {\n    Jedis jedis = new Jedis(\"127.0.0.1\");\n    File luaFile = new File(RedisLimitRateWithLUA.class.getResource(\"/\").toURI().getPath() + \"limit.lua\");\n    String luaScript = FileUtils.readFileToString(luaFile);\n\n    String key = \"ip:\" + System.currentTimeMillis()/1000; // 当前秒\n    String limit = \"5\"; // 最大限制\n    List\u003cString\u003e keys = new ArrayList\u003cString\u003e();\n    keys.add(key);\n    List\u003cString\u003e args = new ArrayList\u003cString\u003e();\n    args.add(limit);\n    Long result = (Long)(jedis.eval(luaScript, keys, args)); // 执行lua脚本，传入参数\n    return result == 1;\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230727014357-1f1rc0v","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727014357-1f1rc0v","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"聊聊其它"}]},{"ID":"20230727014357-73dqpkl","Type":"NodeParagraph","Properties":{"id":"20230727014357-73dqpkl","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"上面的限流方式，主要是针对服务器进行限流，我们也可以对容器进行限流，比如 Tomcat、Nginx 等限流手段。"}]},{"ID":"20230727014357-3mhe2zc","Type":"NodeParagraph","Properties":{"id":"20230727014357-3mhe2zc","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Tomcat 可以设置最大线程数（maxThreads），当并发超过最大线程数会排队等待执行；而 Nginx 提供了两种限流手段：一是控制速率，二是控制并发连接数。"}]},{"ID":"20230727014357-sx560ba","Type":"NodeParagraph","Properties":{"id":"20230727014357-sx560ba","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"对于 Java 语言，我们其实有相关的限流组件，比如大家常用的 RateLimiter，其实就是基于令牌桶算法"},{"Type":"NodeText","Data":"，大家知道为什么唯独选用令牌桶么？"}]},{"ID":"20230727014357-ia5mgfx","Type":"NodeParagraph","Properties":{"id":"20230727014357-ia5mgfx","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"对于 Go 语言，也有该语言特定的限流方式，比如可以通过 channel 实现并发控制限流，也支持第三方库 httpserver 实现限流，详见这篇 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://link.juejin.cn?target=https%3A%2F%2Fmp.weixin.qq.com%2Fs%3F__biz%3DMzg3OTU5NzQ1Mw%3D%3D%26mid%3D2247484037%26idx%3D1%26sn%3Dc638e6def7aee7f14c467202c9a55d4f%26chksm%3Dcf034067f874c9712a288149593073c38696c6fd550e215a6f7dd0e0418ac4da8146b6c46970%26token%3D227017804%26lang%3Dzh_CN%23rd","TextMarkTextContent":"《Go 限流的常见方法》"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727014357-17da08c","Type":"NodeParagraph","Properties":{"id":"20230727014357-17da08c","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在实际的限流场景中，我们也可以控制单个 IP、城市、渠道、设备 id、用户 id 等在一定时间内发送的请求数；如果是开放平台，需要为每个 appkey 设置独立的访问速率规则。"}]},{"ID":"20230727014357-v8h6po9","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727014357-v8h6po9","updated":"20230727014357"},"Children":[{"Type":"NodeText","Data":"限流对比"}]},{"ID":"20230727014357-49jakyx","Type":"NodeParagraph","Properties":{"id":"20230727014357-49jakyx","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"下面我们就对常用的线程策略，总结它们的优缺点，便于以后选型。"}]},{"ID":"20230727014357-xycw52e","Type":"NodeParagraph","Properties":{"id":"20230727014357-xycw52e","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"计数器："}]},{"ID":"20230727014357-36uhplu","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-36uhplu","updated":"20230727014357"},"Children":[{"ID":"20230727014357-wm2ruwm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-wm2ruwm","updated":"20230727014357"},"Children":[{"ID":"20230727014357-09j1igx","Type":"NodeParagraph","Properties":{"id":"20230727014357-09j1igx","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"优点：固定时间段计数，实现简单，适用不太精准的场景；"}]}]},{"ID":"20230727014357-d29ufpz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-d29ufpz","updated":"20230727014357"},"Children":[{"ID":"20230727014357-vorxi74","Type":"NodeParagraph","Properties":{"id":"20230727014357-vorxi74","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缺点：对边界没有很好处理，导致限流不能精准控制。"}]}]}]},{"ID":"20230727014357-jlbzzsf","Type":"NodeParagraph","Properties":{"id":"20230727014357-jlbzzsf","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"滑动窗口："}]},{"ID":"20230727014357-p8y1czx","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-p8y1czx","updated":"20230727014357"},"Children":[{"ID":"20230727014357-i290stj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-i290stj","updated":"20230727014357"},"Children":[{"ID":"20230727014357-b8rakl0","Type":"NodeParagraph","Properties":{"id":"20230727014357-b8rakl0","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"优点：将固定时间段分块，时间比“计数器”复杂，适用于稍微精准的场景；"}]}]},{"ID":"20230727014357-28fowzp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-28fowzp","updated":"20230727014357"},"Children":[{"ID":"20230727014357-sa5bc1h","Type":"NodeParagraph","Properties":{"id":"20230727014357-sa5bc1h","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缺点：实现稍微复杂，还是不能彻底解决“计数器”存在的边界问题。"}]}]}]},{"ID":"20230727014357-8ys8p8x","Type":"NodeParagraph","Properties":{"id":"20230727014357-8ys8p8x","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"漏桶："}]},{"ID":"20230727014357-k8kwptm","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-k8kwptm","updated":"20230727014357"},"Children":[{"ID":"20230727014357-rflc3yt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-rflc3yt","updated":"20230727014357"},"Children":[{"ID":"20230727014357-1ndaqfn","Type":"NodeParagraph","Properties":{"id":"20230727014357-1ndaqfn","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"优点：可以很好的控制消费频率；"}]}]},{"ID":"20230727014357-1r1l4t8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-1r1l4t8","updated":"20230727014357"},"Children":[{"ID":"20230727014357-njftmvd","Type":"NodeParagraph","Properties":{"id":"20230727014357-njftmvd","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缺点：实现稍微复杂，单位时间内，不能多消费，感觉不太灵活。"}]}]}]},{"ID":"20230727014357-f3yfdu9","Type":"NodeParagraph","Properties":{"id":"20230727014357-f3yfdu9","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"令牌桶："}]},{"ID":"20230727014357-beoi3yn","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-beoi3yn","updated":"20230727014357"},"Children":[{"ID":"20230727014357-pv9jfcf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-pv9jfcf","updated":"20230727014357"},"Children":[{"ID":"20230727014357-sgf6mkl","Type":"NodeParagraph","Properties":{"id":"20230727014357-sgf6mkl","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"优点：可以解决“漏桶”不能灵活消费的问题，又能避免过渡消费，强烈推荐；"}]}]},{"ID":"20230727014357-1zonb0e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-1zonb0e","updated":"20230727014357"},"Children":[{"ID":"20230727014357-k49b02o","Type":"NodeParagraph","Properties":{"id":"20230727014357-k49b02o","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缺点：实现稍微复杂，其它缺点没有想到。"}]}]}]},{"ID":"20230727014357-znq7z4y","Type":"NodeParagraph","Properties":{"id":"20230727014357-znq7z4y","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Redis + Lua 分布式限流："}]},{"ID":"20230727014357-1rs62tf","Type":"NodeList","ListData":{},"Properties":{"id":"20230727014357-1rs62tf","updated":"20230727014357"},"Children":[{"ID":"20230727014357-wyk20yu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-wyk20yu","updated":"20230727014357"},"Children":[{"ID":"20230727014357-3izmvfz","Type":"NodeParagraph","Properties":{"id":"20230727014357-3izmvfz","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"优点：支持分布式限流，有效保护下游依赖的服务资源；"}]}]},{"ID":"20230727014357-4uifoqj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727014357-4uifoqj","updated":"20230727014357"},"Children":[{"ID":"20230727014357-klsro7k","Type":"NodeParagraph","Properties":{"id":"20230727014357-klsro7k","updated":"20230727014357"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缺点：依赖 Redis，对边界没有很好处理，导致限流不能精准控制。"}]}]}]}]}