{"ID":"20231023095957-w9ndhx5","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f6fa","id":"20231023095957-w9ndhx5","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231023095957-w9ndhx5\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231023095957-3ljmjd7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231024144302-gcgqgi8\u0026quot;,\u0026quot;scrollTop\u0026quot;:12893,\u0026quot;focusId\u0026quot;:\u0026quot;20231023101210-2mkqvcc\u0026quot;,\u0026quot;focusStart\u0026quot;:2515,\u0026quot;focusEnd\u0026quot;:2515\u0026#125;","tags":"公众号-捡田螺的小男孩,未完成","title":"接口请求合并，效率直接加倍","updated":"20231024144315"},"Children":[{"ID":"20231023095957-3ljmjd7","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231023095957-3ljmjd7","updated":"20231023100054"},"Children":[{"Type":"NodeText","Data":"请求合并到底有什么意义呢？"}]},{"ID":"20231023100224-95lyx3b","Type":"NodeParagraph","Properties":{"id":"20231023100224-95lyx3b"},"Children":[{"Type":"NodeText","Data":"我们来看下图。"}]},{"ID":"20231023100111-4zdk7ph","Type":"NodeParagraph","Properties":{"id":"20231023100111-4zdk7ph","updated":"20231023100111"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231023100111-5ndv8sw.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231023100120-j1i4i3b","Type":"NodeParagraph","Properties":{"id":"20231023100120-j1i4i3b","updated":"20231023100134"},"Children":[{"Type":"NodeText","Data":"假设我们3个用户（用户id分别是1、2、3），现在他们都要查询自己的基本信息，请求到服务器，服务器端请求数据库，发出3次请求。我们都知道数据库连接资源是相当宝贵的，那么我们怎么尽可能节省连接资源呢？"}]},{"ID":"20231023100135-gsa73hx","Type":"NodeBlockquote","Properties":{"id":"20231023100135-gsa73hx","updated":"20231023100143"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20231023100142-1jrbva9","Type":"NodeParagraph","Properties":{"id":"20231023100142-1jrbva9","updated":"20231023100143"},"Children":[{"Type":"NodeText","Data":"这里把数据库换成被调用的远程服务，也是同样的道理。"}]}]},{"ID":"20231023100144-5bvaodv","Type":"NodeParagraph","Properties":{"id":"20231023100144-5bvaodv","updated":"20231023100147"},"Children":[{"Type":"NodeText","Data":"我们改变下思路，如下图所示。"}]},{"ID":"20231023100200-paiwnw3","Type":"NodeParagraph","Properties":{"id":"20231023100200-paiwnw3","updated":"20231023100200"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231023100200-axh754c.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231023100211-jog2s1v","Type":"NodeParagraph","Properties":{"id":"20231023100211-jog2s1v","updated":"20231023100211"},"Children":[{"Type":"NodeText","Data":"我们在服务器端把请求合并，只发出一条SQL查询数据库，数据库返回后，服务器端处理返回数据，根据一个唯一请求ID，把数据分组，返回给对应用户。"}]},{"ID":"20231023100214-zdst5dg","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231023100214-zdst5dg","updated":"20231023100236"},"Children":[{"Type":"NodeText","Data":"技术手段"}]},{"ID":"20231023100237-s8kf1o2","Type":"NodeList","ListData":{},"Properties":{"id":"20231023100237-s8kf1o2","updated":"20231023213711"},"Children":[{"ID":"20231023100238-fq0b6tx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231023100238-fq0b6tx","updated":"20231023213711"},"Children":[{"ID":"20231023100238-kt46k0o","Type":"NodeParagraph","Properties":{"id":"20231023100238-kt46k0o","updated":"20231023213711"},"Children":[{"Type":"NodeText","Data":"阻塞队列"}]}]},{"ID":"20231023100304-4j7n95u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231023100304-4j7n95u","updated":"20231023213709"},"Children":[{"ID":"20231023100304-sl6pji1","Type":"NodeParagraph","Properties":{"id":"20231023100304-sl6pji1","updated":"20231023213709"},"Children":[{"Type":"NodeText","Data":"定时任务线程池"}]}]},{"ID":"20231023100336-vtevgvb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231023100336-vtevgvb","updated":"20231023213707"},"Children":[{"ID":"20231023100336-hkc3wfz","Type":"NodeParagraph","Properties":{"id":"20231023100336-hkc3wfz","updated":"20231023213707"},"Children":[{"Type":"NodeText","Data":"阻塞机制"}]}]}]},{"ID":"20231023101210-5w6wqjd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231023101210-5w6wqjd","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"代码实现"}]},{"ID":"20231023101210-u1we805","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-u1we805","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"查询用户的代码"}]},{"ID":"20231023101210-htfa4pt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231023101210-htfa4pt","updated":"20231024101947"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"gorm.io/gorm\"\n)\n\ntype UserService struct {\n\tdb *gorm.DB\n}\n\ntype Users struct {\n\tId int64\n}\n\ntype Request struct {\n\tUserId    int64\n\tRequestId string\n}\n\nfunc NewUserService(db *gorm.DB) *UserService {\n\treturn \u0026UserService{db: db}\n}\n\nfunc (s *UserService) QueryUserByIdBatch(userReqs []Request) (map[string]Users, error) {\n\t// 提取所有用户ID\n\tuserIds := make([]int64, len(userReqs))\n\tfor i, req := range userReqs {\n\t\tuserIds[i] = req.UserId\n\t}\n\n\t// 查询\n\tvar users []Users\n\tif err := s.db.Where(\"id IN ?\", userIds).Find(\u0026users).Error; err != nil {\n\t\treturn nil, err\n\t}\n\n\t// 构建 id 到 users 的映射\n\tidToUsers := make(map[int64]Users)\n\tfor _, user := range users {\n\t\tidToUsers[user.Id] = user\n\t}\n\n\t// 构建requestId 到 Users 的映射\n\tresult := make(map[string]Users)\n\tfor _, req := range userReqs {\n\t\tif user, ok := idToUsers[req.UserId]; ok {\n\t\t\tresult[req.RequestId] = user\n\t\t} else {\n\t\t\tresult[req.RequestId] = Users{} // 这里用零值表示没数据\n\t\t}\n\t}\n\treturn result, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231023101210-mout9v8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-mout9v8","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"合并请求的实现"}]},{"ID":"20231023101210-sknmgt2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231023101210-sknmgt2","updated":"20231024113801"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type UserWrapBatchService struct {\n\tuserService UserService\n\tqueue       chan *Request\n}\n\ntype Users struct {\n\tuserId int64\n\tname   string\n}\n\ntype Request struct {\n\trequestId         string\n\tuserId            int64\n\tcompletableFuture chan *Users\n}\n\nconst MaxTaskNum = 100\n\nfunc NewUserWrapBatchService(userService UserService) *UserWrapBatchService {\n\treturn \u0026UserWrapBatchService{\n\t\tuserService: userService,\n\t\tqueue:       make(chan *Request),\n\t}\n}\n\nfunc (s *UserWrapBatchService) Init() {\n\tticker := time.NewTicker(10 * time.Millisecond)\n\tgo func() {\n\t\tfor range ticker.C {\n\t\t\tsize := len(s.queue)\n\t\t\tif size == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar list []*Request\n\t\t\tfmt.Printf(\"合并了[%d] 个请求\\n\", size)\n\t\t\tfor i := 0; i \u003c size; i++ {\n\t\t\t\tif i \u003e MaxTaskNum {\n\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t\treq := \u003c-s.queue\n\t\t\t\tlist = append(list, req)\n\t\t\t}\n\t\t\tvar userReqs []*Request\n\t\t\tfor _, req := range list {\n\t\t\t\tuserReqs = append(userReqs, req)\n\t\t\t}\n\t\t\tresponse := s.userService.QueryUserByIdBatch(userReqs)\n\t\t\tfor _, req := range list {\n\t\t\t\tresult := response[req.requestId]\n\t\t\t\treq.completableFuture \u003c- result\n\t\t\t}\n\t\t}\n\t}()\n}\n\nfunc (s *UserWrapBatchService) QueryUser(userId int64) *Users {\n\trequest := \u0026Request{\n\t\trequestId:         fmt.Sprintf(\"%d\", rand.Int63()),\n\t\tuserId:            userId,\n\t\tcompletableFuture: make(chan *Users),\n\t}\n\ts.queue \u003c- request\n\treturn \u003c-request.completableFuture\n}\n\ntype UserService struct{}\n\nfunc (s *UserService) QueryUserByIdBatch(reqs []*Request) map[string]*Users {\n\tvar wg sync.WaitGroup\n\tresult := make(map[string]*Users)\n\tfor _, req := range reqs {\n\t\twg.Add(1)\n\t\tgo func(req *Request) {\n\t\t\tdefer wg.Done()\n\t\t\tuser, err := s.queryUserById(req.userId)\n\t\t\tif err != nil {\n\t\t\t\tfmt.Println(err)\n\t\t\t\treturn\n\t\t\t}\n\t\t\tresult[req.requestId] = user\n\t\t}(req)\n\t}\n\twg.Wait()\n\treturn result\n}\n\nfunc (s *UserService) queryUserById(userId int64) (*Users, error) {\n\ttime.Sleep(time.Duration(rand.Intn(10)) * time.Millisecond)\n\treturn \u0026Users{\n\t\tuserId: userId,\n\t\tname:   fmt.Sprintf(\"user_%d\", userId),\n\t}, nil\n}\n\nfunc main() {\n\tuserService := \u0026UserService{}\n\tbatchService := NewUserWrapBatchService(userService)\n\tbatchService.Init()\n\n\tfor i := 0; i \u003c 10; i++ {\n\t\tgo func(i int) {\n\t\t\tfor j := 0; j \u003c 10; j++ {\n\t\t\t\tuser := batchService.QueryUser(int64(i*10 + j))\n\t\t\t\tfmt.Printf(\"查询到用户： %+v\\n\", user)\n\t\t\t}\n\t\t}(i)\n\t}\n\n\ttime.Sleep(1 * time.Second)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231023101210-b3by49b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-b3by49b","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"控制层调用"}]},{"ID":"20231023101210-9bfgdkz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231023101210-9bfgdkz","updated":"20231024113753"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type UserBatchService struct{}\n\ntype UserController struct {\n\tuserBatchService *UserBatchService\n}\n\ntype Users struct {\n\tuserId int64\n\tname   string\n}\n\nfunc (c *UserController) merge(userId int64) func() *Users {\n\treturn func() *Users {\n\t\treturn c.userBatchService.queryUser(userId)\n\t}\n}\n\nfunc (s *UserBatchService) queryUser(userId int64) *Users {\n\ttime.Sleep(time.Duration(100) * time.Millisecond)\n\treturn \u0026Users{\n\t\tuserId: userId,\n\t\tname:   fmt.Sprintf(\"user_%d\", userId),\n\t}\n}\n\nfunc main() {\n\tuserBatchService := \u0026UserBatchService{}\n\tuserController := \u0026UserController{userBatchService: userBatchService}\n\n\tfor i:=0;i\u003c 10;i++ {\n\t\tgo func(i int) {\n\t\t\tfor j:=0;j\u003c10;j++ {\n\t\t\t\tuser := userController.merge(int64(i*10 + j))()\n\t\t\t\tfmt.Printf(\"查询到用户： %+v\\n\",user)\t\t\t\n\t\t\t}\n\t\t}(i)\n\t}\n\n\ttime.Sleep(1 *time.Second)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231023101210-7ohor64","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-7ohor64","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"模拟高并发查询的代码"}]},{"ID":"20231023101210-mv9cwcv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231023101210-mv9cwcv","updated":"20231024141148"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var (\n\tthreadCount    = 30\n\tCountDownLatch sync.WaitGroup\n\tClient         = http.Client{}\n)\n\nfunc main() {\n\tCountDownLatch.Add(threadCount)\n\n\tfor i := 0; i \u003c threadCount; i++ {\n\t\tgo func() {\n\t\t\tCountDownLatch.Done()\n\t\t\tCountDownLatch.Wait()\n\t\t\tfor j := 1;j \u003c= 3;j++ {\n\t\t\t\tparam := rand.Intn(4)\n\t\t\t\tif param \u003c= 0 {\n\t\t\t\t\tparam++\n\t\t\t\t}\n\t\t\t\tresponse, err := Client.Get(fmt.Sprintf(\"http://localhost:8080/asyncAnddMerge/merge?userId=%d\",param))\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"请求失败： %v\\n\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tdefer response.Body.Close()\n\t\t\t\n\t\t\t\tbody, err := io.ReadAll(response.Body)\n\t\t\t\tif err != nil {\n\t\t\t\t\tfmt.Printf(\"读取响应失败： %v\\n\", err)\n\t\t\t\t\tcontinue\n\t\t\t\t}\n\t\t\t\tfmt.Printf(\"参数 %d 返回值 %s\\n\", param, string(body))\n\t\t\t}\n\t\t}()\n\t\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231023101210-umqevdu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-umqevdu","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"测试效果"}]},{"ID":"20231024141204-qq8iemm","Type":"NodeParagraph","Properties":{"id":"20231024141204-qq8iemm"}},{"ID":"20231023101210-zv6fn6t","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-zv6fn6t","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"要注意的问题"}]},{"ID":"20231023101210-uooe793","Type":"NodeList","ListData":{},"Properties":{"id":"20231023101210-uooe793","updated":"20231024141239"},"Children":[{"ID":"20231023101210-ml15a2l","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231023101210-ml15a2l","updated":"20231024141239"},"Children":[{"ID":"20231023101210-xum5gso","Type":"NodeParagraph","Properties":{"id":"20231023101210-xum5gso","updated":"20231024141239"},"Children":[{"Type":"NodeText","Data":"阻塞机制并没有 timeout 机制"}]}]},{"ID":"20231023101210-pprbswr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231023101210-pprbswr","updated":"20231023101210"},"Children":[{"ID":"20231023101210-xjrxy6n","Type":"NodeParagraph","Properties":{"id":"20231023101210-xjrxy6n","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"后面的SQL语句是有长度限制的，所以还要做限制每次批量的数量,超过最大任务数，等下次执行（本例中加了MAX_TASK_NUM判断）"}]}]}]},{"ID":"20231023101210-9xep0gi","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231023101210-9xep0gi","updated":"20231024141302"},"Children":[{"Type":"NodeText","Data":"阻塞机制并没有 timeout 机制"}]},{"ID":"20231023101210-0u7i3hi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231023101210-0u7i3hi","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"核心代码"}]},{"ID":"20231023101210-2mkqvcc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231023101210-2mkqvcc","updated":"20231024144315"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 核心代码\ntype Users struct {\n\tID   int\n\tName string\n\t// 其他字段\n}\n\ntype UserService struct{}\n\nfunc (s *UserService) QueryUserByID(userID int) *Users {\n\t// 模拟查询用户信息的逻辑\n\ttime.Sleep(time.Millisecond * 500)\n\treturn \u0026Users{\n\t\tID:   userID,\n\t\tName: fmt.Sprintf(\"User-%d\", userID),\n\t}\n}\n\ntype Request struct {\n\tRequestID  string\n\tUserID     int\n\tUsersQueue chan *Users\n}\n\ntype UserWrapBatchQueueService struct {\n\tUserService *UserService\n\tqueue       chan *Request\n}\n\nfunc NewUserWrapBatchQueueService() *UserWrapBatchQueueService {\n\treturn \u0026UserWrapBatchQueueService{\n\t\tUserService: \u0026UserService{},\n\t\tqueue:       make(chan *Request),\n\t}\n}\n\nconst MaxTaskNum = 100\n\nfunc (s *UserWrapBatchQueueService) Init() {\n\t// 定时任务\n\tgo func() {\n\t\tticker := time.NewTicker(time.Millisecond * 10)\n\t\tfor range ticker.C {\n\t\t\tsize := len(s.queue)\n\t\t\tif size == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tvar list []*Request\n\t\t\tfmt.Printf(\"合并了 [%d] 个请求\\n\", size)\n\t\t\tfor i := 0; i \u003c size \u0026\u0026 i \u003c MaxTaskNum; i++ {\n\t\t\t\tlist = append(list, \u003c-s.queue)\n\t\t\t}\n\t\t\tUserReqs := make([]*Request, len(list))\n\t\t\tcopy(UserReqs, list)\n\t\t\tresponse := s.UserService.QueryUserByIDBatchQueue(UserReqs)\n\t\t}\n\t}()\n}\n\nfunc (s *UserWrapBatchQueueService) QueryUser(userID int) *Users {\n\trequest := \u0026Request{\n\t\tRequestID:  fmt.Sprintf(\"%d\", time.Now().UnixNano()),\n\t\tUserID:     userID,\n\t\tUsersQueue: make(chan *Users),\n\t}\n\ts.queue \u003c- request\n\tselect {\n\tcase users := \u003c-request.UsersQueue:\n\t\treturn users\n\tcase \u003c-time.After(time.Millisecond * 3000):\n\t\treturn nil\n\n\t}\n}\n\nfunc (s *UserService) QueryUserByIDBatchQueue(userReqs []*Request) map[string]*Users {\n\tuserIDs := make([]int, len(userReqs))\n\tfor i, req := range userReqs {\n\t\tuserIDs[i] = req.UserID\n\t}\n\n\tusersGroup := make(map[int][]*Users)\n\tvar wg sync.WaitGroup\n\twg.Add(len(userIDs))\n\tfor _, userID := range userIDs {\n\t\tgo func(id int) {\n\t\t\tdefer wg.Done()\n\t\t\tusers := s.QueryUserByID(id)\n\t\t\tif users != nil {\n\t\t\t\tusersGroup[id] = []*Users{users}\n\t\t\t} else {\n\t\t\t\tusersGroup[id] = []*Users{}\n\t\t\t}\n\t\t}(userID)\n\t}\n\twg.Wait()\n\n\tresult := make(map[string]*Users)\n\tfor _, req := range userReqs {\n\t\tusersList := usersGroup[req.UserID]\n\t\tif len(usersList) \u003e 0 {\n\t\t\tresult[req.RequestID] = usersList[0]\n\t\t} else {\n\t\t\tresult[req.RequestID] = \u0026Users{}\n\t\t}\n\t}\n\treturn result\n}\n\nfunc main() {\n\tservice := NewUserWrapBatchQueueService()\n\tservice.Init()\n\n\t// 测试查询用户\n\tfor i := 1; i \u003c= 10; i++ {\n\t\tgo func(userID int) {\n\t\t\tusers := service.QueryUser(userID)\n\t\t\tfmt.Printf(\"查询用户 %d，结果：%v\\n\", userID, users)\n\t\t}(i)\n\t}\n\ttime.Sleep(time.Second * 2)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231023101210-m3haon0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231023101210-m3haon0","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"小结"}]},{"ID":"20231023101210-mzlesi6","Type":"NodeParagraph","Properties":{"id":"20231023101210-mzlesi6","updated":"20231023101210"},"Children":[{"Type":"NodeText","Data":"请求合并，批量的办法能大幅节省被调用系统的连接资源，本例是以数据库为例，其他RPC调用也是类似的道理。缺点就是请求的时间在执行实际的逻辑之前增加了等待时间，不适合低并发的场景。"}]},{"ID":"20231024144302-gcgqgi8","Type":"NodeParagraph","Properties":{"id":"20231024144302-gcgqgi8"}}]}