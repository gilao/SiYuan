{"ID":"20231218100615-zuj5xfw","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f333","id":"20231218100615-zuj5xfw","tags":"Go-连接池,需要仔细看,gRPC,gRPC连接池","title":"Go 创建gRPC连接池","updated":"20231218102448"},"Children":[{"ID":"20231218100722-ud4r21d","Type":"NodeParagraph","Properties":{"id":"20231218100722-ud4r21d","updated":"20231218100722"},"Children":[{"Type":"NodeText","Data":"["},{"Type":"NodeTextMark","TextMarkType":"tag","TextMarkTextContent":"本文来源：janrs.com"},{"Type":"NodeText","Data":"​]"}]},{"ID":"20231218100633-tycbltk","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218100633-tycbltk","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"常规用法"}]},{"ID":"20231218100633-c4cmtug","Type":"NodeParagraph","Properties":{"id":"20231218100633-c4cmtug","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​ 四种基本使用"}]},{"ID":"20231218100633-ulo1nl5","Type":"NodeList","ListData":{},"Properties":{"id":"20231218100633-ulo1nl5","updated":"20231218100633"},"Children":[{"ID":"20231218100633-fv30hx9","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218100633-fv30hx9","updated":"20231218100633"},"Children":[{"ID":"20231218100633-ozax4b6","Type":"NodeParagraph","Properties":{"id":"20231218100633-ozax4b6","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"请求响应模式"}]}]},{"ID":"20231218100633-wfc1qiq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218100633-wfc1qiq","updated":"20231218100633"},"Children":[{"ID":"20231218100633-kv65xvz","Type":"NodeParagraph","Properties":{"id":"20231218100633-kv65xvz","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"客户端数据流模式"}]}]},{"ID":"20231218100633-yzug4du","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218100633-yzug4du","updated":"20231218100633"},"Children":[{"ID":"20231218100633-bt423bj","Type":"NodeParagraph","Properties":{"id":"20231218100633-bt423bj","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"服务端数据流模式"}]}]},{"ID":"20231218100633-lbv12fx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218100633-lbv12fx","updated":"20231218100633"},"Children":[{"ID":"20231218100633-i3tl67l","Type":"NodeParagraph","Properties":{"id":"20231218100633-i3tl67l","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"双向流模式"}]}]}]},{"ID":"20231218100633-hukispy","Type":"NodeParagraph","Properties":{"id":"20231218100633-hukispy","updated":"20231218100633"},"Children":[{"Type":"NodeText","Data":"常见的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​调用写法"}]},{"ID":"20231218100638-ynz0jme","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218100638-ynz0jme","updated":"20231218100644"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main(){\n    //... some code\n    // 链接grpc服务\n    conn , err := grpc.Dial(\":8000\",grpc.WithInsecure)\n    if err != nil {\n        //...log\n    }\n    defer conn.Close()\n    //...some code\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218100645-m9n7j3g","Type":"NodeParagraph","Properties":{"id":"20231218100645-m9n7j3g","updated":"20231218100652"},"Children":[{"Type":"NodeText","Data":"存在的问题：面临高并发的情况，性能问题很容易就会出现，例如我们在做性能测试的时候，就会发现，打一会性能测试，客户端请求服务端的时候就会报错："}]},{"ID":"20231218100657-yuiw5k2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218100657-yuiw5k2","updated":"20231218100703"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = \"transport: Error while dialing dial tcp xxx:xxx: connect: connection refused\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218100711-d0rvdcg","Type":"NodeParagraph","Properties":{"id":"20231218100711-d0rvdcg","updated":"20231218100719"},"Children":[{"Type":"NodeText","Data":"实际去查看问题的时候，很明显，这是 gRPC 的连接数被打满了，很多连接都还未完全释放。"}]},{"ID":"20231218100711-oj83ox8","Type":"NodeParagraph","Properties":{"id":"20231218100711-oj83ox8","updated":"20231218100711"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​ 的通信本质上也是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TCP"},{"Type":"NodeText","Data":"​ 的连接，那么一次连接就需要三次握手，和四次挥手，每一次建立连接和释放连接的时候，都需要走这么一个过程，如果我们频繁的建立和释放连接，这对于资源和性能其实都是一个大大的浪费。"}]},{"ID":"20231218100711-eimo6ww","Type":"NodeParagraph","Properties":{"id":"20231218100711-eimo6ww","updated":"20231218101212"},"Children":[{"Type":"NodeText","Data":"在服务端，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​ 服务端的链接管理不用我们操心，但是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"gRPC"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":" 客户端的链接管理非常有必要关心，要实现复用客户端的连接。"}]},{"ID":"20231218101207-k5bwzb3","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231218101207-k5bwzb3","updated":"20231218101230"},"Children":[{"Type":"NodeText","Data":"创建连接池"}]},{"ID":"20231218101236-svkrc5u","Type":"NodeParagraph","Properties":{"id":"20231218101236-svkrc5u","updated":"20231218101236"},"Children":[{"Type":"NodeText","Data":"创建链接池需要考虑的问题："}]},{"ID":"20231218101236-t71l3qc","Type":"NodeList","ListData":{},"Properties":{"id":"20231218101236-t71l3qc","updated":"20231218101236"},"Children":[{"ID":"20231218101236-g04w4a5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218101236-g04w4a5","updated":"20231218101236"},"Children":[{"ID":"20231218101236-ynvutki","Type":"NodeParagraph","Properties":{"id":"20231218101236-ynvutki","updated":"20231218101236"},"Children":[{"Type":"NodeText","Data":"连接池是否支持扩缩容"}]}]},{"ID":"20231218101236-by3cfpq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218101236-by3cfpq","updated":"20231218101236"},"Children":[{"ID":"20231218101236-uxjfyn7","Type":"NodeParagraph","Properties":{"id":"20231218101236-uxjfyn7","updated":"20231218101236"},"Children":[{"Type":"NodeText","Data":"空闲的连接是否支持超时自行关闭，是否支持保活"}]}]},{"ID":"20231218101236-j7i4eix","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218101236-j7i4eix","updated":"20231218101236"},"Children":[{"ID":"20231218101236-pal834i","Type":"NodeParagraph","Properties":{"id":"20231218101236-pal834i","updated":"20231218101236"},"Children":[{"Type":"NodeText","Data":"池子满的时候，处理的策略是什么样的"}]}]}]},{"ID":"20231218101242-7bczetp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231218101242-7bczetp","updated":"20231218101242"},"Children":[{"Type":"NodeText","Data":"创建链接池接口"}]},{"ID":"20231218101247-5zsza3h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218101247-5zsza3h","updated":"20231218101310"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Pool interface {\n\n    // 获取一个新的连接 ， 当关闭连接的时候，会将该连接放入到池子中\n   Get() (Conn, error)\n\n    // 关闭连接池，自然连接池子中的连接也不再可用\n   Close() error\n\n    // 获取连接池状态\n   Status() string\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218101328-uvtm6so","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231218101328-uvtm6so","updated":"20231218101328"},"Children":[{"Type":"NodeText","Data":"实现链接池接口"}]},{"ID":"20231218101330-3y3xm40","Type":"NodeParagraph","Properties":{"id":"20231218101330-3y3xm40","updated":"20231218101334"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创建链接池代码"}]},{"ID":"20231218101335-124nc7q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218101335-124nc7q","updated":"20231218101341"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func New(address string, option Options) (Pool, error) {\n   if address == \"\" {\n      return nil, errors.New(\"invalid address settings\")\n   }\n   if option.Dial == nil {\n      return nil, errors.New(\"invalid dial settings\")\n   }\n   if option.MaxIdle \u003c= 0 || option.MaxActive \u003c= 0 || option.MaxIdle \u003e option.MaxActive {\n      return nil, errors.New(\"invalid maximum settings\")\n   }\n   if option.MaxConcurrentStreams \u003c= 0 {\n      return nil, errors.New(\"invalid maximun settings\")\n   }\n\n   p := \u0026pool{\n      index:   0,\n      current: int32(option.MaxIdle),\n      ref:     0,\n      opt:     option,\n      conns:   make([]*conn, option.MaxActive),\n      address: address,\n      closed:  0,\n   }\n\n   for i := 0; i \u003c p.opt.MaxIdle; i++ {\n      c, err := p.opt.Dial(address)\n      if err != nil {\n         p.Close()\n         return nil, fmt.Errorf(\"dial is not able to fill the pool: %s\", err)\n      }\n      p.conns[i] = p.wrapConn(c, false)\n   }\n   log.Printf(\"new pool success: %v\\n\", p.Status())\n\n   return p, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218102448-dwejbkt","Type":"NodeParagraph","Properties":{"id":"20231218102448-dwejbkt","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"关于以上的代码，需要特别注意每一个连接的建立也是在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"New"},{"Type":"NodeText","Data":"​ 里面完成的，["},{"Type":"NodeTextMark","TextMarkType":"tag","TextMarkTextContent":"本文来源：janrs.com"},{"Type":"NodeText","Data":"​]只要有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"1"},{"Type":"NodeText","Data":"​ 个连接未建立成功，那么咱们的连接池就算是建立失败，咱们会调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"p.Close()"},{"Type":"NodeText","Data":"​ 将之前建立好的连接全部释放掉。"}]},{"ID":"20231218102448-07y17lv","Type":"NodeParagraph","Properties":{"id":"20231218102448-07y17lv","updated":"20231218102448"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"关闭链接池代码"}]},{"ID":"20231218102448-hazgtq1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218102448-hazgtq1","updated":"20231218102448"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 关闭连接池\nfunc (p *pool) Close() error {\n   atomic.StoreInt32(\u0026p.closed, 1)\n   atomic.StoreUint32(\u0026p.index, 0)\n   atomic.StoreInt32(\u0026p.current, 0)\n   atomic.StoreInt32(\u0026p.ref, 0)\n   p.deleteFrom(0)\n   log.Printf(\"[janrs.com]close pool success: %v\\n\", p.Status())\n   return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218102448-4o9drsz","Type":"NodeParagraph","Properties":{"id":"20231218102448-4o9drsz","updated":"20231218102448"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"从具体位置删除链接池代码"}]},{"ID":"20231218102448-m2pq1l2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218102448-m2pq1l2","updated":"20231218102448"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 清除从 指定位置开始到 MaxActive 之间的连接\nfunc (p *pool) deleteFrom(begin int) {\n   for i := begin; i \u003c p.opt.MaxActive; i++ {\n      p.reset(i)\n   }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218102448-j3yhq5v","Type":"NodeParagraph","Properties":{"id":"20231218102448-j3yhq5v","updated":"20231218102448"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"销毁具体的链接代码"}]},{"ID":"20231218102448-fh8ect5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218102448-fh8ect5","updated":"20231218102448"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 清除具体的连接\nfunc (p *pool) reset(index int) {\n   conn := p.conns[index]\n   if conn == nil {\n      return\n   }\n   conn.reset()\n   p.conns[index] = nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218102448-xhdqgjt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20231218102448-xhdqgjt","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"关闭链接"}]},{"ID":"20231218102448-kxx1u3h","Type":"NodeParagraph","Properties":{"id":"20231218102448-kxx1u3h","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"代码"}]},{"ID":"20231218102448-qd4j71p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218102448-qd4j71p","updated":"20231218102448"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (c *conn) reset() error {\n   cc := c.cc\n   c.cc = nil\n   c.once = false\n   // 本文博客来源：janrs.com\n   if cc != nil {\n      return cc.Close()\n   }\n   return nil\n}\n\nfunc (c *conn) Close() error {\n   c.pool.decrRef()\n   if c.once {\n      return c.reset()\n   }\n   return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218102448-1shhpx9","Type":"NodeParagraph","Properties":{"id":"20231218102448-1shhpx9","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"在使用连接池通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"pool.Get()"},{"Type":"NodeText","Data":"​ 拿到具体的连接句柄 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"conn"},{"Type":"NodeText","Data":"​ 之后，会使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"conn.Close()"},{"Type":"NodeText","Data":"​关闭连接，实际上也是会走到上述的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Close()"},{"Type":"NodeText","Data":"​ 实现的位置，但是并未指定当然也没有权限显示的指定将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"once"},{"Type":"NodeText","Data":"​ 置位为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"false"},{"Type":"NodeText","Data":"​ ，也就是对于调用者来说，是关闭了连接，对于连接池来说，实际上是将连接归还到连接池中。"}]},{"ID":"20231218102448-iqi2eq0","Type":"NodeThematicBreak","Properties":{"id":"20231218102448-iqi2eq0","updated":"20231218102448"}},{"ID":"20231218102448-3v7yz84","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231218102448-3v7yz84","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"扩缩容"}]},{"ID":"20231218102448-fbl2wkt","Type":"NodeParagraph","Properties":{"id":"20231218102448-fbl2wkt","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"关键代码"}]},{"ID":"20231218102448-r3pq7f2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231218102448-r3pq7f2","updated":"20231218102448"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (p *pool) Get() (Conn, error) {\n   // the first selected from the created connections\n   nextRef := p.incrRef()\n   p.RLock()\n   current := atomic.LoadInt32(\u0026p.current)\n   p.RUnlock()\n   if current == 0 {\n      return nil, ErrClosed\n   }\n   if nextRef \u003c= current*int32(p.opt.MaxConcurrentStreams) {\n      next := atomic.AddUint32(\u0026p.index, 1) % uint32(current)\n      return p.conns[next], nil\n   }\n   // 本文博客来源：janrs.com\n\n   // the number connection of pool is reach to max active\n   if current == int32(p.opt.MaxActive) {\n      // the second if reuse is true, select from pool's connections\n      if p.opt.Reuse {\n         next := atomic.AddUint32(\u0026p.index, 1) % uint32(current)\n         return p.conns[next], nil\n      }\n      // the third create one-time connection\n      c, err := p.opt.Dial(p.address)\n      return p.wrapConn(c, true), err\n   }\n\n   // the fourth create new connections given back to pool\n   p.Lock()\n   current = atomic.LoadInt32(\u0026p.current)\n   if current \u003c int32(p.opt.MaxActive) \u0026\u0026 nextRef \u003e current*int32(p.opt.MaxConcurrentStreams) {\n      // 2 times the incremental or the remain incremental  ##janrs.com\n      increment := current\n      if current+increment \u003e int32(p.opt.MaxActive) {\n         increment = int32(p.opt.MaxActive) - current\n      }\n      var i int32\n      var err error\n      for i = 0; i \u003c increment; i++ {\n         c, er := p.opt.Dial(p.address)\n         if er != nil {\n            err = er\n            break\n         }\n         p.reset(int(current + i))\n         p.conns[current+i] = p.wrapConn(c, false)\n      }\n      // 本文博客来源：janrs.com\n      current += i\n      log.Printf(\"#janrs.com#grow pool: %d ---\u003e %d, increment: %d, maxActive: %d\\n\",\n         p.current, current, increment, p.opt.MaxActive)\n      atomic.StoreInt32(\u0026p.current, current)\n      if err != nil {\n         p.Unlock()\n         return nil, err\n      }\n   }\n   p.Unlock()\n   next := atomic.AddUint32(\u0026p.index, 1) % uint32(current)\n   return p.conns[next], nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231218102448-5qkx3ug","Type":"NodeParagraph","Properties":{"id":"20231218102448-5qkx3ug","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Get"},{"Type":"NodeText","Data":"​ 代码逻辑"}]},{"ID":"20231218102448-ld9y4e3","Type":"NodeList","ListData":{},"Properties":{"id":"20231218102448-ld9y4e3","updated":"20231218102448"},"Children":[{"ID":"20231218102448-7iv8fq7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218102448-7iv8fq7","updated":"20231218102448"},"Children":[{"ID":"20231218102448-3p06pls","Type":"NodeParagraph","Properties":{"id":"20231218102448-3p06pls","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"先增加连接的引用计数，如果在设定 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"current*int32(p.opt.MaxConcurrentStreams)"},{"Type":"NodeText","Data":"​ 范围内，那么直接取连接进行使用即可。"}]}]},{"ID":"20231218102448-r2nebaw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218102448-r2nebaw","updated":"20231218102448"},"Children":[{"ID":"20231218102448-8shueej","Type":"NodeParagraph","Properties":{"id":"20231218102448-8shueej","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"若当前的连接数达到了最大活跃的连接数，那么就看我们新建池子的时候传递的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"option"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"reuse"},{"Type":"NodeText","Data":"​ 参数是否是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"true"},{"Type":"NodeText","Data":"​，若是复用，则随机取出连接池中的任意连接提供使用，如果不复用，则新建一个连接。"}]}]},{"ID":"20231218102448-s9q0vlc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231218102448-s9q0vlc","updated":"20231218102448"},"Children":[{"ID":"20231218102448-hbszwuq","Type":"NodeParagraph","Properties":{"id":"20231218102448-hbszwuq","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"其余的情况，就需要我们进行 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"2"},{"Type":"NodeText","Data":"​ 倍或者 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"1"},{"Type":"NodeText","Data":"​ 倍的数量对连接池进行扩容了。"}]}]}]},{"ID":"20231218102448-trosk9v","Type":"NodeParagraph","Properties":{"id":"20231218102448-trosk9v","updated":"20231218102448"},"Children":[{"Type":"NodeText","Data":"也可以在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Get"},{"Type":"NodeText","Data":"​ 的实现上进行缩容，具体的缩容策略可以根据实际情况来定，例如当引用计数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nextRef"},{"Type":"NodeText","Data":"​ 只有当前活跃连接数的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"10%"},{"Type":"NodeText","Data":"​ 的时候（这只是一个例子），就可以考虑缩容了。"}]}]}