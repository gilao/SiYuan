{"ID":"20240102105324-oba0ekg","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f330","id":"20240102105324-oba0ekg","tags":"Go-vet","title":"Go vet 中的哪些检测项","updated":"20240102111211"},"Children":[{"ID":"20240102111210-ra6rd8y","Type":"NodeParagraph","Properties":{"id":"20240102111210-ra6rd8y","updated":"20240102111211"},"Children":[{"Type":"NodeText","Data":"https://mp.weixin.qq.com/s/xiCgrij93ql1ztZOhJCs1w"}]},{"ID":"20240102110401-5zd2wra","Type":"NodeParagraph","Properties":{"id":"20240102110401-5zd2wra","updated":"20240102110401"},"Children":[{"Type":"NodeText","Data":"go vet 是 Go 语言自带的一个工具，用于分析 Go 代码中的常见错误和潜在bug。它可以检查代码中可能存在的各种问题，例如："}]},{"ID":"20240102110401-io9hkyp","Type":"NodeList","ListData":{},"Properties":{"id":"20240102110401-io9hkyp","updated":"20240102110401"},"Children":[{"ID":"20240102110401-avjhy3a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102110401-avjhy3a","updated":"20240102110401"},"Children":[{"ID":"20240102110401-qkna7xh","Type":"NodeParagraph","Properties":{"id":"20240102110401-qkna7xh","updated":"20240102110401"},"Children":[{"Type":"NodeText","Data":"未使用的变量、函数或包"}]}]},{"ID":"20240102110401-8kszpdm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102110401-8kszpdm","updated":"20240102110401"},"Children":[{"ID":"20240102110401-itz67kk","Type":"NodeParagraph","Properties":{"id":"20240102110401-itz67kk","updated":"20240102110401"},"Children":[{"Type":"NodeText","Data":"可疑的函数调用"}]}]},{"ID":"20240102110401-0pp5vox","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102110401-0pp5vox","updated":"20240102110401"},"Children":[{"ID":"20240102110401-uwf3m0a","Type":"NodeParagraph","Properties":{"id":"20240102110401-uwf3m0a","updated":"20240102110401"},"Children":[{"Type":"NodeText","Data":"错误的函数签名"}]}]},{"ID":"20240102110401-du2g0hx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102110401-du2g0hx","updated":"20240102110401"},"Children":[{"ID":"20240102110401-0kgrnig","Type":"NodeParagraph","Properties":{"id":"20240102110401-0kgrnig","updated":"20240102110401"},"Children":[{"Type":"NodeText","Data":"程序中的竞态条件"}]}]},{"ID":"20240102110401-fnb0cp0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240102110401-fnb0cp0","updated":"20240102110401"},"Children":[{"ID":"20240102110401-1ziwygc","Type":"NodeParagraph","Properties":{"id":"20240102110401-1ziwygc","updated":"20240102110401"},"Children":[{"Type":"NodeText","Data":"错误的类型转换等"}]}]}]},{"ID":"20240102110418-jo976rd","Type":"NodeParagraph","Properties":{"id":"20240102110418-jo976rd","updated":"20240102110419"},"Children":[{"Type":"NodeText","Data":"本文意图列出当前go tools项目中提供的所有检测项及其作用"}]},{"ID":"20240102110437-nwbta8h","Type":"NodeParagraph","Properties":{"id":"20240102110437-nwbta8h","updated":"20240102110437"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目前tools中的分析器，集成到go vet的只有30个"},{"Type":"NodeText","Data":",很多可能因为噪音（误报）太多，而没有加进去"}]},{"ID":"20240102110437-rcwbtqo","Type":"NodeParagraph","Properties":{"id":"20240102110437-rcwbtqo","updated":"20240102110437"},"Children":[{"Type":"NodeText","Data":"Run 'go help vet' for details. Run 'go tool vet help' for a full list of flags and analyzers. Run 'go tool vet -help' for an overview."}]},{"ID":"20240102110437-4sed4po","Type":"NodeParagraph","Properties":{"id":"20240102110437-4sed4po","updated":"20240102110437"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"go tool vet help"}]},{"ID":"20240102110437-7mxc6a9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240102110437-7mxc6a9","updated":"20240102110437"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"vet 是一个用于对 Go 程序进行静态分析的工具。\n\nvet 检查 Go 源代码并报告可疑的结构，例如 Printf 调用的参数与格式字符串不对齐。它使用的启发式方法不能保证所有报告都是真正的问题，但它可以发现编译器没有捕获的错误。\n\n已注册的分析器：\n\n- asmdecl：报告汇编文件和 Go 声明之间的不匹配\n- assign：检查无用的赋值\n- atomic：检查使用 sync/atomic 包的常见错误\n- bools：检查涉及布尔运算符的常见错误\n- buildtag：检查 //go:build 和 // +build 指令\n- cgocall：检测一些违反 cgo 指针传递规则的情况\n- composites：检查未键控的复合文字\n- copylocks：检查错误地通过值传递的锁\n- directive：检查 Go 工具链指令，如 //go:debug\n- errorsas：报告将非指针或非错误值传递给 errors.As 的情况\n- framepointer：报告在保存帧指针之前破坏帧指针的汇编\n- httpresponse：检查使用 HTTP 响应时的错误\n- ifaceassert：检测不可能的接口到接口类型断言\n- loopclosure：检查在嵌套函数内部引用循环变量的情况\n- lostcancel：检查是否调用了由 context.WithCancel 返回的 cancel 函数\n- nilfunc：检查函数与 nil 的无用比较\n- printf：检查 Printf 格式字符串和参数的一致性\n- shift：检查移位是否等于或超过整数的宽度\n- sigchanyzer：检查未缓冲的 os.Signal 通道\n- slog：检查无效的结构化日志调用\n- stdmethods：检查众所周知接口的方法签名\n- stringintconv：检查 string(int) 转换\n- structtag：检查结构体字段标记是否符合 reflect.StructTag.Get\n- testinggoroutine：报告从测试启动的 goroutine 中调用 (*testing.T).Fatal。\n- tests：检查测试和示例的常见错误用法\n- timeformat：检查调用 (time.Time).Format 或 time.Parse 是否使用 2006-02-01\n- unmarshal：报告将非指针或非接口值传递给 unmarshal 的情况\n- unreachable：检查无法到达的代码\n- unsafeptr：检查将 uintptr 转换为 unsafe.Pointer 的无效转换\n- unusedresult：检查某些函数调用的未使用结果\n\n默认情况下，所有分析器都会运行。要选择特定的分析器，请为每个分析器使用 -NAME 标志，或者使用 -NAME=false 运行未明确禁用的所有分析器。\n\n核心标志：\n\n- -V：打印版本并退出\n- -all：无效（已弃用）\n- -asmdecl：启用 asmdecl 分析\n- -assign：启用 assign 分析\n- -atomic：启用 atomic 分析\n- -bool：-bools 的已弃用别名\n- -bools：启用 bools 分析\n- -buildtag：启用 buildtag 分析\n- -buildtags：-buildtag 的已弃用别名\n- -c int：以这么多行的上下文显示有问题的代码行（默认值为 -1）\n- -cgocall：启用 cgocall 分析\n- -composites：启用 composites 分析\n- -compositewhitelist：-composites.whitelist 的已弃用别名（默认值为 true）\n- -copylocks：启用 copylocks 分析\n- -directive：启用 directive 分析\n- -errorsas：启用 errorsas 分析\n- -flags：以 JSON 格式输出分析器标志\n- -framepointer：启用 framepointer 分析\n- -httpresponse：启用 httpresponse 分析\n- -ifaceassert：启用 ifaceassert 分析\n- -json：发出 JSON 输出\n- -loopclosure：启用 loopclosure 分析\n- -lostcancel：启用 lostcancel 分析\n- -methods：-stdmethods 的已弃用别名\n- -nilfunc：启用 nilfunc 分析\n- -printf：启用 printf 分析\n- -printfuncs value：-printf.funcs 的已弃用别名（默认值为 (*log.Logger).Fatal,(*log.Logger).Fatalf,(*log.Logger).Fatalln,(*log.Logger).Panic,(*log.Logger).Panicf,(*log.Logger).Panicln,(*log.Logger).Print,(*log.Logger).Printf,(*log.Logger).Println,(*testing.common).Error,(*testing.common).Errorf,(*testing.common).Fatal,(*testing.common).Fatalf,(*testing.common).Log,(*testing.common).Logf,(*testing.common).Skip,(*testing.common).Skipf,(testing.TB).Error,(testing.TB).Errorf,(testing.TB).Fatal,(testing.TB).Fatalf,(testing.TB).Log,(testing.TB).Logf,(testing.TB).Skip,(testing.TB).Skipf,fmt.Append,fmt.Appendf,fmt.Appendln,fmt.Errorf,fmt.Fprint,fmt.Fprintf,fmt.Fprintln,fmt.Print,fmt.Printf,fmt.Println,fmt.Sprint,fmt.Sprintf,fmt.Sprintln,log.Fatal,log.Fatalf,log.Fatalln,log.Panic,log.Panicf,log.Panicln,log.Print,log.Printf,log.Println,runtime/trace.Logf）\n- -rangeloops：-loopclosure 的已弃用别名\n- -shift：启用 shift 分析\n- -sigchanyzer：启用 sigchanyzer 分析\n- -slog：启用 slog 分析\n- -source：无效（已弃用）\n- -stdmethods：启用 stdmethods 分析\n- -stringintconv：启用 stringintconv 分析\n- -structtag：启用 structtag 分析\n- -tags string：无效（已弃用）\n- -testinggoroutine：启用 testinggoroutine 分析\n- -tests：启用 tests 分析\n- -timeformat：启用 timeformat 分析\n- -unmarshal：启用 unmarshal 分析\n- -unreachable：启用 unreachable 分析\n- -unsafeptr：启用 unsafeptr 分析\n- -unusedfuncs value：-unusedresult.funcs 的已弃用别名（默认值为 context.WithCancel,context.WithDeadline,context.WithTimeout,context.WithValue,errors.New,fmt.Errorf,fmt.Sprint,fmt.Sprintf,sort.Reverse）\n- -unusedresult：启用 unusedresult 分析\n- -unusedstringmethods value：-unusedresult.stringmethods 的已弃用别名（默认值为 Error,String）\n- -v：无效（已弃用）\n\n要查看特定分析器的详细信息和标志，请运行 'vet help name'。\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240102110437-3fhe4ho","Type":"NodeParagraph","Properties":{"id":"20240102110437-3fhe4ho","updated":"20240102110437"},"Children":[{"Type":"NodeText","Data":"文中完整代码，见 https://github.com/cuishuang/govet-demo"}]},{"ID":"20240102110437-wqryxwy","Type":"NodeParagraph","Properties":{"id":"20240102110437-wqryxwy","updated":"20240102110437"},"Children":[{"Type":"NodeText","Data":"相关使用，何时会抛出提示，可以参考相应的testdata中的a.go文件"}]},{"ID":"20240102110539-m0cbp6e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240102110539-m0cbp6e","updated":"20240102110649"},"Children":[{"Type":"NodeText","Data":"asmdecl"}]},{"ID":"20240102110702-ahyoyaz","Type":"NodeParagraph","Properties":{"id":"20240102110702-ahyoyaz","updated":"20240102110713"},"Children":[{"Type":"NodeText","Data":"asmdecl 的全称是 assembly declaration，主要用于检查 Go 代码中与汇编声明相关的错误，例如在汇编代码中使用了无效的符号，或者在汇编代码中使用了错误的语法等。它有助于确保 Go 代码中的汇编部分正确地与 Go 代码进行交互，以避免由于汇编代码问题导致的潜在错误。"}]},{"ID":"20240102110714-q38fat5","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240102110714-q38fat5","updated":"20240102110719"},"Children":[{"Type":"NodeText","Data":"assign"}]},{"ID":"20240102110727-rnfgt8h","Type":"NodeParagraph","Properties":{"id":"20240102110727-rnfgt8h","updated":"20240102110727"},"Children":[{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"该检查器报告 x = x 或 a[i] = a[i] 形式的分配。 这些几乎总是无用的，即使没有用，它们通常也是一个错误。"}]},{"ID":"20240102110727-aaeq878","Type":"NodeParagraph","Properties":{"id":"20240102110727-aaeq878","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"assign"},{"Type":"NodeText","Data":"​ 是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go vet"},{"Type":"NodeText","Data":"​ 中的一个检查项，主要用于检查可能出现的变量赋值问题。"}]},{"ID":"20240102110727-rkmcwcq","Type":"NodeParagraph","Properties":{"id":"20240102110727-rkmcwcq","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"具体来说，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"assign"},{"Type":"NodeText","Data":"​ 检查的是在变量赋值时可能出现的问题，比如："}]},{"ID":"20240102110727-pn8kffr","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240102110727-pn8kffr","updated":"20240102110727"},"Children":[{"ID":"20240102110727-55vbcb5","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240102110727-55vbcb5","updated":"20240102110727"},"Children":[{"ID":"20240102110727-53qq1vp","Type":"NodeParagraph","Properties":{"id":"20240102110727-53qq1vp","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"将变量赋值给自身，例如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"x = x"},{"Type":"NodeText","Data":"​；"}]}]},{"ID":"20240102110727-ib1ndul","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240102110727-ib1ndul","updated":"20240102110727"},"Children":[{"ID":"20240102110727-8dbw9x4","Type":"NodeParagraph","Properties":{"id":"20240102110727-8dbw9x4","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"在多重赋值中，左边的变量数量和右边的值数量不一致；"}]}]},{"ID":"20240102110727-nq5otsw","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240102110727-nq5otsw","updated":"20240102110727"},"Children":[{"ID":"20240102110727-eunot83","Type":"NodeParagraph","Properties":{"id":"20240102110727-eunot83","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"将一个值赋给一个不兼容的变量类型，例如将一个字符串赋给一个整型变量；"}]}]},{"ID":"20240102110727-mfsy0gx","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240102110727-mfsy0gx","updated":"20240102110727"},"Children":[{"ID":"20240102110727-2xtbov4","Type":"NodeParagraph","Properties":{"id":"20240102110727-2xtbov4","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"for"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"switch"},{"Type":"NodeText","Data":"​ 等语句中，将一个值赋给一个布尔型变量而不是比较表达式；"}]}]},{"ID":"20240102110727-pracuvn","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240102110727-pracuvn","updated":"20240102110727"},"Children":[{"ID":"20240102110727-xcyxsun","Type":"NodeParagraph","Properties":{"id":"20240102110727-xcyxsun","updated":"20240102110727"},"Children":[{"Type":"NodeText","Data":"在赋值语句中，使用了未定义的变量。"}]}]}]},{"ID":"20240102110736-j31umpt","Type":"NodeParagraph","Properties":{"id":"20240102110736-j31umpt"},"Children":[{"Type":"NodeText","Data":"以下是一些示例代码，展示了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"assign"},{"Type":"NodeText","Data":"​ 可能会检查出的问题："}]},{"ID":"20240102110811-mdf3mvv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240102110811-mdf3mvv","updated":"20240102110911"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nfunc main() {\n    x := 1\n    x = x  // 将变量赋值给自身\n    y, z := 1, 2\n    y, z, _ = 1, 2  // 左边的变量数量和右边的值数量不一致\n    var a int\n    a = \"hello\"  // 将一个字符串赋给一个整型变量\n    b := true\n    b = 1  // 在 if、for、switch 等语句中，将一个值赋给一个布尔型变量而不是比较表达式\n    c = 1  // 使用了未定义的变量\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240102110940-wl9a4wn","Type":"NodeParagraph","Properties":{"id":"20240102110940-wl9a4wn","updated":"20240102110940"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go vet"},{"Type":"NodeText","Data":"​ 命令检查上述代码时，会输出以下警告信息：(这些信息不会一次性全部输出，但凡有一个满足就会抛出)"}]},{"ID":"20240102110940-up4gu6j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240102110940-up4gu6j","updated":"20240102110940"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"# command-line-arguments\n./main.go:5:5: self-assignment of x\n./main.go:7:9: assignment mismatch: 2 variables but 3 values\n./main.go:9:5: cannot use \"hello\" (type string) as type int in assignment\n./main.go:11:5: b is bool, suggest `b == 1` instead\n./main.go:13:5: undefined: c\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240102110941-i1ex197","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240102110941-i1ex197","updated":"20240102111011"},"Children":[{"Type":"NodeText","Data":"atomic"}]},{"ID":"20240102111012-fttgxd4","Type":"NodeParagraph","Properties":{"id":"20240102111012-fttgxd4","updated":"20240102111019"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"atomic"},{"Type":"NodeText","Data":"​ 是 Go 语言自带的一种原子操作库，用于实现在多个 goroutine 中安全地读写共享变量。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go vet"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"atomic"},{"Type":"NodeText","Data":"​ 检查项主要用于检查在使用原子操作时可能出现的一些问题。"}]},{"ID":"20240102111027-naf273y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240102111027-naf273y","updated":"20240102111031"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n \"sync/atomic\"\n)\n\nfunc main() {\n var x int64\n x = atomic.AddInt64(\u0026x, 1) //  direct assignment to atomic value\n\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240102111027-jpmcln7","Type":"NodeParagraph","Properties":{"id":"20240102111027-jpmcln7","updated":"20240102111027"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go vet"},{"Type":"NodeText","Data":"​ 命令检查上述代码时，会输出以下警告信息："}]},{"ID":"20240102111027-j9fzk8e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240102111027-j9fzk8e","updated":"20240102111027"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"# command-line-arguments\n./main.go:9:2: direct assignment to atomic value\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}