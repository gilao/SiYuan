{"ID":"20240109095605-fzd4h31","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f982","id":"20240109095605-fzd4h31","tags":"Go-zap 库","title":"高性能Go 日志库zap 日志设计实现","updated":"20240114011744"},"Children":[{"ID":"20240109095815-5rqmuxv","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240109095815-5rqmuxv","updated":"20240109095824"},"Children":[{"Type":"NodeText","Data":"zap设计"}]},{"ID":"20240109095824-4rqc91x","Type":"NodeParagraph","Properties":{"id":"20240109095824-4rqc91x","updated":"20240109095829"},"Children":[{"Type":"NodeText","Data":"log的实例化"}]},{"ID":"20240109095830-mrs0huo","Type":"NodeParagraph","Properties":{"id":"20240109095830-mrs0huo","updated":"20240109095917"},"Children":[{"Type":"NodeText","Data":"在开始使用的时候，我们可以通过官方的例子来了解zap内部的组件"}]},{"ID":"20240109095917-3u82j9v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109095917-3u82j9v","updated":"20240109095931"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"log := zap.NewExample()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109100228-izbfhac","Type":"NodeParagraph","Properties":{"id":"20240109100228-izbfhac","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"NewExample 函数里面展示了要通过 NewCore 来创建一个 Core 结构体，根据名字我们应该也能猜到这个结构体是 zap 的核心。"}]},{"ID":"20240109100228-0eglpt6","Type":"NodeParagraph","Properties":{"id":"20240109100228-0eglpt6","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"对于一个日志库来说，最主要是无非是这三类："}]},{"ID":"20240109100228-bm8q1bs","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240109100228-bm8q1bs","updated":"20240109100228"},"Children":[{"ID":"20240109100228-j8uzihw","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240109100228-j8uzihw","updated":"20240109100228"},"Children":[{"ID":"20240109100228-huq31ku","Type":"NodeParagraph","Properties":{"id":"20240109100228-huq31ku","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"对于输入的数据需要如何序列化；"}]}]},{"ID":"20240109100228-2g3b0sz","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240109100228-2g3b0sz","updated":"20240109100228"},"Children":[{"ID":"20240109100228-sgpfdla","Type":"NodeParagraph","Properties":{"id":"20240109100228-sgpfdla","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"将输入的数据序列化后存放到哪里，是控制台还是文件，还是别的地方；"}]}]},{"ID":"20240109100228-zp9pdih","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240109100228-zp9pdih","updated":"20240109100228"},"Children":[{"ID":"20240109100228-wji080x","Type":"NodeParagraph","Properties":{"id":"20240109100228-wji080x","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"然后就是日志的级别，是 Debug、Info 亦或是 Error；"}]}]}]},{"ID":"20240109100228-k7gm3jo","Type":"NodeParagraph","Properties":{"id":"20240109100228-k7gm3jo","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"同理 zap 也是这样，在使用 NewCore 创建 Core 结构体的时候需要传入的三个参数分别对应的就是：输入数据的编码器 Encoder、日志数据的目的地 WriteSyncer，以及日志级别 LevelEnabler。"}]},{"ID":"20240109100228-99j7plp","Type":"NodeParagraph","Properties":{"id":"20240109100228-99j7plp","updated":"20240109100228"},"Children":[{"Type":"NodeText","Data":"除了 NewExample 这个构造方法以外，zap 还提供了 NewProduction、NewDevelopment 来构造日志实例："}]},{"ID":"20240109102318-val221g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109102318-val221g","updated":"20240109102605"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"log, _ := zap.NewProduction()\nlog, _ := zap.NewDevelopment()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109102606-bxba1c5","Type":"NodeParagraph","Properties":{"id":"20240109102606-bxba1c5","updated":"20240109102613"},"Children":[{"Type":"NodeText","Data":"这两个函数会通过构建一个 Config 结构体然后调用 Build 方法来创建 NewCore 所需要的参数，然后实例化日志实例。"}]},{"ID":"20240109102620-qdrwbvy","Type":"NodeParagraph","Properties":{"id":"20240109102620-qdrwbvy","updated":"20240109102620"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240109102620-jjh71pa.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240109102622-anxphdq","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240109102622-anxphdq","updated":"20240109102632"},"Children":[{"Type":"NodeText","Data":"日志数据的输出"}]},{"ID":"20240109102743-nihqahf","Type":"NodeParagraph","Properties":{"id":"20240109102743-nihqahf","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"在初始化 log 实例之后，可以用 Info、Debug、Error等方法打印日志："}]},{"ID":"20240109102743-jgzvrtn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109102743-jgzvrtn","updated":"20240109102751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":" log  = zap.NewExample()\n url := \"http://example.org/api\"\n log.Info(\"failed to fetch URL\",\n  zap.String(\"url\", url),\n  zap.Int(\"attempt\", 3),\n  zap.Duration(\"backoff\", time.Hour),\n )\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109102743-otbfxh8","Type":"NodeParagraph","Properties":{"id":"20240109102743-otbfxh8","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"我们再来看一下 zap 打印一条结构化的日志的实现步骤："}]},{"ID":"20240109102743-q8bqfto","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240109102743-q8bqfto","updated":"20240109102743"},"Children":[{"ID":"20240109102743-y8brr2r","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240109102743-y8brr2r","updated":"20240109102743"},"Children":[{"ID":"20240109102743-v035guj","Type":"NodeParagraph","Properties":{"id":"20240109102743-v035guj","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"首先会校验一下日志配置的等级，例如 Error 日志配置等级肯定是不能输出 Debug 日志出来；"}]}]},{"ID":"20240109102743-fhxd7ua","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240109102743-fhxd7ua","updated":"20240109102743"},"Children":[{"ID":"20240109102743-2fkzfbx","Type":"NodeParagraph","Properties":{"id":"20240109102743-2fkzfbx","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"然后会将日志数据封装成一个 Entry 实例；"}]}]},{"ID":"20240109102743-w59p4nu","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240109102743-w59p4nu","updated":"20240109102743"},"Children":[{"ID":"20240109102743-yxdwle8","Type":"NodeParagraph","Properties":{"id":"20240109102743-yxdwle8","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"因为在 zap 中可以传入 multiCore，所以会把多个 Core 添加到  CheckedEntry 实例中；"}]}]},{"ID":"20240109102743-u6q0iqh","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240109102743-u6q0iqh","updated":"20240109102743"},"Children":[{"ID":"20240109102743-8qec9wk","Type":"NodeParagraph","Properties":{"id":"20240109102743-8qec9wk","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"遍历 CheckedEntry  实例中 Cores，"}]},{"ID":"20240109102743-pnb1fif","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240109102743-pnb1fif","updated":"20240109102743"},"Children":[{"ID":"20240109102743-p14ijbf","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240109102743-p14ijbf","updated":"20240109102743"},"Children":[{"ID":"20240109102743-1g2gz7c","Type":"NodeParagraph","Properties":{"id":"20240109102743-1g2gz7c","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"根据 Core 中的 Encoder 来序列化日志数据到 Buffer 中；"}]}]},{"ID":"20240109102743-1vx1f1q","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240109102743-1vx1f1q","updated":"20240109102743"},"Children":[{"ID":"20240109102743-tge41pb","Type":"NodeParagraph","Properties":{"id":"20240109102743-tge41pb","updated":"20240109102743"},"Children":[{"Type":"NodeText","Data":"再由 WriteSyncer 将 Buffer 的日志数据进行输出；"}]}]}]}]}]},{"ID":"20240109102821-tce81wb","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240109102821-tce81wb","updated":"20240109102830"},"Children":[{"Type":"NodeText","Data":"接口与框架设计"}]},{"ID":"20240109102836-kncty9m","Type":"NodeParagraph","Properties":{"id":"20240109102836-kncty9m","updated":"20240109102836"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240109102836-mzbixqw.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240109102856-ip730fb","Type":"NodeParagraph","Properties":{"id":"20240109102856-ip730fb","updated":"20240109102856"},"Children":[{"Type":"NodeText","Data":"在代码结构设计上，通过简单的接口封装，实现了多种样式的配置组合，从而满足各种需求。在最上层的设计上实现了三种 log 用来实现不同的功能："}]},{"ID":"20240109102856-gwjtvj7","Type":"NodeParagraph","Properties":{"id":"20240109102856-gwjtvj7","updated":"20240114000448"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"Logger"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"text","TextMarkTextContent":"："},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"text strong","TextMarkTextContent":"使用较为繁琐，只能使用结构化输出，但是性能更好；"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20240109102856-1knn6xo","Type":"NodeParagraph","Properties":{"id":"20240109102856-1knn6xo","updated":"20240114000437"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"SugaredLogger：可以使用 Printf 来输出日志，性能较 Logger 相比差 40% 左右；"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20240109102856-coel8dm","Type":"NodeParagraph","Properties":{"id":"20240109102856-coel8dm","updated":"20240109102856"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"zapgrpc"},{"Type":"NodeText","Data":"：用做 grpc 的日志输出；"}]},{"ID":"20240109102856-dxaovfj","Type":"NodeParagraph","Properties":{"id":"20240109102856-dxaovfj","updated":"20240109102856"},"Children":[{"Type":"NodeText","Data":"在设计上 Logger 可以很方便的转化为 SugaredLogger 和 zapgrpc。这几个 Logger 需要传入一个 Core 接口的实现类才能创建。"}]},{"ID":"20240109103944-f3ib46q","Type":"NodeParagraph","Properties":{"id":"20240109103944-f3ib46q","updated":"20240109103944"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Core 接口"},{"Type":"NodeText","Data":"：zap 也提供了多种实现的选择：NewNopCore 、ioCore、multiCore 、hook。"}]},{"ID":"20240109103944-5yw54ke","Type":"NodeParagraph","Properties":{"id":"20240109103944-5yw54ke","updated":"20240109103944"},"Children":[{"Type":"NodeText","Data":"最常用的是 ioCore、multiCore ，从名字便可看出来 multiCore 是可以包含多个 ioCore 的一种配置，比方说可以让 Error 日志输出一种日志格式以及设置一个日志输出目的地，让 Info 日志以另一种日志格式输出到别的地方。"}]},{"ID":"20240109104015-ng6fpd8","Type":"NodeParagraph","Properties":{"id":"20240109104015-ng6fpd8","updated":"20240109104018"},"Children":[{"Type":"NodeText","Data":"在上面也说了，对于 Core 的实现类 ioCore 来说它需要传入三个对象：输入数据的编码器 Encoder、日志数据的目的地 WriteSyncer，以及日志级别 LevelEnabler。"}]},{"ID":"20240109104054-xm9h1qo","Type":"NodeParagraph","Properties":{"id":"20240109104054-xm9h1qo","updated":"20240109104054"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Encoder 接口"},{"Type":"NodeText","Data":"：zap 提供了 consoleEncoder、jsonEncoder 的实现，分别提供了 console 格式与 JSON 格式日志输出，这些 Encoder 都有自己的序列化实现，这样可以更快的格式化代码；"}]},{"ID":"20240109104054-p3k3vys","Type":"NodeParagraph","Properties":{"id":"20240109104054-p3k3vys","updated":"20240109104054"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"EncoderConfig"},{"Type":"NodeText","Data":"：上面所说的 Encoder 还可以根据 EncoderConfig 的配置允许使用者灵活的配置日志的输出格式，从日志消息的键名、日志等级名称，到时间格式输出的定义，方法名的定义都可以通过它灵活配置。"}]},{"ID":"20240109104054-hz5snah","Type":"NodeParagraph","Properties":{"id":"20240109104054-hz5snah","updated":"20240109104054"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"WriteSyncer 接口"},{"Type":"NodeText","Data":"：zap 提供了 writerWrapper 的单日志输出实现，以及可以将日志输出到多个地方的 multiWriteSyncer 实现；"}]},{"ID":"20240109104054-7m7wo8o","Type":"NodeParagraph","Properties":{"id":"20240109104054-7m7wo8o","updated":"20240109104222"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Entry"},{"Type":"NodeText","Data":" ：配置说完了，到了日志数据的封装。首先日志数据会封装成一个 Entry，包含了日志名、日志时间、日志等级，以及日志数据等信息，没有 Field 信息，然后经 Core 的 Check 方法对日志等级校验通过之后会生成一个 CheckedEntry 实例。"}]},{"ID":"20240109104054-lqgg1ql","Type":"NodeParagraph","Properties":{"id":"20240109104054-lqgg1ql","updated":"20240109104054"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"CheckedEntry"},{"Type":"NodeText","Data":" 包含了日志数据所有信息，包括上面提到的 Entry、调用栈信息等。"}]},{"ID":"20240109104259-rrvwrnn","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240109104259-rrvwrnn","updated":"20240109104302"},"Children":[{"Type":"NodeText","Data":"性能"}]},{"ID":"20240109104302-lu2ea2i","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240109104302-lu2ea2i","updated":"20240109104309"},"Children":[{"Type":"NodeText","Data":"使用对象池"}]},{"ID":"20240109104318-59x8pla","Type":"NodeParagraph","Properties":{"id":"20240109104318-59x8pla","updated":"20240109104318"},"Children":[{"Type":"NodeText","Data":"zap 通过 sync.Pool 提供的对象池，复用了大量可以复用的对象，如果对 sync.Pool 不是很了解的同学，可以看这篇文章：《多图详解Go的sync.Pool源码 https://www.luozhiyun.com/archives/416 》。"}]},{"ID":"20240109104318-pen6gva","Type":"NodeParagraph","Properties":{"id":"20240109104318-pen6gva","updated":"20240109104318"},"Children":[{"Type":"NodeText","Data":"zap 在实例化 CheckedEntry 、Buffer、Encoder 等对象的时候，会直接从对象池中获取，而不是直接实例化一个新的，这样复用对象可以降低 GC 的压力，减少内存分配。"}]},{"ID":"20240109104326-zpab79g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240109104326-zpab79g","updated":"20240109104334"},"Children":[{"Type":"NodeText","Data":"避免反射"}]},{"ID":"20240109104351-0qf45i6","Type":"NodeParagraph","Properties":{"id":"20240109104351-0qf45i6","updated":"20240109104351"},"Children":[{"Type":"NodeText","Data":"如果我们使用官方的 log 库，像这样输出日志："}]},{"ID":"20240109104351-ag2gun2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109104351-ag2gun2","updated":"20240109104401"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"log.Printf(\"%s login, age:%d\", \"luoluo\", 19)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109104351-0cea51z","Type":"NodeParagraph","Properties":{"id":"20240109104351-0cea51z","updated":"20240109104351"},"Children":[{"Type":"NodeText","Data":"log 调用的 Printf 函数实际上会调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fmt.Sprintf"},{"Type":"NodeText","Data":"​函数来格式化日志数据，然后进行输出："}]},{"ID":"20240109104351-htoftom","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109104351-htoftom","updated":"20240109104404"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func Printf(format string, v ...interface{}) {\n std.Output(2, fmt.Sprintf(format, v...))\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109104351-08cclik","Type":"NodeParagraph","Properties":{"id":"20240109104351-08cclik","updated":"20240109104351"},"Children":[{"Type":"NodeText","Data":"但是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fmt.Sprintf"},{"Type":"NodeText","Data":"​效率实际上是很低的，通过查看fmt.Sprintf源码， 可以看出效率低有两个原因："}]},{"ID":"20240109104351-rblqo46","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240109104351-rblqo46","updated":"20240109104421"},"Children":[{"ID":"20240109104351-dl3vb5y","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240109104351-dl3vb5y","updated":"20240109104421"},"Children":[{"ID":"20240109104351-ib499zm","Type":"NodeParagraph","Properties":{"id":"20240109104351-ib499zm","updated":"20240109104421"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"fmt.Sprintf"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"接受的类型是 interface{}，内部使用了反射；"}]}]},{"ID":"20240109104351-mng8z4r","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240109104351-mng8z4r","updated":"20240109104418"},"Children":[{"ID":"20240109104351-i6h5j8x","Type":"NodeParagraph","Properties":{"id":"20240109104351-i6h5j8x","updated":"20240109104418"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"fmt.Sprintf"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的用途是格式化字符串，需要去解析格式串，比如"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"%s"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"、"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"code strong","TextMarkTextContent":"%d"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"之类的，增加了解析的耗时。"}]}]}]},{"ID":"20240109104351-h72atgh","Type":"NodeParagraph","Properties":{"id":"20240109104351-h72atgh","updated":"20240109104435"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"但是在 zap 中，使用的是内建的 Encoder，它会通过内部的 Buffer 以 byte 的形式来拼接日志数据，减少反射所带来性能损失；以及 zap 是使用的结构化的日志，所以没有"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeText","Data":"  "},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"%s"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"、"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeText","Data":"  "},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"%d"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"之类的标识符需要解析，也是一个性能提升点。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20240109104436-hllmoal","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240109104436-hllmoal","updated":"20240109104451"},"Children":[{"Type":"NodeText","Data":"更高效且灵活的序列化器"}]},{"ID":"20240109104457-dk23e8e","Type":"NodeParagraph","Properties":{"id":"20240109104457-dk23e8e","updated":"20240109104457"},"Children":[{"Type":"NodeText","Data":"在 zap 中自己实现了 consoleEncoder、jsonEncoder 两个序列化器，这两个序列化器都可以根据传入的 EncoderConfig 来实现日志格式的灵活配置，这个灵活配置不只是日志输出的 key 的名称，而是通过在 EncoderConfig 中传入函数来调用到用户自定义的 Encoder 实现。"}]},{"ID":"20240109104457-9qcbqwx","Type":"NodeParagraph","Properties":{"id":"20240109104457-9qcbqwx","updated":"20240109104457"},"Children":[{"Type":"NodeText","Data":"而像 logrus 在序列化 JSON 的时候使用的是标准库的序列化工具，效率也是更低。"}]},{"ID":"20240109104459-x8105c2","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240109104459-x8105c2","updated":"20240109104531"},"Children":[{"Type":"NodeText","Data":"Zap代码分析"}]},{"ID":"20240109104531-3gm17lw","Type":"NodeParagraph","Properties":{"id":"20240109104531-3gm17lw","updated":"20240109104539"},"Children":[{"Type":"NodeText","Data":"由于我感觉 zap 的代码还是写的比较优雅的，所以这里稍微分析一些源码。"}]},{"ID":"20240109104541-017abwc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240109104541-017abwc","updated":"20240109104545"},"Children":[{"Type":"NodeText","Data":"初始化"}]},{"ID":"20240109104545-3kz3udm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240109104545-3kz3udm","updated":"20240109104550"},"Children":[{"Type":"NodeText","Data":"初始化 Core"}]},{"ID":"20240109104551-k57fwn9","Type":"NodeParagraph","Properties":{"id":"20240109104551-k57fwn9","updated":"20240109104602"},"Children":[{"Type":"NodeText","Data":"我们在上面的图中也了解到，Core 是有 4个实现类，我们这里以最常用的 ioCore 作为例子来进行讲解。"}]},{"ID":"20240109104603-p0atzrb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109104603-p0atzrb","updated":"20240114011744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type ioCore struct {\n  Level Enabler\n  enc Encoder\n  out WriteSyncer\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109104646-arxlqjv","Type":"NodeParagraph","Properties":{"id":"20240109104646-arxlqjv","updated":"20240109104652"},"Children":[{"Type":"NodeText","Data":"ioCore 里面非常简单，总共需要三个字段，分别是：输入数据的编码器 Encoder、日志数据的目的地 WriteSyncer，以及日志级别 LevelEnabler。"}]},{"ID":"20240109104654-2vxn2a1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109104654-2vxn2a1","updated":"20240109110048"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func NewCore(enc Encoder, ws WriteSyncey, enab LevelEnabel) Core {\n  return \u0026ioCore{\n    LevelEnable: enab,\n    enc: enc,\n    out: ws,\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109114512-7kb6xbl","Type":"NodeParagraph","Properties":{"id":"20240109114512-7kb6xbl","updated":"20240109114516"},"Children":[{"Type":"NodeText","Data":"在使用 NewCore 函数创建 ioCore 的时候也是返回一个对象指针。"}]},{"ID":"20240109114517-e4fw0m4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240109114517-e4fw0m4","updated":"20240109114525"},"Children":[{"Type":"NodeText","Data":"初始化 Logger"}]},{"ID":"20240109114526-o3qa996","Type":"NodeParagraph","Properties":{"id":"20240109114526-o3qa996","updated":"20240109114530"},"Children":[{"Type":"NodeText","Data":"zap 会通过 New 函数来实例化一个 Logger："}]},{"ID":"20240109140952-y2efyxr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109140952-y2efyxr","updated":"20240109141222"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func New(core zapcore.Core, options ...Option) *Logger {\n  if core == nil {\n    return NewNop()\n  }\n  log := \u0026Logger{\n    core: core,\n    errorOutput: zapcore.Lock(os.Stderr),\n    addStack: zapcore.FatalLevel + 1,\n    clock: _systemClock,\n  }\n  return log.WithOptions(options...)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109141257-sljl6of","Type":"NodeParagraph","Properties":{"id":"20240109141257-sljl6of","updated":"20240109141257"},"Children":[{"Type":"NodeText","Data":"New 函数会设置好相应的默认字段，包括 core 实例、错误日志输出地、堆栈日志的输出级别、日志时间等，然后实例化一个 Logger 对象返回指针。"}]},{"ID":"20240109141257-c15vz19","Type":"NodeParagraph","Properties":{"id":"20240109141257-c15vz19","updated":"20240109141257"},"Children":[{"Type":"NodeText","Data":"Logger 结构的信息如下："}]},{"ID":"20240109141259-x2ddtwi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109141259-x2ddtwi","updated":"20240109141520"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Logger struct {\n core zapcore.Core\n // 是否是开发模式\n development bool\n // 是否打印行号\n addCaller   bool\n onFatal     zapcore.CheckWriteAction // default is WriteThenFatal\n\n name        string\n // 错误日志输出\n errorOutput zapcore.WriteSyncer\n // 输出调用堆栈\n addStack zapcore.LevelEnabler\n // 打印调用者的行号\n callerSkip int\n\n clock Clock\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109141424-mgefnvu","Type":"NodeParagraph","Properties":{"id":"20240109141424-mgefnvu","updated":"20240109141755"},"Children":[{"Type":"NodeText","Data":"Logger 结构体中会包含很多配置信息，我们在开发中可以通过 WithOptions 来添加相应的参数。如添加日志行号："}]},{"ID":"20240109141756-xi9jrqr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109141756-xi9jrqr","updated":"20240109141824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"log := zap.New(core).WithOptions(zap.AddCaller())\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109141927-jwfevgy","Type":"NodeParagraph","Properties":{"id":"20240109141927-jwfevgy","updated":"20240109142011"},"Children":[{"Type":"NodeText","Data":"AddCaller 函数会创建一个回调钩子给 WithOptions 执行，这也是函数式编程的魅力所在："}]},{"ID":"20240109142011-aw3rwxh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109142011-aw3rwxh","updated":"20240109142135"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (log *Logger) WithOptions(opts ...Option) *Logger {\n  c := log.Clone()\n  for _, opt := range opts {\n    // 调用 Option 接口的方法\n    opt.apply(c)\n  }\n  return c\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109142318-341ed0o","Type":"NodeParagraph","Properties":{"id":"20240109142318-341ed0o","updated":"20240109142339"},"Children":[{"Type":"NodeText","Data":"WithOptions 可以传入 Option 数组，然后遍历数组并调用  apply 方法，Option 是一个接口，只提供了 apply 方法："}]},{"ID":"20240109142341-0z3xpml","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109142341-0z3xpml","updated":"20240109142413"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type optionFunc func(*Logger)\n\nfunc (f optionFunc) apply(log *Logger) {\n f(log)\n}\n// 定义 Option 接口\ntype Option interface {\n apply(*Logger)\n}\n\nfunc AddCaller() Option {\n  // 返回 Option\n return WithCaller(true)\n}\n\nfunc WithCaller(enabled bool) Option {\n  // 将 func 强转成 optionFunc 类型\n return optionFunc(func(log *Logger) {\n  log.addCaller = enabled\n })\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109142626-u2cxqsy","Type":"NodeParagraph","Properties":{"id":"20240109142626-u2cxqsy","updated":"20240109142626"},"Children":[{"Type":"NodeText","Data":"这里这个代码写的非常有意思，在 go 中一个函数也是一种类型，和 struct 一样可以用有一个方法。"}]},{"ID":"20240109142626-r7f9wfx","Type":"NodeParagraph","Properties":{"id":"20240109142626-r7f9wfx","updated":"20240109142626"},"Children":[{"Type":"NodeText","Data":"在这里 optionFunc 作为一种函数类型，它实现了 apply 方法，所以相当于继承了 Option 这个接口。然后在 WithCaller 中使用 optionFunc 将一个函数包了一层，看起来有些奇妙，但是实际上和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"int64(123)"},{"Type":"NodeText","Data":"​没有本质区别。"}]},{"ID":"20240109142626-ieicn8o","Type":"NodeParagraph","Properties":{"id":"20240109142626-ieicn8o","updated":"20240109142626"},"Children":[{"Type":"NodeText","Data":"然后在 WithOptions 函数中会获取到 WithCaller 返回的这个转成 optionFunc 类型的函数，并传入  log 执行，这样就相当于改变了 log 的 addCaller 属性。"}]},{"ID":"20240109142626-m8ljgb3","Type":"NodeParagraph","Properties":{"id":"20240109142626-m8ljgb3","updated":"20240109142626"},"Children":[{"Type":"NodeText","Data":"没看懂的可以自己在编译器上试一下。"}]},{"ID":"20240109142626-7kfl997","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240109142626-7kfl997","updated":"20240109142626"},"Children":[{"Type":"NodeText","Data":"打印日志"}]},{"ID":"20240109142626-1sf2qfe","Type":"NodeParagraph","Properties":{"id":"20240109142626-1sf2qfe","updated":"20240109142626"},"Children":[{"Type":"NodeText","Data":"整个打印日志的过程如下："}]},{"ID":"20240109143124-wxryzw2","Type":"NodeParagraph","Properties":{"id":"20240109143124-wxryzw2","updated":"20240109143124"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240109143123-tc4niei.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240109142647-te33yio","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240109142647-te33yio","updated":"20240109142910"},"Children":[{"ID":"20240109142727-b8psrvx","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240109142727-b8psrvx","updated":"20240109142727"},"Children":[{"ID":"20240109142727-wdnxo7h","Type":"NodeParagraph","Properties":{"id":"20240109142727-wdnxo7h","updated":"20240109142751"},"Children":[{"Type":"NodeText","Data":"首先是获取 CheckedEntry 实例，封装相应的日志数据；"}]}]},{"ID":"20240109142752-pnk5jd8","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240109142752-pnk5jd8"},"Children":[{"ID":"20240109142752-t61xl2o","Type":"NodeParagraph","Properties":{"id":"20240109142752-t61xl2o","updated":"20240109142837"},"Children":[{"Type":"NodeText","Data":"然后根据 core 里面封装的 encode 进行编码，将编码的内容放入到 buffer中；"}]}]},{"ID":"20240109142837-f1d7vl4","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240109142837-f1d7vl4","updated":"20240109142910"},"Children":[{"ID":"20240109142837-lgrq7s2","Type":"NodeParagraph","Properties":{"id":"20240109142837-lgrq7s2","updated":"20240109142910"},"Children":[{"Type":"NodeText","Data":"将 buffer 中的内容输出到 core 里封装的 WriteSyncer 中。"}]}]}]},{"ID":"20240109143131-r6jz99g","Type":"NodeParagraph","Properties":{"id":"20240109143131-r6jz99g","updated":"20240109143131"},"Children":[{"Type":"NodeText","Data":"在我们初始化完成 Logger 后，就可以使用它来调用相应的 Info、Warn、Error 等方法打印日志输出。由于所有的日志级别的输出方法是一样的，所以这里通过 Info 方法来进行分析。"}]},{"ID":"20240109143133-f03h3ee","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143133-f03h3ee","updated":"20240109143228"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (log *Logger) Info(msg string, fields ...Field) {\n     // 检查该日志是否应该被打印\n if ce := log.check(InfoLevel, msg); ce != nil {\n        // 打印日志\n  ce.Write(fields...)\n }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143624-0ga83ey","Type":"NodeParagraph","Properties":{"id":"20240109143624-0ga83ey","updated":"20240109143624"},"Children":[{"Type":"NodeText","Data":"这个方法首先会调用 check 方法进行校验，主要是查看在配置的日志等级下当前日志数据是否应该被打印。"}]},{"ID":"20240109143624-7d8mfl7","Type":"NodeParagraph","Properties":{"id":"20240109143624-7d8mfl7","updated":"20240109143624"},"Children":[{"Type":"NodeText","Data":"对于 Info 日志级别来说会传入 InfoLevel，Error 日志级别来说会传入 ErrorLevel，在 zap 里面日志级别是通过这几个常量来进行定义："}]},{"ID":"20240109143625-5vsuqc1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143625-5vsuqc1","updated":"20240109143632"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type Level int8\n\nconst ( \n DebugLevel Level = iota - 1 \n InfoLevel \n WarnLevel \n ErrorLevel \n DPanicLevel \n PanicLevel \n FatalLevel\n\n _minLevel = DebugLevel\n _maxLevel = FatalLevel\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143638-pb6s9tg","Type":"NodeParagraph","Properties":{"id":"20240109143638-pb6s9tg","updated":"20240109143638"},"Children":[{"Type":"NodeText","Data":"最小的 DebugLevel 从 -1 开始。"}]},{"ID":"20240109143638-pvdjwzl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240109143638-pvdjwzl","updated":"20240109143638"},"Children":[{"Type":"NodeText","Data":"check 检查"}]},{"ID":"20240109143700-rl4ciu6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143700-rl4ciu6","updated":"20240109143743"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (log *Logger) check(lvl zapcore.Level, msg string) *zapcore.CheckedEntry { \n const callerSkipOffset = 2\n // 判断传入的日志等级是否应该打印\n if lvl \u003c zapcore.DPanicLevel \u0026\u0026 !log.core.Enabled(lvl) {\n  return nil\n }\n \n // 将日志数据封装成一个 Entry\n ent := zapcore.Entry{\n  LoggerName: log.name,\n  Time:       log.clock.Now(),\n  Level:      lvl,\n  Message:    msg,\n }\n //如果能写日志则返回一个 CheckedEntry 实例指针\n ce := log.core.Check(ent, nil)\n willWrite := ce != nil \n ... \n if !willWrite {\n  return ce\n }\n \n ce.ErrorOutput = log.errorOutput\n // 判断是否打印调用行号\n if log.addCaller {\n  // 获取调用者的栈帧\n  frame, defined := getCallerFrame(log.callerSkip + callerSkipOffset)\n  if !defined {\n   fmt.Fprintf(log.errorOutput, \"%v Logger.check error: failed to get caller\\n\", ent.Time.UTC())\n   log.errorOutput.Sync()\n  }\n  // 设值调用者 entry\n  ce.Entry.Caller = zapcore.EntryCaller{\n   Defined:  defined,\n   PC:       frame.PC,\n   File:     frame.File,\n   Line:     frame.Line,\n   Function: frame.Function,\n  }\n }\n if log.addStack.Enabled(ce.Entry.Level) {\n  // 封装调用栈信息\n  ce.Entry.Stack = StackSkip(\"\", log.callerSkip+callerSkipOffset).String\n } \n return ce\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143700-9n1yr36","Type":"NodeParagraph","Properties":{"id":"20240109143700-9n1yr36","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"这里首先会调用 core 的 Enabled 方法判断一下该日志是否应该被打印。这个判断由于日志等级实际上是一个 int8 类型的，所以直接根据大小直接就可以判断。"}]},{"ID":"20240109143700-i6b67wp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143700-i6b67wp","updated":"20240109143835"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (l Level) Enabled(lvl Level) bool {\n return lvl \u003e= l\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143700-43seq3i","Type":"NodeParagraph","Properties":{"id":"20240109143700-43seq3i","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"判断完没有问题会调用 Check 方法获取 CheckedEntry 实例指针。获取完 CheckedEntry 实例指针后会根据配置信息设值，然后返回。"}]},{"ID":"20240109143700-4dl39ep","Type":"NodeParagraph","Properties":{"id":"20240109143700-4dl39ep","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"下面看看是如何获取 CheckedEntry 实例指针。"}]},{"ID":"20240109143700-r85cq1b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143700-r85cq1b","updated":"20240109143839"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (c *ioCore) Check(ent Entry, ce *CheckedEntry) *CheckedEntry {\n // 检查该 level 日志是否应该被打印\n if c.Enabled(ent.Level) {\n  // 获取 CheckedEntry\n  return ce.AddCore(ent, c)\n }\n return ce\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143700-c4spa4f","Type":"NodeParagraph","Properties":{"id":"20240109143700-c4spa4f","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"这里会通过 CheckedEntry 的 AddCore 方法获取，需要主要的是传入的 ce 是个 nil 指针，但是这样也不方便 Go 调用其 AddCore 方法（要是放在 java 上该报错了）。"}]},{"ID":"20240109143700-jt0lpq0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143700-jt0lpq0","updated":"20240109143842"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var (\n _cePool = sync.Pool{New: func() interface{} {\n  // Pre-allocate some space for cores.\n  return \u0026CheckedEntry{\n   cores: make([]Core, 4),\n  }\n }}\n)\n\nfunc (ce *CheckedEntry) AddCore(ent Entry, core Core) *CheckedEntry {\n if ce == nil {\n  // 从 _cePool 里面获取 CheckedEntry 实例\n  ce = getCheckedEntry()\n  ce.Entry = ent\n }\n    // 因为可能为 multi core 所以这里需要 append 一下\n ce.cores = append(ce.cores, core)\n return ce\n}\n\nfunc getCheckedEntry() *CheckedEntry {\n // 从 pool 中获取对象\n ce := _cePool.Get().(*CheckedEntry)\n // 重置对象的属性\n ce.reset()\n return ce\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143700-8duxeiw","Type":"NodeParagraph","Properties":{"id":"20240109143700-8duxeiw","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"AddCore 方法也是十分简洁，大家应该看一眼就明白了，不多说。"}]},{"ID":"20240109143700-of87xo3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20240109143700-of87xo3","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"Write 日志打印"}]},{"ID":"20240109143700-lkjptcd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143700-lkjptcd","updated":"20240109143846"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (ce *CheckedEntry) Write(fields ...Field) {\n if ce == nil {\n  return\n }\n ... \n var err error\n // 遍历所有 core 写入日志数据\n for i := range ce.cores {\n  err = multierr.Append(err, ce.cores[i].Write(ce.Entry, fields))\n }\n ...\n // 将 CheckedEntry 放回到缓存池中\n putCheckedEntry(ce)\n ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143700-kzhyrzs","Type":"NodeParagraph","Properties":{"id":"20240109143700-kzhyrzs","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"这里就是调用 core 的 Write 方法写日志数据，继续往下。"}]},{"ID":"20240109143700-uhq1194","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240109143700-uhq1194","updated":"20240109143905"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (c *ioCore) Write(ent Entry, fields []Field) error {\n // 调用 Encoder 的 EncodeEntry 方法将日志数据编码\n buf, err := c.enc.EncodeEntry(ent, fields)\n if err != nil {\n  return err\n }\n // 将日志数据通过 WriteSyncer 写入\n _, err = c.out.Write(buf.Bytes())\n // 将buffer放回到缓存池中\n buf.Free()\n if err != nil {\n  return err\n }\n if ent.Level \u003e ErrorLevel {\n  c.Sync()\n }\n return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240109143700-557byof","Type":"NodeParagraph","Properties":{"id":"20240109143700-557byof","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"Write 方法会根据编码器的不同，然后调用相应编码器的 EncodeEntry 方法。无论是 jsonEncoder 还是 consoleEncoder 都会在 EncodeEntry 方法中从 bufferpool 获取一个 Buffer 实例，然后将数据按照一定的格式封装到 Buffer 实例中。"}]},{"ID":"20240109143700-5ufyugi","Type":"NodeParagraph","Properties":{"id":"20240109143700-5ufyugi","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"获取到数据后，会调用 WriteSyncer 的 Write 方法将日志数据写入。"}]},{"ID":"20240109143700-5eqv002","Type":"NodeParagraph","Properties":{"id":"20240109143700-5eqv002","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"最后将  Buffer 实例释放回 bufferpool 中。"}]},{"ID":"20240109143700-gtnawkp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240109143700-gtnawkp","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20240109143700-73myqm4","Type":"NodeParagraph","Properties":{"id":"20240109143700-73myqm4","updated":"20240109143700"},"Children":[{"Type":"NodeText","Data":"这篇文章主要讲解了 zap 的设计原理以及代码的实现。我们可以看到它通过编码结构上的设计使得可以通过简单的配置从而实现丰富的功能。在性能方面，主要是通过使用对象池，减少内存分配的开销；内置高性能序列化器，减少在序列化上面的开销；以及通过结构化的日志格式，减少 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fmt.Sprintf"},{"Type":"NodeText","Data":"​格式化日志数据的开销。"}]}]}