{"ID":"20231117204644-fwosqai","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f9f1","id":"20231117204644-fwosqai","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231117204644-fwosqai\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231117211301-491f0vf\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231117211301-8b5uq8y\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231117211301-491f0vf\u0026quot;,\u0026quot;focusStart\u0026quot;:1,\u0026quot;focusEnd\u0026quot;:1\u0026#125;","tags":"公众号-路多辛","title":"保障 Golang项目安全的最佳实践","updated":"20231117211301"},"Children":[{"ID":"20231117211301-491f0vf","Type":"NodeParagraph","Properties":{"id":"20231117211301-491f0vf","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"对任何项目来说，安全都是一个永恒的话题，本文详细讲解一下保障 Golang 项目的安全性需要遵循一些最佳实践。"}]},{"ID":"20231117211301-bu3octe","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-bu3octe","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"对源代码和构建出的二进制文件做全面的安全扫描"}]},{"ID":"20231117211301-hjgt2dt","Type":"NodeParagraph","Properties":{"id":"20231117211301-hjgt2dt","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"定期对源代码和二进制文件进行全面的安全扫描，查找漏洞，以便及早识别出潜在的安全漏洞并进行修复。"}]},{"ID":"20231117211301-tw5czw8","Type":"NodeParagraph","Properties":{"id":"20231117211301-tw5czw8","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"可以使用由 Go 漏洞数据库支持的 govulncheck 工具来扫描出代码中的安全漏洞，并分析哪些漏洞会真正有安全隐患。govulncheck 还可以集成到 CI/CD 流水线中，Go团队在 GitHub Marketplace 上为 govulncheck 提供了一个 GitHub Action。govulncheck 还支持 -json 标志，以帮助开发人员将漏洞扫描与其他 CI/CD 系统集成在一起。"}]},{"ID":"20231117211301-3qusylk","Type":"NodeParagraph","Properties":{"id":"20231117211301-3qusylk","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"也可以结合使用其他静态代码扫描工具，在开发过程中发现可能导致安全漏洞的设计和代码编写错误，来提高代码的质量和安全性。"}]},{"ID":"20231117211301-clze5ck","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-clze5ck","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"确保使用最新的 Golang 版本和相关依赖的最新版本"}]},{"ID":"20231117211301-t474dfe","Type":"NodeParagraph","Properties":{"id":"20231117211301-t474dfe","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"使用最新的 Golang 版本会有以下好处："}]},{"ID":"20231117211301-yrsqlxd","Type":"NodeList","ListData":{},"Properties":{"id":"20231117211301-yrsqlxd","updated":"20231117211301"},"Children":[{"ID":"20231117211301-xg74l82","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117211301-xg74l82","updated":"20231117211301"},"Children":[{"ID":"20231117211301-w2ysn0e","Type":"NodeParagraph","Properties":{"id":"20231117211301-w2ysn0e","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"可以使用到语言的新特性，新版本的 Go 语言会提供新的语言特性、库和工具，可以帮助更高效地编写代码。"}]}]},{"ID":"20231117211301-t81bznb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117211301-t81bznb","updated":"20231117211301"},"Children":[{"ID":"20231117211301-gsr2n0m","Type":"NodeParagraph","Properties":{"id":"20231117211301-gsr2n0m","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"性能提升，新版本的 Go 语言通常会包含性能优化和改进，可以帮助提高程序性能。"}]}]},{"ID":"20231117211301-vnw83wz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117211301-vnw83wz","updated":"20231117211301"},"Children":[{"ID":"20231117211301-06t7dsk","Type":"NodeParagraph","Properties":{"id":"20231117211301-06t7dsk","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"安全漏洞修复，新版本的 Go 语言通常会包含安全修复，可以帮助保护代码免受老版本安全漏洞的影响。"}]}]},{"ID":"20231117211301-7cuc50h","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117211301-7cuc50h","updated":"20231117211301"},"Children":[{"ID":"20231117211301-bua1hdj","Type":"NodeParagraph","Properties":{"id":"20231117211301-bua1hdj","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"更好的兼容性，Go 语言遵循向后兼容性原则，也就是新版本的 Go 语言可以运行旧版本的代码。然而，一些过时和不推荐使用的特性可能在新版本中被移除，因此使用新版本可以确保代码不依赖于这些过时的特性。"}]}]}]},{"ID":"20231117211301-yeioflg","Type":"NodeParagraph","Properties":{"id":"20231117211301-yeioflg","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"升级 Go 版本时，要注意测试代码的兼容性（包括依赖的三方库）并做好代码审核，确保平稳升级到新版本。"}]},{"ID":"20231117211301-rkhpw0d","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-rkhpw0d","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"使用用模糊测试来发现边界问题"}]},{"ID":"20231117211301-a5hnmiq","Type":"NodeParagraph","Properties":{"id":"20231117211301-a5hnmiq","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"模糊测试是通过数据构造引擎自动构造出（也可以借助开发者提供的初始数据）大量随机数据，作为程序的输入来进行测试的一种方式。模糊测试会监测程序运行过程中是否出现 panic、断言失败、无限循环等异常情况，特别是容易被忽视的边界情况。"}]},{"ID":"20231117211301-i2gbjmf","Type":"NodeParagraph","Properties":{"id":"20231117211301-i2gbjmf","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"之前有写过一篇文章专门讲解 Golang 中的模糊测试，请参考。"}]},{"ID":"20231117211301-uarygap","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-uarygap","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"使用 Race Detector 检测竞态条件"}]},{"ID":"20231117211301-qb9tg9x","Type":"NodeParagraph","Properties":{"id":"20231117211301-qb9tg9x","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"并发编程可以提高程序的性能和稳定性，但也带来了一些挑战，如竞态条件。竞态条件是指并发程序中的多个线程同时访问共享资源，导致程序行为不确定的问题。为了避免竞态条件的产生，需要使用同步机制（如互斥锁、条件变量等）来协调线程之间的访问。然而，在复杂的程序中，竞态条件可能难以察觉，因此 Golang 提供了竞态条件检测工具 Race Detector。"}]},{"ID":"20231117211301-likj5nf","Type":"NodeParagraph","Properties":{"id":"20231117211301-likj5nf","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"race detector 集成在了 golang 的工具链中，当设置了 -race 标志位时，编译器会使用代码记录所有的内存访问，包括访问内存的时间和方式，而运行时库则监控对共享变量的不同步访问情况。当检测到这种竞态行为时，将会打印警告信息。"}]},{"ID":"20231117211301-2ktrs0d","Type":"NodeParagraph","Properties":{"id":"20231117211301-2ktrs0d","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"之前有写过一篇文章专门讲解 Golang 中的 Race Detector，请参考。"}]},{"ID":"20231117211301-45gekfa","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-45gekfa","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"使用 vet 工具检查潜在的错误"}]},{"ID":"20231117211301-i4nwirx","Type":"NodeParagraph","Properties":{"id":"20231117211301-i4nwirx","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"go vet 是一个非常有用的工具，可以帮助开发者在早期阶段发现代码中的问题，这些问题不一定是语法错误，但可能在运行时导致错误。例如无法访问的代码、未使用的变量以及与程序程有关的常见错误。通过在开发过程的早期捕获这些问题，go vet 可以帮助提高代码质量，减少调试时间，并增强整程序的可靠性。"}]},{"ID":"20231117211301-pxe23zr","Type":"NodeParagraph","Properties":{"id":"20231117211301-pxe23zr","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"之前有写过一篇文章专门讲解 Golang 中的代码扫描的文章，请参考。"}]},{"ID":"20231117211301-r9f7a8d","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-r9f7a8d","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"订阅 golang-announce 来及时获得安全版本的通知"}]},{"ID":"20231117211301-uedyv0m","Type":"NodeParagraph","Properties":{"id":"20231117211301-uedyv0m","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"包含安全修复的 Go 版本会预先发布到小批量邮件列表 golang-announce@googlegroups.com。如果想知道 Go 安全修复程序何时发布，可以订阅下。"}]},{"ID":"20231117211301-mfnja6h","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117211301-mfnja6h","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"小结"}]},{"ID":"20231117211301-8b5uq8y","Type":"NodeParagraph","Properties":{"id":"20231117211301-8b5uq8y","updated":"20231117211301"},"Children":[{"Type":"NodeText","Data":"本文介绍的是 Golang 官方推荐的安全实践，在实践过程中，也可以在这个基础上加入更多的安全实践。"}]}]}