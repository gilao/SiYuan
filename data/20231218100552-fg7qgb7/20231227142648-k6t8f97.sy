{"ID":"20231227142648-k6t8f97","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f350","id":"20231227142648-k6t8f97","tags":"Go-zap 库","title":"如何定制化Zap 日志库以及如何使用","updated":"20231228100908"},"Children":[{"ID":"20231227142648-4v8zg14","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231227142648-4v8zg14","updated":"20231227142749"},"Children":[{"Type":"NodeText","Data":"引入日志依赖"}]},{"ID":"20231227142752-nuhrnd9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227142752-nuhrnd9","updated":"20231227142807"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2g="},{"Type":"NodeCodeBlockCode","Data":"go get -u go.uber.org/zap\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227142823-h4xl8u8","Type":"NodeParagraph","Properties":{"id":"20231227142823-h4xl8u8","updated":"20231227142823"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zap"},{"Type":"NodeText","Data":"​日志库是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Uber"},{"Type":"NodeText","Data":"​开源的。性能很好，因为不用反射实现，但需要自己去手动指明打印信息的类型（下面会有示例）。个人觉得自己指定打印还是挺舒服的。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zap"},{"Type":"NodeText","Data":"​的使用率非常高，不仅支持日志库的基本功能，而且很灵活的支持你去进一步的封装或者定制化。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zap"},{"Type":"NodeText","Data":"​支持异步打印。"}]},{"ID":"20231227142824-1p6d023","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231227142824-1p6d023","updated":"20231227142836"},"Children":[{"Type":"NodeText","Data":"如何使用 zap"}]},{"ID":"20231227142837-ndkaqrw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231227142837-ndkaqrw","updated":"20231227142849"},"Children":[{"Type":"NodeText","Data":"格式化配置"}]},{"ID":"20231227142850-ft1krou","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227142850-ft1krou","updated":"20231227143409"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func NewDevelopmentEncoderConfig() zapcore.EncoderConfig\nfunc NewProductionEncoderConfig() zapcore.EncoderConfig\nfunc NewProductionConfig() Config\nfunc NewDevelopmentConfig() Config\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227143426-jy1j9tf","Type":"NodeParagraph","Properties":{"id":"20231227143426-jy1j9tf","updated":"20231227143530"},"Children":[{"Type":"NodeText","Data":"这里"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":"可以根据实际生产和测试环境需求进行选择"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"，也可以直接使用其他初始化方式。"}]},{"ID":"20231227143531-a9lzmhb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227143531-a9lzmhb","updated":"20231227153952"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// NewProductionEncoderConfig returns an opinionated EncoderConfig for\n// production environments.\nfunc NewProductionEncoderConfig() zapcore.EncoderConfig {\n   return zapcore.EncoderConfig{\n       // 设置log内容里的一些属性的key\n      TimeKey:        \"ts\",//时间对应的key名\n      LevelKey:       \"level\",//日志级别对应的key名\n      NameKey:        \"logger\",//logger名对应的key名\n      CallerKey:      \"caller\",//调用者对应的key名\n      FunctionKey:    zapcore.OmitKey,\n      MessageKey:     \"msg\",//日志内容对应的key名，此参数必须不为空，否则日志主体不处理\n      StacktraceKey:  \"stacktrace\",//栈追踪的key名\n       // const DefaultLineEnding = \"\\n\" 行末输出格式\n      LineEnding:     zapcore.DefaultLineEnding,\n       // 日志编码级别\n      EncodeLevel:    zapcore.LowercaseLevelEncoder,\n       // 日志时间解析\n      EncodeTime:     zapcore.EpochTimeEncoder,\n       // 日志日期解析\n      EncodeDuration: zapcore.SecondsDurationEncoder,\n       // 日志调用路径\n      EncodeCaller:   zapcore.ShortCallerEncoder,\n   }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227153253-x7aihan","Type":"NodeParagraph","Properties":{"id":"20231227153253-x7aihan","updated":"20231227154056"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"使用"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"NewProductionEncoderConfig()"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"创建的 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"Logger"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":" 在记录日志时会自动记录调用函数的信息、打日志的时间，"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"a strong text","TextMarkAHref":"https://so.csdn.net/so/search?q=%E6%97%A5%E5%BF%97%E7%BA%A7%E5%88%AB\u0026amp;spm=1001.2101.3001.7020","TextMarkTextContent":"日志级别"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"等信息。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231227154049-jjatcm8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231227154049-jjatcm8","updated":"20231227154105"},"Children":[{"Type":"NodeText","Data":"EncodeLevel"}]},{"ID":"20231227154120-rzujmf9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227154120-rzujmf9","updated":"20231227154201"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// A LevelEncoder serializes a Level to a primitive type.\ntype LevelEncoder func(Level, PrimitiveArrayEncoder)\n\n// 将日志级别进行大写并带上颜色\nfunc CapitalColorLevelEncoder(l Level, enc PrimitiveArrayEncoder)\n// 将日志级别大写不带颜色\nfunc CapitalLevelEncoder(l Level, enc PrimitiveArrayEncoder)\n// 将日志级别小写带上颜色\nfunc LowercaseColorLevelEncoder(l Level, enc PrimitiveArrayEncoder)\n// 将日志级别小写不带颜色\nfunc LowercaseLevelEncoder(l Level, enc PrimitiveArrayEncoder)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227154203-919ee9y","Type":"NodeParagraph","Properties":{"id":"20231227154203-919ee9y","updated":"20231227154222"},"Children":[{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"需要实现"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"code strong text","TextMarkTextContent":"LevelEncoder"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color1);"},"TextMarkType":"strong text","TextMarkTextContent":"接口。可以调整日志编码级别，并且选择带上或者不带输出颜色。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color1);\"}"}]},{"ID":"20231227154218-yc6tebb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231227154218-yc6tebb","updated":"20231227154234"},"Children":[{"Type":"NodeText","Data":"EncodeTime"}]},{"ID":"20231227154235-js8jggc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227154235-js8jggc","updated":"20231227154242"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// A TimeEncoder serializes a time.Time to a primitive type.\ntype TimeEncoder func(time.Time, PrimitiveArrayEncoder)\n\n// 根据不同时间进行格式化\nfunc EpochTimeEncoder(t time.Time, enc PrimitiveArrayEncoder)\nfunc EpochMillisTimeEncoder(t time.Time, enc PrimitiveArrayEncoder)\nfunc EpochNanosTimeEncoder(t time.Time, enc PrimitiveArrayEncoder)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227154243-ux8l2l0","Type":"NodeParagraph","Properties":{"id":"20231227154243-ux8l2l0","updated":"20231227154308"},"Children":[{"Type":"NodeText","Data":"定制日期格式解析。需要实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"DruationEncoder"},{"Type":"NodeText","Data":"​接口"}]},{"ID":"20231227154314-nvbvk80","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231227154314-nvbvk80","updated":"20231227154330"},"Children":[{"Type":"NodeText","Data":"定制化 zap"}]},{"ID":"20231227154330-00alpd2","Type":"NodeParagraph","Properties":{"id":"20231227154330-00alpd2","updated":"20231227154333"},"Children":[{"Type":"NodeText","Data":"编码格式"}]},{"ID":"20231227154333-4xxxwzo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227154333-4xxxwzo","updated":"20231227160206"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"encoderConfig := zap.NewProductionEncoderConfig()\n// 打印级别为大写 \u0026 颜色\nencoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder\n// 时间编码进行指定格式解析 layout -\u003e 2006-01-02T15:04:05Z07:00\nencoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231227160200-53cabwc","Type":"NodeParagraph","Properties":{"id":"20231227160200-53cabwc","updated":"20231227160428"},"Children":[{"Type":"NodeText","Data":"修改日志打印级别和时间编码格式"}]},{"ID":"20231227160429-jramj4i","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231227160429-jramj4i","updated":"20231227161042"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// parseTime 进行时间格式处理\nfunc parseTime(layout string) zapcore.TimeEncoder {\n   return func(t time.Time, enc zapcore.PrimitiveArrayEncoder) {\n      type appendTimeEncoder interface {\n         AppendTimeLayout(time.Time, string)\n      }\n\n      if enc, ok := enc.(appendTimeEncoder); ok {\n         enc.AppendTimeLayout(t, layout)\n         return\n      }\n\n      enc.AppendString(t.Format(layout))\n   }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228094732-tdy8zzi","Type":"NodeParagraph","Properties":{"id":"20231228094732-tdy8zzi","updated":"20231228094732"},"Children":[{"Type":"NodeText","Data":"实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zapcore.TimeEncoder"},{"Type":"NodeText","Data":"​接口，将指定的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Layout"},{"Type":"NodeText","Data":"​参数进行传入实现闭包即可。"}]},{"ID":"20231228094733-mgwqndr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231228094733-mgwqndr","updated":"20231228094749"},"Children":[{"Type":"NodeText","Data":"日志分割"}]},{"ID":"20231228094749-18xqpqa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228094749-18xqpqa","updated":"20231228094756"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 日志输出配置, 借助另外一个库 lumberjack 协助完成日志切割。\nlumberjackLogger := \u0026lumberjack.Logger{\n   Filename:   settings.Conf.Filename,   // -- 日志文件名\n   MaxSize:    settings.Conf.MaxSize,    // -- 最大日志数 M为单位!!!\n   MaxAge:     settings.Conf.MaxAge,     // -- 最大存在天数\n   MaxBackups: settings.Conf.MaxBackups, // -- 最大备份数量\n   Compress:   false,                    // --是否压缩\n}\nsyncer := zapcore.AddSync(lumberjackLogger)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228094757-fic7lwq","Type":"NodeParagraph","Properties":{"id":"20231228094757-fic7lwq","updated":"20231228094836"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zap"},{"Type":"NodeText","Data":"​ 日志本身不支持日志切割，借助另外一个库 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lumberjack"},{"Type":"NodeText","Data":"​协助完成日志切割。"}]},{"ID":"20231228094836-7mb7wbg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228094836-7mb7wbg","updated":"20231228095157"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// -- 用于开发者模式和生产模式之间的切换\nvar core zapcore.Core\nif settings.Conf.AppConfig.Mode == \"debug\" {\n   encoder := zapcore.NewConsoleEncoder(encoderConfig) // 输出控制台编码格式\n   core = zapcore.NewTee(\n      zapcore.NewCore(encoder, syncer, zapcore.DebugLevel), // debug级别打印到日志文件\n      zapcore.NewCore(encoder, zapcore.Lock(os.Stdout), zapcore.DebugLevel), // debug级别打印到控制台\n   )\n} else {\n   encoder := zapcore.NewJSONEncoder(encoderConfig)// 输出Json格式，便于日志检索\n   core = zapcore.NewCore(encoder, syncer, zapcore.InfoLevel)// info级别打印到日志文件\n}\nlg := zap.New(core, zap.AddCaller()) // --添加函数调用信息\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228095743-26jry4t","Type":"NodeParagraph","Properties":{"id":"20231228095743-26jry4t","updated":"20231228095745"},"Children":[{"Type":"NodeText","Data":"根据配置信息去选择具体打印需求。"}]},{"ID":"20231228095745-8r808mm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228095745-8r808mm","updated":"20231228095751"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"zap.ReplaceGlobals(lg)               // 替换该日志为全局日志\n\nvar (\n\t_globalMu sync.RWMutex\n\t_globalL  = NewNop()\n)\n\n// L returns the global Logger, which can be reconfigured with ReplaceGlobals.\n// It's safe for concurrent use.\nfunc L() *Logger {\n\t_globalMu.RLock()\n\tl := _globalL\n\t_globalMu.RUnlock()\n\treturn l\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228100052-qtb5ro9","Type":"NodeParagraph","Properties":{"id":"20231228100052-qtb5ro9","updated":"20231228100053"},"Children":[{"Type":"NodeText","Data":"设置该日志为全局日志，将原日志进行替换，即可在任意位置使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"zap.L()"},{"Type":"NodeText","Data":"​调用该日志。"}]},{"ID":"20231228100058-3imhns6","Type":"NodeParagraph","Properties":{"id":"20231228100058-3imhns6","updated":"20231228100103"},"Children":[{"Type":"NodeText","Data":"完成代码"}]},{"ID":"20231228100103-huiqgc2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228100103-huiqgc2","updated":"20231228100112"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// init 初始化日志库\nfunc init() {\n   encoderConfig := zap.NewProductionEncoderConfig()\n   // 打印级别为大写 \u0026 彩色\n   encoderConfig.EncodeLevel = zapcore.CapitalColorLevelEncoder\n   // 时间编码进行指定格式解析\n   encoderConfig.EncodeTime = parseTime(settings.Conf.Layout)\n\n   // 日志输出配置, 借助另外一个库 lumberjack 协助完成日志切割。\n   lumberjackLogger := \u0026lumberjack.Logger{\n      Filename:   settings.Conf.Filename,   // -- 日志文件名\n      MaxSize:    settings.Conf.MaxSize,    // -- 最大日志数 M为单位!!!\n      MaxAge:     settings.Conf.MaxAge,     // -- 最大存在天数\n      MaxBackups: settings.Conf.MaxBackups, // -- 最大备份数量\n      Compress:   false,                    // --是否压缩\n   }\n   syncer := zapcore.AddSync(lumberjackLogger)\n\n   // -- 用于开发者模式和生产模式之间的切换\n   var core zapcore.Core\n   if settings.Conf.AppConfig.Mode == \"debug\" {\n      encoder := zapcore.NewConsoleEncoder(encoderConfig)\n      core = zapcore.NewTee(\n         zapcore.NewCore(encoder, syncer, zapcore.DebugLevel),\n         zapcore.NewCore(encoder, zapcore.Lock(os.Stdout), zapcore.DebugLevel),\n      )\n   } else {\n      encoder := zapcore.NewJSONEncoder(encoderConfig)\n      core = zapcore.NewCore(encoder, syncer, zapcore.InfoLevel)\n   }\n   lg := zap.New(core, zap.AddCaller()) // --添加函数调用信息\n   zap.ReplaceGlobals(lg)               // 替换该日志为全局日志\n}\n\n// parseTime 进行时间格式处理\nfunc parseTime(layout string) zapcore.TimeEncoder {\n   return func(t time.Time, enc zapcore.PrimitiveArrayEncoder) {\n      type appendTimeEncoder interface {\n         AppendTimeLayout(time.Time, string)\n      }\n\n      if enc, ok := enc.(appendTimeEncoder); ok {\n         enc.AppendTimeLayout(t, layout)\n         return\n      }\n\n      enc.AppendString(t.Format(layout))\n   }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228100222-r84dw2b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231228100222-r84dw2b","updated":"20231228100222"},"Children":[{"Type":"NodeText","Data":"测试日志打印情况"}]},{"ID":"20231228100223-ykngcpe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228100223-ykngcpe","updated":"20231228100232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"zap.L().Info(\"test info\", zap.String(\"test String\", \"ok\"), zap.Int(\"test cnt\", 1))\nzap.L().Debug(\"test debug\", zap.String(\"test String\", \"ok\"), zap.Int(\"test cnt\", 2))\nzap.L().Error(\"test error\", zap.String(\"test String\", \"ok\"), zap.Int(\"test cnt\", 3))\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228100233-6p6n5vw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228100233-6p6n5vw","updated":"20231228100248"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"[2023-02-10 22:22:17] INFO xxxxx/main.go:22 test info {“test String”: “ok”, “test cnt”: 1}\n[2023-02-10 22:22:17] DEBUG xxxxx/main.go:23 test debug {“test String”: “ok”, “test cnt”: 2}\n[2023-02-10 22:22:17] ERROR xxxxx/main.go:24 test error {“test String”: “ok”, “test cnt”: 3}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228100307-0gz10nw","Type":"NodeParagraph","Properties":{"id":"20231228100307-0gz10nw","updated":"20231228100341"},"Children":[{"Type":"NodeText","Data":" 这里就是上述所说的自指定类型进行输出的情况"}]},{"ID":"20231228100341-f5xghvz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231228100341-f5xghvz","updated":"20231228100352"},"Children":[{"Type":"NodeText","Data":"结合 Gin框架进行使用"}]},{"ID":"20231228100352-00cbm6a","Type":"NodeParagraph","Properties":{"id":"20231228100352-00cbm6a","updated":"20231228100507"},"Children":[{"Type":"NodeText","Data":"虽然 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gin"},{"Type":"NodeText","Data":"​框架有自带的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"logger"},{"Type":"NodeText","Data":"​ 中间件，但我们可以根据 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gin"},{"Type":"NodeText","Data":"​框架实现的原生日志和异常恢复中间件进行改造并进行替换。"}]},{"ID":"20231228100508-sdk360v","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231228100508-sdk360v","updated":"20231228100652"},"Children":[{"Type":"NodeText","Data":"Loger"}]},{"ID":"20231228100653-9573z6r","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228100653-9573z6r","updated":"20231228100658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// GinLogger 替换gin中默认的logger\nfunc GinLogger() gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tstart := time.Now()\n\t\tpath := c.Request.URL.Path\n\t\tquery := c.Request.URL.RawQuery\n\t\tc.Next()\n\tcost := time.Since(start)\n\tif c.Writer.Status() != http.StatusOK {\n\t\t// 记录异常信息\n\t\tzap.L().Error(query,\n\t\t\tzap.Int(\"status\", c.Writer.Status()),\n\t\t\tzap.String(\"method\", c.Request.Method),\n\t\t\tzap.String(\"path\", path),\n\t\t\tzap.String(\"ip\", c.ClientIP()),\n\t\t\tzap.String(\"user-agent\", c.Request.UserAgent()),\n\t\t\tzap.String(\"errors\", c.Errors.ByType(gin.ErrorTypePrivate).String()),\n\t\t\tzap.Duration(\"cost\", cost),\n\t\t)\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228100733-jjfyc2x","Type":"NodeParagraph","Properties":{"id":"20231228100733-jjfyc2x","updated":"20231228100846"},"Children":[{"Type":"NodeText","Data":"如果有错误请求，只要不是状态码为200的全部进行打印 -\u003e 状态码、请求方法（get、post...）、路径、ip、用户授权方、错误信息、请求花费时间。"}]},{"ID":"20231228100846-s7rxi8p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231228100846-s7rxi8p","updated":"20231228100902"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// GinRecovery recover掉项目可能出现的panic\nfunc GinRecovery(stack bool) gin.HandlerFunc {\n\treturn func(c *gin.Context) {\n\t\tdefer func() {\n\t\t\tif err := recover(); err != nil {\n\t\t\t\t// Check for a broken connection, as it is not really a\n\t\t\t\t// condition that warrants a panic stack trace.\n\t\t\t\tvar brokenPipe bool\n\t\t\t\tif ne, ok := err.(*net.OpError); ok {\n\t\t\t\t\tif se, ok := ne.Err.(*os.SyscallError); ok {\n\t\t\t\t\t\tif strings.Contains(strings.ToLower(se.Error()), \"broken pipe\") ||\n\t\t\t\t\t\t\tstrings.Contains(strings.ToLower(se.Error()), \"connection reset by peer\") {\n\t\t\t\t\t\t\tbrokenPipe = true\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\thttpRequest, _ := httputil.DumpRequest(c.Request, false)\n\t\t\t\tif brokenPipe {\n\t\t\t\t\tzap.L().Error(c.Request.URL.Path,\n\t\t\t\t\t\tzap.Any(\"error\", err),\n\t\t\t\t\t\tzap.String(\"httpRequest\", string(httpRequest)),\n\t\t\t\t\t)\n\t\t\t\t\t// If the connection is dead, we can't write a status to it.\n\t\t\t\t\tc.Error(err.(error)) // nolint: errcheck\n\t\t\t\t\tc.Abort()\n\t\t\t\t\treturn\n\t\t\t\t}\n                // 这里可以选择全部打印出来不必要分割然后循环输出\n\t\t\t\trequest := strings.Split(string(httpRequest), \"\\r\\n\")\n\t\t\t\tsplit := strings.Split(string(debug.Stack()), \"\\n\\t\")\n\t\t\t\tif stack {\n\t\t\t\t\tzap.L().Error(\"[Recovery from panic]\",\n\t\t\t\t\t\tzap.Any(\"error\", err))\n\t\t\t\t\tfor _, str := range request {\n\t\t\t\t\t\tzap.L().Error(\"[Recovery from request panic]\", zap.String(\"request\", str))\n\t\t\t\t\t}\n\t\t\t\t\tfor _, str := range split {\n\t\t\t\t\t\tzap.L().Error(\"[Recovery from Stack panic]\", zap.String(\"stack\", str))\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tzap.L().Error(\"[Recovery from panic]\",\n\t\t\t\t\t\tzap.Any(\"error\", err))\n\t\t\t\t\tfor _, str := range request {\n\t\t\t\t\t\tzap.L().Error(\"[Recovery from request panic]\", zap.String(\"request\", str))\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tc.AbortWithStatus(http.StatusInternalServerError)\n\t\t\t}\n\t\t}()\n\t\tc.Next()\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231228100904-dzwdr56","Type":"NodeParagraph","Properties":{"id":"20231228100904-dzwdr56","updated":"20231228100904"},"Children":[{"Type":"NodeText","Data":"这里在Panic的时候我采用了分割循环打印的方法，也可以全部输出，但是一堆异常情况，不容易看清楚。也可以选择不打印栈轨迹输出，只需要在使用recover中间件时传入false参数即可。"}]},{"ID":"20231228100904-ormfhc6","Type":"NodeParagraph","Properties":{"id":"20231228100904-ormfhc6","updated":"20231228100904"},"Children":[{"Type":"NodeText","Data":"小结\nzap日志可以灵活的定制时间、编码输出格式、颜色等信息。"}]},{"ID":"20231228100904-odazhtk","Type":"NodeParagraph","Properties":{"id":"20231228100904-odazhtk","updated":"20231228100908"},"Children":[{"Type":"NodeText","Data":"zap日志级别丰富，不利用反射，效率高，但需要手动对类型进行定义。"}]}]}