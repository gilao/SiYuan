{"ID":"20230815143622-shj65o6","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f4de","id":"20230815143622-shj65o6","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230815143622-shj65o6\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230815143641-yimnhxo\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230815143712-himeani\u0026quot;,\u0026quot;scrollTop\u0026quot;:1198.6666259765625\u0026#125;","tags":"电力认知大模型,进程间通信方式,共享内存,Python\u0026amp;Go","title":"基于python \u0026amp; go 的程序实现","updated":"20230815143712"},"Children":[{"ID":"20230815143641-yimnhxo","Type":"NodeParagraph","Properties":{"id":"20230815143641-yimnhxo"}},{"ID":"20230815143622-z0sfshi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230815143622-z0sfshi","updated":"20230815143648"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"import multiprocessing\nimport time\nimport ctypes\n\ndef calculate_shared_memory(shared_mem):\n    while True:\n        # 从共享内存中读取操作符和操作数\n        operator = shared_mem.value[0]\n        operand = shared_mem.value[1]\n\n        if operator == 1:  # 加法\n            result = operand[0] + operand[1]\n            print(f\"Python: {operand[0]} + {operand[1]} = {result}\")\n        elif operator == 2:  # 减法\n            result = operand[0] - operand[1]\n            print(f\"Python: {operand[0]} - {operand[1]} = {result}\")\n\n        # 将操作符置为0，表示计算已完成\n        shared_mem.value[0] = 0\n\n        time.sleep(1)\n\ndef main():\n    # 创建共享内存，长度为3个整数类型（操作符、操作数1、操作数2）\n    shared_mem = multiprocessing.Array(ctypes.c_int, 3)\n\n    # 启动共享内存计算进程\n    process = multiprocessing.Process(target=calculate_shared_memory, args=(shared_mem,))\n    process.start()\n\n    while True:\n        operator = input(\"请输入操作符（1 加法，2 减法）：\")\n        operand1 = int(input(\"请输入第一个操作数：\"))\n        operand2 = int(input(\"请输入第二个操作数：\"))\n\n        # 将操作符和操作数写入共享内存\n        shared_mem.value[0] = operator\n        shared_mem.value[1] = [operand1, operand2]\n\n        # 等待共享内存计算进程处理完毕\n        while shared_mem.value[0] != 0:\n            time.sleep(0.1)\n\n    process.join()\n\nif __name__ == '__main__':\n    main()\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230815143650-3nw8guy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230815143650-3nw8guy","updated":"20230815143702"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"strings\"\n)\n\nfunc handleRequest(sharedMem []int) {\n\tfor {\n\t\toperator := sharedMem[0]\n\t\toperand := sharedMem[1:]\n\n\t\tif operator == 1 { // 加法\n\t\t\tresp, err := http.Get(fmt.Sprintf(\"http://localhost:8000/add?operand1=%d\u0026operand2=%d\", operand[0], operand[1]))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Go: 请求失败:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\n\t\t\tbody, err := ioutil.ReadAll(resp.Body)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Go: 读取响应失败:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tresult := string(body)\n\t\t\tlog.Printf(\"Go: %d + %d = %s\\n\", operand[0], operand[1], result)\n\t\t} else if operator == 2 { // 减法\n\t\t\tresp, err := http.Get(fmt.Sprintf(\"http://localhost:8000/sub?operand1=%d\u0026operand2=%d\", operand[0], operand[1]))\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Go: 请求失败:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tdefer resp.Body.Close()\n\n\t\t\tbody, err := ioutil.ReadAll(resp.Body)\n\t\t\tif err != nil {\n\t\t\t\tlog.Println(\"Go: 读取响应失败:\", err)\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\tresult := string(body)\n\t\t\tlog.Printf(\"Go: %d - %d = %s\\n\", operand[0], operand[1], result)\n\t\t}\n\n\t\tsharedMem[0] = 0\n\n\t\ttime.Sleep(1 * time.Second)\n\t}\n}\n\nfunc main() {\n\t// 创建共享内存，长度为3个整数类型（操作符、操作数1、操作数2）\n\tsharedMem := make([]int, 3)\n\n\t// 启动共享内存处理进程\n\tgo handleRequest(sharedMem)\n\n\tfor {\n\t\tvar operator int\n\t\tfmt.Print(\"请输入操作符（1 加法，2 减法）：\")\n\t\tfmt.Scanf(\"%d\\n\", \u0026operator)\n\t\tvar operand1, operand2 int\n\t\tfmt.Print(\"请输入第一个操作数：\")\n\t\tfmt.Scanf(\"%d\\n\", \u0026operand1)\n\t\tfmt.Print(\"请输入第二个操作数：\")\n\t\tfmt.Scanf(\"%d\\n\", \u0026operand2)\n\n\t\t// 将操作符和操作数写入共享内存\n\t\tsharedMem[0] = operator\n\t\tsharedMem[1] = operand1\n\t\tsharedMem[2] = operand2\n\n\t\t// 等待共享内存处理完毕\n\t\tfor sharedMem[0] != 0 {\n\t\t\ttime.Sleep(100 * time.Millisecond)\n\t\t}\n\t}\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230815143712-wzblpik","Type":"NodeParagraph","Properties":{"id":"20230815143712-wzblpik","updated":"20230815143712"},"Children":[{"Type":"NodeText","Data":"在这个示例中，Python 进程负责从共享内存中读取操作符和操作数，并进行加法或减法计算。Go 语言进程则负责根据操作符向本地 Web 服务器发送请求，获取计算结果并输出到控制台。通过共享内存的方式实现了 Python 和 Go 语言之间的通信。"}]},{"ID":"20230815143712-himeani","Type":"NodeParagraph","Properties":{"id":"20230815143712-himeani","updated":"20230815143712"},"Children":[{"Type":"NodeText","Data":"请注意，在这个示例中，并没有详细处理错误、输入验证和安全性等方面。在实际生产环境中，你需要进一步完善代码以满足需求并确保系统的安全和稳定。"}]}]}