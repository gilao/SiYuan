{"ID":"20240624090819-f4urg5h","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3da-fe0f","id":"20240624090819-f4urg5h","title":"Ollama 架构解析","type":"doc","updated":"20240624104551"},"Children":[{"ID":"20240624090823-tk6kspd","Type":"NodeParagraph","Properties":{"id":"20240624090823-tk6kspd","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目录的简要说明："}]},{"ID":"20240624090823-epy7etw","Type":"NodeTable","TableAligns":[0,0],"Properties":{"colgroup":"|","id":"20240624090823-epy7etw","updated":"20240624104547"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目录名称"}]},{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"描述"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"api"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Go 编写的的客户端 API 库"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"app"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"桌面应用程序（主要是一个托盘）"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"auth"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"验证"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"cmd"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"命令和相关的处理程序"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"docs"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"文档"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"examples"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用 ollama 的示例"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"format"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用于单位和时间的格式处理的工具"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"gpu"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GPU 和加速设备的检测"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"llm"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用于运行 llama.cpp 的实现"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"macapp"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Mac 桌面应用程序"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"openai"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用于 ollama 的 OpenAI API 兼容封装"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"parser"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"模型信息和消息的解析器"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"progress"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"显示加载进度的实用程序"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"readline"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"从终端读取输入的实用程序"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"scripts"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用于构建和发布的脚本"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"server"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Go 编写的 Web 服务实现"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"version"}]},{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"版本信息"}]}]}]},{"ID":"20240624090823-dza45jo","Type":"NodeParagraph","Properties":{"id":"20240624090823-dza45jo","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"请注意，由于项目正在开发中，这些目录可能随时被更改。"}]},{"ID":"20240624090823-dfhsxhp","Type":"NodeParagraph","Properties":{"id":"20240624090823-dfhsxhp","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"82c654dfly1hpi8j8sfo3j20zv0kl42t"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\82c654dfly1hpi8j8sfo3j20zv0kl42t-17189382274062.jpg?lastModify=1719191288"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240624090823-oy10o6w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-oy10o6w","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"幕后英雄: llama.cpp"}]},{"ID":"20240624090823-66ln0kf","Type":"NodeParagraph","Properties":{"id":"20240624090823-66ln0kf","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 作为Git 子模块包含在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​中，可以在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm"},{"Type":"NodeText","Data":"​目录中；"}]},{"ID":"20240624090823-wt5fbhi","Type":"NodeParagraph","Properties":{"id":"20240624090823-wt5fbhi","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 项目"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ggerganov/llama.cpp","TextMarkTextContent":"本身"},{"Type":"NodeText","Data":"是一个开源库，最开始是用于推断纯 C/C++ 的 Meta LLaMA 模型。它后来被扩展用于运行更多模型，比如 Mistral 和 Google Gemma（最近才支持）。它利用同一作者创建的另一个项目 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ggerganov/ggml","TextMarkTextContent":"ggml"},{"Type":"NodeText","Data":" 的功能，可在不同平台上原生运行（与 Python 项目相比）。"}]},{"ID":"20240624090823-f4dcbml","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-f4dcbml","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"支持的后端"}]},{"ID":"20240624090823-st4p4i3","Type":"NodeParagraph","Properties":{"id":"20240624090823-st4p4i3","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目前，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ggml"},{"Type":"NodeText","Data":"​ 支持的一些推理后端如下："}]},{"ID":"20240624090823-xuc6avf","Type":"NodeList","ListData":{},"Properties":{"id":"20240624090823-xuc6avf","updated":"20240624104547"},"Children":[{"ID":"20240624090823-il83ud7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-il83ud7","updated":"20240624090823"},"Children":[{"ID":"20240624090823-1e4p03a","Type":"NodeParagraph","Properties":{"id":"20240624090823-1e4p03a","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​可运行 x86 上的 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"AVX、AVX2 和 AVX512"},{"Type":"NodeText","Data":"，或 ARM 上的 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"NEON"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240624090823-jvj585h","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-jvj585h","updated":"20240624090823"},"Children":[{"ID":"20240624090823-7gysfj0","Type":"NodeParagraph","Properties":{"id":"20240624090823-7gysfj0","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"通过 MPI（如 MPICH 和 OpenMPI），"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ggml"},{"Type":"NodeText","Data":"​ 可以在 CPU 或 CPU 集群上运行模型。"}]}]},{"ID":"20240624090823-6ytls6s","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-6ytls6s","updated":"20240624090823"},"Children":[{"ID":"20240624090823-wfb9um9","Type":"NodeParagraph","Properties":{"id":"20240624090823-wfb9um9","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Apple Metal"},{"Type":"NodeText","Data":"集成支持macOS和iOS上的GPU，包括Mac上的GPU和iOS设备或Apple Silicon Mac上的Apple制造的GPU。"}]}]},{"ID":"20240624090823-ftrn98m","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-ftrn98m","updated":"20240624090823"},"Children":[{"ID":"20240624090823-an7uzkj","Type":"NodeParagraph","Properties":{"id":"20240624090823-an7uzkj","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"基于BLAS架构的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ggml"},{"Type":"NodeText","Data":"​使用了一个古老的开放标准"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"OpenCL"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240624090823-p9drhqr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-p9drhqr","updated":"20240624090823"},"Children":[{"ID":"20240624090823-5yso4m7","Type":"NodeParagraph","Properties":{"id":"20240624090823-5yso4m7","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"cuBLAS \u0026quot;支持英伟达™（NVIDIA®）公司的GPU"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20240624090823-p2gvfjd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-p2gvfjd","updated":"20240624090823"},"Children":[{"ID":"20240624090823-gle81ky","Type":"NodeParagraph","Properties":{"id":"20240624090823-gle81ky","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"最近的AMD GPU"},{"Type":"NodeText","Data":"通过"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"hipBLAS"},{"Type":"NodeText","Data":"​支持，它是"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.amd.com/en/products/software/rocm.html","TextMarkTextContent":"AMD ROCm"},{"Type":"NodeText","Data":"的一部分，与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cuBLAS"},{"Type":"NodeText","Data":"​的应用程序接口几乎相同。"}]}]},{"ID":"20240624090823-t1qsiaq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-t1qsiaq","updated":"20240624093945"},"Children":[{"ID":"20240624090823-ab9mv8g","Type":"NodeParagraph","Properties":{"id":"20240624090823-ab9mv8g","updated":"20240624093945"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"最近引起我注意的是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 中的 Vulkan 支持。这项（有些漏洞）支持最初是由 Nomic 通过其 kompute 框架启动的。最近的进展是在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ggml"},{"Type":"NodeText","Data":"​ 中直接使用 Vulkan 库的"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ggerganov/llama.cpp#vulkan","TextMarkTextContent":"实现"},{"Type":"NodeText","Data":"。"}]}]}]},{"ID":"20240624090823-70wffj7","Type":"NodeParagraph","Properties":{"id":"20240624090823-70wffj7","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这些后端允许开发人员运行可在从台式电脑到智能手机等多个平台上运行的 LLM。此外，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 还为 Linux（包括 Android Linux）、Windows、macOS 和其他各种操作系统（如 iOS，参见 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ggerganov/whisper.cpp/tree/master/examples/whisper.objc","TextMarkTextContent":"whispher.cpp on iOS"},{"Type":"NodeText","Data":"）甚至 WebAssembly（"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ggerganov/whisper.cpp/tree/master/examples/whisper.wasm","TextMarkTextContent":"whispher.wasm"},{"Type":"NodeText","Data":"）提供原生支持。"}]},{"ID":"20240624090823-2ij1co1","Type":"NodeParagraph","Properties":{"id":"20240624090823-2ij1co1","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因此，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 在诞生之初就应支持各种平台和操作系统。"}]},{"ID":"20240624090823-gunerkb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-gunerkb","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"构建系统"}]},{"ID":"20240624090823-cbxr29g","Type":"NodeParagraph","Properties":{"id":"20240624090823-cbxr29g","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"C或C++项目通常使用 cmake 来处理编译、链接等工作。llama.cpp 也是如此；它使用编译定义来利用不同的后端。"}]},{"ID":"20240624090823-qg6k8pp","Type":"NodeParagraph","Properties":{"id":"20240624090823-qg6k8pp","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"例如："}]},{"ID":"20240624090823-gljb2md","Type":"NodeList","ListData":{},"Properties":{"id":"20240624090823-gljb2md","updated":"20240624104547"},"Children":[{"ID":"20240624090823-pbkgjm2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-pbkgjm2","updated":"20240624090823"},"Children":[{"ID":"20240624090823-d5vu5ha","Type":"NodeParagraph","Properties":{"id":"20240624090823-d5vu5ha","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"LLAMA_AVX、LLAMA_AVX2、LLAMA_AVX512用于支持AVX；"}]}]},{"ID":"20240624090823-snlijyq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-snlijyq","updated":"20240624090823"},"Children":[{"ID":"20240624090823-fn50794","Type":"NodeParagraph","Properties":{"id":"20240624090823-fn50794","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用于Apple Metal 支持的 LLAMA_METAL;"}]}]},{"ID":"20240624090823-iwxngci","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-iwxngci","updated":"20240624090823"},"Children":[{"ID":"20240624090823-ibfj6w0","Type":"NodeParagraph","Properties":{"id":"20240624090823-ibfj6w0","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"用于NVIDIA CUDA 支持的 LLAMA_CUBLAS;"}]}]},{"ID":"20240624090823-hdnso6o","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-hdnso6o","updated":"20240624090823"},"Children":[{"ID":"20240624090823-52hbbnk","Type":"NodeParagraph","Properties":{"id":"20240624090823-52hbbnk","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"以及LLAMA_HIPBLAS 用于AMD ROCm支持；"}]}]}]},{"ID":"20240624090823-zxiu17b","Type":"NodeParagraph","Properties":{"id":"20240624090823-zxiu17b","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不过，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​本身是一个go项目，利用的是Go提供的构建系统。"}]},{"ID":"20240624090823-5luaz5v","Type":"NodeParagraph","Properties":{"id":"20240624090823-5luaz5v","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这两个构建系统共存，以构建不同的部分："}]},{"ID":"20240624090823-nq4pefb","Type":"NodeList","ListData":{},"Properties":{"id":"20240624090823-nq4pefb","updated":"20240624104547"},"Children":[{"ID":"20240624090823-jeqg2x8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-jeqg2x8","updated":"20240624090823"},"Children":[{"ID":"20240624090823-pdz4vem","Type":"NodeParagraph","Properties":{"id":"20240624090823-pdz4vem","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmake"},{"Type":"NodeText","Data":"​用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama.cpp"},{"Type":"NodeText","Data":"​中的一些文件构建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​，以进行 “领航” 并提供接口；"}]}]},{"ID":"20240624090823-mymw0du","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-mymw0du","updated":"20240624090959"},"Children":[{"ID":"20240624090823-6ynklt4","Type":"NodeParagraph","Properties":{"id":"20240624090823-6ynklt4","updated":"20240624090959"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"go 构建系统编译，链接和打包其他部分，以生成 ollama 的应用程序和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cli"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240624090823-6cdnv1z","Type":"NodeParagraph","Properties":{"id":"20240624090823-6cdnv1z","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"除了纯go代码，go 编译系统还需要 cgo 来编译一些C语言代码。在 llm目录（用于加载和提供接口"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_ext_server.c"},{"Type":"NodeText","Data":"​）和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu"},{"Type":"NodeText","Data":"​目录（用于检测GPU的C或Objective-C 实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu_info_cuda.c"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu_info_rocm.c"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu_info_darwin.m"},{"Type":"NodeText","Data":"​）中有一些例子。"}]},{"ID":"20240624090823-51oveqq","Type":"NodeParagraph","Properties":{"id":"20240624090823-51oveqq","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"通过利用"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://go.dev/blog/generate","TextMarkTextContent":"go generate"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中的 go 编译系统还可以运行调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmake"},{"Type":"NodeText","Data":"​ 的命令来构建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​。这项工作位于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/generate"},{"Type":"NodeText","Data":"​ 目录中，例如在 Linux 上："}]},{"ID":"20240624090823-70ib5ld","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-70ib5ld","updated":"20240624104547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package generate\n\n//go:generate bash ./gen_linux.sh\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-rb4cjtj","Type":"NodeParagraph","Properties":{"id":"20240624090823-rb4cjtj","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/generate/generate_darwin.go"},{"Type":"NodeText","Data":"​ 告诉 go generate 运行 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gen_linux.sh"},{"Type":"NodeText","Data":"​ 脚本来构建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的部分。"}]},{"ID":"20240624090823-anpnlka","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-anpnlka","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"一些适用于不同平台的脚本"}]},{"ID":"20240624090823-y0l4g5u","Type":"NodeParagraph","Properties":{"id":"20240624090823-y0l4g5u","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"目前有"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gen_common.sh"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gen_linux.sh"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gen_darwin.sh"},{"Type":"NodeText","Data":"​，用于在类 Unix 操作系统（如 macOS 和 Linux）上为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 创建 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​。同时，在 Windows 上使用的是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gen_windows.ps1"},{"Type":"NodeText","Data":"​ PowerShell 脚本。"}]},{"ID":"20240624090823-8erujfd","Type":"NodeParagraph","Properties":{"id":"20240624090823-8erujfd","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"让我们以在 Linux 上构建支持 AVX 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 为例："}]},{"ID":"20240624090823-mcm5x28","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-mcm5x28","updated":"20240624104547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"init_vars\nCMAKE_DEFS=\"${COMMON_CPU_DEFS} -DLLAMA_AVX=on -DLLAMA_AVX2=off -DLLAMA_AVX512=off -DLLAMA_FMA=off -DLLAMA_F16C=off ${CMAKE_DEFS}\"\nBUILD_DIR=\"${LLAMACPP_DIR}/build/linux/${ARCH}/cpu_avx\"\necho \"Building AVX CPU\"\nbuild\ncompress_libs\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-xidnqo2","Type":"NodeParagraph","Properties":{"id":"20240624090823-xidnqo2","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"前三行初始化变量，为编译做准备。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"init_vars"},{"Type":"NodeText","Data":"​ 调用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gen_common.sh"},{"Type":"NodeText","Data":"​ 中的一个子程序来准备常用变量，例如"}]},{"ID":"20240624090823-gteh20g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-gteh20g","updated":"20240624104547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"CMAKE_DEFS=\"\"\nCMAKE_TARGETS=\"--target ext_server\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-oowdamm","Type":"NodeParagraph","Properties":{"id":"20240624090823-oowdamm","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其中"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CMAKE_TARGETS"},{"Type":"NodeText","Data":"​ 将把构建目标设置为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​。该目标是一个库，用于从 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 提供接口和函数，我们将在下一节讨论它。"}]},{"ID":"20240624090823-o19lm79","Type":"NodeParagraph","Properties":{"id":"20240624090823-o19lm79","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CMAKE_DEFS"},{"Type":"NodeText","Data":"​ 中，只有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LLAMA_AVX"},{"Type":"NodeText","Data":"​ 是启用的。而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"COMMON_CPU_DEFS"},{"Type":"NodeText","Data":"​ 的定义如下，以构建独立于位置代码的动态库（对于 gcc，它将被转换为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"-fpic"},{"Type":"NodeText","Data":"​ 标志）："}]},{"ID":"20240624090823-7coj7ed","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-7coj7ed","updated":"20240624104547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"COMMON_CPU_DEFS=\"-DCMAKE_POSITION_INDEPENDENT_CODE=on -DLLAMA_NATIVE=off\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-s0vqein","Type":"NodeParagraph","Properties":{"id":"20240624090823-s0vqein","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"它在终端输出 “Building AVX CPU” 之后，由 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"build"},{"Type":"NodeText","Data":"​ 子程序调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmake"},{"Type":"NodeText","Data":"​："}]},{"ID":"20240624090823-vkxl6iz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-vkxl6iz","updated":"20240624104547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"build() {\n    cmake -S ${LLAMACPP_DIR} -B ${BUILD_DIR} ${CMAKE_DEFS}\n    cmake --build ${BUILD_DIR} ${CMAKE_TARGETS} -j8\n    mkdir -p ${BUILD_DIR}/lib/\n    g++ -fPIC -g -shared -o ${BUILD_DIR}/lib/libext_server.${LIB_EXT} \\\n        ${GCC_ARCH} \\\n        ${WHOLE_ARCHIVE} ${BUILD_DIR}/examples/server/libext_server.a ${NO_WHOLE_ARCHIVE} \\\n        ${BUILD_DIR}/common/libcommon.a \\\n        ${BUILD_DIR}/libllama.a \\\n        -Wl,-rpath,\\$ORIGIN \\\n        -lpthread -ldl -lm \\\n        ${EXTRA_LIBS}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-dgsyucr","Type":"NodeParagraph","Properties":{"id":"20240624090823-dgsyucr","updated":"20240624104547"},"Children":[{"Type":"NodeText","Data":"通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmake"},{"Type":"NodeText","Data":"​ 编译后，它将生成一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libext_server"},{"Type":"NodeText","Data":"​ 动态链接库（Windows 下为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".dll"},{"Type":"NodeText","Data":"​，Linux/BSD 下为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".so"},{"Type":"NodeText","Data":"​，macOS 下为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".dylib"},{"Type":"NodeText","Data":"​）。该库包含 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 下 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"examples/server"},{"Type":"NodeText","Data":"​ 的编译代码（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"examples/server/libext_server.a"},{"Type":"NodeText","Data":"​）、命令代码和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的核心代码—— "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"common/libcommoa.a"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libllama.a"},{"Type":"NodeText","Data":"​。它们将作为可执行文件的\"载荷\"嵌入主 go 程序，以方便分发。"}]},{"ID":"20240624090823-jcy6238","Type":"NodeParagraph","Properties":{"id":"20240624090823-jcy6238","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"最后，它会压缩载荷，使可执行文件更小："}]},{"ID":"20240624090823-u3kvk0w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-u3kvk0w","updated":"20240624104547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"compress_libs() {\n    echo \"Compressing payloads to reduce overall binary size...\"\n    pids=\"\"\n    rm -rf ${BUILD_DIR}/lib/*.${LIB_EXT}*.gz\n    for lib in ${BUILD_DIR}/lib/*.${LIB_EXT}* ; do\n        gzip --best -f ${lib} \u0026\n        pids+=\" $!\"\n    done\n    echo \n    for pid in ${pids}; do\n        wait $pid\n    done\n    echo \"Finished compression\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-89mze23","Type":"NodeParagraph","Properties":{"id":"20240624090823-89mze23","updated":"20240624104547"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"动态链接库最终将位于构建文件夹中的 “cpu_avx” 目录下。如果为其他变体（如 GPU）构建，它们将位于构建文件夹中的不同目录下。"}]},{"ID":"20240624090823-5mxcxk9","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240624090823-5mxcxk9","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"为 llama.cpp 领航"}]},{"ID":"20240624090823-v1w7n3d","Type":"NodeParagraph","Properties":{"id":"20240624090823-v1w7n3d","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"然后，让我们回到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm"},{"Type":"NodeText","Data":"​ 目录，看看 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中建立在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 基础上的实现。对于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 来说，引导 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的最重要部分是："}]},{"ID":"20240624090823-ml48v4o","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240624090823-ml48v4o","updated":"20240624090824"},"Children":[{"ID":"20240624090823-m51rrr7","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240624090823-m51rrr7","updated":"20240624090823"},"Children":[{"ID":"20240624090823-0sgrl0c","Type":"NodeParagraph","Properties":{"id":"20240624090823-0sgrl0c","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​ 中，包装器实现提供了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 可以调用的函数，例如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_init"},{"Type":"NodeText","Data":"​ 来初始化一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 实例，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_completion"},{"Type":"NodeText","Data":"​ 来完成一次聊天，或者 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_embedding"},{"Type":"NodeText","Data":"​ 来计算文本的嵌入。"}]}]},{"ID":"20240624090823-gslhgmp","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240624090823-gslhgmp","updated":"20240624090823"},"Children":[{"ID":"20240624090823-gcmukr1","Type":"NodeParagraph","Properties":{"id":"20240624090823-gcmukr1","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​ 中还包含一个额外的 makefile ("},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CMakeLists"},{"Type":"NodeText","Data":"​)，用于将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp/examples/server"},{"Type":"NodeText","Data":"​ 示例作为库来构建代码。然后，它可以被 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm"},{"Type":"NodeText","Data":"​ 下的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_ext_server"},{"Type":"NodeText","Data":"​ 代码加载，与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 实例一起提供服务。"}]}]},{"ID":"20240624090823-idtexgg","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240624090823-idtexgg","updated":"20240624090823"},"Children":[{"ID":"20240624090823-py6vjk8","Type":"NodeParagraph","Properties":{"id":"20240624090823-py6vjk8","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://pkg.go.dev/embed","TextMarkTextContent":"go embed package"},{"Type":"NodeText","Data":" 将库嵌入 go 程序，并在运行时提取。"}]}]},{"ID":"20240624090823-6iwfx1o","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240624090823-6iwfx1o","updated":"20240624090823"},"Children":[{"ID":"20240624090823-5phjduj","Type":"NodeParagraph","Properties":{"id":"20240624090823-5phjduj","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"此外，调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​ 中的函数时会携带 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm"},{"Type":"NodeText","Data":"​ 目录中定义的一些参数。一般来说，请求和响应都以 JSON 格式传递，并包含更多结构信息。它们定义在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ggml.go"},{"Type":"NodeText","Data":"​（描述模型）和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.go"},{"Type":"NodeText","Data":"​（描述不同的请求和响应）中。"}]}]},{"ID":"20240624090823-xtd3n40","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240624090823-xtd3n40","updated":"20240624090823"},"Children":[{"ID":"20240624090823-c9zf91j","Type":"NodeParagraph","Properties":{"id":"20240624090823-c9zf91j","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"为了动态管理 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 实例，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 为原始的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 提供了一些补丁。"}]}]}]},{"ID":"20240624090823-u9kzlhr","Type":"NodeParagraph","Properties":{"id":"20240624090823-u9kzlhr","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"让我们逐一研究它们。"}]},{"ID":"20240624090823-paro6yb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-paro6yb","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"1. 外部服务器"}]},{"ID":"20240624090823-6xi79i1","Type":"NodeParagraph","Properties":{"id":"20240624090823-6xi79i1","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"我们首先来看看 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​。我们已经知道，动态库是在生成过程中构建的。但如何使用它们呢？"}]},{"ID":"20240624090823-wxt642u","Type":"NodeParagraph","Properties":{"id":"20240624090823-wxt642u","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.go"},{"Type":"NodeText","Data":"​ 中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newDynExtServer"},{"Type":"NodeText","Data":"​ 负责加载动态库、初始化 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 实例并启动事件循环以接收任何请求并生成响应。"}]},{"ID":"20240624090823-d1le054","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240624090823-d1le054","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"动态链接库的加载和服务器的启动"}]},{"ID":"20240624090823-29ngnr9","Type":"NodeParagraph","Properties":{"id":"20240624090823-29ngnr9","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newDynExtServer"},{"Type":"NodeText","Data":"​ 中，go 函数会调用一个以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_init"},{"Type":"NodeText","Data":"​ 命名的 C 函数来加载动态库。描述和所需函数被加载到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"struct_dynamic_llama_server"},{"Type":"NodeText","Data":"​ 描述中，并封装在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynExtServer"},{"Type":"NodeText","Data":"​（一个 go 结构）中。"}]},{"ID":"20240624090823-co3kenb","Type":"NodeParagraph","Properties":{"id":"20240624090823-co3kenb","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"然后，它们会被用于另一个 C 函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_init"},{"Type":"NodeText","Data":"​，其中包含运行 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 服务器的参数，用于服务器实例初始化。"}]},{"ID":"20240624090823-wgqvhnd","Type":"NodeParagraph","Properties":{"id":"20240624090823-wgqvhnd","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果没有问题，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newDynExtServer"},{"Type":"NodeText","Data":"​ 将调用初始化过程中的最后一个 C 函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_start"},{"Type":"NodeText","Data":"​。服务器将开始运行，并能接收来自 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 的请求。"}]},{"ID":"20240624090823-ws3n7oo","Type":"NodeParagraph","Properties":{"id":"20240624090823-ws3n7oo","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"上述 C 函数位于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.c"},{"Type":"NodeText","Data":"​ 中，并在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.h"},{"Type":"NodeText","Data":"​ 中声明。让我们快速了解一下 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_init"},{"Type":"NodeText","Data":"​："}]},{"ID":"20240624090823-fftea3x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-fftea3x","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"void dyn_init(const char *libPath, struct dynamic_llama_server *s, ext_server_resp_t *err);\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-d6mmj16","Type":"NodeParagraph","Properties":{"id":"20240624090823-d6mmj16","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它接收库路径 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 作为参数，并通过 C 指针（对于不熟悉 C 的人来说就是内存地址，go 能够像 go 结构体一样处理它们，存储它们并传递给其他 C 函数）返回一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynamic_llama_server"},{"Type":"NodeText","Data":"​ 实例或一个错误。"}]},{"ID":"20240624090823-zxihz2o","Type":"NodeParagraph","Properties":{"id":"20240624090823-zxihz2o","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynamic_llama_server"},{"Type":"NodeText","Data":"​ 结构能够存储必要的 C 函数地址，以及加载的动态链接库的引用。其定义如下："}]},{"ID":"20240624090823-njmbat4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-njmbat4","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"struct dynamic_llama_server {\n  void *handle;\n  void (*llama_server_init)(ext_server_params_t *sparams,\n                            ext_server_resp_t *err);\n  void (*llama_server_start)();\n  void (*llama_server_stop)();\n  void (*llama_server_completion)(const char *json_req,\n                                  ext_server_resp_t *resp);\n  void (*llama_server_completion_next_result)(const int task_id,\n                                              ext_server_task_result_t *result);\n  void (*llama_server_completion_cancel)(const int task_id,\n                                         ext_server_resp_t *err);\n  void (*llama_server_release_task_result)(ext_server_task_result_t *result);\n  void (*llama_server_tokenize)(const char *json_req, char **json_resp,\n                                ext_server_resp_t *err);\n  void (*llama_server_detokenize)(const char *json_req, char **json_resp,\n                                  ext_server_resp_t *err);\n  void (*llama_server_embedding)(const char *json_req, char **json_resp,\n                                 ext_server_resp_t *err);\n  void (*llama_server_release_json_resp)(char **json_resp);\n};\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-y3fee2m","Type":"NodeParagraph","Properties":{"id":"20240624090823-y3fee2m","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_init"},{"Type":"NodeText","Data":"​ 的核心功能是加载由 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 指示的动态链接库，读取符号表，找到所需的 C 函数地址，并将其存储到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynamic_llama_server"},{"Type":"NodeText","Data":"​ 结构的实例中。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 可以是以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libext_server"},{"Type":"NodeText","Data":"​ 为前缀的已构建动态链接库的路径。这样，基于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的内置库就可以被 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 使用。"}]},{"ID":"20240624090823-eig9isv","Type":"NodeParagraph","Properties":{"id":"20240624090823-eig9isv","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"加载后，对 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_start"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_start"},{"Type":"NodeText","Data":"​ 的调用实际上是直接调用动态库中的 C 函数："}]},{"ID":"20240624090823-iiq5fhn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-iiq5fhn","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"inline void dyn_llama_server_init(struct dynamic_llama_server s,\n                                           ext_server_params_t *sparams,\n                                           ext_server_resp_t *err) {\n  s.llama_server_init(sparams, err);\n}\n\ninline void dyn_llama_server_start(struct dynamic_llama_server s) {\n  s.llama_server_start();\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-a8du8xz","Type":"NodeParagraph","Properties":{"id":"20240624090823-a8du8xz","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_start"},{"Type":"NodeText","Data":"​ 后，从动态库创建的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 服务器就可以进行预测了"}]},{"ID":"20240624090823-l59wa9e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240624090823-l59wa9e","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"预测"}]},{"ID":"20240624090823-bn5opym","Type":"NodeParagraph","Properties":{"id":"20240624090823-bn5opym","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"当 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 收到预测请求时，它会调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynExtServer"},{"Type":"NodeText","Data":"​ 实例上的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Predict"},{"Type":"NodeText","Data":"​。该函数能够格式化请求（稍后会看到），并调用 C 函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_completion"},{"Type":"NodeText","Data":"​ 开始预测："}]},{"ID":"20240624090823-x9qbxyn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-x9qbxyn","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"inline void dyn_llama_server_completion(struct dynamic_llama_server s,\n                                                 const char *json_req,\n                                                 ext_server_resp_t *resp) {\n  s.llama_server_completion(json_req, resp);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-b8dvp27","Type":"NodeParagraph","Properties":{"id":"20240624090823-b8dvp27","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"正如你所看到的，它也是直接调用从构建在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 上的动态库中加载的函数。"}]},{"ID":"20240624090823-264z2oy","Type":"NodeParagraph","Properties":{"id":"20240624090823-264z2oy","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"由于在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Predict"},{"Type":"NodeText","Data":"​ 函数中使用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"fn func(PredictResult)"},{"Type":"NodeText","Data":"​参数，这部分的一个非常好的设计就是流式响应。这是一个回调函数，可以在收到响应后立即连续发送："}]},{"ID":"20240624090823-j7eih5q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-j7eih5q","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"if p.Content != \"\" {\n  fn(PredictResult{\n    Content: p.Content,\n  })\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-ie4ohlq","Type":"NodeParagraph","Properties":{"id":"20240624090823-ie4ohlq","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它还依赖于对 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_completion_next_result"},{"Type":"NodeText","Data":"​ 的便捷调用（尽管它也是直接调用基于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的动态库中加载的 C 函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_completion_next_result"},{"Type":"NodeText","Data":"​）。"}]},{"ID":"20240624090823-2uniucl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240624090823-2uniucl","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"其他"}]},{"ID":"20240624090823-sa27jmd","Type":"NodeParagraph","Properties":{"id":"20240624090823-sa27jmd","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"其他调用也类似。您可以在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.go"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.c"},{"Type":"NodeText","Data":"​ 中找到它们，例如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_tokenize"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_detokenize"},{"Type":"NodeText","Data":"​ 用于 token 化或去 token 化，以及 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_embedding"},{"Type":"NodeText","Data":"​ 用于计算嵌入（embedding）。"}]},{"ID":"20240624090823-1dxro2n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-1dxro2n","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"2. "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 作为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 的服务器"}]},{"ID":"20240624090823-8ydzgwi","Type":"NodeParagraph","Properties":{"id":"20240624090823-8ydzgwi","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"接下来让我们看一下 C 部分："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 说如何使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 作为 LLM 服务器的。"}]},{"ID":"20240624090823-fnh258n","Type":"NodeParagraph","Properties":{"id":"20240624090823-fnh258n","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.go"},{"Type":"NodeText","Data":"​ 的开头，cgo 的注释中有一些构建注释："}]},{"ID":"20240624090823-z15umjl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-z15umjl","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"/*\n#cgo CFLAGS: -I${SRCDIR}/ext_server -I${SRCDIR}/llama.cpp -I${SRCDIR}/llama.cpp/common -I${SRCDIR}/llama.cpp/examples/server\n#cgo CFLAGS: -DNDEBUG -DLLAMA_SERVER_LIBRARY=1 -D_XOPEN_SOURCE=600 -DACCELERATE_NEW_LAPACK -DACCELERATE_LAPACK_ILP64\n#cgo CFLAGS: -Wmissing-noreturn -Wextra -Wcast-qual -Wno-unused-function -Wno-array-bounds\n#cgo CPPFLAGS: -Ofast -Wextra -Wno-unused-function -Wno-unused-variable -Wno-deprecated-declarations\n#cgo darwin CFLAGS: -D_DARWIN_C_SOURCE\n#cgo darwin CPPFLAGS:  -DGGML_USE_ACCELERATE\n#cgo darwin CPPFLAGS: -DGGML_USE_METAL -DGGML_METAL_NDEBUG\n#cgo darwin LDFLAGS: -lc++ -framework Accelerate\n#cgo darwin LDFLAGS: -framework Foundation -framework Metal -framework MetalKit -framework MetalPerformanceShaders\n#cgo linux CFLAGS: -D_GNU_SOURCE\n#cgo linux LDFLAGS: -lrt -ldl -lstdc++ -lm\n#cgo linux windows LDFLAGS: -lpthread\n\n#include \u003cstdlib.h\u003e\n#include \"dyn_ext_server.h\"\n\n*/\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-83y88mp","Type":"NodeParagraph","Properties":{"id":"20240624090823-83y88mp","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"它们可以为不同的平台设置不同的编译和链接标志（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"darwin"},{"Type":"NodeText","Data":"​ 用于 macOS，当然 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"linux"},{"Type":"NodeText","Data":"​ 用于 Linux，而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"windows"},{"Type":"NodeText","Data":"​ 用于 Windows）。这样，cgo 就能找到 C 头文件（现有类型和函数的声明），将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.c"},{"Type":"NodeText","Data":"​ 与 go 部分编译和链接。"}]},{"ID":"20240624090823-skkzcyd","Type":"NodeParagraph","Properties":{"id":"20240624090823-skkzcyd","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"然后，让我们从动态库中查看 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中使用的 C 函数。作为两个例子，我们从 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_init"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_start"},{"Type":"NodeText","Data":"​ 开始。"}]},{"ID":"20240624090823-n8q4pfa","Type":"NodeParagraph","Properties":{"id":"20240624090823-n8q4pfa","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它们的实现位于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/ext_server/ext_server.cpp"},{"Type":"NodeText","Data":"​，在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/ext_server/CMakeLists.txt"},{"Type":"NodeText","Data":"​中被设置为以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​ 命名的目标库。在构建目标时，该文件将与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 示例服务器一起编译。编译结果就是我们提到的动态链接库之一。"}]},{"ID":"20240624090823-ezaj0ro","Type":"NodeParagraph","Properties":{"id":"20240624090823-ezaj0ro","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因此，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server.cpp"},{"Type":"NodeText","Data":"​ 中的 C 函数可以从 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中调用，并能利用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 中的函数。它实际上是两个项目之间的桥梁，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"中的示例服务器成为"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"的 LLM 服务器（或称 llama 服务器）"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240624090823-wexea6n","Type":"NodeParagraph","Properties":{"id":"20240624090823-wexea6n","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在初始化过程中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_init"},{"Type":"NodeText","Data":"​ 会解析参数，为服务器创建上下文，并调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 提供的函数："}]},{"ID":"20240624090823-0uo6bal","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-0uo6bal","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"void llama_server_init(ext_server_params *sparams, ext_server_resp_t *err) {\n  /* ... */\n    llama = new llama_server_context;\n  /* ... */\n    llama_backend_init();\n    llama_numa_init(params.numa);\n  /* ... */\n  if (!llama-\u003eload_model(params)) { \n    // an error occurred that was not thrown\n    err-\u003eid = -1;\n    snprintf(err-\u003emsg, err-\u003emsg_len, \"error loading model %s\", params.model.c_str());\n    return;\n  }\n  /* ... */\n    llama-\u003einitialize();\n  /* ... */\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-kd13t89","Type":"NodeParagraph","Properties":{"id":"20240624090823-kd13t89","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"例如，它会调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_backend_init"},{"Type":"NodeText","Data":"​ 来初始化后端（可以是 AVX、CUDA 等），调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_numa_init"},{"Type":"NodeText","Data":"​ 来初始化 NUMA（如果存在）。然后，它会调用服务器上下文中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"load_model"},{"Type":"NodeText","Data":"​ 函数，使用给定参数加载模型，并使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"initialize"},{"Type":"NodeText","Data":"​ 函数完成初始化。"}]},{"ID":"20240624090823-81y5zl3","Type":"NodeParagraph","Properties":{"id":"20240624090823-81y5zl3","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"如果出现错误，错误信息将被格式化为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"err"},{"Type":"NodeText","Data":"​ 参数返回，并在 go 部分进行处理。"}]},{"ID":"20240624090823-n46opf6","Type":"NodeParagraph","Properties":{"id":"20240624090823-n46opf6","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"同时，在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_start"},{"Type":"NodeText","Data":"​ 中："}]},{"ID":"20240624090823-j759skc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-j759skc","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"void llama_server_start() {\n  assert(llama != NULL);\n  // TODO mutex to protect thread creation\n  ext_server_thread = std::thread([\u0026]() {\n    try {\n      LOG_TEE(\"llama server main loop starting\\n\");\n      ggml_time_init();\n      llama-\u003equeue_tasks.on_new_task(std::bind(\n        \u0026llama_server_context::process_single_task, llama, std::placeholders::_1));\n      llama-\u003equeue_tasks.on_finish_multitask(std::bind(\n          \u0026llama_server_context::on_finish_multitask, llama, std::placeholders::_1));\n      llama-\u003equeue_tasks.on_all_tasks_finished(std::bind(\n          \u0026llama_server_context::run_on_all_tasks_finished, llama));\n      llama-\u003equeue_results.on_multitask_update(std::bind(\n          \u0026llama_server_queue::update_multitask,\n          \u0026llama-\u003equeue_tasks,\n          std::placeholders::_1,\n          std::placeholders::_2,\n          std::placeholders::_3\n        ));\n      llama-\u003equeue_tasks.start_loop();\n    } catch (std::exception \u0026e) {\n      LOG_TEE(\"caught exception in llama server main loop: %s\\n\", e.what());\n    } catch (...) {\n      LOG_TEE(\"caught unknown exception in llama server main loop\\n\");\n    }\n    LOG_TEE(\"\\nllama server shutting down\\n\");\n    llama_backend_free();\n  });\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-r9bglyp","Type":"NodeParagraph","Properties":{"id":"20240624090823-r9bglyp","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它为任务处理设置一些回调，并在一个新线程中启动一个事件循环。事件循环负责预测。这样，对 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_start"},{"Type":"NodeText","Data":"​ 的调用就会立即返回。"}]},{"ID":"20240624090823-4hnxju6","Type":"NodeParagraph","Properties":{"id":"20240624090823-4hnxju6","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"此类 C 函数的更详细实现可以在同一文件中找到，即 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/ext_server/ext_server.cpp"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240624090823-ur4z2o5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-ur4z2o5","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"3. 将库作为载荷嵌入"}]},{"ID":"20240624090823-ygdpol6","Type":"NodeParagraph","Properties":{"id":"20240624090823-ygdpol6","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"然后，让我们来探究一下载荷是如何完成的。"}]},{"ID":"20240624090823-1lpe9o0","Type":"NodeParagraph","Properties":{"id":"20240624090823-1lpe9o0","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"payload_*"},{"Type":"NodeText","Data":"​ 为前缀的 go 文件中，我们可以看到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 的选择。例如，在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/payload_linux.go"},{"Type":"NodeText","Data":"​中，有两行嵌入了每个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server"},{"Type":"NodeText","Data":"​库的不同变体："}]},{"ID":"20240624090823-e9p9sfz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-e9p9sfz","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"//go:embed llama.cpp/build/linux/*/*/lib/*\nvar libEmbed embed.FS\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-mntqo9x","Type":"NodeParagraph","Properties":{"id":"20240624090823-mntqo9x","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp/build/linux/*/*/lib/"},{"Type":"NodeText","Data":"​ 下的所有内置库都使用"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://pkg.go.dev/embed#hdr-File_Systems","TextMarkTextContent":"类文件系统接口"},{"Type":"NodeText","Data":"作为载荷嵌入。这样，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 就可以像在文件系统中读写一样访问它们。"}]},{"ID":"20240624090823-qckdprq","Type":"NodeParagraph","Properties":{"id":"20240624090823-qckdprq","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在初始化 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 的过程中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/payload_common.go"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Init"},{"Type":"NodeText","Data":"​ 将调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nativeInit"},{"Type":"NodeText","Data":"​："}]},{"ID":"20240624090823-iwmtwk4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-iwmtwk4","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func Init() error {\n\treturn nativeInit()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-agk2z8y","Type":"NodeParagraph","Properties":{"id":"20240624090823-agk2z8y","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"它的主要工作是将动态库从文件系统提取到临时位置，并检查驱动程序的访问权限（如适用）："}]},{"ID":"20240624090823-pza9jlk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-pza9jlk","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"libs, err := extractDynamicLibs(payloadsDir, \"llama.cpp/build/*/*/*/lib/*\")\n/* ... */\nerr := verifyDriverAccess()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-pjhiafh","Type":"NodeParagraph","Properties":{"id":"20240624090823-pjhiafh","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"提取完成后，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 可以格式化库路径（"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.inoki.cc/2024/04/16/Ollama-cn/#1-%E5%A4%96%E9%83%A8%E6%9C%8D%E5%8A%A1%E5%99%A8","TextMarkTextContent":"外部服务器"},{"Type":"NodeText","Data":"小节中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_init"},{"Type":"NodeText","Data":"​ 函数中使用的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​）。选择运行环境和匹配库的方法将在"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.inoki.cc/2024/04/16/Ollama-cn/#%E5%86%B3%E5%AE%9A%E8%BF%90%E8%A1%8C%E4%BD%8D%E7%BD%AE","TextMarkTextContent":"决定运行位置"},{"Type":"NodeText","Data":" 小节中介绍。"}]},{"ID":"20240624090823-autu9rn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-autu9rn","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"4. 格式化请求和响应"}]},{"ID":"20240624090823-jrcv93o","Type":"NodeParagraph","Properties":{"id":"20240624090823-jrcv93o","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们再来看看 C 语言函数中使用的函数参数。"}]},{"ID":"20240624090823-q0ryp7q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-q0ryp7q","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"inline void dyn_llama_server_init(struct dynamic_llama_server s,\n                                           ext_server_params_t *sparams,\n                                           ext_server_resp_t *err) {\n  s.llama_server_init(sparams, err);\n}\n\ninline void dyn_llama_server_completion(struct dynamic_llama_server s,\n                                                 const char *json_req,\n                                                 ext_server_resp_t *resp) {\n  s.llama_server_completion(json_req, resp);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-itlsa9b","Type":"NodeParagraph","Properties":{"id":"20240624090823-itlsa9b","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在它们的函数签名中，我们可以看到它们使用的函数参数： 在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_init"},{"Type":"NodeText","Data":"​ 中使用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server_params_t"},{"Type":"NodeText","Data":"​ 参数，在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_completion"},{"Type":"NodeText","Data":"​ 中使用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"json_req"},{"Type":"NodeText","Data":"​ 字节数组。"}]},{"ID":"20240624090823-56e8b2b","Type":"NodeParagraph","Properties":{"id":"20240624090823-56e8b2b","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ext_server_params_t"},{"Type":"NodeText","Data":"​ 参数是一个 C 结构，包含启动 llama 服务器的配置，稍后将在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/ext_server/server.cpp"},{"Type":"NodeText","Data":"​ 中解释（由于篇幅有限，我们不展开这部分内容）。"}]},{"ID":"20240624090823-l2p9qep","Type":"NodeParagraph","Properties":{"id":"20240624090823-l2p9qep","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"同时，完成调用的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"json_req"},{"Type":"NodeText","Data":"​ 在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/ext_server/ext_server.cpp"},{"Type":"NodeText","Data":"​ 中使用如下："}]},{"ID":"20240624090823-23rwabs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-23rwabs","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"void llama_server_completion(const char *json_req, ext_server_resp_t *resp) {\n  assert(llama != NULL \u0026\u0026 json_req != NULL \u0026\u0026 resp != NULL);\n  resp-\u003eid = -1;\n  resp-\u003emsg[0] = '\\0';\n  try {\n    if (shutting_down) {\n      throw std::runtime_error(\"server shutting down\");\n    }\n    json data = json::parse(json_req);\n    resp-\u003eid = llama-\u003equeue_tasks.get_new_id();\n    llama-\u003equeue_results.add_waiting_task_id(resp-\u003eid);\n    llama-\u003erequest_completion(resp-\u003eid, data, false, false, -1);\n  } catch (std::exception \u0026e) {\n    snprintf(resp-\u003emsg, resp-\u003emsg_len, \"exception %s\", e.what());\n  } catch (...) {\n    snprintf(resp-\u003emsg, resp-\u003emsg_len, \"Unknown exception during completion\");\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-pjoezyp","Type":"NodeParagraph","Properties":{"id":"20240624090823-pjoezyp","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"事实上，它包含 json 格式的完成请求，包括提示词、温度等。我们可以看到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama_server_completion"},{"Type":"NodeText","Data":"​ 为其创建了一个任务，并通过正常路径中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"resp"},{"Type":"NodeText","Data":"​ 返回任务 ID。否则，它将格式化错误信息并返回。"}]},{"ID":"20240624090823-5jp68z5","Type":"NodeParagraph","Properties":{"id":"20240624090823-5jp68z5","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"如果您对其详细格式感兴趣，请查看 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.go"},{"Type":"NodeText","Data":"​ 文件。"}]},{"ID":"20240624090823-dtjeyih","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-dtjeyih","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"5. 补丁"}]},{"ID":"20240624090823-rw0gk37","Type":"NodeParagraph","Properties":{"id":"20240624090823-rw0gk37","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"为了适应在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中使用多个 llama 服务器，它还对原始版本的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 做了一些额外的修改。"}]},{"ID":"20240624090823-wdx1jcf","Type":"NodeParagraph","Properties":{"id":"20240624090823-wdx1jcf","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"例如，以下补丁导出了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ggml_free_cublas"},{"Type":"NodeText","Data":"​ 并调用它来释放一个 llama 服务器实例："}]},{"ID":"20240624090823-ooeyjb3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-ooeyjb3","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"diff --git a/examples/server/server.cpp b/examples/server/server.cpp\nindex 7800c6e7..be30db23 100644\n--- a/examples/server/server.cpp\n+++ b/examples/server/server.cpp\n@@ -30,6 +30,10 @@\n #include \u003catomic\u003e\n #include \u003csignal.h\u003e\n\n+#ifdef GGML_USE_CUBLAS\n+extern \"C\" GGML_CALL void ggml_free_cublas(void);\n+#endif\n+\n using json = nlohmann::json;\n\n struct server_params\n@@ -353,6 +357,9 @@ struct llama_server_context\n             llama_free_model(model);\n             model = nullptr;\n         }\n+#ifdef GGML_USE_CUBLAS\n+        ggml_free_cublas();\n+#endif\n     }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-s83nphs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-s83nphs","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"做个小总结"}]},{"ID":"20240624090823-6i25090","Type":"NodeParagraph","Properties":{"id":"20240624090823-6i25090","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"通过对 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的所有额外模块和修改，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 能够根据需要启动 llama 服务器，通过不同编译动态库中对不同硬件的支持动态选择硬件（参见 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.inoki.cc/2024/04/16/Ollama-cn/#%E6%9E%84%E5%BB%BA%E7%B3%BB%E7%BB%9F","TextMarkTextContent":"构建系统"},{"Type":"NodeText","Data":"）。运行 llama 服务器后，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 提供的额外模块允许发送完成请求，并在稍后检索回复。"}]},{"ID":"20240624090823-8ykukcv","Type":"NodeParagraph","Properties":{"id":"20240624090823-8ykukcv","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"现在，我们应该清楚地了解了后面的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 架构（我们也可以称其为后端）。关于后端的更多细节，读者可以查看源代码，因为它们上会经常更改。毕竟，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 正在积极开发中。"}]},{"ID":"20240624090823-jvlpepl","Type":"NodeParagraph","Properties":{"id":"20240624090823-jvlpepl","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"但是，此时还有一些谜团："}]},{"ID":"20240624090823-dr6ffg3","Type":"NodeList","ListData":{},"Properties":{"id":"20240624090823-dr6ffg3","updated":"20240624090824"},"Children":[{"ID":"20240624090823-tikregt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-tikregt","updated":"20240624090823"},"Children":[{"ID":"20240624090823-un1b5s5","Type":"NodeParagraph","Properties":{"id":"20240624090823-un1b5s5","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在后端方面："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 如何知道选择哪种硬件和动态库？"}]}]},{"ID":"20240624090823-6o70t19","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-6o70t19","updated":"20240624090823"},"Children":[{"ID":"20240624090823-2zjipcs","Type":"NodeParagraph","Properties":{"id":"20240624090823-2zjipcs","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在前端方面：它提供哪种前端？"}]}]}]},{"ID":"20240624090823-s9744pf","Type":"NodeParagraph","Properties":{"id":"20240624090823-s9744pf","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"下面的章节可能就是这些问题的答案。"}]},{"ID":"20240624090823-xbimo8x","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240624090823-xbimo8x","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"决定运行位置"}]},{"ID":"20240624090823-o61vgt7","Type":"NodeParagraph","Properties":{"id":"20240624090823-o61vgt7","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"让我们回到动态库和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_init"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 参数，在 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.inoki.cc/2024/04/16/Ollama-cn/#%E5%8A%A8%E6%80%81%E9%93%BE%E6%8E%A5%E5%BA%93%E7%9A%84%E5%8A%A0%E8%BD%BD%E5%92%8C%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%9A%84%E5%90%AF%E5%8A%A8","TextMarkTextContent":"动态链接库的加载和服务器的启动"},{"Type":"NodeText","Data":" 中提到过。我们在 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.inoki.cc/2024/04/16/Ollama-cn/#3-%E5%B0%86%E5%BA%93%E4%BD%9C%E4%B8%BA%E8%BD%BD%E8%8D%B7%E5%B5%8C%E5%85%A5","TextMarkTextContent":"Embed libraries as payloads"},{"Type":"NodeText","Data":"中已经知道，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 会将嵌入的动态库提取到一个临时目录，并通过格式化和传递 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_init"},{"Type":"NodeText","Data":"​ 来加载它们。"}]},{"ID":"20240624090823-i126qib","Type":"NodeParagraph","Properties":{"id":"20240624090823-i126qib","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"问题是： "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 如何通过传递不同的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 参数来选择库？"}]},{"ID":"20240624090823-ce7exmx","Type":"NodeParagraph","Properties":{"id":"20240624090823-ce7exmx","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/dyn_ext_server.go"},{"Type":"NodeText","Data":"​中实现的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newDynExtServer"},{"Type":"NodeText","Data":"​函数中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​作为第一个参数"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"library"},{"Type":"NodeText","Data":"​被传递。在 Windows 环境下，它通过调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu.UpdatePath(filepath.Dir(library))"},{"Type":"NodeText","Data":"​ 进行更新，以便在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PATH"},{"Type":"NodeText","Data":"​ 中添加父目录。这样就可以无缝加载动态链接库。不过，在 Linux 或 macOS 上不必这样做。"}]},{"ID":"20240624090823-x5gesdl","Type":"NodeParagraph","Properties":{"id":"20240624090823-x5gesdl","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"因此，我们可以知道这里的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 已经是动态链接库文件的完整路径。然后，让我们检查生成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libPath"},{"Type":"NodeText","Data":"​ 的位置。"}]},{"ID":"20240624090823-bcahmvp","Type":"NodeParagraph","Properties":{"id":"20240624090823-bcahmvp","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"通过简单搜索，我们可以在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/llm.go"},{"Type":"NodeText","Data":"​ 下的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newLlmServer"},{"Type":"NodeText","Data":"​ 函数中找到答案："}]},{"ID":"20240624090823-vseqk0w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-vseqk0w","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"err2 := fmt.Errorf(\"unable to locate suitable llm library\")\nfor _, dynLib := range dynLibs {\n\tsrv, err := newDynExtServer(dynLib, model, adapters, projectors, opts)\n\tif err == nil {\n\t\treturn srv, nil\n\t}\n\tslog.Warn(fmt.Sprintf(\"Failed to load dynamic library %s  %s\", dynLib, err))\n\terr2 = err\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-6f1q2ny","Type":"NodeParagraph","Properties":{"id":"20240624090823-6f1q2ny","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它会遍历 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynLibs"},{"Type":"NodeText","Data":"​ 以调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newDynExtServer"},{"Type":"NodeText","Data":"​ 函数。一旦加载成功，它就会返回 llama 服务器实例。"}]},{"ID":"20240624090823-pqpthf4","Type":"NodeParagraph","Properties":{"id":"20240624090823-pqpthf4","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newLlmServer"},{"Type":"NodeText","Data":"​ 开始的地方，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynLibs"},{"Type":"NodeText","Data":"​ 一般在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getDynLibs"},{"Type":"NodeText","Data":"​ 函数中检索，这是一个要尝试的动态链接库的有序列表："}]},{"ID":"20240624090823-kd4w7so","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-kd4w7so","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func newLlmServer(gpuInfo gpu.GpuInfo, model string, adapters, projectors []string, opts api.Options) (LLM, error) {\n\tdynLibs := getDynLibs(gpuInfo)\n\t/* ... */\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-u5fv14o","Type":"NodeParagraph","Properties":{"id":"20240624090823-u5fv14o","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"顺序是一种偏好，它从 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpuInfo gpu.GpuInfo"},{"Type":"NodeText","Data":"​ 中获取 GPU 信息。它并不强制是 “GPU 信息”，它也可以指示使用某个 CPU 变体。我想 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 团队可能很快就会修改它。"}]},{"ID":"20240624090823-bvekqru","Type":"NodeParagraph","Properties":{"id":"20240624090823-bvekqru","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"一般来说，返回的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynLibs"},{"Type":"NodeText","Data":"​ 来自 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/payload_common.go"},{"Type":"NodeText","Data":"​ 中的键值映射 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"availableDynLibs"},{"Type":"NodeText","Data":"​。它是在提取所有动态库之后在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nativeInit"},{"Type":"NodeText","Data":"​ 中生成的："}]},{"ID":"20240624090823-txdaesd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-txdaesd","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func nativeInit() error {\n\t/* ... */\n\t/* Extract dynamic libraries in temporary directory */\n\t/* ... */\n\tfor _, lib := range libs {\n\t\t// The last dir component is the variant name\n\t\tvariant := filepath.Base(filepath.Dir(lib))\n\t\tavailableDynLibs[variant] = lib\n\t}\n\t/* ... */\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-gh05ec5","Type":"NodeParagraph","Properties":{"id":"20240624090823-gh05ec5","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它的关键字是全路径中除库文件名之外的最后一个组成部分。例如，在我的电脑上是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cpu"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cpu_avx"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cpu_avx2"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cuda_v11.3"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"rocm_v5.7"},{"Type":"NodeText","Data":"​。而对应值当然是完整路径。"}]},{"ID":"20240624090823-t2ygdgl","Type":"NodeParagraph","Properties":{"id":"20240624090823-t2ygdgl","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"我们可以先看看 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getDynLibs"},{"Type":"NodeText","Data":"​ 函数（在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/payload_common.go"},{"Type":"NodeText","Data":"​ 中实现）的一般处理过程，忽略一些特定平台的情况。"}]},{"ID":"20240624090823-7ah6hkl","Type":"NodeParagraph","Properties":{"id":"20240624090823-7ah6hkl","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"第一步是从 “GPU 信息” 中找到与请求完全匹配的内容："}]},{"ID":"20240624090823-xdayqon","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-xdayqon","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"exactMatch := \"\"\ndynLibs := []string{}\naltDynLibs := []string{}\nrequested := gpuInfo.Library\nif gpuInfo.Variant != \"\" {\n\trequested += \"_\" + gpuInfo.Variant\n}\n// Try to find an exact match\nfor cmp := range availableDynLibs {\n\tif requested == cmp {\n\t\texactMatch = cmp\n\t\tdynLibs = []string{availableDynLibs[cmp]}\n\t\tbreak\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-9gcquio","Type":"NodeParagraph","Properties":{"id":"20240624090823-9gcquio","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它会根据 “GPU 信息” 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Library"},{"Type":"NodeText","Data":"​ 字段生成一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"requested"},{"Type":"NodeText","Data":"​ 字符串变量，并附加一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"变体（Variant）"},{"Type":"NodeText","Data":"​。如果有一个与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"requested"},{"Type":"NodeText","Data":"​ 字符串完全匹配的库，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynLibs"},{"Type":"NodeText","Data":"​ 中的第一个库路径将是所请求库的路径。第一个库路径也将是加载过程中首先尝试的路径。"}]},{"ID":"20240624090823-lzj53zm","Type":"NodeParagraph","Properties":{"id":"20240624090823-lzj53zm","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"然后，它会尝试不完全匹配的 GPU 库（可能存在版本不匹配等情况）："}]},{"ID":"20240624090823-dyqc85j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-dyqc85j","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Then for GPUs load alternates and sort the list for consistent load ordering\nif gpuInfo.Library != \"cpu\" {\n\tfor cmp := range availableDynLibs {\n\t\tif gpuInfo.Library == strings.Split(cmp, \"_\")[0] \u0026\u0026 cmp != exactMatch {\n\t\t\taltDynLibs = append(altDynLibs, cmp)\n\t\t}\n\t}\n\tslices.Sort(altDynLibs)\n\tfor _, altDynLib := range altDynLibs {\n\t\tdynLibs = append(dynLibs, availableDynLibs[altDynLib])\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-0qcr7td","Type":"NodeParagraph","Properties":{"id":"20240624090823-0qcr7td","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"接下来，它会调用另一个实用程序 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GetCPUVariant"},{"Type":"NodeText","Data":"​，尝试优先选择最快（可能）的 CPU 变体："}]},{"ID":"20240624090823-zv8ldv9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-zv8ldv9","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Load up the best CPU variant if not primary requested\nif gpuInfo.Library != \"cpu\" {\n\tvariant := gpu.GetCPUVariant()\n\t// If no variant, then we fall back to default\n\t// If we have a variant, try that if we find an exact match\n\t// Attempting to run the wrong CPU instructions will panic the\n\t// process\n\tif variant != \"\" {\n\t\tfor cmp := range availableDynLibs {\n\t\t\tif cmp == \"cpu_\"+variant {\n\t\t\t\tdynLibs = append(dynLibs, availableDynLibs[cmp])\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t} else {\n\t\tdynLibs = append(dynLibs, availableDynLibs[\"cpu\"])\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-yzsmq7g","Type":"NodeParagraph","Properties":{"id":"20240624090823-yzsmq7g","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"该实用程序在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu/cpu_common.go"},{"Type":"NodeText","Data":"​ 中定义。它能检测 x86 平台上的 CPU 扩展："}]},{"ID":"20240624090823-5n63uxl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-5n63uxl","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func GetCPUVariant() string {\n\tif cpu.X86.HasAVX2 {\n\t\tslog.Info(\"CPU has AVX2\")\n\t\treturn \"avx2\"\n\t}\n\tif cpu.X86.HasAVX {\n\t\tslog.Info(\"CPU has AVX\")\n\t\treturn \"avx\"\n\t}\n\tslog.Info(\"CPU does not have vector extensions\")\n\t// else LCD\n\treturn \"\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-eghon0g","Type":"NodeParagraph","Properties":{"id":"20240624090823-eghon0g","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"该顺序将把 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"avx2"},{"Type":"NodeText","Data":"​ 作为最高优先级，然后是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"avx"},{"Type":"NodeText","Data":"​，最后是纯 CPU 变体。最后，如果上述方法都不奏效，它将回退到 CPU 变体："}]},{"ID":"20240624090823-d6umesz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-d6umesz","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func getDynLibs(gpuInfo gpu.GpuInfo) []string {\n\t/* Apple specific loading */\n\t/* ... */\n\n\t// Finally, if we didn't find any matches, LCD CPU FTW\n\tif len(dynLibs) == 0 {\n\t\tdynLibs = []string{availableDynLibs[\"cpu\"]}\n\t}\n\tslog.Debug(fmt.Sprintf(\"ordered list of LLM libraries to try %v\", dynLibs))\n\treturn dynLibs\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-h0662nz","Type":"NodeParagraph","Properties":{"id":"20240624090823-h0662nz","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"然后，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynLibs"},{"Type":"NodeText","Data":"​ 将被返回以进行加载尝试。"}]},{"ID":"20240624090823-jeombmp","Type":"NodeParagraph","Properties":{"id":"20240624090823-jeombmp","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"现在我们可以探讨一下如何生成 “GPU 信息” "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpuInfo"},{"Type":"NodeText","Data":"​，从而使偏好成为可能。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm/llm.go"},{"Type":"NodeText","Data":"​中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"New"},{"Type":"NodeText","Data":"​ 函数以 “GPU 信息” 为第一个参数调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"newLlmServer"},{"Type":"NodeText","Data":"​。它完成了许多重要工作："}]},{"ID":"20240624090823-yvpymrw","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240624090823-yvpymrw","updated":"20240624090824"},"Children":[{"ID":"20240624090823-7fg6jrt","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240624090823-7fg6jrt","updated":"20240624090823"},"Children":[{"ID":"20240624090823-so29ccu","Type":"NodeParagraph","Properties":{"id":"20240624090823-so29ccu","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"打开、加载并检测 LLM 的参数。"}]}]},{"ID":"20240624090823-xbodcz0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240624090823-xbodcz0","updated":"20240624090823"},"Children":[{"ID":"20240624090823-rptlpme","Type":"NodeParagraph","Properties":{"id":"20240624090823-rptlpme","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"加载 “GPU 信息”："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"info := gpu.GetGPUInfo()"},{"Type":"NodeText","Data":"​。"}]}]},{"ID":"20240624090823-dxonpxo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240624090823-dxonpxo","updated":"20240624090823"},"Children":[{"ID":"20240624090823-saj29zl","Type":"NodeParagraph","Properties":{"id":"20240624090823-saj29zl","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"检查 VRAM 和模型与硬件的兼容性。"}]}]}]},{"ID":"20240624090823-hwhtccz","Type":"NodeParagraph","Properties":{"id":"20240624090823-hwhtccz","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始检测在 2 中进行。不过，也有可能模型被标记为与模型不兼容。在这种情况下，它将回退到具有最快变体的 CPU："}]},{"ID":"20240624090823-4g8zydu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-4g8zydu","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"info.Library = \"cpu\"\ninfo.Variant = gpu.GetCPUVariant()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-mghhshh","Type":"NodeParagraph","Properties":{"id":"20240624090823-mghhshh","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"让我们重点关注 2，看看在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GetGPUInfo"},{"Type":"NodeText","Data":"​ 函数中发生了什么。"}]},{"ID":"20240624090823-7gzt4q1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-7gzt4q1","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"Apple Metal"}]},{"ID":"20240624090823-zb972hp","Type":"NodeParagraph","Properties":{"id":"20240624090823-zb972hp","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"让我们从最特殊的平台开始。苹果 macOS 平台，包括 XNU 内核和用户空间，通常被称为 “Darwin”。"}]},{"ID":"20240624090823-xequl4d","Type":"NodeParagraph","Properties":{"id":"20240624090823-xequl4d","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在前面提到的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"getDynLibs"},{"Type":"NodeText","Data":"​ 中，Darwin 平台上的检测非常简单："}]},{"ID":"20240624090823-6y86wov","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-6y86wov","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Short circuit if we know we're using the default built-in (darwin only)\nif gpuInfo.Library == \"default\" {\n\treturn []string{\"default\"}\n}\n// TODO - temporary until we have multiple CPU variations for Darwin\n// Short circuit on darwin with metal only\nif len(availableDynLibs) == 1 {\n\tif _, onlyMetal := availableDynLibs[\"metal\"]; onlyMetal {\n\t\treturn []string{availableDynLibs[\"metal\"]}\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-q8rzrf1","Type":"NodeParagraph","Properties":{"id":"20240624090823-q8rzrf1","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"It uses "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"default"},{"Type":"NodeText","Data":"​ library according to the “GPU information”, or just use "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"metal"},{"Type":"NodeText","Data":"​. The "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu.GetGPUInfo()"},{"Type":"NodeText","Data":"​ is in "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu/gpu_darwin.go"},{"Type":"NodeText","Data":"​, as simple as possible:"}]},{"ID":"20240624090823-b4vnu7v","Type":"NodeParagraph","Properties":{"id":"20240624090823-b4vnu7v","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它会根据 “GPU 信息” 使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"default"},{"Type":"NodeText","Data":"​ 库，或者直接使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"metal"},{"Type":"NodeText","Data":"​。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu.GetGPUInfo()"},{"Type":"NodeText","Data":"​ 在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu/gpu_darwin.go"},{"Type":"NodeText","Data":"​ 中，非常简单："}]},{"ID":"20240624090823-m7o8y44","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-m7o8y44","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func GetGPUInfo() GpuInfo {\n\tmem, _ := getCPUMem()\n\tif runtime.GOARCH == \"amd64\" {\n\t\treturn GpuInfo{\n\t\t\tLibrary: \"cpu\",\n\t\t\tVariant: GetCPUVariant(),\n\t\t\tmemInfo: mem,\n\t\t}\n\t}\n\treturn GpuInfo{\n\t\tLibrary: \"metal\",\n\t\tmemInfo: mem,\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-znjtrc5","Type":"NodeParagraph","Properties":{"id":"20240624090823-znjtrc5","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"我们可以看到，它获取内存信息，并检测 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 是否运行在英特尔 x86_64/amd64 平台上。如果是，它就会使用扩展速度最快的 CPU。否则，只有 ARM Mac 才能利用 Metal API 加速。"}]},{"ID":"20240624090823-sq9okse","Type":"NodeParagraph","Properties":{"id":"20240624090823-sq9okse","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"据我所知，英特尔 Mac 上的 AMD 显卡应该也支持 Metal。但 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 不会在英特尔 Mac 上使用它。可能只是因为驱动程序或显卡本身过时了。"}]},{"ID":"20240624090823-0roa1dz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-0roa1dz","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"Nvidia CUDA 和 AMD ROCm"}]},{"ID":"20240624090823-mixv4tv","Type":"NodeParagraph","Properties":{"id":"20240624090823-mixv4tv","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"然后，我们看一下 Nvidia 和 AMD GPU 的通用检测，因为它们在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中是耦合在一起的。"}]},{"ID":"20240624090823-npwbiro","Type":"NodeParagraph","Properties":{"id":"20240624090823-npwbiro","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"实现方法在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu/gpu.go"},{"Type":"NodeText","Data":"​中："}]},{"ID":"20240624090823-6ggrvh9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-6ggrvh9","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func GetGPUInfo() GpuInfo {\n\t// TODO - consider exploring lspci (and equivalent on windows) to check for\n\t// GPUs so we can report warnings if we see Nvidia/AMD but fail to load the libraries\n\tgpuMutex.Lock()\n\tdefer gpuMutex.Unlock()\n\tif gpuHandles == nil {\n\t\tinitGPUHandles()\n\t}\n\n\t// All our GPU builds on x86 have AVX enabled, so fallback to CPU if we don't detect at least AVX\n\tcpuVariant := GetCPUVariant()\n\tif cpuVariant == \"\" \u0026\u0026 runtime.GOARCH == \"amd64\" {\n\t\tslog.Warn(\"CPU does not have AVX or AVX2, disabling GPU support.\")\n\t}\n\n\tvar memInfo C.mem_info_t\n\tresp := GpuInfo{}\n\t/* Getting the actual GPU information */\n\t/* ... */\n\t/* Fallback to CPU if no GPU detected */\n\t/* ... */\n\n\tresp.DeviceCount = uint32(memInfo.count)\n\tresp.FreeMemory = uint64(memInfo.free)\n\tresp.TotalMemory = uint64(memInfo.total)\n\treturn resp\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-7h58kip","Type":"NodeParagraph","Properties":{"id":"20240624090823-7h58kip","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"第一个程序块调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"initGPUHandles"},{"Type":"NodeText","Data":"​ 来定义要搜索的 GPU 库，以便使用它们获取 GPU 信息。对于 Nvidia，它会检测 Windows 上独立显卡的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nvml.dll"},{"Type":"NodeText","Data":"​，Linux 上的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libnvidia-ml.so"},{"Type":"NodeText","Data":"​，以及某些特殊设备上的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"libcudart.so*"},{"Type":"NodeText","Data":"​，例如 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.nvidia.com/fr-fr/autonomous-machines/embedded-systems/","TextMarkTextContent":"Jetson 系列"},{"Type":"NodeText","Data":"（感谢 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ollama/ollama/pull/2279","TextMarkTextContent":"最近的 PR"},{"Type":"NodeText","Data":"）。"}]},{"ID":"20240624090823-pihccus","Type":"NodeParagraph","Properties":{"id":"20240624090823-pihccus","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"第二个程序块检测 CPU 变体，它要求 CPU 至少有 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AVX"},{"Type":"NodeText","Data":"​ 变体才能支持 GPU。"}]},{"ID":"20240624090823-i4xjpq2","Type":"NodeParagraph","Properties":{"id":"20240624090823-i4xjpq2","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"然后，它会检查句柄，并使用相关库查找相应的 GPU。"}]},{"ID":"20240624090823-y8i285n","Type":"NodeParagraph","Properties":{"id":"20240624090823-y8i285n","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"对于 Nvidia 独立 GPU："}]},{"ID":"20240624090823-cvvqb12","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-cvvqb12","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"if gpuHandles.nvml != nil \u0026\u0026 (cpuVariant != \"\" || runtime.GOARCH != \"amd64\") {\n\tC.nvml_check_vram(*gpuHandles.nvml, \u0026memInfo)\n\tif memInfo.err != nil {\n\t\tslog.Info(fmt.Sprintf(\"[nvidia-ml] error looking up NVML GPU memory: %s\", C.GoString(memInfo.err)))\n\t\tC.free(unsafe.Pointer(memInfo.err))\n\t} else if memInfo.count \u003e 0 {\n\t\t// Verify minimum compute capability\n\t\tvar cc C.nvml_compute_capability_t\n\t\tC.nvml_compute_capability(*gpuHandles.nvml, \u0026cc)\n\t\tif cc.err != nil {\n\t\t\tslog.Info(fmt.Sprintf(\"[nvidia-ml] error looking up NVML GPU compute capability: %s\", C.GoString(cc.err)))\n\t\t\tC.free(unsafe.Pointer(cc.err))\n\t\t} else if cc.major \u003e CudaComputeMin[0] || (cc.major == CudaComputeMin[0] \u0026\u0026 cc.minor \u003e= CudaComputeMin[1]) {\n\t\t\tslog.Info(fmt.Sprintf(\"[nvidia-ml] NVML CUDA Compute Capability detected: %d.%d\", cc.major, cc.minor))\n\t\t\tresp.Library = \"cuda\"\n\t\t} else {\n\t\t\tslog.Info(fmt.Sprintf(\"[nvidia-ml] CUDA GPU is too old. Falling back to CPU mode. Compute Capability detected: %d.%d\", cc.major, cc.minor))\n\t\t}\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-ohhqwel","Type":"NodeParagraph","Properties":{"id":"20240624090823-ohhqwel","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它调用在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gpu/gpu_info_nvml.c"},{"Type":"NodeText","Data":"​ 中实现的 C 函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nvml_check_vram"},{"Type":"NodeText","Data":"​，以获取 VRAM。如果发现一个可用设备，它还会通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nvml_compute_capability"},{"Type":"NodeText","Data":"​ 检查计算能力，以确保该设备可用。"}]},{"ID":"20240624090823-8h8bce9","Type":"NodeParagraph","Properties":{"id":"20240624090823-8h8bce9","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"这样的设计使我无法在 Windows 下使用 ZLUDA 通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 在 AMD 显卡上运行 LLM。因为当时 ZLUDA 将此功能标记为未实现。然而，我的 AMD 显卡已经支持该功能。现在我不再需要 ZLUDA 了。"}]},{"ID":"20240624090823-r1zi385","Type":"NodeParagraph","Properties":{"id":"20240624090823-r1zi385","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"在本篇文章中，我选择跳过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Cudart"},{"Type":"NodeText","Data":"​ 支持，因为它并不常见。现在让我们来看看最近令人兴奋的 AMD 支持！"}]},{"ID":"20240624090823-354566a","Type":"NodeParagraph","Properties":{"id":"20240624090823-354566a","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"针对 AMD 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GetGPUInfo"},{"Type":"NodeText","Data":"​ 代码非常简短："}]},{"ID":"20240624090823-4ueh0re","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-4ueh0re","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"else {\n\tAMDGetGPUInfo(\u0026resp)\n\tif resp.Library != \"\" {\n\t\treturn resp\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-s2q7eay","Type":"NodeParagraph","Properties":{"id":"20240624090823-s2q7eay","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"你可能会注意到，这是一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"else"},{"Type":"NodeText","Data":"​。因此，与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if"},{"Type":"NodeText","Data":"​ 子句一起，只有在未检测到 Nvidia 处理器的情况下，才会尝试 AMD。这将导致一个问题：当安装了 Nvidia GPU 库，但未检测到 GPU 或检测到的 GPU 不兼容时，AMD 显卡也永远不会被检测到。我为此开设了一个"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ollama/ollama/issues/3172","TextMarkTextContent":"问题"},{"Type":"NodeText","Data":"。"}]},{"ID":"20240624090823-fqudd5q","Type":"NodeParagraph","Properties":{"id":"20240624090823-fqudd5q","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"好了，让我们回到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GetGPUInfo"},{"Type":"NodeText","Data":"​。如果检测到 Nvidia 显卡，“GPU 信息” 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Library"},{"Type":"NodeText","Data":"​ 将设为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cuda"},{"Type":"NodeText","Data":"​。如果是 AMD 显卡，则会设置为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"rocm"},{"Type":"NodeText","Data":"​ 。"}]},{"ID":"20240624090823-zb31hsb","Type":"NodeParagraph","Properties":{"id":"20240624090823-zb31hsb","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"因此，如果检测成功，“GPU 信息” 将与 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"availableDynLibs"},{"Type":"NodeText","Data":"​ 配合，为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cuda_*"},{"Type":"NodeText","Data":"​ 或 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"rocm_*"},{"Type":"NodeText","Data":"​ 变体优先选择库路径。这就揭示了 GPU 是如何被检测到的，以及从一堆动态库中创建 llama 服务器时可能使用的 GPU。"}]},{"ID":"20240624090823-p3ok6gi","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240624090823-p3ok6gi","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"Web service and client"}]},{"ID":"20240624090823-ymst5d8","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240624090823-ymst5d8","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"网络服务和客户端"}]},{"ID":"20240624090823-5on2bg5","Type":"NodeParagraph","Properties":{"id":"20240624090823-5on2bg5","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"让我们来看看 “前端”！在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 中确实没有所谓的前端。相反，它和其他大多数 LLM 服务一样，提供了一系列 Web API。"}]},{"ID":"20240624090823-umjypn8","Type":"NodeParagraph","Properties":{"id":"20240624090823-umjypn8","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"基本的 Web API 在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"server"},{"Type":"NodeText","Data":"​中实现，主要在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"server/routes.go"},{"Type":"NodeText","Data":"​模块中。完整的 API 可在 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ollama/ollama/blob/main/docs/api.md","TextMarkTextContent":"GitHub"},{"Type":"NodeText","Data":" 上找到。在此，我们也仅以 chat 的 completion 端点为例，快速从 API 建立起到我们在上面解析过的部分的概览。这个端点定义如下："}]},{"ID":"20240624090823-5p7bpnk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-5p7bpnk","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"r.POST(\"/api/chat\", ChatHandler)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-jyn34wn","Type":"NodeParagraph","Properties":{"id":"20240624090823-jyn34wn","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"其中 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChatHandler"},{"Type":"NodeText","Data":"​ 是处理请求的回调。它以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"var req api.ChatRequest"},{"Type":"NodeText","Data":"​ 结构创建并解析请求。处理程序会做很多事情，比如加载模型，以确保预测是可能的。"}]},{"ID":"20240624090823-hwo8hon","Type":"NodeParagraph","Properties":{"id":"20240624090823-hwo8hon","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一切准备就绪后，最重要的事情就来了："}]},{"ID":"20240624090823-acx6tld","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-acx6tld","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Start prediction\npredictReq := llm.PredictOpts{\n\tPrompt:  prompt,\n\tFormat:  req.Format,\n\tImages:  images,\n\tOptions: opts,\n}\nif err := loaded.runner.Predict(c.Request.Context(), predictReq, fn); err != nil {\n\tch \u003c- gin.H{\"error\": err.Error()}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-37t1qiq","Type":"NodeParagraph","Properties":{"id":"20240624090823-37t1qiq","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它用提示（用户输入、提示等）、图像和其他选项准备预测请求。然后，它调用 runner 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Prediction"},{"Type":"NodeText","Data":"​ 函数，其中 runner 需要实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm"},{"Type":"NodeText","Data":"​ 模块下的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LLM"},{"Type":"NodeText","Data":"​ 接口："}]},{"ID":"20240624090823-d8luaau","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-d8luaau","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"var loaded struct {\n\tmu sync.Mutex\n\n\trunner llm.LLM\n\n\texpireAt    time.Time\n\texpireTimer *time.Timer\n\n\t*Model\n\t*api.Options\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-xcedr59","Type":"NodeParagraph","Properties":{"id":"20240624090823-xcedr59","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LLM"},{"Type":"NodeText","Data":"​ 接口的定义如下："}]},{"ID":"20240624090823-m28gh9j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-m28gh9j","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"type LLM interface {\n\tPredict(context.Context, PredictOpts, func(PredictResult)) error\n\tEmbedding(context.Context, string) ([]float64, error)\n\tEncode(context.Context, string) ([]int, error)\n\tDecode(context.Context, []int) (string, error)\n\tClose()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-g07m8t7","Type":"NodeParagraph","Properties":{"id":"20240624090823-g07m8t7","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Predict"},{"Type":"NodeText","Data":"​ 的实现来自 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://blog.inoki.cc/2024/04/16/Ollama-cn/#%E9%A2%84%E6%B5%8B","TextMarkTextContent":"预测"},{"Type":"NodeText","Data":"一节中描述的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dynExtServer"},{"Type":"NodeText","Data":"​。然后，它将调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"dyn_llama_server_completion"},{"Type":"NodeText","Data":"​ 从动态库中请求启动 llama 服务器。"}]},{"ID":"20240624090823-3dxigt1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-3dxigt1","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"Ollama 的 Go API"}]},{"ID":"20240624090823-8fdv9zb","Type":"NodeParagraph","Properties":{"id":"20240624090823-8fdv9zb","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在项目内部，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 在 Go 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"api"},{"Type":"NodeText","Data":"​ 下直接提供了一个封装。用户可以利用它更方便地调用网络 API。事实上，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 本身也使用 Go 封装提供实际的前端——终端用户界面。"}]},{"ID":"20240624090823-4013z6g","Type":"NodeParagraph","Properties":{"id":"20240624090823-4013z6g","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"此外还有 Python 和 JavaScript/TypeScript 绑定："}]},{"ID":"20240624090823-9qy9i2q","Type":"NodeList","ListData":{},"Properties":{"id":"20240624090823-9qy9i2q","updated":"20240624090824"},"Children":[{"ID":"20240624090823-7qoctsx","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-7qoctsx","updated":"20240624090823"},"Children":[{"ID":"20240624090823-bdh00yf","Type":"NodeParagraph","Properties":{"id":"20240624090823-bdh00yf","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ollama/ollama-python","TextMarkTextContent":"https://github.com/ollama/ollama-python"}]}]},{"ID":"20240624090823-ria41by","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240624090823-ria41by","updated":"20240624090823"},"Children":[{"ID":"20240624090823-kxavs44","Type":"NodeParagraph","Properties":{"id":"20240624090823-kxavs44","updated":"20240624090823"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://github.com/ollama/ollama-js","TextMarkTextContent":"https://github.com/ollama/ollama-js"}]}]}]},{"ID":"20240624090823-e3e8ois","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240624090823-e3e8ois","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"OpenAI API 封装器"}]},{"ID":"20240624090823-a7uvd1q","Type":"NodeParagraph","Properties":{"id":"20240624090823-a7uvd1q","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"尽管有本地 API 端点，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 还在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"server/routes.go"},{"Type":"NodeText","Data":"​ 中提供了与 OpenAI API 兼容（部分兼容）的端点："}]},{"ID":"20240624090823-k5ejvvc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240624090823-k5ejvvc","updated":"20240624090824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Compatibility endpoints\nr.POST(\"/v1/chat/completions\", openai.Middleware(), ChatHandler)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240624090823-xwuhvet","Type":"NodeParagraph","Properties":{"id":"20240624090823-xwuhvet","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"它实际上是从 OpenAI 请求到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 本机请求的转换器，反之亦然。 如果您感兴趣，可以查看 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"openai/openai.go"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240624090823-ejsezml","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240624090823-ejsezml","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"其他实用程序"}]},{"ID":"20240624090823-dece1q4","Type":"NodeParagraph","Properties":{"id":"20240624090823-dece1q4","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"终端 UI 利用 Web API 端点的 Go 包装器来提供基于终端的对话。 它需要一些实用程序，例如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"readline"},{"Type":"NodeText","Data":"​ 来与终端中的用户输入进行交互，以及 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"progress"},{"Type":"NodeText","Data":"​ 来显示进度。"}]},{"ID":"20240624090823-kar6h5q","Type":"NodeParagraph","Properties":{"id":"20240624090823-kar6h5q","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"此外，还有用于 API 端点认证的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"auth"},{"Type":"NodeText","Data":"​，用于cli命令提供者的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmd"},{"Type":"NodeText","Data":"​，用于单位转换的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"format"},{"Type":"NodeText","Data":"​，用于模型文件解析的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"parser"},{"Type":"NodeText","Data":"​ 等。可以根据您的意愿详细查看源代码。这篇文章已经足够长了，并且只关注 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 的整体架构。我也希望看到更多的有关它的其他文章 😉"}]},{"ID":"20240624090823-wuzmodl","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240624090823-wuzmodl","updated":"20240624090823"},"Children":[{"Type":"NodeText","Data":"结论"}]},{"ID":"20240624090823-g3nv930","Type":"NodeParagraph","Properties":{"id":"20240624090823-g3nv930","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"最后，在结束前，这里给出一个关于 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 架构的简单图："}]},{"ID":"20240624090823-ahe76t7","Type":"NodeParagraph","Properties":{"id":"20240624090823-ahe76t7","updated":"20240624090824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20240621144250543"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20240621144250543.png?lastModify=1719191288"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240624090823-vdlfbtj","Type":"NodeParagraph","Properties":{"id":"20240624090823-vdlfbtj","updated":"20240624090824"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我仍要说："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ollama"},{"Type":"NodeText","Data":"​ 是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llama.cpp"},{"Type":"NodeText","Data":"​ 的一个薄（也许不是那么薄）但足够智能的封装。尽管它仍然有一些缺点，但我们确实需要尽可能多的此类封装，以使最终用户的生活更轻松。"}]}]}