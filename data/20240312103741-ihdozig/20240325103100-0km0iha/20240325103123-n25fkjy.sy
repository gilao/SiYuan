{"ID":"20240325103123-n25fkjy","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f376","id":"20240325103123-n25fkjy","title":"大模型推理框架 vLLM 源码解析 （一）","updated":"20240401160516"},"Children":[{"ID":"20240401101831-ic7zzhu","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401101831-ic7zzhu","updated":"20240401101838"},"Children":[{"Type":"NodeText","Data":"Quick Start"}]},{"ID":"20240401101839-488buoo","Type":"NodeParagraph","Properties":{"id":"20240401101839-488buoo","updated":"20240401101852"},"Children":[{"Type":"NodeText","Data":"创建如下代码，命名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"run.py"},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401101853-yzofzgv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401101853-yzofzgv","updated":"20240401101903"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"from vllm import LLM, SamplingParams\n\nprompts = [\n\t\"Have you followed marsggbo in Zhihu?\",\n\t\"你一键三连了吗？\"\n] # 输入prompts\nsampling_params = SamplingParams(temperature=0.8, top_k=50) # 采样策略\nllm = LLM(model=\"facebook/opt-125m\", tensor_parallel_size=2) # 初始化 LLM\noutputs = llm.generate(prompts, sampling_params) # 完成推理\nfor output in outputs:\n\tprompt = output.prompt\n    generated_text = output.outputs[0].text\n    print(f\"Prompt: {prompt!r}, Generated text: {generated_text!r}\")\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401102021-4t7022n","Type":"NodeParagraph","Properties":{"id":"20240401102021-4t7022n","updated":"20240401102021"},"Children":[{"Type":"NodeText","Data":"执行命令："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"python run.py"},{"Type":"NodeText","Data":"​。该脚本会自动将模型以张量并行的方式在两个 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065\u0026amp;from=20065","TextMarkTextContent":"GPU"},{"Type":"NodeText","Data":" 上进行推理计算。"}]},{"ID":"20240401102021-0qzhitt","Type":"NodeParagraph","Properties":{"id":"20240401102021-0qzhitt","updated":"20240401102021"},"Children":[{"Type":"NodeText","Data":"整个推理过程大大致流程如下图所示，即"}]},{"ID":"20240401102030-l4q4tse","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401102030-l4q4tse","updated":"20240401102304"},"Children":[{"ID":"20240401102038-bgtyron","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401102038-bgtyron","updated":"20240401102304"},"Children":[{"ID":"20240401102038-ukbjjih","Type":"NodeParagraph","Properties":{"id":"20240401102038-ukbjjih","updated":"20240401102304"},"Children":[{"Type":"NodeText","Data":"​给定一定数量的 prompts（字符串数组）  "}]}]},{"ID":"20240401102041-31iabbt","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401102041-31iabbt"},"Children":[{"ID":"20240401102041-phwq75v","Type":"NodeParagraph","Properties":{"id":"20240401102041-phwq75v","updated":"20240401102043"},"Children":[{"Type":"NodeText","Data":"vllm 会使用 Scheduler 模块自动对需要推理句子进行调度  "}]}]},{"ID":"20240401102050-erbisjo","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20240401102050-erbisjo"},"Children":[{"ID":"20240401102050-x29t4p3","Type":"NodeParagraph","Properties":{"id":"20240401102050-x29t4p3"},"Children":[{"Type":"NodeText","Data":"根据调度的结果，使用 tokenizer 将字符串转换成 prompt id，然后喂给 model 进行计算得到 logits 预测结果  "}]}]},{"ID":"20240401102054-m010rj9","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20240401102054-m010rj9"},"Children":[{"ID":"20240401102054-szc0vl6","Type":"NodeParagraph","Properties":{"id":"20240401102054-szc0vl6","updated":"20240401102057"},"Children":[{"Type":"NodeText","Data":"根据 logits 预测结果和提前设置好的采样策略对结果进行采样得到新的 token id  "}]}]},{"ID":"20240401102102-v4r594u","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20240401102102-v4r594u","updated":"20240401102103"},"Children":[{"ID":"20240401102102-csdwix5","Type":"NodeParagraph","Properties":{"id":"20240401102102-csdwix5","updated":"20240401102103"},"Children":[{"Type":"NodeText","Data":"将采样结果保存到 output"}]}]}]},{"ID":"20240401102133-ww247sp","Type":"NodeParagraph","Properties":{"id":"20240401102133-ww247sp","updated":"20240401102133"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240401102133-z1zf486.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240401102315-n3x8wyg","Type":"NodeParagraph","Properties":{"id":"20240401102315-n3x8wyg","updated":"20240401102315"}},{"ID":"20240401102316-63rk1hx","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401102316-63rk1hx","updated":"20240401102332"},"Children":[{"Type":"NodeText","Data":"2. 整体核心模块"}]},{"ID":"20240401102332-ox85vh2","Type":"NodeParagraph","Properties":{"id":"20240401102332-ox85vh2","updated":"20240401102418"},"Children":[{"Type":"NodeText","Data":"vLLM 核心模块之间的结构关系，接下来我们从简单的模块（即输入、采样和输出）开始介绍，最后介绍 LLM模块"}]},{"ID":"20240401102418-lrbmhrx","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401102418-lrbmhrx","updated":"20240401102426"},"Children":[{"Type":"NodeText","Data":"3. Sequence"}]},{"ID":"20240401102427-659h6c8","Type":"NodeTable","TableAligns":[0],"Properties":{"colgroup":"min-width: 60px;","id":"20240401102427-659h6c8","updated":"20240401102722"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"vllm/sequence.py"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SequenceStatus"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"Sequence"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SequenceGroup"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SequenceOutput"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SequenceGroupOutput"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"SequenceGroupMetadata"}]}]}]},{"ID":"20240401102616-f32hz0m","Type":"NodeTable","TableAligns":[0],"Properties":{"colgroup":"min-width: 60px;","id":"20240401102616-f32hz0m","updated":"20240401102853"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"什么是维生素B"},{"Type":"NodeText","Data":"​"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"什么是DNA，它在生物体内扮演什么角色？"},{"Type":"NodeText","Data":"​"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"光合作用是什么过程，为什么它对地球上的生命至关重要？"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240401102853-j2lpkbw","Type":"NodeParagraph","Properties":{"id":"20240401102853-j2lpkbw","updated":"20240401102934"},"Children":[{"Type":"NodeText","Data":"如上图我们可以看到 vLLM 为输入的句子设计了很多子模块，这些模块的用处各不相同，但是有彼此之间有关系，下面分别详细介绍一下。"}]},{"ID":"20240401103231-otulenz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401103231-otulenz","updated":"20240401103242"},"Children":[{"Type":"NodeText","Data":"3.1 SequenceStatus"}]},{"ID":"20240401103243-hni1v8d","Type":"NodeParagraph","Properties":{"id":"20240401103243-hni1v8d","updated":"20240401103304"},"Children":[{"Type":"NodeText","Data":"首先看到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceStatus"},{"Type":"NodeText","Data":"​，其源代码如下："}]},{"ID":"20240401103304-q3rf41n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401103304-q3rf41n","updated":"20240401103526"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class SequenceStatus(enum.Enum):\n    \"\"\"Status of a sequence.\"\"\"\n    WAITING = enum.auto() # 等待中，句子还没开始推理，或者推理还未结束\n    RUNNING = enum.auto() # 运行中\n    SWAPPED = enum.auto() # 已交换\n    FINISHED_STOPPED = enum.auto() # 已停止\n    FINISHED_LENGTH_CAPPED = enum.auto() # 已长度限制\n    FINISHED_ABORTED = enum.auto() # 已中止\n    FINISHED_IGNORED = enum.auto() # 已忽略\n\n    @staticmethod\n    def is_finished(status: \"SequenceStatus\") -\u003e bool:\n        # 判断状态是否为已停止、已长度限制、已中止或已忽略\n        return status in [\n            SequenceStatus.FINISHED_STOPPED,\n            SequenceStatus.FINISHED_LENGTH_CAPPED,\n            SequenceStatus.FINISHED_ABORTED,\n            SequenceStatus.FINISHED_IGNORED,\n        ]"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401145850-81gtt0w","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401145850-81gtt0w","updated":"20240401145928"},"Children":[{"Type":"NodeText","Data":"SequenceData"}]},{"ID":"20240401145929-wg4c2y8","Type":"NodeParagraph","Properties":{"id":"20240401145929-wg4c2y8","updated":"20240401150157"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceData"},{"Type":"NodeText","Data":"​ 用于存储与序列相关的数据。这个类有三个属性： "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt_token_ids"},{"Type":"NodeText","Data":"​(提示词的标记ID)、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"output_token_ids"},{"Type":"NodeText","Data":"​ (生成文本的标记ID)和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cumulative_logprob"},{"Type":"NodeText","Data":"​（累计对数概率）。"}]},{"ID":"20240401150157-9ixgxpe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401150157-9ixgxpe","updated":"20240401150231"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class SequenceData:\n    def __init__(\n        self,\n        prompt_token_ids: List[int],\n    ) -\u003e None:\n        self.prompt_token_ids = prompt_token_ids\n        self.output_token_ids: List[int] = []\n        self.cumulative_logprob = 0.0"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401151419-lor9llz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401151419-lor9llz","updated":"20240401151535"},"Children":[{"Type":"NodeText","Data":"Sequence"}]},{"ID":"20240401151535-d203m84","Type":"NodeParagraph","Properties":{"id":"20240401151535-d203m84","updated":"20240401151704"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sequence"},{"Type":"NodeText","Data":"​ 用于存储序列的数据、状态和块信息，且每个序列有唯一标识，即 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seq_id"},{"Type":"NodeText","Data":"​。注意看下面的代码："}]},{"ID":"20240401151704-0fu9y0d","Type":"NodeList","ListData":{},"Properties":{"id":"20240401151704-0fu9y0d","updated":"20240401151706"},"Children":[{"ID":"20240401151706-cod3yzh","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401151706-cod3yzh","updated":"20240401151706"},"Children":[{"ID":"20240401151706-ljs7w4h","Type":"NodeParagraph","Properties":{"id":"20240401151706-ljs7w4h","updated":"20240401151728"},"Children":[{"Type":"NodeText","Data":"数据其实是通过上面的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceData"},{"Type":"NodeText","Data":"​保存的。"}]}]},{"ID":"20240401151728-vji6cyy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401151728-vji6cyy"},"Children":[{"ID":"20240401151728-lfg8yep","Type":"NodeParagraph","Properties":{"id":"20240401151728-lfg8yep","updated":"20240401151809"},"Children":[{"Type":"NodeText","Data":"默认初始化状态，所有句子序列的状态都是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceStatus.WAITING"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240401151819-542bf5b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401151819-542bf5b","updated":"20240401151819"},"Children":[{"ID":"20240401151819-ndeabbx","Type":"NodeParagraph","Properties":{"id":"20240401151819-ndeabbx","updated":"20240401151819"},"Children":[{"Type":"NodeText","Data":"所谓"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"块信息"},{"Type":"NodeText","Data":"，其实就是 vLLM 会在初始化阶段预留出一定数量的CPU 和 GPU 内存，一般是以 token 为单位的，例如在初始化的时候会使用值全为 0，大小为 (256, 128)的 prompt_ids做 warm up。每个序列会按照实际大小申请 block 来记录内存使用情况，即序列 token 数越多，属性"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"logical_token_blocks"},{"Type":"NodeText","Data":"​包含的 block 个数也就越多。"}]}]}]},{"ID":"20240401151828-m5p6k59","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401151828-m5p6k59","updated":"20240401151834"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class Sequence:\n    def __init__(\n        self,\n        seq_id: int,\n        prompt: str,\n        prompt_token_ids: List[int],\n        block_size: int,\n    ) -\u003e None:\n        self.seq_id = seq_id\n        self.prompt = prompt\n        self.block_size = block_size\n\n        self.data = SequenceData(prompt_token_ids) # 数据\n\n        self.logical_token_blocks: List[LogicalTokenBlock] = []\n        # Initialize the logical token blocks with the prompt token ids.\n        self._append_tokens_to_blocks(prompt_token_ids) # 块信息\n        self.status = SequenceStatus.WAITING # 状态\n\t\t...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401152012-qh2a5oq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401152012-qh2a5oq","updated":"20240401152153"},"Children":[{"Type":"NodeText","Data":"3.4 SequenceGroup"}]},{"ID":"20240401152218-x1kfxba","Type":"NodeParagraph","Properties":{"id":"20240401152218-x1kfxba","updated":"20240401152218"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sequence"},{"Type":"NodeText","Data":"​只是单个序列的表示方式,"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seq_id"},{"Type":"NodeText","Data":"​是它的唯一标识。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceGroup"},{"Type":"NodeText","Data":"​则是为了表示多个序列，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"request_id"},{"Type":"NodeText","Data":"​是它的唯一标识，表示是第几个请求。"}]},{"ID":"20240401152218-itsm6w8","Type":"NodeParagraph","Properties":{"id":"20240401152218-itsm6w8","updated":"20240401152218"},"Children":[{"Type":"NodeText","Data":"具体而言，可以看到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"​函数有个参数是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seqs: List[Sequence]"},{"Type":"NodeText","Data":"​，它表示由一个或多个 Sequence 组成的列表，然后会通过"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.seqs_dict = {seq.seq_id: seq for seq in seqs}"},{"Type":"NodeText","Data":"​转化成字典方便管理，这个字典的 key 是每个 Sequence 的唯一标识"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seq_id"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240401152219-hwv9g66","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401152219-hwv9g66","updated":"20240401152224"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class SequenceGroup:\n    def __init__(\n        self,\n        request_id: str,\n        seqs: List[Sequence],\n        sampling_params: SamplingParams,\n        arrival_time: float,\n        lora_request: Optional[LoRARequest] = None,\n        prefix: Optional[Prefix] = None,\n    ) -\u003e None:\n        self.request_id = request_id\n        self.seqs_dict = {seq.seq_id: seq for seq in seqs}\n        self.sampling_params = sampling_params\n        self.arrival_time = arrival_time\n\t\t...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401152227-3ray2xw","Type":"NodeParagraph","Properties":{"id":"20240401152227-3ray2xw","updated":"20240401152436"},"Children":[{"Type":"NodeText","Data":"下面是 vLLm 中 LLMEngine 使用 Sequence 和 SequenceGroup 的场景示例："}]},{"ID":"20240401152437-myjqvoy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401152437-myjqvoy","updated":"20240401152442"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class LLMEngine:\n    def add_request(\n        self,\n        request_id: str,\n        prompt: Optional[str],\n        sampling_params: SamplingParams,\n        prompt_token_ids: Optional[List[int]] = None,\n        arrival_time: Optional[float] = None,\n        lora_request: Optional[LoRARequest] = None,\n        prefix_pos: Optional[int] = None,\n    ) -\u003e None:\n        prompt_token_ids = self.encode_request(\n            request_id=request_id,\n            prompt=prompt,\n            prompt_token_ids=prompt_token_ids,\n            lora_request=lora_request) # 将字符串序列转换成 id\n\n        # Create the sequences.\n        block_size = self.cache_config.block_size\n        seq_id = next(self.seq_counter)\n        seq = Sequence(seq_id, prompt, prompt_token_ids, block_size,\n                       lora_request)\n\n        # Create the sequence group.\n        seq_group = SequenceGroup(request_id, [seq], sampling_params,\n                                  arrival_time)\n\n        # Add the sequence group to the scheduler.\n        self.scheduler.add_seq_group(seq_group)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401152443-k4k6nx5","Type":"NodeParagraph","Properties":{"id":"20240401152443-k4k6nx5","updated":"20240401152449"},"Children":[{"Type":"NodeText","Data":"可以看到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceGroup"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seqs"},{"Type":"NodeText","Data":"​参数在最初阶段其实只是单个序列 ，即"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"[seq]"},{"Type":"NodeText","Data":"​。但是我们知道其实一个 prompt 可以有多个输出结果，所以"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceGroup"},{"Type":"NodeText","Data":"​的目的是管理一个输入 prompt的多个生成序列信息。如果我们设置"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SamplingParams.n=2"},{"Type":"NodeText","Data":"​（第 4 节会介绍），那么在推理过程中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SequenceGroup"},{"Type":"NodeText","Data":"​会新增一个 Sequence，这个新增的 Sequence 的 seq_id 和原来的那个 Sequence 不一样，具体的代码细节会在下一篇文章中介绍。"}]},{"ID":"20240401152855-tsajnms","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401152855-tsajnms","updated":"20240401152908"},"Children":[{"Type":"NodeText","Data":"3.5 SequenceGroupMetadata"}]},{"ID":"20240401152908-2bwuufk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401152908-2bwuufk","updated":"20240401152914"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class SequenceGroupMetadata:\n    def __init__(\n        self,\n        request_id: str,\n        is_prompt: bool,\n        seq_data: Dict[int, SequenceData],\n        sampling_params: SamplingParams,\n        block_tables: Dict[int, List[int]],\n    ) -\u003e None:\n        self.request_id = request_id\n        self.is_prompt = is_prompt\n        self.seq_data = seq_data\n        self.sampling_params = sampling_params\n        self.block_tables = block_tables\n\t\t...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401152921-gdage2u","Type":"NodeParagraph","Properties":{"id":"20240401152921-gdage2u","updated":"20240401152921"},"Children":[{"Type":"NodeText","Data":"SequenceGroupMetadata 记录了一些元信息，下面代码展示了 Scheduler 模块是如何生成这些信息的："}]},{"ID":"20240401152921-syrp3to","Type":"NodeList","ListData":{},"Properties":{"id":"20240401152921-syrp3to","updated":"20240401152921"},"Children":[{"ID":"20240401152921-g7k2be3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401152921-g7k2be3","updated":"20240401152921"},"Children":[{"ID":"20240401152921-orlv9fi","Type":"NodeParagraph","Properties":{"id":"20240401152921-orlv9fi","updated":"20240401152921"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"request_id"},{"Type":"NodeText","Data":"​ 就是 SequenceGroup的 request_id"}]}]},{"ID":"20240401152921-734pjw8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401152921-734pjw8","updated":"20240401152921"},"Children":[{"ID":"20240401152921-saapkol","Type":"NodeParagraph","Properties":{"id":"20240401152921-saapkol","updated":"20240401152921"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seq_data"},{"Type":"NodeText","Data":"​ 是一个字典，key 是每个 Sequence的 seq_id，value 则是对应的 data （即 SequenceData）"}]}]},{"ID":"20240401152921-1sxjj5v","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401152921-1sxjj5v","updated":"20240401152921"},"Children":[{"ID":"20240401152921-q7hhx60","Type":"NodeParagraph","Properties":{"id":"20240401152921-q7hhx60","updated":"20240401152921"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"block_tables"},{"Type":"NodeText","Data":"​也是一个字典，key 也是每个 Sequence的 seq_id，value 这是对应 Sequence 申请的 block"}]}]}]},{"ID":"20240401152923-cnyl5du","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401152923-cnyl5du","updated":"20240401153050"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class Scheduler:\n    def schedule(self) -\u003e Tuple[List[SequenceGroupMetadata], SchedulerOutputs]:\n        scheduler_outputs = self._schedule()\n\n        # Create input data structures.\n        seq_group_metadata_list: List[SequenceGroupMetadata] = []\n        for seq_group in scheduler_outputs.scheduled_seq_groups:\n            seq_data: Dict[int, SequenceData] = {}\n            block_tables: Dict[int, List[int]] = {}\n            for seq in seq_group.get_seqs(status=SequenceStatus.RUNNING):\n                seq_id = seq.seq_id\n                seq_data[seq_id] = seq.data # 单个 SequenceData\n                block_tables[seq_id] = self.block_manager.get_block_table(seq) # 对应Sequence的block信息\n\n            seq_group_metadata = SequenceGroupMetadata(\n                request_id=seq_group.request_id,\n                is_prompt=scheduler_outputs.prompt_run,\n                seq_data=seq_data,\n                sampling_params=seq_group.sampling_params,\n                block_tables=block_tables,\n                lora_request=seq_group.lora_request,\n                prefix=seq_group.prefix,\n            )\n            seq_group_metadata_list.append(seq_group_metadata)\n        return seq_group_metadata_list, scheduler_outputs\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401153200-5t95wbm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401153200-5t95wbm","updated":"20240401153229"},"Children":[{"Type":"NodeText","Data":"3.6 SequenceOutput 和 SequenceGroupOutput"}]},{"ID":"20240401153229-zxnbq04","Type":"NodeParagraph","Properties":{"id":"20240401153229-zxnbq04","updated":"20240401153235"},"Children":[{"Type":"NodeText","Data":"SequenceOutput 和 SequenceGroupOutput的关系就类似 Sequence 和 SequenceGroup。SequenceOutput其实就是记录了上一个 输入 token id 以及对应输出的 token id。"}]},{"ID":"20240401153336-1nnr3tp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401153336-1nnr3tp","updated":"20240401153342"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class SequenceOutput:\n    def __init__(\n        self,\n        parent_seq_id: int,\n        output_token: int,\n        logprobs: Dict[int, float],\n    ) -\u003e None:\n        self.parent_seq_id = parent_seq_id\n        self.output_token = output_token\n        self.logprobs = logprobs\n\nclass SequenceGroupOutput:\n    def __init__(\n        self,\n        samples: List[SequenceOutput],\n        prompt_logprobs: Optional[PromptLogprobs],\n    ) -\u003e None:\n        self.samples = samples\n        self.prompt_logprobs = prompt_logprobs\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401153405-9uvxu2g","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401153405-9uvxu2g","updated":"20240401153534"},"Children":[{"Type":"NodeText","Data":"4. SamplingParams"}]},{"ID":"20240401153550-2h7prrq","Type":"NodeParagraph","Properties":{"id":"20240401153550-2h7prrq","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"SamplingParams 包含以下参数："}]},{"ID":"20240401153550-55occe1","Type":"NodeList","ListData":{},"Properties":{"id":"20240401153550-55occe1","updated":"20240401153550"},"Children":[{"ID":"20240401153550-hs72hac","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-hs72hac","updated":"20240401153550"},"Children":[{"ID":"20240401153550-p3c4p6k","Type":"NodeParagraph","Properties":{"id":"20240401153550-p3c4p6k","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"​：要生成的序列的数量，默认为 1。"}]}]},{"ID":"20240401153550-emrpku2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-emrpku2","updated":"20240401153550"},"Children":[{"ID":"20240401153550-zmurd4d","Type":"NodeParagraph","Properties":{"id":"20240401153550-zmurd4d","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"best_of"},{"Type":"NodeText","Data":"​：从多少个序列中选择最佳序列，需要大于 n，默认等于 n。"}]}]},{"ID":"20240401153550-rtc9zz8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-rtc9zz8","updated":"20240401153550"},"Children":[{"ID":"20240401153550-zaqjqbt","Type":"NodeParagraph","Properties":{"id":"20240401153550-zaqjqbt","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"temperature"},{"Type":"NodeText","Data":"​：用于控制生成结果的随机性，较低的温度会使生成结果更确定性，较高的温度会使生成结果更随机。"}]}]},{"ID":"20240401153550-w1py836","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-w1py836","updated":"20240401153550"},"Children":[{"ID":"20240401153550-c0q1r5m","Type":"NodeParagraph","Properties":{"id":"20240401153550-c0q1r5m","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"top_p"},{"Type":"NodeText","Data":"​：用于过滤掉生成词汇表中概率低于给定阈值的词汇，控制随机性。"}]}]},{"ID":"20240401153550-jo84aeq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-jo84aeq","updated":"20240401153550"},"Children":[{"ID":"20240401153550-q7w4pk2","Type":"NodeParagraph","Properties":{"id":"20240401153550-q7w4pk2","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"top_k"},{"Type":"NodeText","Data":"​：选择前 k 个候选 token，控制多样性。"}]}]},{"ID":"20240401153550-jo9i10a","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-jo9i10a","updated":"20240401153550"},"Children":[{"ID":"20240401153550-k4tkvfs","Type":"NodeParagraph","Properties":{"id":"20240401153550-k4tkvfs","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"presence_penalty"},{"Type":"NodeText","Data":"​：用于控制生成结果中特定词汇的出现频率。"}]}]},{"ID":"20240401153550-zhe4qmy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-zhe4qmy","updated":"20240401153550"},"Children":[{"ID":"20240401153550-flrneu9","Type":"NodeParagraph","Properties":{"id":"20240401153550-flrneu9","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"frequency_penalty"},{"Type":"NodeText","Data":"​：用于控制生成结果中词汇的频率分布。"}]}]},{"ID":"20240401153550-jhhuvk2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-jhhuvk2","updated":"20240401153550"},"Children":[{"ID":"20240401153550-xjr3mwb","Type":"NodeParagraph","Properties":{"id":"20240401153550-xjr3mwb","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"repetition_penalty"},{"Type":"NodeText","Data":"​：用于控制生成结果中的词汇重复程度。"}]}]},{"ID":"20240401153550-grfniu4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-grfniu4","updated":"20240401153550"},"Children":[{"ID":"20240401153550-17tnm15","Type":"NodeParagraph","Properties":{"id":"20240401153550-17tnm15","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"use_beam_search"},{"Type":"NodeText","Data":"​：是否使用束搜索来生成序列。"}]}]},{"ID":"20240401153550-jagng8i","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-jagng8i","updated":"20240401153550"},"Children":[{"ID":"20240401153550-33c2eqh","Type":"NodeParagraph","Properties":{"id":"20240401153550-33c2eqh","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"length_penalty"},{"Type":"NodeText","Data":"​：用于控制生成结果的长度分布。"}]}]},{"ID":"20240401153550-xw93qjv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-xw93qjv","updated":"20240401153550"},"Children":[{"ID":"20240401153550-im91pk0","Type":"NodeParagraph","Properties":{"id":"20240401153550-im91pk0","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"early_stopping"},{"Type":"NodeText","Data":"​：是否在生成过程中提前停止。"}]}]},{"ID":"20240401153550-46omqf2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-46omqf2","updated":"20240401153550"},"Children":[{"ID":"20240401153550-82mm8wq","Type":"NodeParagraph","Properties":{"id":"20240401153550-82mm8wq","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stop"},{"Type":"NodeText","Data":"​：要停止生成的词汇列表。"}]}]},{"ID":"20240401153550-2qme6qz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-2qme6qz","updated":"20240401153550"},"Children":[{"ID":"20240401153550-6mkzqme","Type":"NodeParagraph","Properties":{"id":"20240401153550-6mkzqme","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stop_token_ids"},{"Type":"NodeText","Data":"​：要停止生成的词汇的ID列表。"}]}]},{"ID":"20240401153550-fm04moc","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-fm04moc","updated":"20240401153550"},"Children":[{"ID":"20240401153550-gisaza5","Type":"NodeParagraph","Properties":{"id":"20240401153550-gisaza5","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"include_stop_str_in_output"},{"Type":"NodeText","Data":"​：是否在输出结果中包含停止字符串。"}]}]},{"ID":"20240401153550-7blr205","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-7blr205","updated":"20240401153550"},"Children":[{"ID":"20240401153550-sbhlmoe","Type":"NodeParagraph","Properties":{"id":"20240401153550-sbhlmoe","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ignore_eos"},{"Type":"NodeText","Data":"​：在生成过程中是否忽略结束符号。"}]}]},{"ID":"20240401153550-d50afu4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-d50afu4","updated":"20240401153550"},"Children":[{"ID":"20240401153550-o3s279s","Type":"NodeParagraph","Properties":{"id":"20240401153550-o3s279s","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max_tokens"},{"Type":"NodeText","Data":"​：生成序列的最大长度。"}]}]},{"ID":"20240401153550-0rnq8rb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-0rnq8rb","updated":"20240401153550"},"Children":[{"ID":"20240401153550-3zkqdac","Type":"NodeParagraph","Properties":{"id":"20240401153550-3zkqdac","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"logprobs"},{"Type":"NodeText","Data":"​：用于记录生成过程的概率信息。"}]}]},{"ID":"20240401153550-xsyz4j8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-xsyz4j8","updated":"20240401153550"},"Children":[{"ID":"20240401153550-nfeb5nd","Type":"NodeParagraph","Properties":{"id":"20240401153550-nfeb5nd","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt_logprobs"},{"Type":"NodeText","Data":"​：用于记录生成过程的概率信息，用于特定提示。"}]}]},{"ID":"20240401153550-ngaldrt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-ngaldrt","updated":"20240401153550"},"Children":[{"ID":"20240401153550-ivyv8lk","Type":"NodeParagraph","Properties":{"id":"20240401153550-ivyv8lk","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"skip_special_tokens"},{"Type":"NodeText","Data":"​：是否跳过特殊符号。"}]}]},{"ID":"20240401153550-tusgeej","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-tusgeej","updated":"20240401153550"},"Children":[{"ID":"20240401153550-n55ehoj","Type":"NodeParagraph","Properties":{"id":"20240401153550-n55ehoj","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"spaces_between_special_tokens"},{"Type":"NodeText","Data":"​：是否在特殊符号之间添加空格。"}]}]}]},{"ID":"20240401153550-q6izhjo","Type":"NodeParagraph","Properties":{"id":"20240401153550-q6izhjo","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"这些参数的设置通常取决于具体需求和模型性能。以下是一些常见的设置指导方法："}]},{"ID":"20240401153550-xzccl1k","Type":"NodeList","ListData":{},"Properties":{"id":"20240401153550-xzccl1k","updated":"20240401153550"},"Children":[{"ID":"20240401153550-7qqxsof","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-7qqxsof","updated":"20240401153550"},"Children":[{"ID":"20240401153550-4qocigs","Type":"NodeParagraph","Properties":{"id":"20240401153550-4qocigs","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"temperature"},{"Type":"NodeText","Data":"​：较低的温度（如0.2）会产生更确定性的结果，而较高的温度（如0.8）会产生更随机的结果。您可以根据您的需求进行调整。"}]}]},{"ID":"20240401153550-5g9ftg0","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-5g9ftg0","updated":"20240401153550"},"Children":[{"ID":"20240401153550-w8tyuds","Type":"NodeParagraph","Properties":{"id":"20240401153550-w8tyuds","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"presence_penalty、frequency_penalty 和 repetition_penalty"},{"Type":"NodeText","Data":"​：这些参数可以用于控制生成结果中的词汇分布和重复程度。您可以根据您的需求进行调整。"}]}]},{"ID":"20240401153550-4k5re32","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-4k5re32","updated":"20240401153550"},"Children":[{"ID":"20240401153550-kl0ugvh","Type":"NodeParagraph","Properties":{"id":"20240401153550-kl0ugvh","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"use_beam_search"},{"Type":"NodeText","Data":"​：束搜索通常用于生成更高质量的结果，但可能会降低生成速度。您可以根据您的需求进行调整。"}]}]},{"ID":"20240401153550-t5vd0vr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-t5vd0vr","updated":"20240401153550"},"Children":[{"ID":"20240401153550-ghezh59","Type":"NodeParagraph","Properties":{"id":"20240401153550-ghezh59","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"length_penalty"},{"Type":"NodeText","Data":"​：这个参数可以用于控制生成结果的长度。较高的值会产生更长的结果，而较低的值会产生更短的结果。您可以根据您的需求进行调整。"}]}]},{"ID":"20240401153550-525gf46","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-525gf46","updated":"20240401153550"},"Children":[{"ID":"20240401153550-73qqo9n","Type":"NodeParagraph","Properties":{"id":"20240401153550-73qqo9n","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"early_stopping"},{"Type":"NodeText","Data":"​：如果您不希望生成过长的结果，可以设置此参数为True。"}]}]},{"ID":"20240401153550-rcrzkff","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401153550-rcrzkff","updated":"20240401153550"},"Children":[{"ID":"20240401153550-h47pqg0","Type":"NodeParagraph","Properties":{"id":"20240401153550-h47pqg0","updated":"20240401153550"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stop 和 stop_token_ids"},{"Type":"NodeText","Data":"​：您可以使用这些参数来指定生成结果的结束条件。"}]}]}]},{"ID":"20240401154001-px8mrjp","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401154001-px8mrjp","updated":"20240401154037"},"Children":[{"Type":"NodeText","Data":"5. Output 模块"}]},{"ID":"20240401154037-bre4cte","Type":"NodeTable","TableAligns":[0],"Properties":{"colgroup":"min-width: 60px;","id":"20240401154037-bre4cte","updated":"20240401154111"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"vllm/outputs.py"}]}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"CompletionOutput"}]}]},{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"td","Children":[{"Type":"NodeText","Data":"RequestOutput"}]}]}]},{"ID":"20240401154116-4y5137m","Type":"NodeTable","TableAligns":[0],"Properties":{"colgroup":"min-width: 60px;","id":"20240401154116-4y5137m","updated":"20240401154131"},"Children":[{"Type":"NodeTableHead","Data":"thead","Children":[{"Type":"NodeTableRow","Data":"tr","Children":[{"Type":"NodeTableCell","Data":"th","Children":[{"Type":"NodeText","Data":"Output 输出"}]}]}]}]},{"ID":"20240401154159-wq8o2dm","Type":"NodeParagraph","Properties":{"id":"20240401154159-wq8o2dm","updated":"20240401154159"},"Children":[{"Type":"NodeText","Data":"Output 主要用于表示语言模型（LLM）的生成结果，包含如下两个模块："}]},{"ID":"20240401154159-n52w14n","Type":"NodeList","ListData":{},"Properties":{"id":"20240401154159-n52w14n","updated":"20240401154159"},"Children":[{"ID":"20240401154159-16uevg6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401154159-16uevg6","updated":"20240401154159"},"Children":[{"ID":"20240401154159-u32bpp4","Type":"NodeParagraph","Properties":{"id":"20240401154159-u32bpp4","updated":"20240401154159"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CompletionOutput"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20240401154159-fukbkg8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401154159-fukbkg8","updated":"20240401154159"},"Children":[{"ID":"20240401154159-0u1us7l","Type":"NodeParagraph","Properties":{"id":"20240401154159-0u1us7l","updated":"20240401154159"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RequestOutput"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240401154159-vymc7xo","Type":"NodeParagraph","Properties":{"id":"20240401154159-vymc7xo","updated":"20240401154159"},"Children":[{"Type":"NodeText","Data":"通过上面的介绍我们知道一个 request 可能包含多个序列，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CompletionOutput"},{"Type":"NodeText","Data":"​ 用来表示一个 request 中某个序列的完整输出的数据，其中下面的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"index"},{"Type":"NodeText","Data":"​就表示该序列在 request 中的索引位置"}]},{"ID":"20240401154554-j07s8jc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401154554-j07s8jc","updated":"20240401154559"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class CompletionOutput:\n    def __init__(\n        self,\n        index: int, # 输出结果在请求中的索引\n        text: str, # 生成的文本\n        token_ids: List[int], # 生成的文本对应的 token ID 列表\n        cumulative_logprob: float,\n        logprobs: Optional[SampleLogprobs],\n        finish_reason: Optional[str] = None, # 序列完成的原因（SequenceStatus）\n        lora_request: Optional[LoRARequest] = None,\n    ) -\u003e None:\n        self.index = index\n        self.text = text\n        self.token_ids = token_ids\n        self.finish_reason = finish_reason\n\t\t...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401154601-6xq8hxq","Type":"NodeParagraph","Properties":{"id":"20240401154601-6xq8hxq","updated":"20240401154609"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RequestOutput"},{"Type":"NodeText","Data":"​则表示 request 所有序列的输出结果，有它的初始化函数可以看到它记录了对应的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"request_id"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240401154610-uuoykyh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401154610-uuoykyh","updated":"20240401154614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class RequestOutput:\n    def __init__(\n        self,\n        request_id: str,\n        prompt: str,\n        prompt_token_ids: List[int],\n        prompt_logprobs: Optional[PromptLogprobs],\n        outputs: List[CompletionOutput],\n        finished: bool,\n        lora_request: Optional[LoRARequest] = None,\n    ) -\u003e None:\n        self.request_id = request_id\n        self.prompt = prompt\n        self.prompt_token_ids = prompt_token_ids\n        self.outputs = outputs\n        self.finished = finished\n\t\t...\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401154616-7gt9bmk","Type":"NodeParagraph","Properties":{"id":"20240401154616-7gt9bmk","updated":"20240401154621"},"Children":[{"Type":"NodeText","Data":"我们看看RequestOutput的from_seq_group就能很好理解"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CompletionOutput"},{"Type":"NodeText","Data":"​和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RequestOutput"},{"Type":"NodeText","Data":"​是如何使用的了。为方便理解，代码有删减，但是不影响最终结果："}]},{"ID":"20240401154621-mluk3zs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401154621-mluk3zs","updated":"20240401154626"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class RequestOutput:\n    @classmethod\n    def from_seq_group(cls, seq_group: SequenceGroup) -\u003e \"RequestOutput\":\n        # 1. Get the top-n sequences.\n        n = seq_group.sampling_params.n # 每个序列返回的生成序列数量\n        seqs = seq_group.get_seqs()\n\t\t# 根据累积 logprob 值来选择出前 n 个生成序列\n\t\tsorting_key = lambda seq: seq.get_cumulative_logprob()\n        sorted_seqs = sorted(seqs, key=sorting_key, reverse=True)\n        top_n_seqs = sorted_seqs[:n]\n\n        # 2. Create the outputs.\n        outputs: List[CompletionOutput] = []\n        for seq in top_n_seqs:\n            logprobs = seq.output_logprobs\n            finshed_reason = SequenceStatus.get_finished_reason(seq.status)\n            output = CompletionOutput(seqs.index(seq), seq.output_text,\n                                      seq.get_output_token_ids(),\n                                      seq.get_cumulative_logprob(), logprobs,\n                                      finshed_reason)\n            outputs.append(output)\n\n        # Every sequence in the sequence group should have the same prompt.\n        prompt = seq_group.prompt\n        prompt_token_ids = seq_group.prompt_token_ids\n        prompt_logprobs = seq_group.prompt_logprobs\n        finished = seq_group.is_finished()\n        return cls(seq_group.request_id,\n                   prompt,\n                   prompt_token_ids,\n                   prompt_logprobs,\n                   outputs,\n                   finished,\n                   lora_request=seq_group.lora_request)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401154634-hjmwl6v","Type":"NodeParagraph","Properties":{"id":"20240401154634-hjmwl6v","updated":"20240401154634"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RequestOutput"},{"Type":"NodeText","Data":"​是通过对传入的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seq_group: SequenceGroup"},{"Type":"NodeText","Data":"​进行解析后得到的。解析过程主要有两个阶段："}]},{"ID":"20240401154634-3uqli5x","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20240401154634-3uqli5x","updated":"20240401154634"},"Children":[{"ID":"20240401154634-q60fwkc","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20240401154634-q60fwkc","updated":"20240401154634"},"Children":[{"ID":"20240401154634-1ekhkk3","Type":"NodeParagraph","Properties":{"id":"20240401154634-1ekhkk3","updated":"20240401154634"},"Children":[{"Type":"NodeText","Data":"Get the top-n sequences：这一阶段就是对生成序列按照 cumulative_logprob 进行排序，最后选择出top-n 序列。"}]}]},{"ID":"20240401154634-zbkam3e","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20240401154634-zbkam3e","updated":"20240401154634"},"Children":[{"ID":"20240401154634-fgplei4","Type":"NodeParagraph","Properties":{"id":"20240401154634-fgplei4","updated":"20240401154634"},"Children":[{"Type":"NodeText","Data":"Create the outputs：将所有top-n生成序列分别转换成 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CompletionOutput"},{"Type":"NodeText","Data":"​列表，并作为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RequestOutput"},{"Type":"NodeText","Data":"​的初始化参数。"}]}]}]},{"ID":"20240401160516-ft4l6x1","Type":"NodeParagraph","Properties":{"id":"20240401160516-ft4l6x1"}}]}