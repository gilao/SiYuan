{"ID":"20240401161717-7yhgbqw","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f359","id":"20240401161717-7yhgbqw","title":"大模型推理框架 vLLM 源码解析（二）：Block 模块分配和管理","updated":"20240401164842"},"Children":[{"ID":"20240401161754-bg5j7hf","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401161754-bg5j7hf","updated":"20240401161805"},"Children":[{"Type":"NodeText","Data":"1. Block 概览"}]},{"ID":"20240401162052-7jqhxxk","Type":"NodeParagraph","Properties":{"id":"20240401162052-7jqhxxk","updated":"20240401162052"},"Children":[{"Type":"NodeText","Data":"vLLM 的一个很大创新点是将物理层面的 "},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://cloud.tencent.com/act/pro/promotion-cvm?from_column=20065\u0026amp;from=20065","TextMarkTextContent":"GPU"},{"Type":"NodeText","Data":" 和 CPU 可用内存切分成若干个 block,这样可以有效降低内存碎片化问题。具体而言，vLLM 的 block 分为逻辑层面（logical）和物理层面（physical），二者之间存在映射关系。下图很好解释了两个层面 block 的关系。"}]},{"ID":"20240401162052-fpx42kk","Type":"NodeParagraph","Properties":{"id":"20240401162052-fpx42kk","updated":"20240401162052"},"Children":[{"Type":"NodeText","Data":"假设每个 block 可以用来存 4 个 token 的kv cache数据。一个句子的 token在逻辑层面是紧邻的，每次 decoding 生成新的 token 就往空闲的 block 里放。但是对应到物理层面的 block，一个句子的 token 可能分布在并不相邻的 block内，不过没关系，vLLM 会为每个句子的每个 token记录逻辑和物理block 的映射关系，方便查找和读取"}]},{"ID":"20240401162052-sn6x4qn","Type":"NodeParagraph","Properties":{"id":"20240401162052-sn6x4qn","updated":"20240401162052"},"Children":[{"Type":"NodeText","Data":"接下来我们详细介绍 block 大小的含义，以及 block 的数量是如何计算的，最后介绍 vLLM 是如何管理 block 的。"}]},{"ID":"20240401162440-trj98g8","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401162440-trj98g8","updated":"20240401162452"},"Children":[{"Type":"NodeText","Data":"2. Block 大小如何计算"}]},{"ID":"20240401162458-bchrwau","Type":"NodeParagraph","Properties":{"id":"20240401162458-bchrwau","updated":"20240401162458"},"Children":[{"Type":"NodeText","Data":"block 的大小可以自定义，上面定义为 4，简单理解就是每个 block 最多存储 4 个 token 的 kv cache 数据。但是 block 设置为 4 的时候对应到 GPU 内存到底是多大呢？其实这很好计算，"}]},{"ID":"20240401162458-jlmw5mk","Type":"NodeParagraph","Properties":{"id":"20240401162458-jlmw5mk","updated":"20240401162458"},"Children":[{"Type":"NodeText","Data":"一个 block 占用内存大小（Byte）= token 数量 (block_size) ✖️ 一个 token 的 kv cache  占用 内存大小。"}]},{"ID":"20240401162458-ebdaj75","Type":"NodeParagraph","Properties":{"id":"20240401162458-ebdaj75","updated":"20240401162458"},"Children":[{"Type":"NodeText","Data":"所以，我们只需要计算出单个 token 的 kv cache 对应的大小即可。block 大小的计算方法由"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vllm/vllm/worker/cache_engine.py"},{"Type":"NodeText","Data":"​文件里"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CacheEngine"},{"Type":"NodeText","Data":"​类的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"get_cache_block_size"},{"Type":"NodeText","Data":"​函数实现，代码也很简单，简化后如下："}]},{"ID":"20240401162458-6p9b99o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401162458-6p9b99o","updated":"20240401162503"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/worker/cache_engine.py\nclass CacheEngine:\n    @staticmethod\n    def get_cache_block_size(\n        block_size: int,\n        cache_dtype: str,\n        model_config: ModelConfig,\n        parallel_config: ParallelConfig,\n    ) -\u003e int:\n        head_size = model_config.get_head_size()\n        num_heads = model_config.get_num_kv_heads(parallel_config)\n        num_layers = model_config.get_num_layers(parallel_config)\n\n        key_cache_block = block_size * num_heads * head_size\n        value_cache_block = key_cache_block\n        total = num_layers * (key_cache_block + value_cache_block)\n        if cache_dtype == \"auto\":\n            dtype = model_config.dtype\n        else:\n            dtype = STR_DTYPE_TO_TORCH_DTYPE[cache_dtype]\n        dtype_size = _get_dtype_size(dtype)\n        return dtype_size * total\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401162700-0wt2xu9","Type":"NodeParagraph","Properties":{"id":"20240401162700-0wt2xu9","updated":"20240401162700"},"Children":[{"Type":"NodeText","Data":"上面代码中首先拿到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"num_heads"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"head_size"},{"Type":"NodeText","Data":"​两个变量的值，  "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"num_heads * head_size"},{"Type":"NodeText","Data":"​就表示单个 token 在单层多头注意力机制计算中所需要的参数量，不过这只是 key 或者 value cache 所占用的参数量。"}]},{"ID":"20240401162700-ew5sjbj","Type":"NodeParagraph","Properties":{"id":"20240401162700-ew5sjbj","updated":"20240401162700"},"Children":[{"Type":"NodeText","Data":"一个 block 占用的内存 = token 数量（block_size）✖️ 层数 (num_layers) ✖️ 单层 kv cache 占用内存 （2✖️num_heads✖️head_size）✖️ 数据类型大小（如果是 fp16，则每个数据占用 2 Bytes）"}]},{"ID":"20240401162700-n1lqxd0","Type":"NodeParagraph","Properties":{"id":"20240401162700-n1lqxd0","updated":"20240401162700"},"Children":[{"Type":"NodeText","Data":"举例来说，假设 block_size=4， num_layers=4, num_heads=8, heads_size=128，采用 fp16 存储数据，那么"}]},{"ID":"20240401162700-x4o59bk","Type":"NodeParagraph","Properties":{"id":"20240401162700-x4o59bk","updated":"20240401162700"},"Children":[{"Type":"NodeText","Data":"一个 block 占用内存大小 = 4  ✖️ 4 ✖️ 8 ✖️ 128 ✖️ 2 = 32,768 Bytes。"}]},{"ID":"20240401162700-buw9lk2","Type":"NodeParagraph","Properties":{"id":"20240401162700-buw9lk2","updated":"20240401162700"},"Children":[{"Type":"NodeText","Data":"总结，一个 block 所占用的内存大小就是 block_size 个 token kv cache 所占内存的总和。不同模型的 block 各不相同。"}]},{"ID":"20240401163418-ves86t2","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401163418-ves86t2","updated":"20240401163539"},"Children":[{"Type":"NodeText","Data":"3. Block 数量如何计算"}]},{"ID":"20240401163430-0un6n48","Type":"NodeParagraph","Properties":{"id":"20240401163430-0un6n48","updated":"20240401163539"},"Children":[{"Type":"NodeText","Data":"block 数量计算由"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vllm/vllm/worker/worker.py"},{"Type":"NodeText","Data":"​文件中"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Worker"},{"Type":"NodeText","Data":"​类的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"profile_num_available_blocks"},{"Type":"NodeText","Data":"​函数实现，该函数很简单，简化代码如下："}]},{"ID":"20240401163439-cflbike","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163439-cflbike","updated":"20240401163539"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class Worker\n    @torch.inference_mode()\n    def profile_num_available_blocks(\n        self,\n        block_size: int,\n        gpu_memory_utilization: float,\n        cpu_swap_space: int,\n        cache_dtype: str,\n    ) -\u003e Tuple[int, int]:\n        torch.cuda.empty_cache()\n\t\n\t\t# 这一行其实就是用模拟数据跑一下forward 来统计GPU 的使用情况\n        self.model_runner.profile_run()\n\n        torch.cuda.synchronize()\n        free_gpu_memory, total_gpu_memory = torch.cuda.mem_get_info()\n        peak_memory = total_gpu_memory - free_gpu_memory\n\n        cache_block_size = CacheEngine.get_cache_block_size(\n            block_size, cache_dtype, self.model_config, self.parallel_config)\n        num_gpu_blocks = int(\n            (total_gpu_memory * gpu_memory_utilization - peak_memory) //\n            cache_block_size)\n        num_cpu_blocks = int(cpu_swap_space // cache_block_size)\n        num_gpu_blocks = max(num_gpu_blocks, 0)\n        num_cpu_blocks = max(num_cpu_blocks, 0)\n        if self.model_runner.lora_manager:\n            self.model_runner.remove_all_loras()\n        gc.collect()\n        torch.cuda.empty_cache()\n        return num_gpu_blocks, num_cpu_blocks\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401163454-veqvsym","Type":"NodeParagraph","Properties":{"id":"20240401163454-veqvsym","updated":"20240401163539"},"Children":[{"Type":"NodeText","Data":"整个函数的逻辑很清晰，简单理解就是先用模拟数据跑一次 forward 记录下 GPU 的使用情况，这样可以知道 peak memory，然后计算每个 block 需要用到的 memory，接着就可以计算出 block 数量了。具体而言："}]},{"ID":"20240401163454-2piiqd9","Type":"NodeList","ListData":{},"Properties":{"id":"20240401163454-2piiqd9","updated":"20240401163539"},"Children":[{"ID":"20240401163454-gblgupm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163454-gblgupm","updated":"20240401163454"},"Children":[{"ID":"20240401163454-z2jcebm","Type":"NodeParagraph","Properties":{"id":"20240401163454-z2jcebm","updated":"20240401163454"},"Children":[{"Type":"NodeText","Data":"13 行：vllm 默认用 256 个句子来做 profile，每个句子长度为 128"}]}]},{"ID":"20240401163454-9lx3c7h","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163454-9lx3c7h","updated":"20240401163454"},"Children":[{"ID":"20240401163454-1otbg8t","Type":"NodeParagraph","Properties":{"id":"20240401163454-1otbg8t","updated":"20240401163454"},"Children":[{"Type":"NodeText","Data":"15 到 17 行：统计 GPU 内存使用情况，返回的是以字节（Byte）为单位的数值，后面也都是基于 Byte 为单位进行计算的"}]}]},{"ID":"20240401163454-j8mlsk4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163454-j8mlsk4","updated":"20240401163454"},"Children":[{"ID":"20240401163454-tkfq2di","Type":"NodeParagraph","Properties":{"id":"20240401163454-tkfq2di","updated":"20240401163454"},"Children":[{"Type":"NodeText","Data":"19 行：计算每个 block 的大小，这个在前面已经介绍。"}]}]},{"ID":"20240401163454-1vhpee4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163454-1vhpee4","updated":"20240401163454"},"Children":[{"ID":"20240401163454-3etmmtf","Type":"NodeParagraph","Properties":{"id":"20240401163454-3etmmtf","updated":"20240401163454"},"Children":[{"Type":"NodeText","Data":"20-23 行：计算可用的 GPU block 数量。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"num_gpu_blocks = int(           (total_gpu_memory * gpu_memory_utilization - peak_memory) //           cache_block_size)"},{"Type":"NodeText","Data":"​：gpu_memory_utilization: 默认值是 0.9，表示 GPU 内存利用率是 90%，这挺高的了。所以最终的可用 GPU block 数量等于剩余 GPU 内存大小除以每个 block 的大小"}]}]},{"ID":"20240401163454-973jdxv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163454-973jdxv","updated":"20240401163454"},"Children":[{"ID":"20240401163454-987fxt5","Type":"NodeParagraph","Properties":{"id":"20240401163454-987fxt5","updated":"20240401163454"},"Children":[{"Type":"NodeText","Data":"24 行：计算可用的 CPU block 数量。 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"num_cpu_blocks = int(cpu_swap_space // cache_block_size)"},{"Type":"NodeText","Data":"​这里的cpu_swap_space 代表每个 GPU 对应的 CPU swap 空间大小，单位是（GB），默认是是 4。也就是说每个 GPU 对应的 CPU swap 空间大小是 4 GB。"}]}]}]},{"ID":"20240401163518-bfxoi5e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240401163518-bfxoi5e","updated":"20240401163602"},"Children":[{"Type":"NodeText","Data":"4. Block 如何管理"}]},{"ID":"20240401163603-fo7lwpf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401163603-fo7lwpf","updated":"20240401163619"},"Children":[{"Type":"NodeText","Data":"4.1 逻辑 Block 定义和使用"}]},{"ID":"20240401163619-os3pdjs","Type":"NodeParagraph","Properties":{"id":"20240401163619-os3pdjs","updated":"20240401163643"},"Children":[{"Type":"NodeText","Data":"逻辑 Block （ "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalTokenBlock"},{"Type":"NodeText","Data":"​）定义如下："}]},{"ID":"20240401163644-wry3fw5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163644-wry3fw5","updated":"20240401163649"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/block.py\nclass LogicalTokenBlock:\n    def __init__(\n        self,\n        block_number: int,\n        block_size: int,\n    ) -\u003e None:\n        self.block_number = block_number\n        self.block_size = block_size\n\n        self.token_ids = [_BLANK_TOKEN_ID] * block_size\n        self.num_tokens = 0\n\n    def is_empty(self) -\u003e bool:\n        return self.num_tokens == 0\n\n    def get_num_empty_slots(self) -\u003e int:\n        return self.block_size - self.num_tokens\n\n    def is_full(self) -\u003e bool:\n        return self.num_tokens == self.block_size\n\n    def append_tokens(self, token_ids: List[int]) -\u003e None:\n        assert len(token_ids) \u003c= self.get_num_empty_slots()\n        curr_idx = self.num_tokens\n        self.token_ids[curr_idx:curr_idx + len(token_ids)] = token_ids\n        self.num_tokens += len(token_ids)\n\n    def get_token_ids(self) -\u003e List[int]:\n        return self.token_ids[:self.num_tokens]\n\n    def get_last_token_id(self) -\u003e int:\n        assert self.num_tokens \u003e 0\n        return self.token_ids[self.num_tokens - 1]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401163702-3yabvhc","Type":"NodeList","ListData":{},"Properties":{"id":"20240401163702-3yabvhc","updated":"20240401163702"},"Children":[{"ID":"20240401163702-fvyph66","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163702-fvyph66","updated":"20240401163702"},"Children":[{"ID":"20240401163702-4joy5we","Type":"NodeParagraph","Properties":{"id":"20240401163702-4joy5we","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"block_number: int: 这个是 PhysicalTokenBlock 实例对象的索引，可以理解成是 flag，用于区分不同 block"}]}]},{"ID":"20240401163702-sbbvgx4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163702-sbbvgx4","updated":"20240401163702"},"Children":[{"ID":"20240401163702-a10o96y","Type":"NodeParagraph","Properties":{"id":"20240401163702-a10o96y","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"block_size: int： 表示一个 block 内存储多少个 token 的 kv cache 数据。"}]}]},{"ID":"20240401163702-7vywr50","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163702-7vywr50","updated":"20240401163702"},"Children":[{"ID":"20240401163702-7ph1lp1","Type":"NodeParagraph","Properties":{"id":"20240401163702-7ph1lp1","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"​函数中"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.token_ids"},{"Type":"NodeText","Data":"​初始化是一个长度为 block_size 的全为 -1 的list。后续可以通过"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"append_tokens"},{"Type":"NodeText","Data":"​将新的 token添加到这个 list 中去。"}]}]},{"ID":"20240401163702-hnwyl81","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163702-hnwyl81","updated":"20240401163702"},"Children":[{"ID":"20240401163702-wgiaapp","Type":"NodeParagraph","Properties":{"id":"20240401163702-wgiaapp","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.num_tokens"},{"Type":"NodeText","Data":"​会统计已使用的 token 数量，当"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.num_tokens==block_size"},{"Type":"NodeText","Data":"​时则表示这个 block 已经被使用完了。"}]}]}]},{"ID":"20240401163702-wlz5f9c","Type":"NodeParagraph","Properties":{"id":"20240401163702-wlz5f9c","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"逻辑 Block 的使用逻辑是根据需要实时实例化一个对象，如果当前的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalBlock"},{"Type":"NodeText","Data":"​没有剩余空间了，就再实例化一个新的。"}]},{"ID":"20240401163702-y4kv1jj","Type":"NodeParagraph","Properties":{"id":"20240401163702-y4kv1jj","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"在 vLLm 的使用场景是在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vllm/vllm/sequence.py"},{"Type":"NodeText","Data":"​里的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sequence"},{"Type":"NodeText","Data":"​类中根据需要动态创建"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalBlock"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20240401163702-rnqpvy7","Type":"NodeBlockquote","Properties":{"id":"20240401163702-rnqpvy7","updated":"20240401163702"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20240401163702-t10dsw3","Type":"NodeParagraph","Properties":{"id":"20240401163702-t10dsw3","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sequence"},{"Type":"NodeText","Data":"​类在之前介绍 vLLM 的文章 【"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fzhuanlan.zhihu.com%2Fp%2F681402162\u0026amp;source=article\u0026amp;objectId=2400309","TextMarkTextContent":"大模型推理框架 vLLM 源码解析（一）"},{"Type":"NodeText","Data":"】中已经有详细介绍，这里你只需要知道这个类记录了每个输入句子整个推理过程（prefilling 和 decoding）的所有信息。"}]}]},{"ID":"20240401163702-iyuul09","Type":"NodeParagraph","Properties":{"id":"20240401163702-iyuul09","updated":"20240401163702"},"Children":[{"Type":"NodeText","Data":"我们结合代码来看会更好理解，如下："}]},{"ID":"20240401163704-0mi9ksb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163704-0mi9ksb","updated":"20240401163709"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/sequence.py\nclass Sequence:\n\tdef __init__(self, ...):\n\t\t...\n\t\tself.logical_token_blocks: List[LogicalTokenBlock] = []\n\t\tself._append_tokens_to_blocks(prompt_token_ids)\n\t\t...\n\n    def _append_tokens_to_blocks(self, token_ids: List[int]) -\u003e None:\n        cursor = 0\n        while cursor \u003c len(token_ids):\n            if not self.logical_token_blocks:\n                self._append_logical_block()\n\n            last_block = self.logical_token_blocks[-1]\n            if last_block.is_full():\n                self._append_logical_block()\n                last_block = self.logical_token_blocks[-1]\n\n            num_empty_slots = last_block.get_num_empty_slots()\n            last_block.append_tokens(token_ids[cursor:cursor +\n                                               num_empty_slots])\n            cursor += num_empty_slots\n\t\t\n    def _append_logical_block(self) -\u003e None:\n        block = LogicalTokenBlock(\n            block_number=len(self.logical_token_blocks),\n            block_size=self.block_size,\n        )\n        self.logical_token_blocks.append(block)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401163719-y3ztmy5","Type":"NodeList","ListData":{},"Properties":{"id":"20240401163719-y3ztmy5","updated":"20240401163719"},"Children":[{"ID":"20240401163719-p2mpy8f","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163719-p2mpy8f","updated":"20240401163719"},"Children":[{"ID":"20240401163719-2fm8i1t","Type":"NodeParagraph","Properties":{"id":"20240401163719-2fm8i1t","updated":"20240401163719"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"​函数中会初始化"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.logical_token_blocks"},{"Type":"NodeText","Data":"​空数组，用来存"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalBlock"},{"Type":"NodeText","Data":"​。可以看到会先将 prompt 的所有 token 通过"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_append_tokens_to_blocks"},{"Type":"NodeText","Data":"​存入到 block 中"}]}]},{"ID":"20240401163719-vnmsq7r","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163719-vnmsq7r","updated":"20240401163719"},"Children":[{"ID":"20240401163719-rb27jkg","Type":"NodeParagraph","Properties":{"id":"20240401163719-rb27jkg","updated":"20240401163719"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_append_tokens_to_blocks"},{"Type":"NodeText","Data":"​函数会遍历传入的 token_ids 数组中的每个 token id，将该 token 信息存入到 LogicalBlock 中。"}]},{"ID":"20240401163719-iv9n95a","Type":"NodeList","ListData":{},"Properties":{"id":"20240401163719-iv9n95a","updated":"20240401163719"},"Children":[{"ID":"20240401163719-ndeux8x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163719-ndeux8x","updated":"20240401163719"},"Children":[{"ID":"20240401163719-1h0dxc8","Type":"NodeParagraph","Properties":{"id":"20240401163719-1h0dxc8","updated":"20240401163719"},"Children":[{"Type":"NodeText","Data":"第 12 行：如果"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.logical_token_blocks"},{"Type":"NodeText","Data":"​为空，则会动态调用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_append_logical_block"},{"Type":"NodeText","Data":"​来创建一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalBlock"},{"Type":"NodeText","Data":"​，并存到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"self.logical_token_blocks"},{"Type":"NodeText","Data":"​变量中去"}]}]},{"ID":"20240401163719-5kmyquq","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163719-5kmyquq","updated":"20240401163719"},"Children":[{"ID":"20240401163719-mccvib9","Type":"NodeParagraph","Properties":{"id":"20240401163719-mccvib9","updated":"20240401163719"},"Children":[{"Type":"NodeText","Data":"第 16 行：如果最新创建的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalBlock"},{"Type":"NodeText","Data":"​空间已经满了，则同样会动态调用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"_append_logical_block"},{"Type":"NodeText","Data":"​来创建一个新的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LogicalBlock"},{"Type":"NodeText","Data":"​"}]}]}]}]}]},{"ID":"20240401163720-the0y87","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401163720-the0y87","updated":"20240401163736"},"Children":[{"Type":"NodeText","Data":"4.2 物理Block定义和管理"}]},{"ID":"20240401163803-d84agnf","Type":"NodeParagraph","Properties":{"id":"20240401163803-d84agnf","updated":"20240401163803"},"Children":[{"Type":"NodeText","Data":"物理 Block ("},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PhysicalTokenBlock"},{"Type":"NodeText","Data":"​)的代码定义如下："}]},{"ID":"20240401163803-kh7tee6","Type":"NodeList","ListData":{},"Properties":{"id":"20240401163803-kh7tee6","updated":"20240401163803"},"Children":[{"ID":"20240401163803-diswxac","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163803-diswxac","updated":"20240401163803"},"Children":[{"ID":"20240401163803-8zs2v5i","Type":"NodeParagraph","Properties":{"id":"20240401163803-8zs2v5i","updated":"20240401163803"},"Children":[{"Type":"NodeText","Data":"device: Device: 是一个 enum.Enum 实例对象，要么是 CPU 要么是 GPU。"}]}]},{"ID":"20240401163803-zy134xl","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163803-zy134xl","updated":"20240401163803"},"Children":[{"ID":"20240401163803-mc93k92","Type":"NodeParagraph","Properties":{"id":"20240401163803-mc93k92","updated":"20240401163803"},"Children":[{"Type":"NodeText","Data":"self.ref_count 变量用来指示这个 block 被使用的次数，默认为 0，代表没有使用。可以大于等于1，表示这个 block 内 token的 cache 被重复利用，使用场景比如可以是 beam search，这样可以重复利用cache，减少内存开销。"}]}]}]},{"ID":"20240401163942-f3lfd3p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163942-f3lfd3p","updated":"20240401163949"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/block.py\nclass PhysicalTokenBlock:\n    def __init__(\n        self,\n        device: Device,\n        block_number: int,\n        block_size: int,\n    ) -\u003e None:\n        self.device = device\n        self.block_number = block_number\n        self.block_size = block_size\n\n        self.ref_count = 0\n\n    def __repr__(self) -\u003e str:\n        return (f'PhysicalTokenBlock(device={self.device}, '\n                f'block_number={self.block_number}, '\n                f'ref_count={self.ref_count})')\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401163954-vuhzfi8","Type":"NodeParagraph","Properties":{"id":"20240401163954-vuhzfi8","updated":"20240401163954"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PhysicalTokenBlock"},{"Type":"NodeText","Data":"​只是针对单个 block 的描述。vLLM 在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vllm/vllm/core/block_manager.py"},{"Type":"NodeText","Data":"​文件下实现了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockAllocator"},{"Type":"NodeText","Data":"​类用来初始化所有物理 block，并负责分配这些 block。"}]},{"ID":"20240401163954-aixmm0t","Type":"NodeParagraph","Properties":{"id":"20240401163954-aixmm0t","updated":"20240401163954"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockAllocator"},{"Type":"NodeText","Data":"​这个类代码很简单，如下。主要作用有三个："}]},{"ID":"20240401163954-csja40y","Type":"NodeList","ListData":{},"Properties":{"id":"20240401163954-csja40y","updated":"20240401163954"},"Children":[{"ID":"20240401163954-cnctwps","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163954-cnctwps","updated":"20240401163954"},"Children":[{"ID":"20240401163954-8pebqrk","Type":"NodeParagraph","Properties":{"id":"20240401163954-8pebqrk","updated":"20240401163954"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"​: 初始化指定数量的物理层面 block，这个数量在前面一节已经介绍过如何计算。"}]}]},{"ID":"20240401163954-82te19r","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163954-82te19r","updated":"20240401163954"},"Children":[{"ID":"20240401163954-br97mcp","Type":"NodeParagraph","Properties":{"id":"20240401163954-br97mcp","updated":"20240401163954"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"allocate"},{"Type":"NodeText","Data":"​: 通过 list的 pop() 函数返回一个可用的 block，并将该 block 的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref_count"},{"Type":"NodeText","Data":"​设置为 1"}]}]},{"ID":"20240401163954-3cpuz1l","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401163954-3cpuz1l","updated":"20240401163954"},"Children":[{"ID":"20240401163954-i6bnql5","Type":"NodeParagraph","Properties":{"id":"20240401163954-i6bnql5","updated":"20240401163954"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"free"},{"Type":"NodeText","Data":"​：回收一个指定的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PhysicalBlock"},{"Type":"NodeText","Data":"​，但是回收的前提是这个 block 的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ref_count"},{"Type":"NodeText","Data":"​变量值为 0，表示这个 block 内的 token kv cache 数据不再需要了。"}]}]}]},{"ID":"20240401163955-899ldcq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401163955-899ldcq","updated":"20240401163959"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/core/block_manager.py\nclass BlockAllocator:\n    def __init__(\n        self,\n        device: Device,\n        block_size: int,\n        num_blocks: int,\n    ) -\u003e None:\n        self.device = device\n        self.block_size = block_size\n        self.num_blocks = num_blocks\n\n        # Initialize the free blocks.\n        self.free_blocks: BlockTable = []\n        for i in range(num_blocks):\n            block = PhysicalTokenBlock(device=device,\n                                       block_number=i,\n                                       block_size=block_size)\n            self.free_blocks.append(block)\n\n    def allocate(self) -\u003e PhysicalTokenBlock:\n        if not self.free_blocks:\n            raise ValueError(\"Out of memory! No free blocks are available.\")\n        block = self.free_blocks.pop()\n        block.ref_count = 1\n        return block\n\n    def free(self, block: PhysicalTokenBlock) -\u003e None:\n        if block.ref_count == 0:\n            raise ValueError(f\"Double free! {block} is already freed.\")\n        block.ref_count -= 1\n        if block.ref_count == 0:\n            self.free_blocks.append(block)\n\n    def get_num_free_blocks(self) -\u003e int:\n        return len(self.free_blocks)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164006-jzvzgt4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240401164006-jzvzgt4","updated":"20240401164020"},"Children":[{"Type":"NodeText","Data":"4.3 Block 管理和映射模块"}]},{"ID":"20240401164020-xlei17g","Type":"NodeParagraph","Properties":{"id":"20240401164020-xlei17g","updated":"20240401164026"},"Children":[{"Type":"NodeText","Data":"在介绍这个Block 管理模块之前，我们先了解 vLLM 中设置的用来判断句子是否能够被分配物理 Block 的三种状态，代码如下："}]},{"ID":"20240401164027-u989ks3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401164027-u989ks3","updated":"20240401164030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/core/block_manager.py\nclass AllocStatus(enum.Enum):\n    \"\"\"Result for BlockSpaceManager.can_allocate\n    \"\"\"\n    OK = enum.auto()\n    LATER = enum.auto()\n    NEVER = enum.auto()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164037-ggj43ka","Type":"NodeParagraph","Properties":{"id":"20240401164037-ggj43ka","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"三种状态的含义如下："}]},{"ID":"20240401164037-izpv6an","Type":"NodeList","ListData":{},"Properties":{"id":"20240401164037-izpv6an","updated":"20240401164037"},"Children":[{"ID":"20240401164037-52watrz","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-52watrz","updated":"20240401164037"},"Children":[{"ID":"20240401164037-leeu1uc","Type":"NodeParagraph","Properties":{"id":"20240401164037-leeu1uc","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"OK"},{"Type":"NodeText","Data":"​: seq_group 可以现在被分配。"}]}]},{"ID":"20240401164037-af3w2nj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-af3w2nj","updated":"20240401164037"},"Children":[{"ID":"20240401164037-ag47fy2","Type":"NodeParagraph","Properties":{"id":"20240401164037-ag47fy2","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"LATER"},{"Type":"NodeText","Data":"​: seq_group 不能被分配。分配器的容量大于 seq_group 所需。"}]}]},{"ID":"20240401164037-q19ehhw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-q19ehhw","updated":"20240401164037"},"Children":[{"ID":"20240401164037-84wm4jt","Type":"NodeParagraph","Properties":{"id":"20240401164037-84wm4jt","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NEVER"},{"Type":"NodeText","Data":"​: seq_group 永远不能被分配。seq_group 太大，无法在 GPU 中分配。"}]}]}]},{"ID":"20240401164037-num82sr","Type":"NodeParagraph","Properties":{"id":"20240401164037-num82sr","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"vllm/vllm/core/block_manager.py"},{"Type":"NodeText","Data":"​下的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockSpaceManager"},{"Type":"NodeText","Data":"​是一个高级"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"内存管理"},{"Type":"NodeText","Data":"器，它在内存密集型计算任务（尤其是在使用GPU和CPU进行大规模数据处理的情况下）中管理逻辑数据块和物理内存块之间的映射。"}]},{"ID":"20240401164037-8pn1jok","Type":"NodeParagraph","Properties":{"id":"20240401164037-8pn1jok","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"接下来，我们结合代码介绍"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockSpaceManager"},{"Type":"NodeText","Data":"​一些重要的函数。"}]},{"ID":"20240401164037-qgi0wm4","Type":"NodeList","ListData":{},"Properties":{"id":"20240401164037-qgi0wm4","updated":"20240401164037"},"Children":[{"ID":"20240401164037-rx2lzvd","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-rx2lzvd","updated":"20240401164037"},"Children":[{"ID":"20240401164037-o96q3qx","Type":"NodeParagraph","Properties":{"id":"20240401164037-o96q3qx","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"初始化函数"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"​:"}]},{"ID":"20240401164037-nk9jnui","Type":"NodeList","ListData":{},"Properties":{"id":"20240401164037-nk9jnui","updated":"20240401164037"},"Children":[{"ID":"20240401164037-cngbsxn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-cngbsxn","updated":"20240401164037"},"Children":[{"ID":"20240401164037-qyduvlg","Type":"NodeParagraph","Properties":{"id":"20240401164037-qyduvlg","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"watermark"},{"Type":"NodeText","Data":"​: 一种阈值机制，用来决定何时停止在GPU上分配新的块，以避免内存不足"}]}]},{"ID":"20240401164037-93r2avu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-93r2avu","updated":"20240401164037"},"Children":[{"ID":"20240401164037-dj935s7","Type":"NodeParagraph","Properties":{"id":"20240401164037-dj935s7","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"watermark_blocks"},{"Type":"NodeText","Data":"​: 计算出在达到内存不足前，还能在GPU上分配多少个块。"}]}]},{"ID":"20240401164037-qa7d9uv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-qa7d9uv","updated":"20240401164037"},"Children":[{"ID":"20240401164037-s22xclm","Type":"NodeParagraph","Properties":{"id":"20240401164037-s22xclm","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sliding_window"},{"Type":"NodeText","Data":"​: 可选参数，用来限制在任意给定时间内活跃的逻辑块的数量，有助于控制内存使用。"}]}]},{"ID":"20240401164037-2gwxdl4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-2gwxdl4","updated":"20240401164037"},"Children":[{"ID":"20240401164037-qcxecso","Type":"NodeParagraph","Properties":{"id":"20240401164037-qcxecso","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"创建了 cpu 和 gpu 两种 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockAllocator"},{"Type":"NodeText","Data":"​,不过需要注意这里都是物理层面的 Block"}]}]},{"ID":"20240401164037-t2emde1","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164037-t2emde1","updated":"20240401164037"},"Children":[{"ID":"20240401164037-ykjes4v","Type":"NodeParagraph","Properties":{"id":"20240401164037-ykjes4v","updated":"20240401164037"},"Children":[{"Type":"NodeText","Data":"创建了一个字典 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"block_tables"},{"Type":"NodeText","Data":"​，用于存储每个 sequence id 和它所使用的物理块之间的映射。通过这个 sequence id ，我们就能找到对应的前面介绍的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sequence"},{"Type":"NodeText","Data":"​实例化对象，通过这个字典，就建立了逻辑 block 和物理 block 的映射关系。"}]}]}]}]}]},{"ID":"20240401164038-bu3mcov","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401164038-bu3mcov","updated":"20240401164042"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# vllm/vllm/core/block_manager.py\nclass BlockSpaceManager:\n    def __init__(\n        self,\n        block_size: int,\n        num_gpu_blocks: int,\n        num_cpu_blocks: int,\n        watermark: float = 0.01,\n        sliding_window: Optional[int] = None,\n    ) -\u003e None:\n        self.block_size = block_size\n        self.num_total_gpu_blocks = num_gpu_blocks\n        self.num_total_cpu_blocks = num_cpu_blocks\n\n        self.block_sliding_window = None\n        if sliding_window is not None:\n            assert sliding_window % block_size == 0, (sliding_window,\n                                                      block_size)\n            self.block_sliding_window = sliding_window // block_size\n\n        self.watermark = watermark\n        assert watermark \u003e= 0.0\n\n        self.watermark_blocks = int(watermark * num_gpu_blocks)\n        self.gpu_allocator = BlockAllocator(Device.GPU, block_size,\n                                            num_gpu_blocks)\n        self.cpu_allocator = BlockAllocator(Device.CPU, block_size,\n                                            num_cpu_blocks)\n        # Mapping: seq_id -\u003e BlockTable.\n        self.block_tables: Dict[int, BlockTable] = {}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164042-3snbgzt","Type":"NodeList","ListData":{},"Properties":{"id":"20240401164042-3snbgzt","updated":"20240401164051"},"Children":[{"ID":"20240401164051-d1526kg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164051-d1526kg","updated":"20240401164051"},"Children":[{"ID":"20240401164051-zgdj2jb","Type":"NodeParagraph","Properties":{"id":"20240401164051-zgdj2jb","updated":"20240401164059"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"can_allocate"},{"Type":"NodeText","Data":"​"}]}]}]},{"ID":"20240401164102-bk8d4ot","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401164102-bk8d4ot","updated":"20240401164107"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class BlockSpaceManager:\n    def can_allocate(self, seq_group: SequenceGroup) -\u003e AllocStatus:\n        seq = seq_group.get_seqs(status=SequenceStatus.WAITING)[0]\n        num_required_blocks = len(seq.logical_token_blocks)\n\n        if seq_group.prefix is not None and seq_group.prefix.allocated:\n            num_required_blocks -= seq_group.prefix.get_num_blocks()\n\n        if self.block_sliding_window is not None:\n            num_required_blocks = min(num_required_blocks,\n                                      self.block_sliding_window)\n        num_free_gpu_blocks = self.gpu_allocator.get_num_free_blocks()\n\n        # Use watermark to avoid frequent cache eviction.\n        if (self.num_total_gpu_blocks - num_required_blocks \u003c\n                self.watermark_blocks):\n            return AllocStatus.NEVER\n        if num_free_gpu_blocks - num_required_blocks \u003e= self.watermark_blocks:\n            return AllocStatus.OK\n        else:\n            return AllocStatus.LATER\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164120-wq18hwn","Type":"NodeParagraph","Properties":{"id":"20240401164120-wq18hwn","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"can_allocate"},{"Type":"NodeText","Data":"​方法用于判断一个序列组（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seq_group"},{"Type":"NodeText","Data":"​）是否能被成功分配所需的内存块。此方法首先计算该序列组基于当前任务的逻辑数据块所需的总物理内存块数量。接着，它会检查GPU分配器中的空闲内存块数量，以确认是否有足够的资源满足需求。"}]},{"ID":"20240401164120-vc8bz3r","Type":"NodeParagraph","Properties":{"id":"20240401164120-vc8bz3r","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"方法中引入了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"watermark_blocks"},{"Type":"NodeText","Data":"​概念，其主要目的是防止因频繁进行内存块的缓存淘汰而影响系统性能。在模型训练或数据处理的动态环境中，内存需求持续变化，如果因缺乏足够的空闲内存块而不得不频繁淘汰并重新分配内存块，将会造成性能损耗。这是因为被淘汰的内存块很可能很快再次需要使用，其重新分配过程会消耗额外的时间和资源。"}]},{"ID":"20240401164120-s60qw2w","Type":"NodeParagraph","Properties":{"id":"20240401164120-s60qw2w","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"通过设置"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"watermark_blocks"},{"Type":"NodeText","Data":"​阈值，当GPU上的空闲内存块数量低于此阈值时，系统将避免分配新的内存块，以留出缓冲区域，减少缓存淘汰的发生。只有当空闲内存块数量高于此阈值时，系统才会继续进行新的内存块分配。这种策略旨在平衡内存分配需求和系统性能，避免因频繁的内存操作而降低效率。"}]},{"ID":"20240401164120-4tbr4xt","Type":"NodeParagraph","Properties":{"id":"20240401164120-4tbr4xt","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"如果根据当前的资源状态，确定序列组所需的内存块永远无法被满足，则返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AllocStatus.NEVER"},{"Type":"NodeText","Data":"​，意味着该序列组在当前条件下无法被分配。如果当前不可分配但未来有可能，返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AllocStatus.LATER"},{"Type":"NodeText","Data":"​，表明序列组暂时无法分配，但随着系统状态的改变，可能在将来能够分配。如果有足够的空闲内存块满足分配需求，则返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AllocStatus.OK"},{"Type":"NodeText","Data":"​，表示序列组可以立即被分配所需内存。"}]},{"ID":"20240401164120-q7fa6vq","Type":"NodeParagraph","Properties":{"id":"20240401164120-q7fa6vq","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"这种方式确保了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"watermark_blocks"},{"Type":"NodeText","Data":"​在满足内存分配需求的同时，有效避免了频繁的缓存淘汰问题，从而优化了整体的系统性能和资源利用效率。"}]},{"ID":"20240401164120-fbiuk3y","Type":"NodeList","ListData":{},"Properties":{"id":"20240401164120-fbiuk3y","updated":"20240401164120"},"Children":[{"ID":"20240401164120-nj4idrp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240401164120-nj4idrp","updated":"20240401164120"},"Children":[{"ID":"20240401164120-h37z9vg","Type":"NodeParagraph","Properties":{"id":"20240401164120-h37z9vg","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"allocate"},{"Type":"NodeText","Data":"​ 代码有简化，但是不影响理解"}]}]}]},{"ID":"20240401164120-ihzc6v8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240401164120-ihzc6v8","updated":"20240401164120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"amF2YXNjcmlwdA=="},{"Type":"NodeCodeBlockCode","Data":"class BlockSpaceManager:\n   def allocate(self, seq_group: SequenceGroup) -\u003e None:\n        seq = seq_group.get_seqs(status=SequenceStatus.WAITING)[0]\n        num_prompt_blocks = len(seq.logical_token_blocks)\n\n        block_table: BlockTable = []\n        for logical_idx in range(num_prompt_blocks):\n\t\t\tblock = self.gpu_allocator.allocate()\n            block.ref_count = seq_group.num_seqs()\n            block_table.append(block)\n\n        for seq in seq_group.get_seqs(status=SequenceStatus.WAITING):\n            self.block_tables[seq.seq_id] = block_table.copy()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240401164120-u2gjz0d","Type":"NodeParagraph","Properties":{"id":"20240401164120-u2gjz0d","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"复制"}]},{"ID":"20240401164120-ukuczin","Type":"NodeParagraph","Properties":{"id":"20240401164120-ukuczin","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"allocate"},{"Type":"NodeText","Data":"​ 方法用于为序列组分配内存块。它会遍历序列组中的每个序列，为每个序列分配足够的内存块，并将这些块添加到序列的块表中。同时，它会更新序列的块表，以便在后续的训练过程中可以正确地访问这些块。"}]},{"ID":"20240401164120-41791ik","Type":"NodeParagraph","Properties":{"id":"20240401164120-41791ik","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockSpaceManager"},{"Type":"NodeText","Data":"​还有很多其它的函数，为了避免文章累赘，这里不做详细介绍。"}]},{"ID":"20240401164120-h2vtqpx","Type":"NodeParagraph","Properties":{"id":"20240401164120-h2vtqpx","updated":"20240401164120"},"Children":[{"Type":"NodeText","Data":"后面会继续写一篇 vLLM 的调度"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Scheduler"},{"Type":"NodeText","Data":"​模块的文章，对"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BlockSpaceManager"},{"Type":"NodeText","Data":"​更加详细地介绍。相信通过本篇文章，你应该能够对 vLLM 的 block 有一个清楚的了解了，如果还是不清楚，可以反复阅读直到清楚为止。"}]},{"ID":"20240401164842-3o1dxrh","Type":"NodeParagraph","Properties":{"id":"20240401164842-3o1dxrh"}}]}