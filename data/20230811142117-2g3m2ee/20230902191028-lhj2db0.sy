{"ID":"20230902191028-lhj2db0","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f488","id":"20230902191028-lhj2db0","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230902191028-lhj2db0\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230902191029-xbi3aab\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230902191059-561ihvh\u0026quot;,\u0026quot;scrollTop\u0026quot;:61.33333206176758,\u0026quot;focusId\u0026quot;:\u0026quot;20230902191219-ymiq7kf\u0026quot;,\u0026quot;focusStart\u0026quot;:4,\u0026quot;focusEnd\u0026quot;:4\u0026#125;","title":"服务框架用户手册","updated":"20230902191219"},"Children":[{"ID":"20230902191029-xbi3aab","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230902191029-xbi3aab","updated":"20230902191029"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"一 服务框架简介"}]},{"ID":"20230902191030-9zswb3u","Type":"NodeParagraph","Properties":{"id":"20230902191030-9zswb3u","updated":"20230902191030"},"Children":[{"Type":"NodeText","Data":"​"}]},{"ID":"20230902191031-beobs09","Type":"NodeParagraph","Properties":{"id":"20230902191031-beobs09","updated":"20230902191031"},"Children":[{"Type":"NodeText","Data":"（简要补充流程图的说明介绍，包括：框架的总体目标和实现功能，有哪些核心模块，其中的功能是什么，代码层面的实现思路，框架运行流程介绍）"}]},{"ID":"20230902191219-ymiq7kf","Type":"NodeParagraph","Properties":{"id":"20230902191219-ymiq7kf","updated":"20230902191219"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230902191219-2h2afy4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230902191032-6uhthkx","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230902191032-6uhthkx","updated":"20230902191032"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"二 模型改造"}]},{"ID":"20230902191033-1oef0ep","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230902191033-1oef0ep","updated":"20230902191033"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1 单个模型"}]},{"ID":"20230902191034-gthhzkk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230902191034-gthhzkk","updated":"20230902191034"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"模型类示例"}]},{"ID":"20230902191035-cfkpjfc","Type":"NodeParagraph","Properties":{"id":"20230902191035-cfkpjfc","updated":"20230902191035"},"Children":[{"Type":"NodeText","Data":"将模型的推理流程流程，参照下述 python 类进行封装："}]},{"ID":"20230902191036-3zh42wr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cHl0aG9u","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230902191036-3zh42wr","updated":"20230902191036"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"'''\nAuthor: Name\nDate: 2023-08-29 17:37:07\nLastEditors: Name\nLastEditTime: 2023-08-29 17:37:12\nFilePath: /Desktop/class Model.py\nDescription: \n\nCopyright (c) 2023 by sgcc, All Rights Reserved. \n'''\n\nimport numpy as np\nfrom transformers import AutoModel\nfrom transformers import AutoTokenizer\n\nclass Model(object):\n    \"\"\"\n    深度学习模型封装类\n    \"\"\"\n\tdef __init__(self, yaml_path):\n\t\t\"\"\"初始化函数，初始化模型的所有私有变量，如：tokenizer, model 等\n\n\t\tArgs:\n\t\t\tyaml_path (str): yaml 配置文件的地址\n\t\t\"\"\"\n        # 一个简单示例：\n        self.config = yaml.load(open(yaml_path, 'r'), Loader=yaml.Loader)\n  \t\tself.tokenizer = AutoTokenizer.from_pretrained(self.config['tokenizer_path'])\n    \tself.model = AutoModel.from_pretrained(self.config['model_path'])\n    \tself.model.eval()\n\t\n\tdef predict(self, data):\n        \"\"\"模型预测函数，输入 data，输出结果\n\n\t\tArgs:\n\t\t\tdata (json): 将模型推理所需的参数以 json 形式传入\n   \n        Returns:\n            json: 将模型所有的推理结果以 json 形式返回\n\t\t\"\"\"\n\n        # 一个简单示例：\n\t\tinput_data = self.get_input(data)\n\t\tpredict_data = self.model.predict(tokenizer = self.toeknizer, input_data)\n\t\tresult = self.get_output(predict_data)\n\t\treturn result\n\t\n\tdef get_input(self, data):\n\t\t\"\"\"请求解析函数，将传入 data 转化为模型的输入格式\n\n\t\tArgs:\n\t\t\tdata (json): 服务输入\n\n        Returns:\n        \t自定义 type: 返回 model.predict() 所需变量即可，对于返回变量数量，数据格式不做限制\n\t\t\"\"\"\n        \n        # 一个简单示例：\n        query = data['query']\n\n        return query\n\t\t\n\tdef get_output(self, result):\n\t\t\"\"\"响应拼接函数，将模型预测的结果解码，转化为输出格式\n\n\t\tArgs:\n\t\t\t自定义 type: 模型预测结果\n\n        Returns:\n            json: 返回 model.predict() 所需变量即可，对于返回变量数量，数据格式不做限制\n\t\t\"\"\"\n\n        # 一个简单示例：\n        subject_preds[:, [0, -1]] *= 0\n        start = np.where(subject_preds[0, :, 0] \u003e 0.6)[0]\n        result = self.extract_subject(start)\n\t\treturn result\n\n    def extract_subject(self, inputs):\n        \"\"\"一个用于配合框架说明的示例函数\n           该函数的实际意义是根据subject_ids从output中取出subject的向量表征\n\n\t\tArgs:\n\t\t\tinputs: 模型预测结果\n\n        Returns:\n            tensor：向量\n\t\t\"\"\"\n        output, subject_ids = inputs\n        start = batch_gather(output, subject_ids[:, :1])\n        end = batch_gather(output, subject_ids[:, 1:])\n        subject = K.concatenate([start, end], 2)\n        return subject[:, 0]\n\n\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230902191037-0i70zy2","Type":"NodeParagraph","Properties":{"id":"20230902191037-0i70zy2","updated":"20230902191037"},"Children":[{"Type":"NodeText","Data":"模型类共有四个核心函数，分别是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get_input"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get_output"},{"Type":"NodeText","Data":"。以下是模型每个类内方法的使用介绍："}]},{"ID":"20230902191038-qqs4cbe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230902191038-qqs4cbe","updated":"20230902191038"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"init 方法"}]},{"ID":"20230902191039-q8z0ll2","Type":"NodeParagraph","Properties":{"id":"20230902191039-q8z0ll2","updated":"20230902191039"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"方法中，定义的参数 config 为 json 类型，config 字典中包含在进行类初始化时需要的参数，具体的参数数量和参数类型根据实际情况进行设定，封装后与 go 开发工程师@郝晓波进行沟通，保证可以正常实例化该模型。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"方法的具体实现由算法工程师设计实现。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"yaml 文件示例："}]},{"ID":"20230902191040-3jmek08","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cHl0aG9u","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230902191040-3jmek08","updated":"20230902191040"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"config_path: '/root/kg/bert/gpt2_ml/config.json'\ncheckpoint_path: '/root/kg/bert/gpt2_ml/model.ckpt-100000'\ndict_path: '/root/kg/bert/gpt2_ml/vocab.txt'\nmodel: \"gpt2_ml\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230902191041-28vhimq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230902191041-28vhimq","updated":"20230902191041"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"predict 方法"}]},{"ID":"20230902191042-nqqwl6k","Type":"NodeParagraph","Properties":{"id":"20230902191042-nqqwl6k","updated":"20230902191042"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"方法中，用于获取模型输出。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"传入的参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"data"},{"Type":"NodeText","Data":"为字典类型，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"data"},{"Type":"NodeText","Data":"中包含获取模型输入的必要参数，具体的参数基于模型自主设计，将设计好的参数数量和参数类型与 go 开发工程师@郝晓波进行沟通，保证该该方法可以正常的使用。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"传出的参数 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"result"},{"Type":"NodeText","Data":"为字典类型，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"result"},{"Type":"NodeText","Data":"中包含模型的输出结果，将设计好的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"result"},{"Type":"NodeText","Data":"与 go 开发工程师@郝晓波进行确认，保证输出结果可以返回和正确的使用。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"方法的具体实现由算法工程师设计实现。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"传入 data 示例"}]},{"ID":"20230902191043-wdr6h99","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"cHl0aG9u","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230902191043-wdr6h99","updated":"20230902191043"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"data = {\n\t'query': '今天天气不错',\n    'history': ['你好','你好，请问有什么可以帮您的吗'] ,\n    'n': 1,\n    'topp': 0.95,\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230902191044-g8tureo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230902191044-g8tureo","updated":"20230902191044"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"get_input 方法"}]},{"ID":"20230902191045-kihdndj","Type":"NodeParagraph","Properties":{"id":"20230902191045-kihdndj","updated":"20230902191045"},"Children":[{"Type":"NodeText","Data":"（按照上述格式补充优化下文字叙述，再补充一个输入示例）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get_input"},{"Type":"NodeText","Data":"方法用来初始化和检查传入的参数；该方法在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"方法中使用，传入的参数与"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"传入的参数相同，都是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"data"},{"Type":"NodeText","Data":"。 **该方法为选择性使用，可以选择使用该方法进行传入参数的检查和初始化，也可以直接在 **"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"**predict**"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法中直接设计初始化和检查传入参数。"}]},{"ID":"20230902191046-xu0omoa","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230902191046-xu0omoa","updated":"20230902191046"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"get_output 方法"}]},{"ID":"20230902191047-uhimd7z","Type":"NodeParagraph","Properties":{"id":"20230902191047-uhimd7z","updated":"20230902191047"},"Children":[{"Type":"NodeText","Data":"（按照上述格式补充优化下文字叙述，再补充一个输出示例）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"get_output"},{"Type":"NodeText","Data":"用来检查和规范输出参数；该方法在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"方法中使用，传入的参数为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"返回的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"result"},{"Type":"NodeText","Data":"字典类型，主要检查和规范输出参数的类型，保证输出参数可以正常使用。**该方法同样为选择性使用，可以使用该方法进行输出参数的检查，也可以直接在 **"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"**predict**"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法中直接检查和规范输出参数。"}]},{"ID":"20230902191048-r3d1s6e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230902191048-r3d1s6e","updated":"20230902191048"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"2 两个模型"}]},{"ID":"20230902191049-bzp63uy","Type":"NodeParagraph","Properties":{"id":"20230902191049-bzp63uy","updated":"20230902191049"},"Children":[{"Type":"NodeText","Data":"（参考单个模型的情况，整理一下多个模型介绍部分）"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"调用过程需要两个模型时，分为两种情况："}]},{"ID":"20230902191050-dsddbvx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230902191050-dsddbvx","updated":"20230902191050"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"顺序调用"}]},{"ID":"20230902191051-5xyodkl","Type":"NodeParagraph","Properties":{"id":"20230902191051-5xyodkl","updated":"20230902191051"},"Children":[{"Type":"NodeText","Data":"第一种情况为两个模型为顺序调用，需要使用第一个模型的结果作为第二个模型的输入"}]},{"ID":"20230902191052-x1izipk","Type":"NodeParagraph","Properties":{"id":"20230902191052-x1izipk","updated":"20230902191052"},"Children":[{"Type":"NodeText","Data":"**两个模型分别创建单模型的 **"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"**model**"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"类，后端开发人员在pyhon代码中进行顺序调用他们的predict方法。"}]},{"ID":"20230902191053-5xyd30w","Type":"NodeParagraph","Properties":{"id":"20230902191053-5xyd30w","updated":"20230902191053"},"Children":[{"Type":"NodeText","Data":"算法工程师需要与后端开发人员"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"协商确认模型的调用顺序及每个模型要传入的参数数量及参数类型"}]},{"ID":"20230902191054-keijp44","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230902191054-keijp44","updated":"20230902191054"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"异步调用"}]},{"ID":"20230902191055-5sf30cn","Type":"NodeParagraph","Properties":{"id":"20230902191055-5sf30cn","updated":"20230902191055"},"Children":[{"Type":"NodeText","Data":"第二种情况为异步调用，两个模型的生成结果只和用户请求的数据有关，与其他模型无关，只是生成的结果需要拼接到一起后返回给用户。"}]},{"ID":"20230902191056-8bhrn5f","Type":"NodeParagraph","Properties":{"id":"20230902191056-8bhrn5f","updated":"20230902191056"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"这种情况下分别为两个模型创建单模型的model类，后端开发人员将以异步的方式分别调用两个模型的predict方法"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230902191057-ixs8xg4","Type":"NodeParagraph","Properties":{"id":"20230902191057-ixs8xg4","updated":"20230902191057"},"Children":[{"Type":"NodeText","Data":"算法工程师需要与后端开发人员"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"协商确认两个模型生成的结果如何拼接，及每个模型要传入的参数数量及参数类型"}]},{"ID":"20230902191058-qwai9no","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230902191058-qwai9no","updated":"20230902191058"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20230902191059-561ihvh","Type":"NodeParagraph","Properties":{"id":"20230902191059-561ihvh","updated":"20230902191059"},"Children":[{"Type":"NodeText","Data":"基于上述的示例和方法的具体介绍，算法工程师基于实际的模型进行具体的设计，将设计好的封装给到后端开发人员，后端开发人员将基于该封装实例化任务模型，并调用模型的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"方法来传入模型需要的参数，并接受输出的结果，将输出的结果进行封装，提供接口，让其他开发人员进行调用。"}]}]}