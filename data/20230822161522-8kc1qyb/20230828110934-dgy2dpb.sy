{"ID":"20230828110934-dgy2dpb","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f69b","id":"20230828110934-dgy2dpb","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230828110934-dgy2dpb\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230828110954-6kadrw7\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230828111004-pbe5rer\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;","tags":"Go 代码,流式输出,gRPC","title":"基于Go 语言实现流式输出","updated":"20230828111004"},"Children":[{"ID":"20230828110954-6kadrw7","Type":"NodeParagraph","Properties":{"id":"20230828110954-6kadrw7"}},{"ID":"20230828111004-woud92z","Type":"NodeParagraph","Properties":{"id":"20230828111004-woud92z","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"当使用 Go 语言来实现 gRPC 的流式输出（Server Streaming），你需要按照以下步骤进行操作："}]},{"ID":"20230828111004-yeo3jwc","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230828111004-yeo3jwc","updated":"20230828111004"},"Children":[{"ID":"20230828111004-wc2r6u9","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20230828111004-wc2r6u9","updated":"20230828111004"},"Children":[{"ID":"20230828111004-rc91f99","Type":"NodeParagraph","Properties":{"id":"20230828111004-rc91f99","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".proto"},{"Type":"NodeText","Data":"​ 文件中定义服务器流式方法。例如："}]}]}]},{"ID":"20230828111004-rftxt36","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111004-rftxt36","updated":"20230828111004"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHJvdG9idWY="},{"Type":"NodeCodeBlockCode","Data":"service MyService {\n  rpc StreamOutput(MyRequest) returns (stream MyResponse) {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111004-jnnhclx","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230828111004-jnnhclx","updated":"20230828111004"},"Children":[{"ID":"20230828111004-ud4930j","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20230828111004-ud4930j","updated":"20230828111004"},"Children":[{"ID":"20230828111004-70jn5kk","Type":"NodeParagraph","Properties":{"id":"20230828111004-70jn5kk","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"使用 Protocol Buffers 编译器（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"protoc"},{"Type":"NodeText","Data":"​）生成 Go 语言的 gRPC 代码。你可以使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"protoc-gen-go"},{"Type":"NodeText","Data":"​ 插件来生成与 Go 语言兼容的代码，运行以下命令："}]}]}]},{"ID":"20230828111004-0mvxhjs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111004-0mvxhjs","updated":"20230828111004"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"c2hlbGw="},{"Type":"NodeCodeBlockCode","Data":"protoc --go_out=plugins=grpc:. your_service.proto\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111004-m8etabh","Type":"NodeParagraph","Properties":{"id":"20230828111004-m8etabh","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"这将生成一个名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"your_service.pb.go"},{"Type":"NodeText","Data":"​ 的文件，其中包含了服务器存根以及相关的结构体和接口。"}]},{"ID":"20230828111004-t2gsod0","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230828111004-t2gsod0","updated":"20230828111004"},"Children":[{"ID":"20230828111004-8rqt4e0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20230828111004-8rqt4e0","updated":"20230828111004"},"Children":[{"ID":"20230828111004-6s17l2d","Type":"NodeParagraph","Properties":{"id":"20230828111004-6s17l2d","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"在服务器端实现具体的服务。你将实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"YourServiceServer"},{"Type":"NodeText","Data":"​ 接口中定义的方法，同时处理客户端请求并以流式方式发送多个响应。例如："}]}]}]},{"ID":"20230828111004-9mlfrfk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111004-9mlfrfk","updated":"20230828111004"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type server struct{}\n\nfunc (s *server) StreamOutput(request *pb.MyRequest, stream pb.YourService_StreamOutputServer) error {\n    // 处理请求并以流式方式发送多个响应\n    for i := 0; i \u003c 10; i++ {\n        response := \u0026pb.MyResponse{Message: fmt.Sprintf(\"Response %d\", i+1)}\n        if err := stream.Send(response); err != nil {\n            return err\n        }\n        time.Sleep(time.Second) // 可选，用于模拟每个响应之间的延迟\n    }\n    return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111004-bhjxq09","Type":"NodeParagraph","Properties":{"id":"20230828111004-bhjxq09","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"在这个示例中，我们实现了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StreamOutput"},{"Type":"NodeText","Data":"​ 方法，该方法接受客户端请求和流式输出的服务器端。在这个方法中，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream.Send()"},{"Type":"NodeText","Data":"​ 方法以流式方式发送多个响应。"}]},{"ID":"20230828111004-iqbp7wi","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230828111004-iqbp7wi","updated":"20230828111004"},"Children":[{"ID":"20230828111004-h09tkq6","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20230828111004-h09tkq6","updated":"20230828111004"},"Children":[{"ID":"20230828111004-w5gshh8","Type":"NodeParagraph","Properties":{"id":"20230828111004-w5gshh8","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"创建 gRPC 服务器并注册服务。你将创建一个 gRPC 服务器，并将服务注册到该服务器上。例如："}]}]}]},{"ID":"20230828111004-rvq5ioa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111004-rvq5ioa","updated":"20230828111004"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"lis, err := net.Listen(\"tcp\", \":50051\")\nif err != nil {\n    log.Fatalf(\"Failed to listen: %v\", err)\n}\n\ngrpcServer := grpc.NewServer()\npb.RegisterYourServiceServer(grpcServer, \u0026server{})\n\nif err := grpcServer.Serve(lis); err != nil {\n    log.Fatalf(\"Failed to serve: %v\", err)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111004-t6wmz1w","Type":"NodeParagraph","Properties":{"id":"20230828111004-t6wmz1w","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"在这个示例中，我们创建了一个 TCP 监听器，并使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"grpc.NewServer()"},{"Type":"NodeText","Data":"​ 函数创建一个新的 gRPC 服务器。然后，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"pb.RegisterYourServiceServer()"},{"Type":"NodeText","Data":"​ 将服务注册到服务器上。"}]},{"ID":"20230828111004-ghzl36v","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230828111004-ghzl36v","updated":"20230828111004"},"Children":[{"ID":"20230828111004-l7rqqql","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20230828111004-l7rqqql","updated":"20230828111004"},"Children":[{"ID":"20230828111004-blyfb5w","Type":"NodeParagraph","Properties":{"id":"20230828111004-blyfb5w","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"在客户端调用流式输出方法。在客户端代码中，你可以使用生成的客户端存根（Stub）调用流式输出方法。例如："}]}]}]},{"ID":"20230828111004-dftrrdr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111004-dftrrdr","updated":"20230828111004"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"conn, err := grpc.Dial(\"localhost:50051\", grpc.WithInsecure())\nif err != nil {\n    log.Fatalf(\"Failed to connect: %v\", err)\n}\ndefer conn.Close()\n\nclient := pb.NewYourServiceClient(conn)\nrequest := \u0026pb.MyRequest{} // 构建请求对象\n\nstream, err := client.StreamOutput(context.Background(), request)\nif err != nil {\n    log.Fatalf(\"Error calling StreamOutput: %v\", err)\n}\n\nfor {\n    response, err := stream.Recv()\n    if err == io.EOF {\n        break\n    }\n    if err != nil {\n        log.Fatalf(\"Error receiving response: %v\", err)\n    }\n    // 处理每个响应\n    fmt.Println(response)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111004-d4inyux","Type":"NodeParagraph","Properties":{"id":"20230828111004-d4inyux","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"在这个示例中，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"grpc.Dial()"},{"Type":"NodeText","Data":"​ 函数建立与服务器的连接，并创建一个客户端存根。然后，我们调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"client.StreamOutput()"},{"Type":"NodeText","Data":"​ 发起流式输出的方法调用，并获取返回的流对象。在循环中，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream.Recv()"},{"Type":"NodeText","Data":"​ 逐个接收服务器端返回的响应。"}]},{"ID":"20230828111004-pbe5rer","Type":"NodeParagraph","Properties":{"id":"20230828111004-pbe5rer","updated":"20230828111004"},"Children":[{"Type":"NodeText","Data":"这样，你就可以使用 Go 语言来实现 gRPC 的流式输出。服务器以流式方式生成多个响应，并发送给客户端，而客户端则逐个接收和处理这些响应。"}]}]}