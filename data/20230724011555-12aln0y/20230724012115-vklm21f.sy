{"ID":"20230724012115-vklm21f","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f4d6","id":"20230724012115-vklm21f","tags":"Consul","title":"使用consul 进行服务发现","updated":"20230724012253"},"Children":[{"ID":"20230724012120-wuolx8s","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724012120-wuolx8s","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"启动consul的服务"}]},{"ID":"20230724012120-xgq42fx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-xgq42fx","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"consul agent -server -bootstrap-expect=1 -data-dir=/tmp/consul -node=consulServer -ui -config-dir=./consul.d/ -client 0.0.0.0\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-6i03z4o","Type":"NodeParagraph","Properties":{"id":"20230724012120-6i03z4o","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"启动consul后，就需要进行服务注册了"}]},{"ID":"20230724012120-59jqa56","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724012120-59jqa56","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"服务注册"}]},{"ID":"20230724012120-br8oufi","Type":"NodeParagraph","Properties":{"id":"20230724012120-br8oufi","updated":"20230724012253"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"consul的服务注册可用通过一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"json"},{"Type":"NodeText","Data":"​ 配置文件进行配置。我们只需要指定存放的目录，consul启动之后，会根据指定的目录找到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"json"},{"Type":"NodeText","Data":"​的配置信息。"}]},{"ID":"20230724012120-hdi005d","Type":"NodeParagraph","Properties":{"id":"20230724012120-hdi005d","updated":"20230724012249"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在开头，我们指定了"}]},{"ID":"20230724012120-ny6upx9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-ny6upx9","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"-config-dir=./consul.d/\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-ib1n0jt","Type":"NodeParagraph","Properties":{"id":"20230724012120-ib1n0jt","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"作为服务注册的目录，我们需要创建并进入该目录下。 这里有官网给出的配置示例："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.consul.io/docs/discovery/services","TextMarkTextContent":"consul服务发现的json示例"}]},{"ID":"20230724012120-vuu5hhv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-vuu5hhv","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"mkdir cousul.d \u0026\u0026 cd consul.d \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-80js766","Type":"NodeParagraph","Properties":{"id":"20230724012120-80js766","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"参考官网，给出本文的例子："}]},{"ID":"20230724012120-bawx2v5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-bawx2v5","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"{\n  \"service\": {\n    \"id\": \"redis\",\n    \"address\": \"\",        // 默认是本机IP地址\n    \"name\": \"redis\",      // 服务名称\n    \"tags\": [\"primary\"],  // 标签\n    \"port\": 8000          // 端口\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-yndhqch","Type":"NodeParagraph","Properties":{"id":"20230724012120-yndhqch","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"注意：配置好文件后，需要重新启动 consul，或者重新加载："}]},{"ID":"20230724012120-ea3rlmv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-ea3rlmv","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"root@cchui-virtual-machine:~# consul reload\nConfiguration reload triggered\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-hmet7iv","Type":"NodeParagraph","Properties":{"id":"20230724012120-hmet7iv","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"之后进入UI界面后， services 可以看到新注册的服务。"}]},{"ID":"20230724012120-mp5xl5z","Type":"NodeParagraph","Properties":{"id":"20230724012120-mp5xl5z","updated":"20230724012218"},"Children":[{"Type":"NodeText","Data":"此外，也可以使用 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"API 的方式查看注册的服务信息："}]},{"ID":"20230724012120-smr6q7n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-smr6q7n","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"curl localhost:8500/v1/catalog/service/服务名称\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-dknnf5d","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724012120-dknnf5d","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"健康检查"}]},{"ID":"20230724012120-aax20nw","Type":"NodeParagraph","Properties":{"id":"20230724012120-aax20nw","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"健康检查是检查服务是否存活，具体可用参看官网："},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://www.consul.io/docs/discovery/checks","TextMarkTextContent":"Consul的健康检查-Check Definitons"}]},{"ID":"20230724012120-elesjrp","Type":"NodeParagraph","Properties":{"id":"20230724012120-elesjrp","updated":"20230724012221"},"Children":[{"Type":"NodeText","Data":"consul 给出了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"script"},{"Type":"NodeText","Data":"​, "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"HTTP"},{"Type":"NodeText","Data":"​ ,"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TCP"},{"Type":"NodeText","Data":"​ ,"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docker"},{"Type":"NodeText","Data":"​ 等健康检查的定义示例。"}]},{"ID":"20230724012120-gknp0w7","Type":"NodeParagraph","Properties":{"id":"20230724012120-gknp0w7","updated":"20230724012223"},"Children":[{"Type":"NodeText","Data":"需要在配置信息中添加 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"check"},{"Type":"NodeText","Data":"​ 关键字，进行配置，如："}]},{"ID":"20230724012120-8lkv9ak","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-8lkv9ak","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"{\n    \"service\": {\n        \"name\": \"web\",\n        \"tags\": [\"rails\"],\n        \"port\": 80,\n        \"checks\": [{\n            \"id\": \"api\", // 健康检查项的id，唯一\n            \"name\": \"HTTP API on port 5000\", // 检查项的名字\n            \"http\": \"http://localhost:5000/health\", // 定期访问的Url,通过这个url请求结果确定服务是否正常\n            \"tls_skip_verify\": false, // 关闭tls验证\n            \"method\": \"POST\", // 设置http请求方式，默认是GET\n            \"header\": { // 可以自定义请求头，可以不配置\n                \"Content-Type\": [\"application/json\"]\n            },\n            \"interval\": \"10s\", // 定期检查的时间间隔，这里是10秒\n            \"timeout\": \"1s\" // 请求超时时间，1秒\n        }]\n    }\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-u0swmf4","Type":"NodeParagraph","Properties":{"id":"20230724012120-u0swmf4","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"从consul UI上可以看到，服务是不健康的，因为该服务并没有启动"}]},{"ID":"20230724012120-50qnxmn","Type":"NodeParagraph","Properties":{"id":"20230724012120-50qnxmn","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"开启一个简单的web 服务"}]},{"ID":"20230724012120-lrqnahw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-lrqnahw","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/health\", func(writer http.ResponseWriter, request *http.Request) {\n        if _, err := writer.Write([]byte(\"hello world\")); err != nil {\n            log.Panicf(\"/health have err : %s\", err)\n        }\n    })\n\n    if err := http.ListenAndServe(\"127.0.0.1:5000\", nil); err != nil {\n        log.Panicf(\"web err %s\", err)\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-ygqpsyr","Type":"NodeParagraph","Properties":{"id":"20230724012120-ygqpsyr","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"之后再检查，就发现该服务是健康的。"}]},{"ID":"20230724012120-4187vn5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724012120-4187vn5","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"编程实践"}]},{"ID":"20230724012120-dp7d73d","Type":"NodeParagraph","Properties":{"id":"20230724012120-dp7d73d","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这里我们给出简单的示例： 和gRPC 结合，实现一个服务注册、发现的过程。、"}]},{"ID":"20230724012120-dwyrtva","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724012120-dwyrtva","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"实现逻辑"}]},{"ID":"20230724012120-h8x0zom","Type":"NodeParagraph","Properties":{"id":"20230724012120-h8x0zom","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"之前我们写gRPC ，是服务端和客户端直接相连的，客户端直接把gRPC服务端的IP地址直接写死，进行调用，"}]},{"ID":"20230724012120-esfpp7u","Type":"NodeParagraph","Properties":{"id":"20230724012120-esfpp7u","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"现在我们解耦，客户端通过和consul连接，发现gRPC 服务。"}]},{"ID":"20230724012120-2mrp3rp","Type":"NodeParagraph","Properties":{"id":"20230724012120-2mrp3rp","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如下图所示："}]},{"ID":"20230724012120-u5km4hv","Type":"NodeParagraph","Properties":{"id":"20230724012120-u5km4hv","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"dbff1139befefc0ec99981f0fa6026e"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\dbff1139befefc0ec99981f0fa6026e.png?lastModify=1690132878"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230724012120-hcrfhy6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724012120-hcrfhy6","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"服务端"}]},{"ID":"20230724012120-9a0aqkr","Type":"NodeParagraph","Properties":{"id":"20230724012120-9a0aqkr","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"步骤："}]},{"ID":"20230724012120-w21cw3r","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230724012120-w21cw3r","updated":"20230724012120"},"Children":[{"ID":"20230724012120-u05dd4s","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20230724012120-u05dd4s","updated":"20230724012120"},"Children":[{"ID":"20230724012120-ielu9s5","Type":"NodeParagraph","Properties":{"id":"20230724012120-ielu9s5","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始化consul配置"}]}]},{"ID":"20230724012120-6cwf08i","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20230724012120-6cwf08i","updated":"20230724012120"},"Children":[{"ID":"20230724012120-e2r5pln","Type":"NodeParagraph","Properties":{"id":"20230724012120-e2r5pln","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创建consul对象"}]}]},{"ID":"20230724012120-6gd9atw","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20230724012120-6gd9atw","updated":"20230724012120"},"Children":[{"ID":"20230724012120-lnsd2cw","Type":"NodeParagraph","Properties":{"id":"20230724012120-lnsd2cw","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"告诉consul，注册服务的信息"}]}]},{"ID":"20230724012120-t8073wr","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20230724012120-t8073wr","updated":"20230724012120"},"Children":[{"ID":"20230724012120-vk3ca85","Type":"NodeParagraph","Properties":{"id":"20230724012120-vk3ca85","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"注册服务到consul"}]}]},{"ID":"20230724012120-gxqievc","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20230724012120-gxqievc","updated":"20230724012120"},"Children":[{"ID":"20230724012120-hbc0nrr","Type":"NodeParagraph","Properties":{"id":"20230724012120-hbc0nrr","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"编写gRPC的代码"}]}]}]},{"ID":"20230724012120-33d6w8q","Type":"NodeParagraph","Properties":{"id":"20230724012120-33d6w8q","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务端代码："}]},{"ID":"20230724012120-m5ppo28","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-m5ppo28","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    // 初始化consul配置\n    consulConfig := api.DefaultConfig()\n    // consul的IP地址\n    consulConfig.Address = \"192.168.144.128:8500\"  \n    // 创建consul对象\n    consulServer, err := api.NewClient(consulConfig)\n    if err != nil {\n        log.Printf(\"api.NewClient error : %s\", err)\n    }\n    // 告诉consul，注册服务的信息\n    registrationInfo := api.AgentServiceRegistration{\n        ID:      \"gRPC.id\",\n        Name:    \"my gRPC server\",\n        Address: \"192.168.1.40\",   // 本机地址\n        Port:    50051,\n        Check: \u0026api.AgentServiceCheck{\n            CheckID:  \"consul gRPC id\",\n            TCP:      \"192.168.1.40:50051\",  // gRPC服务的调用地址\n            Interval: \"2s\",\n            Timeout:  \"5s\",\n        },\n    }\n    // 注册服务到consul\n    if err := consulServer.Agent().ServiceRegister(\u0026registrationInfo); err != nil {\n        log.Printf(\"consul register error : %s\", err)\n    }\n    ......\n    // 初始化一个gRPC的结构体对象\n    s := grpc.NewServer(grpc.Creds(creds), grpc.UnaryInterceptor(myLogFilter))\n    ......\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-60focvg","Type":"NodeParagraph","Properties":{"id":"20230724012120-60focvg","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"代码注释："}]},{"ID":"20230724012120-05foh81","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-05foh81","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// github.com/hashicorp/consul/api\ntype Config struct {\n\tAddress string //Address 是 Consul 服务器的\t地址 \n\tScheme string //  Scheme 是 Consul 服务器的 URI 方案\n\tDatacenter string //要使用的数据中心。如果未提供，则使用默认代理数据中心。\n\tTransport *http.TransPort\t//Transport 是用于 http 客户端的传输。\n\tHttpClient *http.Client\t//  HttpClient 是要使用的客户端。如果未提供，将使用默认值\n\tHttpAuth *HttpBasicAuth\t\t//用于http访问的身份验证信息\n\tWaitTime time.Duration\n\tToken string\t// token 用于提供每次请求ACL令牌，它覆盖代理的默认令牌。\n\tTokenFile string // TokenFile是包含要用于此客户端的当前令牌的文件。如果提供，则在启动时读取一次，不再读取。\n\tNamespace string\t// 请求发送的命名空间的名称，\n\tPartition string \t// 请求发送的分区的名称\n\tTLSConfig TLSConfig\t// 用于生成一个TLSClientConfig 被用于通过TLS 与consul连接\n}\n\n// DefaultConfig返回客户端的默认配置\nfunc DefaultConfig() *Config\n\nfunc NewClient(config *Config) (*Client,error) // return a new client \n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-mr0fo0l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-mr0fo0l","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// github.com/hashicorp/consul/api\n// 用于注册新的服务端\ntype AgentServiceRegistration struct {\n\tKind              ServiceKind               `json:\",omitempty\"`\n\tID                string                    `json:\",omitempty\"`\n\tName              string                    `json:\",omitempty\"`\n\tTags              []string                  `json:\",omitempty\"`\n\tPort              int                       `json:\",omitempty\"`\n\tAddress           string                    `json:\",omitempty\"`\n\tSocketPath        string                    `json:\",omitempty\"`\n\tTaggedAddresses   map[string]ServiceAddress `json:\",omitempty\"`\n\tEnableTagOverride bool                      `json:\",omitempty\"`\n\tMeta              map[string]string         `json:\",omitempty\"`\n\tWeights           *AgentWeights             `json:\",omitempty\"`\n\tCheck             *AgentServiceCheck\n\tChecks            AgentServiceChecks\n\tProxy             *AgentServiceConnectProxyConfig `json:\",omitempty\"`\n\tConnect           *AgentServiceConnect            `json:\",omitempty\"`\n\tNamespace         string                          `json:\",omitempty\" bexpr:\"-\" hash:\"ignore\"`\n\tPartition         string                          `json:\",omitempty\" bexpr:\"-\" hash:\"ignore\"`\n}\n\nfunc (c *Client) Agent() *Agent\n\n// 使用本地代理来注册新的服务端\nfunc (a *Agent) ServiceRegister(service *AgentServiceRegistration) error\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-p757i4t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-p757i4t","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// google.golang.org/grpc\n// NewServer创建一个gRPC服务器，该服务器没有注册服务，并且还没有开始接受请求。\nfunc NewServer(opt ...ServerOption) *Server\n\n// Creds 返回一个设置服务器连接凭据的 ServerOption \nfunc Creds(c credentials.TransportCredentials) ServerOption\n\n// UnaryInterceptor返回一个ServerOption，该选项为服务器设置UnaryServerInterceptor。只能安装一个一元拦截器。可以在调用者处实现多个拦截器的构造（例如链接）。\nfunc UnaryInterceptor(i UnaryServerInterceptor) ServerOption\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-5t8r6js","Type":"NodeParagraph","Properties":{"id":"20230724012120-5t8r6js","updated":"20230724012232"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"查看consul UI"}]},{"ID":"20230724012120-hu5vvpr","Type":"NodeParagraph","Properties":{"id":"20230724012120-hu5vvpr","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"928ede74da2337a8b142edd91f683ba"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\928ede74da2337a8b142edd91f683ba.png?lastModify=1690132878"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230724012120-b4njygd","Type":"NodeParagraph","Properties":{"id":"20230724012120-b4njygd","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"已经注册上服务。"}]},{"ID":"20230724012120-bev6kbq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724012120-bev6kbq","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"客户端"}]},{"ID":"20230724012120-z0r4fz1","Type":"NodeParagraph","Properties":{"id":"20230724012120-z0r4fz1","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"步骤："}]},{"ID":"20230724012120-3vyzr9c","Type":"NodeList","ListData":{"Typ":1},"Properties":{"id":"20230724012120-3vyzr9c","updated":"20230724012120"},"Children":[{"ID":"20230724012120-275he03","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"MS4=","Num":1},"Properties":{"id":"20230724012120-275he03","updated":"20230724012120"},"Children":[{"ID":"20230724012120-xlfxjr4","Type":"NodeParagraph","Properties":{"id":"20230724012120-xlfxjr4","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"初始化consul配置"}]}]},{"ID":"20230724012120-i80nzsj","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"Mi4=","Num":2},"Properties":{"id":"20230724012120-i80nzsj","updated":"20230724012120"},"Children":[{"ID":"20230724012120-07yu81l","Type":"NodeParagraph","Properties":{"id":"20230724012120-07yu81l","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"创建consul对象"}]}]},{"ID":"20230724012120-2hxdvx4","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"My4=","Num":3},"Properties":{"id":"20230724012120-2hxdvx4","updated":"20230724012120"},"Children":[{"ID":"20230724012120-wz9vrkb","Type":"NodeParagraph","Properties":{"id":"20230724012120-wz9vrkb","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"通过consul，进行服务发现"}]}]},{"ID":"20230724012120-eillnt0","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NC4=","Num":4},"Properties":{"id":"20230724012120-eillnt0","updated":"20230724012120"},"Children":[{"ID":"20230724012120-nicndrl","Type":"NodeParagraph","Properties":{"id":"20230724012120-nicndrl","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"获得一个IP地址，这里可用使用负载均衡"}]}]},{"ID":"20230724012120-arz69pq","Type":"NodeListItem","ListData":{"Typ":1,"Delimiter":46,"Marker":"NS4=","Num":5},"Properties":{"id":"20230724012120-arz69pq","updated":"20230724012120"},"Children":[{"ID":"20230724012120-aspfwnl","Type":"NodeParagraph","Properties":{"id":"20230724012120-aspfwnl","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"编写gRPC的代码"}]}]}]},{"ID":"20230724012120-45xk0x1","Type":"NodeParagraph","Properties":{"id":"20230724012120-45xk0x1","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"客户端代码："}]},{"ID":"20230724012120-hkn3sup","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-hkn3sup","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n......\nvar (\n\taddress     = \"localhost:50051\"\n\tdefaultName = \"world\"\n)\n\nfunc main() {\n\t// 初始化consul配置\n\tconsulConfig := api.DefaultConfig()\n\tconsulConfig.Address = \"192.168.144.128:8500\"\n\t// 创建consul对象\n\tconsulClient, err := api.NewClient(consulConfig)\n\tif err != nil {\n\t\tlog.Printf(\"api.NewClient error : %s\", err)\n\t}\n\t// 服务发现\n\tservers, _, err := consulClient.Health().Service(\"my gRPC server\", \"\", true, nil)\n\tif err != nil {\n\t\tlog.Printf(\"get Health server fail : %s\", err)\n\t}\n\t// 拼接IP地址\n\ttarget := servers[0].Service.Address + \":\" + strconv.Itoa(servers[0].Service.Port)\n\taddress = target\n\t......\n\t// 连接 gRPC 服务器\n\tconn, err := grpc.Dial(address, grpc.WithTransportCredentials(creds), grpc.WithPerRPCCredentials(\u0026auth))\n\t......\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-6hpot1j","Type":"NodeParagraph","Properties":{"id":"20230724012120-6hpot1j","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"上面代码中，用到了这个函数"}]},{"ID":"20230724012120-5ivqfws","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-5ivqfws","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// 从consul服务上获取健康的服务\nfunc (h *Health) Service(service, tag string, passingOnly bool, q *QueryOptions) ([]*ServiceEntry, *QueryMeta, error) {}\n\n// service         ： 服务名称，即注册服务时的服务名\n// tag             ： 标签\n// passingOnly     ： 是否通过健康检查\n// q               ：查询参数，通常传nil\n// []*ServiceEntry ：存储服务的切片，因为注册的服务可能是一个集群（服务相同，IP不同，可用负载均衡选择一个）\n// *QueryMeta      ：额为查询返回的值\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-aj9jcz3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724012120-aj9jcz3","updated":"20230724012120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// github.com/hashicorp/consul/api\n\n// 向 consul API提供客户端\nfunc NewClient(config *Config) (*Client,error)\n\n// 运行状况返回运行状况终结点的句柄 Health returns a handle to the health endpoints\nfunc (c *Client) Health() *Health\n\n// 服务用于查询给定服务的运行状况信息和服务信息。它可以选择只通过运行状况检查对标记或节点进行服务器端过滤。\nfunc (h *Health) Service(service, tag string, passingOnly bool, q *QueryOptions) ([]*ServiceEntry, *QueryMeta, error)\n\n\n// WithPerRPCCredentials返回一个DialOption，该选项设置凭据并在每个出站RPC上放置身份验证状态。\nfunc WithPerRPCCredentials(creds credentials.PerRPCCredentials) DialOption\n\n// WithTransportCredentials返回一个拨号选项，该选项配置连接级安全凭据（例如TLS/SSL）。这不应与WithCredentialsBundle一起使用。\nfunc WithTransportCredentials(creds credentials.TransportCredentials) DialOption\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724012120-7sv9nnp","Type":"NodeParagraph","Properties":{"id":"20230724012120-7sv9nnp","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"之后，启动，连接成功。"}]},{"ID":"20230724012120-1sbfb76","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724012120-1sbfb76","updated":"20230724012120"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20230724012120-ramz53r","Type":"NodeParagraph","Properties":{"id":"20230724012120-ramz53r","updated":"20230724012120"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"本文，先说明了consul 如何进行服务注册，然后是如何进行健康检查，最后使用简单的示例，将 gRPC 和 consul 进行了结合，实现了服务发现和健康检查的示例。"}]}]}