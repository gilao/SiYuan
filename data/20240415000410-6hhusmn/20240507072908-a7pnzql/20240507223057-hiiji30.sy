{"ID":"20240507223057-hiiji30","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f424","id":"20240507223057-hiiji30","title":"第二章 浮点数设计原理与使用方法","type":"doc","updated":"20240604225841"},"Children":[{"ID":"20240507223115-dlprrh6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240507223115-dlprrh6","updated":"20240507223142"},"Children":[{"Type":"NodeText","Data":"2.1 浮点数陷阱"}]},{"ID":"20240507223142-uyr662d","Type":"NodeParagraph","Properties":{"id":"20240507223142-uyr662d","updated":"20240507223149"},"Children":[{"Type":"NodeText","Data":"整数数据类型（如int32、int64）无法表示小数，而浮点数能够在程序中高效表示和计算小数，但是在表示和计算的过程中可能丢失精度。以下面的一段简单程序为例，有人会天真地认为其输出结果是0.9，但实际的输出结果是0.8999999999999999。"}]},{"ID":"20240507223153-7d3142t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240507223153-7d3142t","updated":"20240507223237"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"var f1 float64 = 0.3\nvar f2 float64 = 0.6\nfmt.Println(f1+f2)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240507223349-jn1tjm4","Type":"NodeParagraph","Properties":{"id":"20240507223349-jn1tjm4","updated":"20240507223354"},"Children":[{"Type":"NodeText","Data":"结果的荒诞性告诉我们，必须深入理解浮点数在计算机中的存储方式及性质，才能正确处理数字的计算问题。很多初学者，甚至编程经验很丰富的开发工程师都经常在浮点数上栽跟头。如果对资金等重要数据的运算发生错误，那么可能导致灾难性的后果。本章将深入介绍浮点数的本质及在实践中需要注意的问题。"}]},{"ID":"20240507223408-z25ir97","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240507223408-z25ir97","updated":"20240507223425"},"Children":[{"Type":"NodeText","Data":"2.2 定点数与浮点数"}]},{"ID":"20240507223426-10rnmur","Type":"NodeParagraph","Properties":{"id":"20240507223426-10rnmur","updated":"20240507223443"},"Children":[{"Type":"NodeText","Data":"计算机通过二进制的形式存储数据，然而"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"大多数小数表示成二进制后是近似且无限的。"},{"Type":"NodeText","Data":"以0.1为例，它是一个简单的十进制数，转换为二进制数后却非常复杂——0.0001100110011001100…是一个无限循环的数字。显然不能用数学中的计算方式存储所有的小数，因为有限的空间无法表达无限的结果，计算机必须有其他的机制来处理小数的存储与计算。"}]},{"ID":"20240507223507-ht5zkef","Type":"NodeParagraph","Properties":{"id":"20240507223507-ht5zkef","updated":"20240507223814"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"最简单的表示小数的方法是定点表示法，即用固定的大小来表示整数，剩余部分表示小数。例如，对于一个16位的无符号整数（uint）16，可以用前8位存储整数部分，后8位存储小数部分。"},{"Type":"NodeText","Data":"这样整数部分的表示范围为0～256，小数部分的表示范围为1/256～1。这种表示方式在某些场景可能很适用，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"但是它不适用于所有场景。因为在一些情况下可能整数部分很大，小数部分的位数很少；而在另一些情况下可能整数部分很小，小数部分的位数很多。"},{"Type":"NodeText","Data":"为了解决这一问题，我们自然会想到"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"采用浮点表示法存储数据"},{"Type":"NodeText","Data":"。例如在图2-1中，对于十进制数，可以"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"通过科学计数法表示小数，那么5位数字可以表示的范围为0.00～9.99×10^99。"},{"Type":"NodeText","Data":"这种方式既可以表示很大的整数，也可以表示很多的小数点后的位数。这就是计算机浮点数存储设计的灵感来源。"}]},{"ID":"20240507223734-74k1q3q","Type":"NodeParagraph","Properties":{"id":"20240507223734-74k1q3q","updated":"20240507223734"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240507223734-z4zvz4y.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240507223736-dt5gjvy","Type":"NodeParagraph","Properties":{"id":"20240507223736-dt5gjvy","updated":"20240507223755"},"Children":[{"Type":"NodeText","Data":"Go语言与其他很多语言（如C、C++、Python）一样，使用了IEEE-754浮点数标准存储小数。IEEE-754浮点数标准由电气与电子工程师学会（IEEE）在1985年推出并在之后不断更新。许多硬件浮点数单元（例如intel FPU）使用IEEE-754标准。该标准规定了浮点数的存储、计算、四舍五入、异常处理等一系列规则。"}]},{"ID":"20240507223850-08xn378","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240507223850-08xn378","updated":"20240507223910"},"Children":[{"Type":"NodeText","Data":"2.3 IEEE-754 浮点数标准"}]},{"ID":"20240507223911-d245syb","Type":"NodeParagraph","Properties":{"id":"20240507223911-d245syb","updated":"20240507223919"},"Children":[{"Type":"NodeText","Data":"IEEE-754规范使用以2为底数的指数表示小数，这和使用以10为底数的指数表示法（即科学计数法）非常类似。表2-1给出了几个例子，如0.085可以用指数的形式表示为1.36×2^-4，其中1.36为系数，2为底数，-4为指数。"}]},{"ID":"20240507224016-bf24et8","Type":"NodeParagraph","Properties":{"id":"20240507224016-bf24et8","updated":"20240507224016"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240507224015-wuzevmv.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240507224016-o6gbr00","Type":"NodeParagraph","Properties":{"id":"20240507224016-o6gbr00","updated":"20240507224021"},"Children":[{"Type":"NodeText","Data":"IEEE-754的浮点数存在多种精度。很显然，更多的存储位数可以表达更大的数或更高的精度。在高级语言中一般存在两种精度的浮点数，即大部分硬件浮点数单元支持的32位的单精度浮点数与64位的双精度浮点数。如表2-2所示，两种精度的浮点数具有不同的格式。"}]},{"ID":"20240507224433-545cgmh","Type":"NodeParagraph","Properties":{"id":"20240507224433-545cgmh","updated":"20240507224433"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240507224433-1gxky0d.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240507224434-0nmtxts","Type":"NodeParagraph","Properties":{"id":"20240507224434-0nmtxts","updated":"20240513161603"},"Children":[{"Type":"NodeText","Data":"IEEE-754的浮点数存在多种精度。很显然，更多的存储位数可以表达更大的数或更高的精度。在高级语言中一般存在两种精度的浮点数，即大部分硬件浮点数单元支持的32位的单精度浮点数与64位的双精度浮点数。如表2-2所示，两种精度的浮点数具有不同的格式。"}]},{"ID":"20240513161658-zth6q4a","Type":"NodeParagraph","Properties":{"id":"20240513161658-zth6q4a","updated":"20240513161658"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513161658-3206rs4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513161659-kyu86xr","Type":"NodeParagraph","Properties":{"id":"20240513161659-kyu86xr","updated":"20240513161748"},"Children":[{"Type":"NodeText","Data":"其中，最开头的1位为符号位，1代表负数，0代表正数。符号位之后为指数位，单精度为8位，双精度为11位。指数位存储了指数加上偏移量的值，偏移量是为了表达负数而设计的。例如当指数为-4时，实际存储的值为-4+127=123。剩下的是小数位，小数位存储系数中小数位的准确值或最接近的值，是0到1之间的数。小数位占用的位数最多，直接决定了精度的大小。以数字0.085为例，单精度下的浮点数表示如表2-3所示。"}]},{"ID":"20240513161809-kadzd8z","Type":"NodeParagraph","Properties":{"id":"20240513161809-kadzd8z","updated":"20240513161809"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240513161809-cojft79.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240513161810-wnan33w","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240513161810-wnan33w","updated":"20240514003251"},"Children":[{"Type":"NodeText","Data":"2.3.1 小数部分计算"}]},{"ID":"20240514003251-z7kgdgi","Type":"NodeParagraph","Properties":{"id":"20240514003251-z7kgdgi","updated":"20240514003332"},"Children":[{"Type":"NodeText","Data":"小数部分的计算是最复杂的，其存储的可能是系数的近似值而不是准确值。小数位的每一位代表的都是2的幂，并且指数依次减少1。以0.085的浮点表示法中系数的小数部分（0.36）为例，对应的二进制数为010 1110 0001 0100 0111 1011，其计算步骤如表2-4所示，存储的数值接近0.36。"}]},{"ID":"20240514003644-uarph6z","Type":"NodeParagraph","Properties":{"id":"20240514003644-uarph6z","updated":"20240514003644"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240514003644-jrh1k6n.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240514003701-hoiupog","Type":"NodeParagraph","Properties":{"id":"20240514003701-hoiupog","updated":"20240514003701"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240514003701-l1rvngl.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240514003710-s1sbbdl","Type":"NodeParagraph","Properties":{"id":"20240514003710-s1sbbdl","updated":"20240514003719"},"Children":[{"Type":"NodeText","Data":"那么小数位又是如何计算出来的呢？以数字0.085为例，可以使用“乘2取整法”将该十进制小数转化为二进制小数，即\n0.085（十进制）\n=0.00010101110000101000111101011100001010001111010111000011（二进制）\n=1.0101110000101000111101011100001010001111010111000011×2-4\n由于小数位只有23位，因此四舍五入后为010 1110 0001 0100 0111 1011，这就是最终浮点数的小数部分。"}]},{"ID":"20240514003952-qp70ysb","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20240514003952-qp70ysb","updated":"20240514004007"},"Children":[{"Type":"NodeText","Data":"2.3.2 显示浮点数格式"}]},{"ID":"20240514004007-8q1tist","Type":"NodeParagraph","Properties":{"id":"20240514004007-8q1tist","updated":"20240514004015"},"Children":[{"Type":"NodeText","Data":"Go语言标准库的math包提供了许多有用的计算函数，其中，Float32可以以字符串的形式打印出单精度浮点数的二进制值。下例中的Go代码可以输出0.085的浮点数表示中的符号位、指数位与小数位。"}]},{"ID":"20240514004049-hvt3feg","Type":"NodeParagraph","Properties":{"id":"20240514004049-hvt3feg","updated":"20240514004049"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240514004049-fc63mls.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240514004051-b3f07at","Type":"NodeParagraph","Properties":{"id":"20240514004051-b3f07at","updated":"20240514004059"},"Children":[{"Type":"NodeText","Data":"输出为："}]},{"ID":"20240514004106-gwac8k3","Type":"NodeParagraph","Properties":{"id":"20240514004106-gwac8k3","updated":"20240514004106"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20240514004106-l70lsm4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20240514004106-rtxm7u5","Type":"NodeParagraph","Properties":{"id":"20240514004106-rtxm7u5","updated":"20240514004111"},"Children":[{"Type":"NodeText","Data":"为了验证之前理论的正确性，可以根据二进制值反向推导出其所表示的原始十进制值0.085。思路是将符号位、指数位、小数位分别提取出来，将小数部分中每个为1的bit位都转化为对应的十进制小数，并求和。"}]},{"ID":"20240514004112-z410se8","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240514004112-z410se8","updated":"20240604225141"},"Children":[{"Type":"NodeText","Data":"2.4 最佳实践：判断浮点数为整数"}]},{"ID":"20240604225141-482r5i1","Type":"NodeParagraph","Properties":{"id":"20240604225141-482r5i1","updated":"20240604225841"},"Children":[{"Type":"NodeText","Data":"判断浮点数为整数的重要思路是指数能够弥补小数部分（即指数的值大于或等于小数的位数）。"}]}]}