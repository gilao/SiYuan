{"ID":"20230723214740-b5hhu5m","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f42f","id":"20230723214740-b5hhu5m","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230723214740-b5hhu5m\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230723214746-iu35328\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230723214746-pkk0ls7\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;","tags":"C语言代码,UDP编程","title":"UDP编程","updated":"20230723214755"},"Children":[{"ID":"20230723214746-iu35328","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723214746-iu35328","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"bound_host1.c"}]},{"ID":"20230723214746-3f6xe2j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230723214746-3f6xe2j","updated":"20230723214746"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003carpa/inet.h\u003e\n#include \u003csys/socket.h\u003e\n\n#define BUF_SIZE 30\nvoid error_handling(char *message);\n\nint main(int argc, char *argv[])\n{\n    int sock;\n    char message[BUF_SIZE];\n    struct sockaddr_in my_adr, your_adr;\n    socklen_t adr_sz;\n    int str_len, i;\n    if (argc != 2)\n    {\n        printf(\"Usage : %s \u003cport\u003e\\n\", argv[0]);\n        exit(1);\n    }\n    sock = socket(PF_INET, SOCK_DGRAM, 0);\n    if (sock == -1)\n        error_handling(\"socket() error\");\n\n    memset(\u0026my_adr, 0, sizeof(my_adr));\n    my_adr.sin_family = AF_INET;\n    my_adr.sin_addr.s_addr = htonl(INADDR_ANY);\n    my_adr.sin_port = htons(atoi(argv[1]));\n\n    if (bind(sock, (struct sockaddr *)\u0026my_adr, sizeof(my_adr)) == -1)\n        error_handling(\"bind() error\");\n\n    for (i = 0; i \u003c 3; i++)\n    {\n        sleep(5);\n        adr_sz = sizeof(your_adr);\n        str_len = recvfrom(sock, message, BUF_SIZE, 0,\n                           (struct sockaddr *)\u0026your_adr, \u0026adr_sz);\n        printf(\"Message %d: %s \\n\", i + 1, message);\n    }\n    close(sock);\n    return 0;\n}\n\nvoid error_handling(char *message)\n{\n    fputs(message, stderr);\n    fputc('\\n', stderr);\n    exit(1);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230723214746-smghu74","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723214746-smghu74","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"bound_host2.c"}]},{"ID":"20230723214746-08k8bib","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230723214746-08k8bib","updated":"20230723214746"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003carpa/inet.h\u003e\n#include \u003csys/socket.h\u003e\n\n#define BUF_SIZE 30\nvoid error_handling(char *message);\n\nint main(int argc, char *argv[])\n{\n    int sock;\n    char msg1[] = \"Hi!\";\n    char msg2[] = \"I'm another UDP host!\";\n    char msg3[] = \"Nice to meet you\";\n\n    struct sockaddr_in your_adr;\n    socklen_t your_adr_sz;\n    if (argc != 3)\n    {\n        printf(\"Usage : %s \u003cIP\u003e \u003cport\u003e\\n\", argv[0]);\n        exit(1);\n    }\n    sock = socket(PF_INET, SOCK_DGRAM, 0);\n    if (sock == -1)\n        error_handling(\"socket() error\");\n    memset(\u0026your_adr, 0, sizeof(your_adr));\n    your_adr.sin_family = AF_INET;\n    your_adr.sin_addr.s_addr = inet_addr(argv[1]);\n    your_adr.sin_port = htons(atoi(argv[2]));\n\n    sendto(sock, msg1, sizeof(msg1), 0,\n           (struct sockaddr *)\u0026your_adr, sizeof(your_adr));\n    sendto(sock, msg2, sizeof(msg2), 0,\n           (struct sockaddr *)\u0026your_adr, sizeof(your_adr));\n    sendto(sock, msg3, sizeof(msg3), 0,\n           (struct sockaddr *)\u0026your_adr, sizeof(your_adr));\n    close(sock);\n    return 0;\n}\n\nvoid error_handling(char *message)\n{\n    fputs(message, stderr);\n    fputc('\\n', stderr);\n    exit(1);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230723214746-iywymbd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723214746-iywymbd","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"编译结果"}]},{"ID":"20230723214746-zb0chf0","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723214746-zb0chf0","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"bound_host2"}]},{"ID":"20230723214746-m3o364a","Type":"NodeParagraph","Properties":{"id":"20230723214746-m3o364a","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230426182413244"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20230426182413244.png?lastModify=1690120062"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230723214746-gspmlqs","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723214746-gspmlqs","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"bound_host1"}]},{"ID":"20230723214746-pkk0ls7","Type":"NodeParagraph","Properties":{"id":"20230723214746-pkk0ls7","updated":"20230723214746"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230426182421019"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20230426182421019.png?lastModify=1690120062"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]}