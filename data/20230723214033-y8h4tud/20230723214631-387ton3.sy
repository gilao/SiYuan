{"ID":"20230723214631-387ton3","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f42f","id":"20230723214631-387ton3","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230723214631-387ton3\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230723214644-lqfb845\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230723214654-ymzkye6\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;","tags":"C语言代码,UDP编程","title":"UDP 回声编程","updated":"20230723214711"},"Children":[{"ID":"20230723214644-lqfb845","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723214644-lqfb845","updated":"20230723214644"},"Children":[{"Type":"NodeText","Data":"uecho_server.c"}]},{"ID":"20230723214644-5r8l8ob","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230723214644-5r8l8ob","updated":"20230723214644"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003carpa/inet.h\u003e\n#include \u003csys/socket.h\u003e\n\n#define BUF_SIZE 30\nvoid error_handling(char *message);\n\nint main(int argc, char *argv[])\n{\n    int serv_sock;\n    char message[BUF_SIZE];\n    int str_len;\n    socklen_t clnt_adr_sz;\n\n    struct sockaddr_in serv_adr, clnt_adr;\n    if (argc != 2)\n    {\n        printf(\"Usage : %s \u003cport\u003e\\n\", argv[0]);\n        exit(1);\n    }\n    //创建 UDP 套接字后，向 socket 的第二个参数传递 SOCK_DGRAM\n    serv_sock = socket(PF_INET, SOCK_DGRAM, 0);\n    if (serv_sock == -1)\n        error_handling(\"UDP socket creation eerror\");\n\n    memset(\u0026serv_adr, 0, sizeof(serv_adr));\n    serv_adr.sin_family = AF_INET;\n    serv_adr.sin_addr.s_addr = htonl(INADDR_ANY);\n    serv_adr.sin_port = htons(atoi(argv[1]));\n    //分配地址接受数据，不限制数据传输对象\n    if (bind(serv_sock, (struct sockaddr *)\u0026serv_adr, sizeof(serv_adr)) == -1)\n        error_handling(\"bind() error\");\n\n    while (1)\n    {\n        clnt_adr_sz = sizeof(clnt_adr);\n        str_len = recvfrom(serv_sock, message, BUF_SIZE, 0,\n                           (struct sockaddr *)\u0026clnt_adr, \u0026clnt_adr_sz);\n        //通过上面的函数调用同时获取数据传输端的地址。正是利用该地址进行逆向重传\n        printf(\"Message from server: %s\\n\", message);\n        sendto(serv_sock, message, str_len, 0,\n               (struct sockaddr *)\u0026clnt_adr, clnt_adr_sz);\n    }\n    close(serv_sock);\n    return 0;\n}\n\nvoid error_handling(char *message)\n{\n    fputs(message, stderr);\n    fputc('\\n', stderr);\n    exit(1);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230723214644-9imw13g","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723214644-9imw13g","updated":"20230723214644"},"Children":[{"Type":"NodeText","Data":"uecho_client.c"}]},{"ID":"20230723214644-l454qud","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230723214644-l454qud","updated":"20230723214644"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"#include \u003cstdio.h\u003e\n#include \u003cstdlib.h\u003e\n#include \u003cstring.h\u003e\n#include \u003cunistd.h\u003e\n#include \u003carpa/inet.h\u003e\n#include \u003csys/socket.h\u003e\n\n#define BUF_SIZE 30\nvoid error_handling(char *message);\n\nint main(int argc, char *argv[])\n{\n    int sock;\n    char message[BUF_SIZE];\n    int str_len;\n    socklen_t adr_sz;\n\n    struct sockaddr_in serv_adr, from_adr;\n    if (argc != 3)\n    {\n        printf(\"Usage : %s \u003cIP\u003e \u003cport\u003e\\n\", argv[0]);\n        exit(1);\n    }\n    //创建 UDP 套接字\n    sock = socket(PF_INET, SOCK_DGRAM, 0);\n    if (sock == -1)\n        error_handling(\"socket() error\");\n\n    memset(\u0026serv_adr, 0, sizeof(serv_adr));\n    serv_adr.sin_family = AF_INET;\n    serv_adr.sin_addr.s_addr = inet_addr(argv[1]);\n    serv_adr.sin_port = htons(atoi(argv[2]));\n\n    while (1)\n    {\n        fputs(\"Insert message(q to quit): \", stdout);\n        fgets(message, sizeof(message), stdin);\n        if (!strcmp(message, \"q\\n\") || !strcmp(message, \"Q\\n\"))\n            break;\n        //向服务器传输数据,会自动给自己分配IP地址和端口号\n        sendto(sock, message, strlen(message), 0,\n               (struct sockaddr *)\u0026serv_adr, sizeof(serv_adr));\n        adr_sz = sizeof(from_adr);\n        str_len = recvfrom(sock, message, BUF_SIZE, 0,\n                           (struct sockaddr *)\u0026from_adr, \u0026adr_sz);\n        message[str_len] = 0;\n        printf(\"Message from server: %s\\n\", message);\n    }\n    close(sock);\n    return 0;\n}\n\nvoid error_handling(char *message)\n{\n    fputs(message, stderr);\n    fputc('\\n', stderr);\n    exit(1);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230723214644-dogn2hz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230723214644-dogn2hz","updated":"20230723214644"},"Children":[{"Type":"NodeText","Data":"编译结果"}]},{"ID":"20230723214644-0w67kll","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723214644-0w67kll","updated":"20230723214644"},"Children":[{"Type":"NodeText","Data":"uecho_client端"}]},{"ID":"20230723214644-hijxpva","Type":"NodeParagraph","Properties":{"id":"20230723214644-hijxpva","updated":"20230723214644"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230426183709190"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20230426183709190.png?lastModify=1690119995"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230723214644-cym3b1h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723214644-cym3b1h","updated":"20230723214644"},"Children":[{"Type":"NodeText","Data":"uecho_server端"}]},{"ID":"20230723214654-ymzkye6","Type":"NodeParagraph","Properties":{"id":"20230723214654-ymzkye6","updated":"20230723214654"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230723214654-pjq3h4x.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]}