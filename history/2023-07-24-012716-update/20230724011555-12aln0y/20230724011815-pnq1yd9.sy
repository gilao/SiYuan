{"ID":"20230724011815-pnq1yd9","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f330","id":"20230724011815-pnq1yd9","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724011815-pnq1yd9\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724011819-0dfxg1v\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724011819-0dfxg1v\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724011819-0dfxg1v\u0026quot;,\u0026quot;focusStart\u0026quot;:14,\u0026quot;focusEnd\u0026quot;:14\u0026#125;","tags":"Consul,Go 代码","title":"Consul 服务注册、服务发现、配置共享","updated":"20230724011840"},"Children":[{"ID":"20230724011819-0dfxg1v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724011819-0dfxg1v","updated":"20230724011827"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n    \"net\"\n    \"github.com/gin-gonic/gin\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    consulapi \"github.com/hashicorp/consul/api\"\n)\nconst (\n    consulAddress = \"192.168.100.19:8500\"\n    serviceId     = \"111\"\n)\nfunc main() {\n    r := gin.Default()\n    // consul健康检查回调函数\n    r.GET(\"/\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\n            \"message\": \"ok\",\n        })\n    })\n    go http.ListenAndServe(\":8081\", r)\n    // 注册服务到consul\n    ConsulRegister()\n    // 从consul中发现服务\n    ConsulFindServer()\n    ConsulCheckHeath()\n    ConsulKVTest()\n    // 取消consul注册的服务\n    //ConsulDeRegister()\n    var str string\n    fmt.Scan(\u0026str)\n}\n// 注册服务到consul\nfunc ConsulRegister() {\n    // 创建连接consul服务配置\n    config := consulapi.DefaultConfig()\n    config.Address = consulAddress\n    client, err := consulapi.NewClient(config)\n    if err != nil {\n        log.Fatal(\"consul client error : \", err)\n    }\n    // 创建注册到consul的服务到\n    registration := new(consulapi.AgentServiceRegistration)\n    registration.ID = serviceId                    // 服务节点的名称\n    registration.Name = \"go-consul-test\"           // 服务名称\n    registration.Port = 8081                       // 服务端口\n    registration.Tags = []string{\"go-consul-test\"} // tag，可以为空\n    registration.Address = \"192.168.3.42\"          // 服务 IP 要确保consul可以访问这个ip\n    // 增加consul健康检查回调函数\n    check := new(consulapi.AgentServiceCheck)\n    check.HTTP = fmt.Sprintf(\"http://%s:%d\", registration.Address, registration.Port)\n    check.Timeout = \"5s\"\n    check.Interval = \"5s\"                        // 健康检查间隔\n    check.DeregisterCriticalServiceAfter = \"30s\" // 故障检查失败30s后 consul自动将注册服务删除\n    registration.Check = check\n    // 注册服务到consul\n    err = client.Agent().ServiceRegister(registration)\n    if err == nil {\n        fmt.Println(\"ConsulRegister done\")\n    }\n}\n// 取消consul注册的服务\nfunc ConsulDeRegister() {\n    // 创建连接consul服务配置\n    config := consulapi.DefaultConfig()\n    config.Address = consulAddress\n    client, err := consulapi.NewClient(config)\n    if err != nil {\n        log.Fatal(\"consul client error : \", err)\n    }\n    client.Agent().ServiceDeregister(serviceId)\n}\n// 从consul中发现服务\nfunc ConsulFindServer() {\n    // 创建连接consul服务配置\n    config := consulapi.DefaultConfig()\n    config.Address = consulAddress\n    client, err := consulapi.NewClient(config)\n    if err != nil {\n        log.Fatal(\"consul client error : \", err)\n    }\n    // 获取所有service\n    services, _ := client.Agent().Services()\n    for _, value := range services {\n        fmt.Println(\"address:\", value.Address)\n        fmt.Println(\"port:\", value.Port)\n    }\n    fmt.Println(\"=================================\")\n    // 获取指定service\n    service, _, err := client.Agent().Service(serviceId, nil)\n    if err == nil {\n        fmt.Println(\"address:\", service.Address)\n        fmt.Println(\"port:\", service.Port)\n    }\n    if err == nil {\n        fmt.Println(\"ConsulFindServer done\")\n    }\n}\nfunc ConsulCheckHeath() {\n    // 创建连接consul服务配置\n    config := consulapi.DefaultConfig()\n    config.Address = consulAddress\n    client, err := consulapi.NewClient(config)\n    if err != nil {\n        log.Fatal(\"consul client error : \", err)\n    }\n    // 健康检查\n    a, b, _ := client.Agent().AgentHealthServiceByID(serviceId)\n    fmt.Println(\"val1:\", a)\n    fmt.Println(\"val2:\", b)\n    fmt.Println(\"ConsulCheckHeath done\")\n}\nfunc ConsulKVTest() {\n    // 创建连接consul服务配置\n    config := consulapi.DefaultConfig()\n    config.Address = consulAddress\n    client, err := consulapi.NewClient(config)\n    if err != nil {\n        log.Fatal(\"consul client error : \", err)\n    }\n    // KV, put值\n    values := \"test\"\n    key := \"go-consul-test\"\n    client.KV().Put(\u0026consulapi.KVPair{Key: key, Flags: 0, Value: []byte(values)}, nil)\n    // KV get值\n    data, _, _ := client.KV().Get(key, nil)\n    fmt.Println(\"data:\", string(data.Value))\n    // KV list\n    datas, _, _ := client.KV().List(\"go\", nil)\n    for _, value := range datas {\n        fmt.Println(\"val:\", value)\n    }\n    keys, _, _ := client.KV().Keys(\"go\", \"\", nil)\n    fmt.Println(\"key:\", keys)\n    fmt.Println(\"ConsulKVTest done\")\n}\nfunc localIP() string {\n    addrs, err := net.InterfaceAddrs()\n    if err != nil {\n        return \"\"\n    }\n    for _, address := range addrs {\n        if ipnet, ok := address.(*net.IPNet); ok \u0026\u0026 !ipnet.IP.IsLoopback() {\n            if ipnet.IP.To4() != nil {\n                return ipnet.IP.String()\n            }\n        }\n    }\n    return \"\"\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}