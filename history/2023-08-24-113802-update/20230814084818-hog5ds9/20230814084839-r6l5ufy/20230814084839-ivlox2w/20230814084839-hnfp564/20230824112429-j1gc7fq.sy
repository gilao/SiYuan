{"ID":"20230824112429-j1gc7fq","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230824112429-j1gc7fq","title":"2023-08-24","updated":"20230824113353"},"Children":[{"ID":"20230824112429-ql973tw","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230824112429-ql973tw","updated":"20230824112508"},"Children":[{"Type":"NodeText","Data":"gpt 文件的问题"}]},{"ID":"20230824112508-i1m2xhz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230824112508-i1m2xhz","updated":"20230824112602"},"Children":[{"Type":"NodeText","Data":"article_completion 实例化就是给相应的参数就可以实例化成功吗，不需要调用什么方法吗"}]},{"ID":"20230824112737-k7jffcf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230824112737-k7jffcf","updated":"20230824113046"},"Children":[{"Type":"NodeText","Data":"每次对话是否为调用generate即可，需要将上次调用的历史记录一起放到generate的text中吗"}]},{"ID":"20230824112952-0m4y1md","Type":"NodeParagraph","Properties":{"id":"20230824112952-0m4y1md"}},{"ID":"20230824112953-q3sdn7p","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230824112953-q3sdn7p","updated":"20230824113021"},"Children":[{"Type":"NodeText","Data":"gpt.py 中ArticleCompletion的类解析"}]},{"ID":"20230824113340-m2noee7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230824113340-m2noee7","updated":"20230824113353"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class ArticleCompletion(AutoRegressiveDecoder):\n\n    def __init__(self, config_path, checkpoint_path, dict_path):\n        self.model = build_transformer_model(\n            config_path=config_path, checkpoint_path=checkpoint_path, model='gpt2_ml'\n        )\n\n        self.tokenizer = Tokenizer(\n            dict_path, token_start=None, token_end=None, do_lower_case=True\n        )\n\n    @AutoRegressiveDecoder.wraps(default_rtype='probas')\n    def predict(self, inputs, output_ids, states):\n        token_ids = np.concatenate([inputs[0], output_ids], 1)\n        return self.last_token(self.model).predict(token_ids)\n\n    def generate(self, text, n=1, topp=0.95):\n        token_ids, _ = self.tokenizer.encode(text)\n        results = self.random_sample([token_ids], n, topp=topp)  # 基于随机采样\n        return [text + self.tokenizer.decode(ids) for ids in results]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230824112956-rdnqwdh","Type":"NodeParagraph","Properties":{"id":"20230824112956-rdnqwdh","updated":"20230824112956"},"Children":[{"Type":"NodeText","Data":"这段代码定义了一个名为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ArticleCompletion"},{"Type":"NodeText","Data":"​的类，它继承自"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"AutoRegressiveDecoder"},{"Type":"NodeText","Data":"​类。该类用于文章自动补全的任务。"}]},{"ID":"20230824112956-hdpzj60","Type":"NodeParagraph","Properties":{"id":"20230824112956-hdpzj60","updated":"20230824112956"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"__init__"},{"Type":"NodeText","Data":"​方法中，初始化了模型和分词器。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"build_transformer_model"},{"Type":"NodeText","Data":"​函数用于构建基于GPT-2模型的文本生成模型，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Tokenizer"},{"Type":"NodeText","Data":"​用于将文本转换为模型可接受的输入。"}]},{"ID":"20230824112956-pfcokbu","Type":"NodeParagraph","Properties":{"id":"20230824112956-pfcokbu","updated":"20230824112956"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"predict"},{"Type":"NodeText","Data":"​方法是一个装饰器函数，用于预测下一个词的概率分布。它接受输入、输出序列和状态作为参数，并返回下一个词的概率分布。"}]},{"ID":"20230824112956-63zih4b","Type":"NodeParagraph","Properties":{"id":"20230824112956-63zih4b","updated":"20230824112956"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"generate"},{"Type":"NodeText","Data":"​方法用于生成文章补全的结果。它接受一个文本输入和生成数量"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"​作为参数，通过随机采样的方式生成补全的结果。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"random_sample"},{"Type":"NodeText","Data":"​函数接受输入序列和采样数量，并返回生成的结果。"}]},{"ID":"20230824112956-ggahukc","Type":"NodeParagraph","Properties":{"id":"20230824112956-ggahukc","updated":"20230824112956"},"Children":[{"Type":"NodeText","Data":"整体而言，这段代码实现了一个使用GPT-2模型进行文章自动补全的功能，并提供了生成补全结果的方法。"}]},{"ID":"20230824113338-2rvblkt","Type":"NodeParagraph","Properties":{"id":"20230824113338-2rvblkt"}}]}