{"ID":"20230724231512-69dhak1","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f9c7","id":"20230724231512-69dhak1","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724231512-69dhak1\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724231513-zhegkes\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231120155610-pnav15u\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724231513-zhegkes\u0026quot;,\u0026quot;focusStart\u0026quot;:1,\u0026quot;focusEnd\u0026quot;:1\u0026#125;","tags":"公众号-小徐先生的编程世界,设计模式-观察者模式","title":"2-Go 观察者模式","updated":"20231120162054"},"Children":[{"ID":"20230724231513-zhegkes","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231513-zhegkes","updated":"20231120155340"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/QOXh86eX8z5Ts4O1pky44g","TextMarkTextContent":"Go 观察者模式"},{"Type":"NodeText","Data":"原理介绍"}]},{"ID":"20231120155358-pbzz5ab","Type":"NodeParagraph","Properties":{"id":"20231120155358-pbzz5ab","updated":"20231120155608"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231120155358-116vk3c.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231120155553-wc4q0kl","Type":"NodeParagraph","Properties":{"id":"20231120155553-wc4q0kl","updated":"20231120155601"},"Children":[{"Type":"NodeText","Data":"本期基于 go 语言和大家探讨设计模式中的观察者模式. 观察者模式适用于多对一的订阅/发布场景.\n• ”多“：指的是有多名观察者\n• ”一“：指的是有一个被观察事物\n• ”订阅“：指的是观察者时刻关注着事物的动态\n• ”发布“：指的是事物状态发生变化时是透明公开的，能够正常进入到观察者的视线"}]},{"ID":"20231120155610-pnav15u","Type":"NodeParagraph","Properties":{"id":"20231120155610-pnav15u","updated":"20231120155622"},"Children":[{"Type":"NodeText","Data":"在上述场景中，我们了解到核心对象有两类，一类是“观察者”，一类是“被观察的事物”，且两者间在数量上存在多对一的映射关系."}]},{"ID":"20231120160813-lvav3n8","Type":"NodeParagraph","Properties":{"id":"20231120160813-lvav3n8","updated":"20231120160813"},"Children":[{"Type":"NodeText","Data":"在具体作编程实现时，上述场景的实现思路可以是百花齐放的，而观察者模式只是为我们提供了一种相对规范的设计实现思路，其遵循的核心宗旨是实现“观察者”与“被观察对象”之间的解耦，并将其设计为通用的模块，便于后续的扩展和复用."}]},{"ID":"20231120160813-0f7ofpg","Type":"NodeParagraph","Properties":{"id":"20231120160813-0f7ofpg","updated":"20231120160813"},"Children":[{"Type":"NodeText","Data":"学习设计模式时，我们脑海中需要中需要明白，教条是相对刻板的，而场景和问题则是灵活多变的，在工程实践中，我们避免生搬硬套，要做到因地制宜，随机应变."}]},{"ID":"20231120161646-d3ale6e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231120161646-d3ale6e","updated":"20231120161653"},"Children":[{"Type":"NodeText","Data":"代码实践"}]},{"ID":"20231120161953-a5tre11","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231120161953-a5tre11","updated":"20231120161958"},"Children":[{"Type":"NodeText","Data":"核心角色"}]},{"ID":"20231120162029-fn5890l","Type":"NodeParagraph","Properties":{"id":"20231120162029-fn5890l","updated":"20231120162034"},"Children":[{"Type":"NodeText","Data":"在观察者模式中，核心的角色包含三类：\n• Observer：观察者. 指的是关注事物动态的角色\n• Event：事物的变更事件. 其中 Topic 标识了事物的身份以及变更的类型，Val 是变更详情\n• EventBus：事件总线. 位于观察者与事物之间承上启下的代理层. 负责维护管理观察者，并且在事物发生变更时，将情况同步给每个观察者."}]},{"ID":"20231120162054-ru11prc","Type":"NodeParagraph","Properties":{"id":"20231120162054-ru11prc","updated":"20231120162054"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20231120162054-7m21yl5.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]}]}