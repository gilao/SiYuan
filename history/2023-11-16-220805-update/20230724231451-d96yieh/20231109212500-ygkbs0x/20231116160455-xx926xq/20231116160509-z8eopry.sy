{"ID":"20231116160509-z8eopry","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231116160509-z8eopry","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231116160509-z8eopry\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231116160520-55lfp8g\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231116160509-0dmdc2w\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231116160520-55lfp8g\u0026quot;,\u0026quot;focusStart\u0026quot;:27,\u0026quot;focusEnd\u0026quot;:27\u0026#125;","title":"Gin 框架如何处理 painc","updated":"20231116220500"},"Children":[{"ID":"20231116215158-py4ihe3","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231116215158-py4ihe3","updated":"20231116215207"},"Children":[{"Type":"NodeText","Data":"painc 的发生："}]},{"ID":"20231116215054-bont0pw","Type":"NodeParagraph","Properties":{"id":"20231116215054-bont0pw","updated":"20231116215149"},"Children":[{"Type":"NodeText","Data":"在golang中，如果在子协程中遇到 panic，那么主协程也会被终止。"}]},{"ID":"20231116215150-79jmmrp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231116215150-79jmmrp","updated":"20231116215313"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\n    // 在子协程中引起panic，主协程也会退出\n\tgo func() {\n\t\tpanic(\"hello world\")\n\t}()\n  \n\t// Listen and Server in 0.0.0.0:8080\n\tr.Run(\":8080\")\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231116215329-8z4ydof","Type":"NodeParagraph","Properties":{"id":"20231116215329-8z4ydof","updated":"20231116220052"},"Children":[{"Type":"NodeText","Data":"panic被描述为不可处理的错误。在web服务中就是服务会崩溃。当然，这在生产环境下是不可接受的。那么，如何能够做到发生panic时技能捕获该panic又能让服务继续健康运行呢？"}]},{"ID":"20231116220104-68731az","Type":"NodeParagraph","Properties":{"id":"20231116220104-68731az","updated":"20231116220127"},"Children":[{"Type":"NodeText","Data":"这就是golang中提供的recover函数了。"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-font-background3); color: var(--b3-card-warning-color);"},"TextMarkType":"text strong","TextMarkTextContent":"recover函数能够捕获Panic错误并恢复程序的正常运行。 "},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-font-background3); color: var(--b3-card-warning-color);\"}"},{"Type":"NodeText","Data":"接下来，我们看下recover函数在gin框架中是如何应用的。"}]},{"ID":"20231116220323-a6ohn6n","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231116220323-a6ohn6n","updated":"20231116220342"},"Children":[{"Type":"NodeText","Data":"Recovery 中间件"}]},{"ID":"20231116220451-ungncn3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231116220451-ungncn3","updated":"20231116220500"},"Children":[{"Type":"NodeText","Data":"Recovery 中间件"}]},{"ID":"20231116220106-6opdhnz","Type":"NodeParagraph","Properties":{"id":"20231116220106-6opdhnz","updated":"20231116220200"},"Children":[{"Type":"NodeText","Data":"首先，要提到的就是gin框架中的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"recovery中间件"},{"Type":"NodeText","Data":"。在gin中，是通过使用该中间件来捕获panic，并保证服务不down机的。 "},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-font-background6);"},"TextMarkType":"text","TextMarkTextContent":"如果使用gin.Default()函数进行构建gin对象，那么默认就注册了Recovery中间件。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-font-background6);\"}"}]},{"ID":"20231116220211-37ndhwp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231116220211-37ndhwp","updated":"20231116220253"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func Default() *Engine {\n\tdebugPrintWARNINGDefault()\n\tengine := New()\n    //  注册了Recovery中间件\n\tengine.Use(Logger(), Recovery())\n\treturn engine\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231116220212-pf8u1cq","Type":"NodeParagraph","Properties":{"id":"20231116220212-pf8u1cq","updated":"20231116220423"},"Children":[{"Type":"NodeText","Data":"其次，我们看看 Recovery() 中间件都做了什么"}]},{"ID":"20231116220424-ycnn0y3","Type":"NodeParagraph","Properties":{"id":"20231116220424-ycnn0y3","updated":"20231116220440"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recovery()"},{"Type":"NodeText","Data":"​ 函数如下"}]}]}