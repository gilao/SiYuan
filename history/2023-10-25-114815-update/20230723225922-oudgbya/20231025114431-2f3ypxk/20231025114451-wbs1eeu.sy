{"ID":"20231025114451-wbs1eeu","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231025114451-wbs1eeu","tags":"go,时间轮算法,缓存,redis","title":"基于 golang 从零到一实现时间轮算法","updated":"20231025114658"},"Children":[{"ID":"20231025114451-y8nos90","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231025114451-y8nos90","updated":"20231025114554"},"Children":[{"Type":"NodeText","Data":"前言"}]},{"ID":"20231025114554-bew465x","Type":"NodeParagraph","Properties":{"id":"20231025114554-bew465x","updated":"20231025114559"},"Children":[{"Type":"NodeText","Data":"如何基于 golang 从零到一实现 redis."}]},{"ID":"20231025114652-2vzeaz3","Type":"NodeParagraph","Properties":{"id":"20231025114652-2vzeaz3","updated":"20231025114658"},"Children":[{"Type":"NodeText","Data":"这里选择的学习素材是 hdt3213 大佬于 github 上开源的 godis 项目. 在大佬的实现中，充分利用了 golang 的特性，将 redis 存储层由单线程模型转为并发模型，其中在实现数据的 expire 机制时，采用的是单机时间轮模型进行过期数据的删除操作."}]}]}