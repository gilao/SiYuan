{"ID":"20230724231414-f1rptf8","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231414-f1rptf8","title":"Go bufio包","updated":"20230724231414"},"Children":[{"ID":"20230724231415-5t4lbvi","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231415-5t4lbvi","updated":"20230724231415"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"Go bufio包"}]},{"ID":"20230724231416-h4mfvp9","Type":"NodeParagraph","Properties":{"id":"20230724231416-h4mfvp9","updated":"20230724231416"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//golang.org/pkg/bufio/","TextMarkTextContent":"bufio"},{"Type":"NodeText","Data":" 用来帮助处理 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//www.quora.com/In-C-what-does-buffering-I-O-or-buffered-I-O-mean/answer/Robert-Love-1","TextMarkTextContent":"I/O 缓存"},{"Type":"NodeText","Data":"。 我们将通过一些示例来熟悉其为我们提供的：Reader, Writer and Scanner 等一系列功能"}]},{"ID":"20230724231417-wgb962s","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231417-wgb962s","updated":"20230724231417"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"bufio.Writer"}]},{"ID":"20230724231418-567k2py","Type":"NodeParagraph","Properties":{"id":"20230724231418-567k2py","updated":"20230724231418"},"Children":[{"Type":"NodeText","Data":"多次进行小量的写操作会影响程序性能。每一次写操作最终都会体现为系统层调用，频繁进行该操作将有可能对 CPU 造成伤害。而且很多硬件设备更适合处理块对齐的数据，例如硬盘。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为了减少进行多次写操作所需的开支，golang 提供了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//golang.org/pkg/bufio/%23Writer","TextMarkTextContent":"bufio.Writer"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"。数据将不再直接写入目的地(实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//golang.org/pkg/io/%23Writer","TextMarkTextContent":"io.Writer"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 接口)，而是先写入缓存，当缓存写满后再统一写入目的地："}]},{"ID":"20230724231419-0tryklc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231419-0tryklc","updated":"20230724231419"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"producer --\u003e buffer --\u003e io.Writer\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231420-2rvjxzf","Type":"NodeParagraph","Properties":{"id":"20230724231420-2rvjxzf","updated":"20230724231420"},"Children":[{"Type":"NodeText","Data":"下面具体看一下在9次写入操作中(每次写入一个字符)具有4个字符空间的缓存是如何工作的："}]},{"ID":"20230724231421-wy5xept","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231421-wy5xept","updated":"20230724231421"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"producer        buffer       destination (io.Writer)\n   a    -----\u003e    a\n   b    -----\u003e    ab\n   c    -----\u003e    abc\n   d    -----\u003e    abcd\n   e    -----\u003e    e      -----\u003e   abcd\n   f    -----\u003e    ef\n   g    -----\u003e    efg\n   h    -----\u003e    efgh\n   i    -----\u003e    i      -----\u003e   abcdefgh\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231422-1hcrv26","Type":"NodeParagraph","Properties":{"id":"20230724231422-1hcrv26","updated":"20230724231422"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"bufio.Writer"},{"Type":"NodeText","Data":" 底层使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[]byte"},{"Type":"NodeText","Data":" 进行缓存"}]},{"ID":"20230724231423-qt23my0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231423-qt23my0","updated":"20230724231423"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer int\nfunc (*Writer) Write(p []byte) (n int, err error) {\n    fmt.Println(len(p))\n    return len(p), nil\n}\nfunc main() {\n    fmt.Println(\"Unbuffered I/O\")\n    w := new(Writer)\n    w.Write([]byte{'a'})\n    w.Write([]byte{'b'})\n    w.Write([]byte{'c'})\n    w.Write([]byte{'d'})\n    fmt.Println(\"Buffered I/O\")\n    bw := bufio.NewWriterSize(w, 3)\n    bw.Write([]byte{'a'})\n    bw.Write([]byte{'b'})\n    bw.Write([]byte{'c'})\n    bw.Write([]byte{'d'})\n    err := bw.Flush()\n    if err != nil {\n        panic(err)\n    }\n}\nUnbuffered I/O\n1\n1\n1\n1\nBuffered I/O\n3\n1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231424-ntxqeg1","Type":"NodeParagraph","Properties":{"id":"20230724231424-ntxqeg1","updated":"20230724231424"},"Children":[{"Type":"NodeText","Data":"没有被缓存的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"I/O"},{"Type":"NodeText","Data":"：意味着每一次写操作都将直接写入目的地。我们进行4次写操作，每次写操作都映射为对 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Write"},{"Type":"NodeText","Data":" 的调用，调用时传入的参数为一个长度为1的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"byte"},{"Type":"NodeText","Data":" 切片。"}]},{"ID":"20230724231425-3gnhmzs","Type":"NodeParagraph","Properties":{"id":"20230724231425-3gnhmzs","updated":"20230724231425"},"Children":[{"Type":"NodeText","Data":"使用了缓存的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"I/O"},{"Type":"NodeText","Data":"：我们使用三个字节长度的缓存来存储数据，当缓存满时进行一次 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"flush"},{"Type":"NodeText","Data":" 操作(将缓存中的数据进行处理)。前三次写入写满了缓存。第四次写入时检测到缓存没有剩余空间，所以将缓存中的积累的数据写出。字母 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"d"},{"Type":"NodeText","Data":" 被存储了，但在此之前 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Flush"},{"Type":"NodeText","Data":" 被调用以腾出空间。当缓存被写到末尾时，缓存中未被处理的数据需要被处理。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Writer"},{"Type":"NodeText","Data":" 仅在缓存充满或者显式调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Flush"},{"Type":"NodeText","Data":" 方法时处理(发送)数据。"}]},{"ID":"20230724231426-cnsj3td","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231426-cnsj3td","updated":"20230724231426"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"bufio.Writer 默认使用 4096 长度字节的缓存，可以使用 NewWriterSize 方法来设定该值\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231427-bz5dqfc","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231427-bz5dqfc","updated":"20230724231427"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"实现"}]},{"ID":"20230724231428-wwv07zq","Type":"NodeParagraph","Properties":{"id":"20230724231428-wwv07zq","updated":"20230724231428"},"Children":[{"Type":"NodeText","Data":"实现十分简单："}]},{"ID":"20230724231429-xmjmrok","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231429-xmjmrok","updated":"20230724231429"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer struct {\n    err error\n    buf []byte\n    n   int\n    wr  io.Writer\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231430-8oz93sd","Type":"NodeParagraph","Properties":{"id":"20230724231430-8oz93sd","updated":"20230724231430"},"Children":[{"Type":"NodeText","Data":"字段 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"buf"},{"Type":"NodeText","Data":" 用来存储数据，当缓存满或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Flush"},{"Type":"NodeText","Data":" 被调用时，消费者("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"wr"},{"Type":"NodeText","Data":")可以从缓存中获取到数据。如果写入过程中发生了 I/O error，此 error 将会被赋给 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"err"},{"Type":"NodeText","Data":" 字段， error 发生之后，writer 将停止操作(writer is no-op)："}]},{"ID":"20230724231431-bcw8s98","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231431-bcw8s98","updated":"20230724231431"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer int\nfunc (*Writer) Write(p []byte) (n int, err error) {\n    fmt.Printf(\"Write: %q\\n\", p)\n    return 0, errors.New(\"boom!\")\n}\nfunc main() {\n    w := new(Writer)\n    bw := bufio.NewWriterSize(w, 3)\n    bw.Write([]byte{'a'})\n    bw.Write([]byte{'b'})\n    bw.Write([]byte{'c'})\n    bw.Write([]byte{'d'})\n    err := bw.Flush()\n    fmt.Println(err)\n}\nWrite: \"abc\"\nboom!\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231432-kkzmid8","Type":"NodeParagraph","Properties":{"id":"20230724231432-kkzmid8","updated":"20230724231432"},"Children":[{"Type":"NodeText","Data":"这里我们可以看到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Flush"},{"Type":"NodeText","Data":" 没有第二次调用消费者的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"write"},{"Type":"NodeText","Data":" 方法。如果发生了 error， 使用了缓存的 writer 不会尝试再次执行写操作。"}]},{"ID":"20230724231433-bd842uy","Type":"NodeParagraph","Properties":{"id":"20230724231433-bd842uy","updated":"20230724231433"},"Children":[{"Type":"NodeText","Data":"字段 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 标识缓存内部当前操作的位置。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Buffered"},{"Type":"NodeText","Data":" 方法返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 的值："}]},{"ID":"20230724231434-mq7pc5n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231434-mq7pc5n","updated":"20230724231434"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer int\nfunc (*Writer) Write(p []byte) (n int, err error) {\n    return len(p), nil\n}\nfunc main() {\n    w := new(Writer)\n    bw := bufio.NewWriterSize(w, 3)\n    fmt.Println(bw.Buffered())\n    bw.Write([]byte{'a'})\n    fmt.Println(bw.Buffered())\n    bw.Write([]byte{'b'})\n    fmt.Println(bw.Buffered())\n    bw.Write([]byte{'c'})\n    fmt.Println(bw.Buffered())\n    bw.Write([]byte{'d'})\n    fmt.Println(bw.Buffered())\n}\n0\n1\n2\n3\n1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231435-rkynhhc","Type":"NodeParagraph","Properties":{"id":"20230724231435-rkynhhc","updated":"20230724231435"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 从 0 开始，当有数据被添加到缓存中时，该数据的长度值将会被加和到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"中(操作位置向后移动)。当"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bw.Write([] byte{'d'})"},{"Type":"NodeText","Data":"被调用时，flush会被触发，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 会被重设为0。"}]},{"ID":"20230724231436-9k0dyax","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231436-9k0dyax","updated":"20230724231436"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Large writes"}]},{"ID":"20230724231437-dndrbdw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231437-dndrbdw","updated":"20230724231437"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer int\nfunc (*Writer) Write(p []byte) (n int, err error) {\n    fmt.Printf(\"%q\\n\", p)\n    return len(p), nil\n}\nfunc main() {\n    w := new(Writer)\n    bw := bufio.NewWriterSize(w, 3)\n    bw.Write([]byte(\"abcd\"))\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231438-mox1w7k","Type":"NodeParagraph","Properties":{"id":"20230724231438-mox1w7k","updated":"20230724231438"},"Children":[{"Type":"NodeText","Data":"由于使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio"},{"Type":"NodeText","Data":"，程序打印了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026quot;abcd\u0026quot;"},{"Type":"NodeText","Data":"。如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Writer"},{"Type":"NodeText","Data":" 检测到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Write"},{"Type":"NodeText","Data":" 方法被调用时传入的数据长度大于缓存的长度(示例中是三个字节)。其将直接调用 writer(目的对象)的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Write"},{"Type":"NodeText","Data":" 方法。当数据量足够大时，其会自动跳过内部缓存代理。"}]},{"ID":"20230724231439-qwq12j5","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231439-qwq12j5","updated":"20230724231439"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"重置"}]},{"ID":"20230724231440-xin6qln","Type":"NodeParagraph","Properties":{"id":"20230724231440-xin6qln","updated":"20230724231440"},"Children":[{"Type":"NodeText","Data":"缓存是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio"},{"Type":"NodeText","Data":" 的核心部分。通过使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Reset"},{"Type":"NodeText","Data":" 方法，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Writer"},{"Type":"NodeText","Data":" 可以用于不同的目的对象。重复使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Writer"},{"Type":"NodeText","Data":" 缓存减少了内存的分配。而且减少了额外的垃圾回收工作："}]},{"ID":"20230724231441-sgy0i5d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231441-sgy0i5d","updated":"20230724231441"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer1 int\nfunc (*Writer1) Write(p []byte) (n int, err error) {\n    fmt.Printf(\"writer#1: %q\\n\", p)\n    return len(p), nil\n}\ntype Writer2 int\nfunc (*Writer2) Write(p []byte) (n int, err error) {\n    fmt.Printf(\"writer#2: %q\\n\", p)\n    return len(p), nil\n}\nfunc main() {\n    w1 := new(Writer1)\n    bw := bufio.NewWriterSize(w1, 2)\n    bw.Write([]byte(\"ab\"))\n    bw.Write([]byte(\"cd\"))\n    w2 := new(Writer2)\n    bw.Reset(w2)\n    bw.Write([]byte(\"ef\"))\n    bw.Flush()\n}\nwriter#1: \"ab\"\nwriter#2: \"ef\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231442-4o6rvcd","Type":"NodeParagraph","Properties":{"id":"20230724231442-4o6rvcd","updated":"20230724231442"},"Children":[{"Type":"NodeText","Data":"这段代码中有一个 bug。在调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Reset"},{"Type":"NodeText","Data":" 方法之前，我们应该使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Flush"},{"Type":"NodeText","Data":" flush缓存。 由于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//github.com/golang/go/blob/7b8a7f8272fd1941a199af1adb334bd9996e8909/src/bufio/bufio.go%23L559","TextMarkTextContent":"Reset"},{"Type":"NodeText","Data":" 只是简单的丢弃未被处理的数据，所以已经被写入的数据"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cd"},{"Type":"NodeText","Data":"丢失了："}]},{"ID":"20230724231443-jtfnwkd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231443-jtfnwkd","updated":"20230724231443"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (b *Writer) Reset(w io.Writer) {\n    b.err = nil\n    b.n = 0\n    b.wr = w\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231444-za77aog","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231444-za77aog","updated":"20230724231444"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"缓存剩余空间"}]},{"ID":"20230724231445-wboqjls","Type":"NodeParagraph","Properties":{"id":"20230724231445-wboqjls","updated":"20230724231445"},"Children":[{"Type":"NodeText","Data":"为了检测缓存中还剩余多少空间, 我们可以使用方法 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Available"},{"Type":"NodeText","Data":"："}]},{"ID":"20230724231446-ahwne0u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231446-ahwne0u","updated":"20230724231446"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"w := new(Writer)\nbw := bufio.NewWriterSize(w, 2)\nfmt.Println(bw.Available())\nbw.Write([]byte{'a'})\nfmt.Println(bw.Available())\nbw.Write([]byte{'b'})\nfmt.Println(bw.Available())\nbw.Write([]byte{'c'})\nfmt.Println(bw.Available())\n2\n1\n0\n1\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231447-git4ie0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231447-git4ie0","updated":"20230724231447"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"写"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"{Byte,Rune,String}"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"的方法"}]},{"ID":"20230724231448-84gg5c7","Type":"NodeParagraph","Properties":{"id":"20230724231448-84gg5c7","updated":"20230724231448"},"Children":[{"Type":"NodeText","Data":"为了方便, 我们有三个用来写普通类型的实用方法："}]},{"ID":"20230724231449-jzu7ey7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231449-jzu7ey7","updated":"20230724231449"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"w := new(Writer)\nbw := bufio.NewWriterSize(w, 10)\nfmt.Println(bw.Buffered())\nbw.WriteByte('a')\nfmt.Println(bw.Buffered())\nbw.WriteRune('ł') // 'ł' occupies 2 bytes\nfmt.Println(bw.Buffered())\nbw.WriteString(\"aa\")\nfmt.Println(bw.Buffered())\n0\n1\n3\n5\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231450-0xoqgah","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231450-0xoqgah","updated":"20230724231450"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ReadFrom"}]},{"ID":"20230724231451-iuskhz2","Type":"NodeParagraph","Properties":{"id":"20230724231451-iuskhz2","updated":"20230724231451"},"Children":[{"Type":"NodeText","Data":"io 包中定义了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"io.ReaderFrom"},{"Type":"NodeText","Data":" 接口。 该接口通常被 writer 实现，用于从指定的 reader 中读取所有数据(直到 EOF)并对读到的数据进行底层处理："}]},{"ID":"20230724231452-osh80qb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231452-osh80qb","updated":"20230724231452"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type ReaderFrom interface {\n    ReadFrom(r Reader) (n int64, err error)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231453-nntxg4d","Type":"NodeBlockquote","Properties":{"id":"20230724231453-nntxg4d","updated":"20230724231453"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231454-80pjdoz","Type":"NodeParagraph","Properties":{"id":"20230724231454-80pjdoz","updated":"20230724231454"},"Children":[{"Type":"NodeText","Data":"比如 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"io.Copy"},{"Type":"NodeText","Data":" 使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.ReaderFrom"},{"Type":"NodeText","Data":" 接口"}]}]},{"ID":"20230724231455-pj04eyl","Type":"NodeParagraph","Properties":{"id":"20230724231455-pj04eyl","updated":"20230724231455"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Writer"},{"Type":"NodeText","Data":" 实现了此接口：因此我们可以通过调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadFrom"},{"Type":"NodeText","Data":" 方法来处理从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":" 获取到的所有数据："}]},{"ID":"20230724231456-2betd91","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231456-2betd91","updated":"20230724231456"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Writer int\nfunc (*Writer) Write(p []byte) (n int, err error) {\n    fmt.Printf(\"%q\\n\", p)\n    return len(p), nil\n}\nfunc main() {\n    s := strings.NewReader(\"onetwothree\")\n    w := new(Writer)\n    bw := bufio.NewWriterSize(w, 3)\n    bw.ReadFrom(s)\n    err := bw.Flush()\n    if err != nil {\n        panic(err)\n    }\n}\n\"one\"\n\"two\"\n\"thr\"\n\"ee\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231457-py5lmbc","Type":"NodeBlockquote","Properties":{"id":"20230724231457-py5lmbc","updated":"20230724231457"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231458-8siyeez","Type":"NodeParagraph","Properties":{"id":"20230724231458-8siyeez","updated":"20230724231458"},"Children":[{"Type":"NodeText","Data":"使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadFrom"},{"Type":"NodeText","Data":" 方法的同时，调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Flush"},{"Type":"NodeText","Data":" 方法也很重要"}]}]},{"ID":"20230724231459-golojt0","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231459-golojt0","updated":"20230724231459"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"bufio.Reader"}]},{"ID":"20230724231460-twclmb0","Type":"NodeParagraph","Properties":{"id":"20230724231460-twclmb0","updated":"20230724231460"},"Children":[{"Type":"NodeText","Data":"通过它，我们可以从底层的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":" 中更大批量的读取数据。这会使读取操作变少。如果数据读取时的块数量是固定合适的，底层媒体设备将会有更好的表现，也因此会提高程序的性能："}]},{"ID":"20230724231461-g1slnxy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231461-g1slnxy","updated":"20230724231461"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"io.Reader --\u003e buffer --\u003e consumer\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231462-tg2b2zg","Type":"NodeParagraph","Properties":{"id":"20230724231462-tg2b2zg","updated":"20230724231462"},"Children":[{"Type":"NodeText","Data":"假设消费者想要从硬盘上读取10个字符(每次读取一个字符)。在底层实现上，这将会触发10次读取操作。如果硬盘按每个数据块四个字节来读取数据，那么 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 将会起到帮助作用。底层引擎将会缓存整个数据块，然后提供一个可以挨个读取字节的 API 给消费者："}]},{"ID":"20230724231463-43bmjzd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231463-43bmjzd","updated":"20230724231463"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"abcd -----\u003e abcd -----\u003e a\n            abcd -----\u003e b\n            abcd -----\u003e c\n            abcd -----\u003e d\nefgh -----\u003e efgh -----\u003e e\n            efgh -----\u003e f\n            efgh -----\u003e g\n            efgh -----\u003e h\nijkl -----\u003e ijkl -----\u003e i\n            ijkl -----\u003e j\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231464-odb9ljg","Type":"NodeParagraph","Properties":{"id":"20230724231464-odb9ljg","updated":"20230724231464"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"-----\u0026gt;"},{"Type":"NodeText","Data":" 代表读取操作"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"这个方法仅需要从硬盘读取三次，而不是10次。"}]},{"ID":"20230724231465-z08pfc1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231465-z08pfc1","updated":"20230724231465"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Peek"}]},{"ID":"20230724231466-eoomrth","Type":"NodeParagraph","Properties":{"id":"20230724231466-eoomrth","updated":"20230724231466"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Peek"},{"Type":"NodeText","Data":" 方法可以帮助我们查看缓存的前 n 个字节而不会真的『吃掉』它："}]},{"ID":"20230724231467-8pe8ijb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231467-8pe8ijb","updated":"20230724231467"},"Children":[{"ID":"20230724231468-cxkrygu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231468-cxkrygu","updated":"20230724231468"},"Children":[{"ID":"20230724231469-bf5qylp","Type":"NodeParagraph","Properties":{"id":"20230724231469-bf5qylp","updated":"20230724231469"},"Children":[{"Type":"NodeText","Data":"如果缓存不满，而且缓存中缓存的数据少于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 个字节，其将会尝试从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":" 中读取"}]}]},{"ID":"20230724231470-vzpv31l","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231470-vzpv31l","updated":"20230724231470"},"Children":[{"ID":"20230724231471-1cx2etc","Type":"NodeParagraph","Properties":{"id":"20230724231471-1cx2etc","updated":"20230724231471"},"Children":[{"Type":"NodeText","Data":"如果请求的数据量大于缓存的容量，将会返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.ErrBufferFull"}]}]},{"ID":"20230724231472-ag0qm8r","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231472-ag0qm8r","updated":"20230724231472"},"Children":[{"ID":"20230724231473-scqtslp","Type":"NodeParagraph","Properties":{"id":"20230724231473-scqtslp","updated":"20230724231473"},"Children":[{"Type":"NodeText","Data":"如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 大于流的大小，将会返回 EOF"}]}]}]},{"ID":"20230724231474-h956tz3","Type":"NodeParagraph","Properties":{"id":"20230724231474-h956tz3","updated":"20230724231474"},"Children":[{"Type":"NodeText","Data":"让我们来看看它是如何工作的："}]},{"ID":"20230724231475-g50qx5d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231475-g50qx5d","updated":"20230724231475"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s1 := strings.NewReader(strings.Repeat(\"a\", 20))\nr := bufio.NewReaderSize(s1, 16)\nb, err := r.Peek(3)\nif err != nil {\n    fmt.Println(err)\n}\nfmt.Printf(\"%q\\n\", b)\nb, err = r.Peek(17)\nif err != nil {\n    fmt.Println(err)\n}\ns2 := strings.NewReader(\"aaa\")\nr.Reset(s2)\nb, err = r.Peek(10)\nif err != nil {\n    fmt.Println(err)\n}\n\"aaa\"\nbufio: buffer full\nEOF\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231476-7j7dm4x","Type":"NodeBlockquote","Properties":{"id":"20230724231476-7j7dm4x","updated":"20230724231476"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231477-n21t7ux","Type":"NodeParagraph","Properties":{"id":"20230724231477-n21t7ux","updated":"20230724231477"},"Children":[{"Type":"NodeText","Data":"被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 使用的最小的缓存容器是 16。"}]}]},{"ID":"20230724231478-k6llto1","Type":"NodeParagraph","Properties":{"id":"20230724231478-k6llto1","updated":"20230724231478"},"Children":[{"Type":"NodeText","Data":"返回的切片和被 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 使用的内部缓存底层使用相同的数组。因此引擎底层在执行任何读取操作之后内部返回的切片将会变成无效的。这是由于其将有可能被其他的缓存数据覆盖："}]},{"ID":"20230724231479-zyi4zhj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231479-zyi4zhj","updated":"20230724231479"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s1 := strings.NewReader(strings.Repeat(\"a\", 16) + strings.Repeat(\"b\", 16))\nr := bufio.NewReaderSize(s1, 16)\nb, _ := r.Peek(3)\nfmt.Printf(\"%q\\n\", b)\nr.Read(make([]byte, 16))\nr.Read(make([]byte, 15))\nfmt.Printf(\"%q\\n\", b)\n\"aaa\"\n\"bbb\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231480-9mbwric","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231480-9mbwric","updated":"20230724231480"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Reset"}]},{"ID":"20230724231481-ndx1d7u","Type":"NodeParagraph","Properties":{"id":"20230724231481-ndx1d7u","updated":"20230724231481"},"Children":[{"Type":"NodeText","Data":"就像 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Writer"},{"Type":"NodeText","Data":" 那样，缓存也可以用相似的方式被复用。"}]},{"ID":"20230724231482-xsvdfiv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231482-xsvdfiv","updated":"20230724231482"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s1 := strings.NewReader(\"abcd\")\nr := bufio.NewReader(s1)\nb := make([]byte, 3)\n_, err := r.Read(b)\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"%q\\n\", b)\ns2 := strings.NewReader(\"efgh\")\nr.Reset(s2)\n_, err = r.Read(b)\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"%q\\n\", b)\n\"abc\"\n\"efg\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231483-e7lq2cy","Type":"NodeParagraph","Properties":{"id":"20230724231483-e7lq2cy","updated":"20230724231483"},"Children":[{"Type":"NodeText","Data":"通过使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Reset"},{"Type":"NodeText","Data":"，我们可以避免冗余的内存分配和不必要的垃圾回收工作。"}]},{"ID":"20230724231484-ld7b1im","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231484-ld7b1im","updated":"20230724231484"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Discard"}]},{"ID":"20230724231485-oklpez7","Type":"NodeParagraph","Properties":{"id":"20230724231485-oklpez7","updated":"20230724231485"},"Children":[{"Type":"NodeText","Data":"这个方法将会丢弃 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 个字节的，返回时也不会返回被丢弃的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 个字节。如果 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 缓存了超过或者等于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 个字节的数据。那么其将不必从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":" 中读取任何数据。其只是简单的从缓存中略去前 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":" 个字节："}]},{"ID":"20230724231486-lb2ou93","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231486-lb2ou93","updated":"20230724231486"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type R struct{}\nfunc (r *R) Read(p []byte) (n int, err error) {\n    fmt.Println(\"Read\")\n    copy(p, \"abcdefghijklmnop\")\n    return 16, nil\n}\nfunc main() {\n    r := new(R)\n    br := bufio.NewReaderSize(r, 16)\n    buf := make([]byte, 4)\n    br.Read(buf)\n    fmt.Printf(\"%q\\n\", buf)\n    br.Discard(4)\n    br.Read(buf)\n    fmt.Printf(\"%q\\n\", buf)\n}\nRead\n\"abcd\"\n\"ijkl\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231487-xvbtsjy","Type":"NodeParagraph","Properties":{"id":"20230724231487-xvbtsjy","updated":"20230724231487"},"Children":[{"Type":"NodeText","Data":"调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Discard"},{"Type":"NodeText","Data":" 方法将不会从 reader "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"r"},{"Type":"NodeText","Data":" 中读取数据。另一种情况，缓存中数据量小于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"，那么 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 将会读取需要数量的数据来确保被丢弃的数据量不会少于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"n"},{"Type":"NodeText","Data":"："}]},{"ID":"20230724231488-b60no2g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231488-b60no2g","updated":"20230724231488"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type R struct{}\nfunc (r *R) Read(p []byte) (n int, err error) {\n    fmt.Println(\"Read\")\n    copy(p, \"abcdefghijklmnop\")\n    return 16, nil\n}\nfunc main() {\n    r := new(R)\n    br := bufio.NewReaderSize(r, 16)\n    buf := make([]byte, 4)\n    br.Read(buf)\n    fmt.Printf(\"%q\\n\", buf)\n    br.Discard(13)\n    fmt.Println(\"Discard\")\n    br.Read(buf)\n    fmt.Printf(\"%q\\n\", buf)\n}\nRead\n\"abcd\"\nRead\nDiscard\n\"bcde\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231489-vqm2pzc","Type":"NodeParagraph","Properties":{"id":"20230724231489-vqm2pzc","updated":"20230724231489"},"Children":[{"Type":"NodeText","Data":"由于调用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Discard"},{"Type":"NodeText","Data":" 方法，所以读取方法被调用了两次。"}]},{"ID":"20230724231490-t7s5qi7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231490-t7s5qi7","updated":"20230724231490"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Read"}]},{"ID":"20230724231491-nsx9oa8","Type":"NodeParagraph","Properties":{"id":"20230724231491-nsx9oa8","updated":"20230724231491"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Read"},{"Type":"NodeText","Data":" 方法是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 的核心。它和**"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//golang.org/pkg/io/%23Reader","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":"**的唯一方法具有相同的签名。因此 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 实现了这个普遍存在的接口："}]},{"ID":"20230724231492-1227rhp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231492-1227rhp","updated":"20230724231492"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Reader interface {\n    Read(p []byte) (n int, err error)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231493-l1lkdpy","Type":"NodeParagraph","Properties":{"id":"20230724231493-l1lkdpy","updated":"20230724231493"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Read"},{"Type":"NodeText","Data":" 方法从底层的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":" 中一次读取最大的数量:"}]},{"ID":"20230724231494-sk6kz9s","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231494-sk6kz9s","updated":"20230724231494"},"Children":[{"ID":"20230724231495-kkhtfnv","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231495-kkhtfnv","updated":"20230724231495"},"Children":[{"ID":"20230724231496-tcd0r87","Type":"NodeParagraph","Properties":{"id":"20230724231496-tcd0r87","updated":"20230724231496"},"Children":[{"Type":"NodeText","Data":"如果内部缓存具有至少一个字节的数据，那么无论传入的切片的大小("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"len(p)"},{"Type":"NodeText","Data":")是多少，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Read"},{"Type":"NodeText","Data":" 方法都将仅仅从内部缓存中获取数据，不会从底层的 reader 中读取任何数据:"}]}]}]},{"ID":"20230724231497-4dorwt1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231497-4dorwt1","updated":"20230724231497"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (r *R) Read(p []byte) (n int, err error) {\n    fmt.Println(\"Read\")\n    copy(p, \"abcd\")\n    return 4, nil\n}\nfunc main() {\n    r := new(R)\n    br := bufio.NewReader(r)\n    buf := make([]byte, 2)\n    n, err := br.Read(buf)\n    if err != nil {\n        panic(err)\n    }\n    buf = make([]byte, 4)\n    n, err = br.Read(buf)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"read = %q, n = %d\\n\", buf[:n], n)\n}\nRead\nread = \"cd\", n = 2\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231498-j52qj31","Type":"NodeParagraph","Properties":{"id":"20230724231498-j52qj31","updated":"20230724231498"},"Children":[{"Type":"NodeText","Data":"我们的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":" 实例无线返回「abcd」(不会返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.EOF"},{"Type":"NodeText","Data":")。 第二次调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Read"},{"Type":"NodeText","Data":"并传入长度为4的切片，但是内部缓存在第一次从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":"       中读取数据之后已经具有数据「cd」，所以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 返回缓存中的数据数据，而不和底层 reader 进行通信。"}]},{"ID":"20230724231499-uvr2xie","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231499-uvr2xie","updated":"20230724231499"},"Children":[{"ID":"20230724231500-uymw0j6","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231500-uymw0j6","updated":"20230724231500"},"Children":[{"ID":"20230724231501-bclggvf","Type":"NodeParagraph","Properties":{"id":"20230724231501-bclggvf","updated":"20230724231501"},"Children":[{"Type":"NodeText","Data":"如果内部缓存是空的，那么将会执行一次从底层 io.Reader 的读取操作。 从前面的例子中我们可以清晰的看到如果我们开启了一个空的缓存，然后调用:"}]}]}]},{"ID":"20230724231502-zedosn8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231502-zedosn8","updated":"20230724231502"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"n, err := br.Read(buf)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231503-hicpk52","Type":"NodeParagraph","Properties":{"id":"20230724231503-hicpk52","updated":"20230724231503"},"Children":[{"Type":"NodeText","Data":"将会触发读取操作来填充缓存。"}]},{"ID":"20230724231504-gg4yyod","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231504-gg4yyod","updated":"20230724231504"},"Children":[{"ID":"20230724231505-cyw2fz0","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231505-cyw2fz0","updated":"20230724231505"},"Children":[{"ID":"20230724231506-6e501b8","Type":"NodeParagraph","Properties":{"id":"20230724231506-6e501b8","updated":"20230724231506"},"Children":[{"Type":"NodeText","Data":"如果内部缓存是空的，但是传入的切片长度大于缓存长度，那么 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 将会跳过缓存，直接读取传入切片长度的数据到切片中:"}]}]}]},{"ID":"20230724231507-e78x33y","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231507-e78x33y","updated":"20230724231507"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type R struct{}\nfunc (r *R) Read(p []byte) (n int, err error) {\n    fmt.Println(\"Read\")\n    copy(p, strings.Repeat(\"a\", len(p)))\n    return len(p), nil\n}\nfunc main() {\n    r := new(R)\n    br := bufio.NewReaderSize(r, 16)\n    buf := make([]byte, 17)\n    n, err := br.Read(buf)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"read = %q, n = %d\\n\", buf[:n], n)\n    fmt.Printf(\"buffered = %d\\n\", br.Buffered())\n}\nRead\nread = \"aaaaaaaaaaaaaaaaa\", n = 17\nbuffered = 0\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231508-7ia5ycc","Type":"NodeParagraph","Properties":{"id":"20230724231508-7ia5ycc","updated":"20230724231508"},"Children":[{"Type":"NodeText","Data":"从 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 读取之后，内部缓存中没有任何数据("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"buffered = 0"},{"Type":"NodeText","Data":")"}]},{"ID":"20230724231509-dgaogyl","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231509-dgaogyl","updated":"20230724231509"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"{Read, Unread}Byte"}]},{"ID":"20230724231510-tmaqlmw","Type":"NodeParagraph","Properties":{"id":"20230724231510-tmaqlmw","updated":"20230724231510"},"Children":[{"Type":"NodeText","Data":"这些方法都实现了从缓存中读取单个字节或者将最后一个读取的字节返回到缓存:"}]},{"ID":"20230724231511-ewlwthe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231511-ewlwthe","updated":"20230724231511"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"r := strings.NewReader(\"abcd\")\nbr := bufio.NewReader(r)\nbyte, err := br.ReadByte()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"%q\\n\", byte)\nfmt.Printf(\"buffered = %d\\n\", br.Buffered())\nerr = br.UnreadByte()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"buffered = %d\\n\", br.Buffered())\nbyte, err = br.ReadByte()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"%q\\n\", byte)\nfmt.Printf(\"buffered = %d\\n\", br.Buffered())\n'a'\nbuffered = 3\nbuffered = 4\n'a'\nbuffered = 3\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231512-6jjjqn3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231512-6jjjqn3","updated":"20230724231512"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"{Read, Unread}Rune"}]},{"ID":"20230724231513-0ye5c0s","Type":"NodeParagraph","Properties":{"id":"20230724231513-0ye5c0s","updated":"20230724231513"},"Children":[{"Type":"NodeText","Data":"这两个方法的功能和前面方法的功能差不多, 但是用来处理 Unicode 字符(UTF-8 encoded)。"}]},{"ID":"20230724231514-r9gwzrz","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231514-r9gwzrz","updated":"20230724231514"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ReadSlice"}]},{"ID":"20230724231515-t952jrq","Type":"NodeParagraph","Properties":{"id":"20230724231515-t952jrq","updated":"20230724231515"},"Children":[{"Type":"NodeText","Data":"函数返回在第一次出现传入字节前的字节:"}]},{"ID":"20230724231516-dvj8h8b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231516-dvj8h8b","updated":"20230724231516"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (b *Reader) ReadSlice(delim byte) (line []byte, err error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231517-plvjcpj","Type":"NodeParagraph","Properties":{"id":"20230724231517-plvjcpj","updated":"20230724231517"},"Children":[{"Type":"NodeText","Data":"示例:"}]},{"ID":"20230724231518-2w0jd8t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231518-2w0jd8t","updated":"20230724231518"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(\"abcdef|ghij\")\nr := bufio.NewReader(s)\ntoken, err := r.ReadSlice('|')\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q\\n\", token)\nToken: \"abcdef|\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231519-ze0gpjv","Type":"NodeBlockquote","Properties":{"id":"20230724231519-ze0gpjv","updated":"20230724231519"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231520-m86mizr","Type":"NodeParagraph","Properties":{"id":"20230724231520-m86mizr","updated":"20230724231520"},"Children":[{"Type":"NodeText","Data":"重要：返回的切面指向内部缓冲区, 因此它可能在下一次读取操作期间被覆盖"}]}]},{"ID":"20230724231521-aoyp8g6","Type":"NodeParagraph","Properties":{"id":"20230724231521-aoyp8g6","updated":"20230724231521"},"Children":[{"Type":"NodeText","Data":"如果找不到分隔符，而且已经读到末尾(EOF)，将会返回 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.EOF"},{"Type":"NodeText","Data":" error。 让我们将上面程序中的一行修改为如下代码:"}]},{"ID":"20230724231522-i1sdks9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231522-i1sdks9","updated":"20230724231522"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(\"abcdefghij\")\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231523-rxws5mz","Type":"NodeParagraph","Properties":{"id":"20230724231523-rxws5mz","updated":"20230724231523"},"Children":[{"Type":"NodeText","Data":"如果数据以 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"panic: EOF"},{"Type":"NodeText","Data":" 结尾。 当分隔符找不到而且没有更多的数据可以放入缓冲区时函数将返回 `"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong a","TextMarkAHref":"https://link.zhihu.com/?target=https%3A//golang.org/pkg/bufio/%23pkg-variables","TextMarkTextContent":"io.ErrBufferFull"},{"Type":"NodeText","Data":":"}]},{"ID":"20230724231524-rh3shb1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231524-rh3shb1","updated":"20230724231524"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(strings.Repeat(\"a\", 16) + \"|\")\nr := bufio.NewReaderSize(s, 16)\ntoken, err := r.ReadSlice('|')\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q\\n\", token)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231525-9jpm45p","Type":"NodeParagraph","Properties":{"id":"20230724231525-9jpm45p","updated":"20230724231525"},"Children":[{"Type":"NodeText","Data":"这一小段代码会出现错误:"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"panic: bufio: buffer full"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230724231526-em3j3n6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231526-em3j3n6","updated":"20230724231526"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ReadBytes"}]},{"ID":"20230724231527-o2xfi1n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231527-o2xfi1n","updated":"20230724231527"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (b *Reader) ReadBytes(delim byte) ([]byte, error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231528-0xuytur","Type":"NodeParagraph","Properties":{"id":"20230724231528-0xuytur","updated":"20230724231528"},"Children":[{"Type":"NodeText","Data":"返回出现第一次分隔符前的所有数据组成的字节切片。 它和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice"},{"Type":"NodeText","Data":" 具有相同的签名，但是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice"},{"Type":"NodeText","Data":" 是一个低级别的函数，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 的实现使用了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice"},{"Type":"NodeText","Data":"。 那么两者之间有什么不同呢? 在分隔符找不到的情况下，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 可以多次调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice"},{"Type":"NodeText","Data":"，而且可以累积返回的数据。 这意味着 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 将不再受到 缓存大小的限制:"}]},{"ID":"20230724231529-65un986","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231529-65un986","updated":"20230724231529"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(strings.Repeat(\"a\", 40) + \"|\")\nr := bufio.NewReaderSize(s, 16)\ntoken, err := r.ReadBytes('|')\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q\\n\", token)\nToken: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa|\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231530-8l0zrg9","Type":"NodeParagraph","Properties":{"id":"20230724231530-8l0zrg9","updated":"20230724231530"},"Children":[{"Type":"NodeText","Data":"另外该函数返回一个新的字节切片，所以没有数据会被将来的读取操作覆盖的风险。"}]},{"ID":"20230724231531-y03lej7","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231531-y03lej7","updated":"20230724231531"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ReadString"}]},{"ID":"20230724231532-fhbcbqm","Type":"NodeParagraph","Properties":{"id":"20230724231532-fhbcbqm","updated":"20230724231532"},"Children":[{"Type":"NodeText","Data":"它是我们上面讨论的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 的简单封装:"}]},{"ID":"20230724231533-eebrkw1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231533-eebrkw1","updated":"20230724231533"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (b *Reader) ReadString(delim byte) (string, error) {\n    bytes, err := b.ReadBytes(delim)\n    return string(bytes), err\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231534-4f5ylm6","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231534-4f5ylm6","updated":"20230724231534"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ReadLine"}]},{"ID":"20230724231535-zy8jphx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231535-zy8jphx","updated":"20230724231535"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ReadLine() (line []byte, isPrefix bool, err error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231536-oa9wtko","Type":"NodeParagraph","Properties":{"id":"20230724231536-oa9wtko","updated":"20230724231536"},"Children":[{"Type":"NodeText","Data":"内部使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice"},{"Type":"NodeText","Data":" ("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice('\\n')"},{"Type":"NodeText","Data":")实现，同时从返回的切片中移除掉换行符("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\\n"},{"Type":"NodeText","Data":" 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\\r\\n"},{"Type":"NodeText","Data":")。 此方法的签名不同于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 或者 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadSlice"},{"Type":"NodeText","Data":"，因为它包含 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"isPrefix"},{"Type":"NodeText","Data":" 标志。 由于内部缓存无法存储更多的数据，当找不到分隔符时该标志为 true:"}]},{"ID":"20230724231537-yl97rs2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231537-yl97rs2","updated":"20230724231537"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(strings.Repeat(\"a\", 20) + \"\\n\" + \"b\")\nr := bufio.NewReaderSize(s, 16)\ntoken, isPrefix, err := r.ReadLine()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q, prefix: %t\\n\", token, isPrefix)\ntoken, isPrefix, err = r.ReadLine()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q, prefix: %t\\n\", token, isPrefix)\ntoken, isPrefix, err = r.ReadLine()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q, prefix: %t\\n\", token, isPrefix)\ntoken, isPrefix, err = r.ReadLine()\nif err != nil {\n    panic(err)\n}\nToken: \"aaaaaaaaaaaaaaaa\", prefix: true\nToken: \"aaaa\", prefix: false\nToken: \"b\", prefix: false\npanic: EOF\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231538-smf8qwc","Type":"NodeParagraph","Properties":{"id":"20230724231538-smf8qwc","updated":"20230724231538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"如果最后一次返回的切片以换行符结尾，此方法将不会给出任何信息:"}]},{"ID":"20230724231539-ixcd2cj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231539-ixcd2cj","updated":"20230724231539"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(\"abc\")\nr := bufio.NewReaderSize(s, 16)\ntoken, isPrefix, err := r.ReadLine()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q, prefix: %t\\n\", token, isPrefix)\ns = strings.NewReader(\"abc\\n\")\nr.Reset(s)\ntoken, isPrefix, err = r.ReadLine()\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"Token: %q, prefix: %t\\n\", token, isPrefix)\nToken: \"abc\", prefix: false\nToken: \"abc\", prefix: false\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231540-u08bj95","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231540-u08bj95","updated":"20230724231540"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"WriteTo"}]},{"ID":"20230724231541-v3g3y2h","Type":"NodeParagraph","Properties":{"id":"20230724231541-v3g3y2h","updated":"20230724231541"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Reader"},{"Type":"NodeText","Data":" 实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.WriterTo"},{"Type":"NodeText","Data":" 接口:"}]},{"ID":"20230724231542-ocwube4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231542-ocwube4","updated":"20230724231542"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type WriterTo interface {\n        WriteTo(w Writer) (n int64, err error)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231543-1fnx53i","Type":"NodeParagraph","Properties":{"id":"20230724231543-1fnx53i","updated":"20230724231543"},"Children":[{"Type":"NodeText","Data":"此方法允许我们传入一个实现了 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"io.Writer"},{"Type":"NodeText","Data":" 的消费者。 从生产者读取的所有数据都将会被送到消费者。 下面通过练习来看看它是如何工作的:"}]},{"ID":"20230724231544-8p94yxz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231544-8p94yxz","updated":"20230724231544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type R struct {\n    n int\n}\nfunc (r *R) Read(p []byte) (n int, err error) {\n    fmt.Printf(\"Read #%d\\n\", r.n)\n    if r.n \u003e= 10 {\n         return 0, io.EOF\n    }\n    copy(p, \"abcd\")\n    r.n += 1\n    return 4, nil\n}\nfunc main() {\n    r := bufio.NewReaderSize(new(R), 16)\n    n, err := r.WriteTo(ioutil.Discard)\n    if err != nil {\n        panic(err)\n    }\n    fmt.Printf(\"Written bytes: %d\\n\", n)\n}\nRead #0\nRead #1\nRead #2\nRead #3\nRead #4\nRead #5\nRead #6\nRead #7\nRead #8\nRead #9\nRead #10\nWritten bytes: 40\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231545-vipkqyn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231545-vipkqyn","updated":"20230724231545"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"bufio.Scanner"}]},{"ID":"20230724231546-p2hga2l","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231546-p2hga2l","updated":"20230724231546"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"ReadBytes('\\n'), ReadString('\\n'), ReadLine 还是 Scanner?"}]},{"ID":"20230724231547-pu2npz3","Type":"NodeParagraph","Properties":{"id":"20230724231547-pu2npz3","updated":"20230724231547"},"Children":[{"Type":"NodeText","Data":"就像前面说的那样，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadString('\\n')"},{"Type":"NodeText","Data":" 只是对于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReadBytes("},{"Type":"NodeText","Data":"\\n"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":")"},{"Type":"NodeText","Data":" 的简单封装。 所以让我们来讨论一下另外三者之间的不同之处吧。"}]},{"ID":"20230724231548-cs4ski7","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231548-cs4ski7","updated":"20230724231548"},"Children":[{"ID":"20230724231549-lnivrhp","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231549-lnivrhp","updated":"20230724231549"},"Children":[{"ID":"20230724231550-gpb2xch","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231550-gpb2xch","updated":"20230724231550"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"ReadBytes 不会自动处理 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\\r\\n"},{"Type":"NodeText","Data":" 序列:"}]}]}]},{"ID":"20230724231551-nzasws9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231551-nzasws9","updated":"20230724231551"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(\"a\\r\\nb\")\nr := bufio.NewReader(s)\nfor {\n    token, _, err := r.ReadLine()\n    if len(token) \u003e 0 {\n        fmt.Printf(\"Token (ReadLine): %q\\n\", token)\n    }\n    if err != nil {\n        break\n    }\n}\ns.Seek(0, io.SeekStart)\nr.Reset(s)\nfor {\n    token, err := r.ReadBytes('\\n')\n    fmt.Printf(\"Token (ReadBytes): %q\\n\", token)\n    if err != nil {\n        break\n    }\n}\ns.Seek(0, io.SeekStart)\nscanner := bufio.NewScanner(s)\nfor scanner.Scan() {\n    fmt.Printf(\"Token (Scanner): %q\\n\", scanner.Text())\n}\nToken (ReadLine): \"a\"\nToken (ReadLine): \"b\"\nToken (ReadBytes): \"a\\r\\n\"\nToken (ReadBytes): \"b\"\nToken (Scanner): \"a\"\nToken (Scanner): \"b\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231552-edko356","Type":"NodeParagraph","Properties":{"id":"20230724231552-edko356","updated":"20230724231552"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 会将分隔符一起返回，所以需要额外的一些工作来重新处理数据(除非返回分隔符是有用的)。"}]},{"ID":"20230724231553-6mdv7qf","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231553-6mdv7qf","updated":"20230724231553"},"Children":[{"ID":"20230724231554-eotb0ae","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231554-eotb0ae","updated":"20230724231554"},"Children":[{"ID":"20230724231555-nsnuhax","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231555-nsnuhax","updated":"20230724231555"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"ReadLine"},{"Type":"NodeText","Data":" 不会处理超出内部缓存的行:"}]}]}]},{"ID":"20230724231556-lhkbsr8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231556-lhkbsr8","updated":"20230724231556"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(strings.Repeat(\"a\", 20) + \"\\n\")\nr := bufio.NewReaderSize(s, 16)\ntoken, _, _ := r.ReadLine()\nfmt.Printf(\"Token (ReadLine): \\t%q\\n\", token)\ns.Seek(0, io.SeekStart)\nr.Reset(s)\ntoken, _ = r.ReadBytes('\\n')\nfmt.Printf(\"Token (ReadBytes): \\t%q\\n\", token)\ns.Seek(0, io.SeekStart)\nscanner := bufio.NewScanner(s)\nscanner.Scan()\nfmt.Printf(\"Token (Scanner): \\t%q\\n\", scanner.Text())\nToken (ReadLine):  \"aaaaaaaaaaaaaaaa\"\nToken (ReadBytes):  \"aaaaaaaaaaaaaaaaaaaa\\n\"\nToken (Scanner):  \"aaaaaaaaaaaaaaaaaaaa\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231557-iiar4zc","Type":"NodeParagraph","Properties":{"id":"20230724231557-iiar4zc","updated":"20230724231557"},"Children":[{"Type":"NodeText","Data":"为了取回流中剩余的数据，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"ReadLine"},{"Type":"NodeText","Data":" 需要被调用两次。 被 Scanner 处理的最大 token 长度为 64*1024。 如果传入更长的 token，scanner 将无法工作。 当 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"ReadLine"},{"Type":"NodeText","Data":" 被多次调用时可以处理任何长度的 token。 由于函数返回是否在缓存数据中找到分隔符的标志，但是这需要调用者进行处理。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"ReadBytes"},{"Type":"NodeText","Data":" 则没有任何限制:"}]},{"ID":"20230724231558-365fs02","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231558-365fs02","updated":"20230724231558"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(strings.Repeat(\"a\", 64*1024) + \"\\n\")\nr := bufio.NewReader(s)\ntoken, _, err := r.ReadLine()\nfmt.Printf(\"Token (ReadLine): %d\\n\", len(token))\nfmt.Printf(\"Error (ReadLine): %v\\n\", err)\ns.Seek(0, io.SeekStart)\nr.Reset(s)\ntoken, err = r.ReadBytes('\\n')\nfmt.Printf(\"Token (ReadBytes): %d\\n\", len(token))\nfmt.Printf(\"Error (ReadBytes): %v\\n\", err)\ns.Seek(0, io.SeekStart)\nscanner := bufio.NewScanner(s)\nscanner.Scan()\nfmt.Printf(\"Token (Scanner): %d\\n\", len(scanner.Text()))\nfmt.Printf(\"Error (Scanner): %v\\n\", scanner.Err())\nToken (ReadLine): 4096\nError (ReadLine): \u003cnil\u003e\nToken (ReadBytes): 65537\nError (ReadBytes): \u003cnil\u003e\nToken (Scanner): 0\nError (Scanner): bufio.Scanner: token too long\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231559-s4i0git","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231559-s4i0git","updated":"20230724231559"},"Children":[{"ID":"20230724231560-78w04om","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230724231560-78w04om","updated":"20230724231560"},"Children":[{"ID":"20230724231561-exridzl","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231561-exridzl","updated":"20230724231561"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"就像上面那样，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Scanner"},{"Type":"NodeText","Data":" 具有非常简单的 API，对于普通的例子，它还提供了友好的抽象概念。"}]}]}]},{"ID":"20230724231562-hdjn909","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231562-hdjn909","updated":"20230724231562"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"bufio.ReadWriter"}]},{"ID":"20230724231563-5lf3k5t","Type":"NodeParagraph","Properties":{"id":"20230724231563-5lf3k5t","updated":"20230724231563"},"Children":[{"Type":"NodeText","Data":"Go 的结构体中可以使用一种叫做内嵌的类型。 和常规的具有类型和名字的字段不同，我们可以仅仅使用类型(匿名字段)。 内嵌类型的方法或者字段如果不和其他的冲突的话，则可以使用一个简短的选择器来引用:"}]},{"ID":"20230724231564-03mnsg1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231564-03mnsg1","updated":"20230724231564"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type T1 struct {\n    t1 string\n}\nfunc (t *T1) f1() {\n    fmt.Println(\"T1.f1\")\n}\ntype T2 struct {\n    t2 string\n}\nfunc (t *T2) f2() {\n    fmt.Println(\"T1.f2\")\n}\ntype U struct {\n    *T1\n    *T2\n}\nfunc main() {\n    u := U{T1: \u0026T1{\"foo\"}, T2: \u0026T2{\"bar\"}}\n    u.f1()\n    u.f2()\n    fmt.Println(u.t1)\n    fmt.Println(u.t2)\n}\nT1.f1\nT1.f2\nfoo\nbar\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231565-6endadv","Type":"NodeParagraph","Properties":{"id":"20230724231565-6endadv","updated":"20230724231565"},"Children":[{"Type":"NodeText","Data":"我们可以简单的使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"u.t1"},{"Type":"NodeText","Data":" 来代替 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"u.T1.t1"},{"Type":"NodeText","Data":"。 包 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio"},{"Type":"NodeText","Data":" 使用内嵌的方式来定义 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"ReadWriter"},{"Type":"NodeText","Data":"。 它由 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Reader"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Writer"},{"Type":"NodeText","Data":" 构成:"}]},{"ID":"20230724231566-ccm271f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"dGV4dA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231566-ccm271f","updated":"20230724231566"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"dGV4dA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type ReadWriter struct {\n   *Reader\n   *Writer\n  }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231567-i0smbnb","Type":"NodeParagraph","Properties":{"id":"20230724231567-i0smbnb","updated":"20230724231567"},"Children":[{"Type":"NodeText","Data":"让我们来看看它是如何使用的:"}]},{"ID":"20230724231568-uxd0acp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231568-uxd0acp","updated":"20230724231568"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := strings.NewReader(\"abcd\")\nbr := bufio.NewReader(s)\nw := new(bytes.Buffer)\nbw := bufio.NewWriter(w)\nrw := bufio.NewReadWriter(br, bw)\nbuf := make([]byte, 2)\n_, err := rw.Read(buf)\nif err != nil {\n    panic(err)\n}\nfmt.Printf(\"%q\\n\", buf)\nbuf = []byte(\"efgh\")\n_, err = rw.Write(buf)\nif err != nil {\n    panic(err)\n}\nerr = rw.Flush()\nif err != nil {\n   panic(err)\n}\nfmt.Println(w.String())\n\"ab\"\nefgh\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231569-t5m8tlm","Type":"NodeParagraph","Properties":{"id":"20230724231569-t5m8tlm","updated":"20230724231569"},"Children":[{"Type":"NodeText","Data":"由于 reader 和 writer 都具有方法 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Buffered"},{"Type":"NodeText","Data":"，所以若想获取缓存数据的量，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"rw.Buffered()"},{"Type":"NodeText","Data":" 将无法工作，编译器会报错："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ambiguous selector rw.Buffered"},{"Type":"NodeText","Data":"。 但是类似 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"rw.Reader.Buffered()"},{"Type":"NodeText","Data":" 的方式是可以的。"}]},{"ID":"20230724231570-pwb4ibq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231570-pwb4ibq","updated":"20230724231570"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"bufio + standard library"}]},{"ID":"20230724231571-tz3ln4w","Type":"NodeParagraph","Properties":{"id":"20230724231571-tz3ln4w","updated":"20230724231571"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"bufio"},{"Type":"NodeText","Data":" 包被广泛使用在 I/O出现的标准库中，例如:"}]},{"ID":"20230724231572-quvgh7j","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231572-quvgh7j","updated":"20230724231572"},"Children":[{"ID":"20230724231573-waqxvar","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231573-waqxvar","updated":"20230724231573"},"Children":[{"ID":"20230724231574-0irtty9","Type":"NodeParagraph","Properties":{"id":"20230724231574-0irtty9","updated":"20230724231574"},"Children":[{"Type":"NodeText","Data":"archive/zip"}]}]},{"ID":"20230724231575-v43p0ll","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231575-v43p0ll","updated":"20230724231575"},"Children":[{"ID":"20230724231576-quoxac0","Type":"NodeParagraph","Properties":{"id":"20230724231576-quoxac0","updated":"20230724231576"},"Children":[{"Type":"NodeText","Data":"compress/*"}]}]},{"ID":"20230724231577-rxcx3pa","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231577-rxcx3pa","updated":"20230724231577"},"Children":[{"ID":"20230724231578-6c7eg3s","Type":"NodeParagraph","Properties":{"id":"20230724231578-6c7eg3s","updated":"20230724231578"},"Children":[{"Type":"NodeText","Data":"encoding/*"}]}]},{"ID":"20230724231579-2xpyf1d","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231579-2xpyf1d","updated":"20230724231579"},"Children":[{"ID":"20230724231580-mejink8","Type":"NodeParagraph","Properties":{"id":"20230724231580-mejink8","updated":"20230724231580"},"Children":[{"Type":"NodeText","Data":"image/*"}]}]},{"ID":"20230724231581-k3luupu","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231581-k3luupu","updated":"20230724231581"},"Children":[{"ID":"20230724231582-8ftrq3k","Type":"NodeParagraph","Properties":{"id":"20230724231582-8ftrq3k","updated":"20230724231582"},"Children":[{"Type":"NodeText","Data":"类似于 net/http 的TCP连接包装。 它还结合一些类似于 sync.Pool 的缓存框架来减少垃圾回收的压力"}]}]}]}]}