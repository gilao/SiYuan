{"ID":"20230724231343-c5mmun7","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231343-c5mmun7","title":"regexp","updated":"20230724231343"},"Children":[{"ID":"20230724231344-i4npi7p","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231344-i4npi7p","updated":"20230724231344"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"regexp"}]},{"ID":"20230724231345-7081d3p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231345-7081d3p","updated":"20230724231345"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import \"regexp\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231346-dssi57t","Type":"NodeParagraph","Properties":{"id":"20230724231346-dssi57t","updated":"20230724231346"},"Children":[{"Type":"NodeText","Data":"regexp包实现了正则表达式搜索。"}]},{"ID":"20230724231347-94thx42","Type":"NodeParagraph","Properties":{"id":"20230724231347-94thx42","updated":"20230724231347"},"Children":[{"Type":"NodeText","Data":"正则表达式采用RE2语法（除了\\c、\\C），和Perl、Python等语言的正则基本一致。"}]},{"ID":"20230724231348-89m5q5d","Type":"NodeParagraph","Properties":{"id":"20230724231348-89m5q5d","updated":"20230724231348"},"Children":[{"Type":"NodeText","Data":"参见http://code.google.com/p/re2/wiki/Syntax。"}]},{"ID":"20230724231349-gmuhbvb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231349-gmuhbvb","updated":"20230724231349"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Syntax"}]},{"ID":"20230724231350-n597u2q","Type":"NodeParagraph","Properties":{"id":"20230724231350-n597u2q","updated":"20230724231350"},"Children":[{"Type":"NodeText","Data":"本包采用的正则表达式语法，默认采用perl标志。某些语法可以通过切换解析时的标志来关闭。"}]},{"ID":"20230724231351-9ecp50c","Type":"NodeParagraph","Properties":{"id":"20230724231351-9ecp50c","updated":"20230724231351"},"Children":[{"Type":"NodeText","Data":"单字符："}]},{"ID":"20230724231352-qidl353","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231352-qidl353","updated":"20230724231352"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        .              任意字符（标志s==true时还包括换行符）\n        [xyz]          字符族\n        [^xyz]         反向字符族\n        \\d             Perl预定义字符族\n        \\D             反向Perl预定义字符族\n        [:alpha:]      ASCII字符族\n        [:^alpha:]     反向ASCII字符族\n        \\pN            Unicode字符族（单字符名），参见unicode包\n        \\PN            反向Unicode字符族（单字符名）\n        \\p{Greek}      Unicode字符族（完整字符名）\n        \\P{Greek}      反向Unicode字符族（完整字符名）\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231353-0lyddp7","Type":"NodeParagraph","Properties":{"id":"20230724231353-0lyddp7","updated":"20230724231353"},"Children":[{"Type":"NodeText","Data":"结合："}]},{"ID":"20230724231354-6h8uswp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231354-6h8uswp","updated":"20230724231354"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        xy             匹配x后接着匹配y\n        x|y            匹配x或y（优先匹配x）\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231355-owpu8vf","Type":"NodeParagraph","Properties":{"id":"20230724231355-owpu8vf","updated":"20230724231355"},"Children":[{"Type":"NodeText","Data":"重复："}]},{"ID":"20230724231356-njxy0vv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231356-njxy0vv","updated":"20230724231356"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        x*             重复\u003e=0次匹配x，越多越好（优先重复匹配x）\n        x+             重复\u003e=1次匹配x，越多越好（优先重复匹配x）\n        x?             0或1次匹配x，优先1次\n        x{n,m}         n到m次匹配x，越多越好（优先重复匹配x）\n        x{n,}          重复\u003e=n次匹配x，越多越好（优先重复匹配x）\n        x{n}           重复n次匹配x\n        x*?            重复\u003e=0次匹配x，越少越好（优先跳出重复）\n        x+?            重复\u003e=1次匹配x，越少越好（优先跳出重复）\n        x??            0或1次匹配x，优先0次\n        x{n,m}?        n到m次匹配x，越少越好（优先跳出重复）\n        x{n,}?         重复\u003e=n次匹配x，越少越好（优先跳出重复）\n        x{n}?          重复n次匹配x\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231357-dbulh28","Type":"NodeParagraph","Properties":{"id":"20230724231357-dbulh28","updated":"20230724231357"},"Children":[{"Type":"NodeText","Data":"实现的限制：计数格式x{n}等（不包括x*等格式）中n最大值1000。负数或者显式出现的过大的值会导致解析错误，返回ErrInvalidRepeatSize。"}]},{"ID":"20230724231358-ef1os4b","Type":"NodeParagraph","Properties":{"id":"20230724231358-ef1os4b","updated":"20230724231358"},"Children":[{"Type":"NodeText","Data":"分组："}]},{"ID":"20230724231359-jj40su3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231359-jj40su3","updated":"20230724231359"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        (re)           编号的捕获分组\n        (?P\u003cname\u003ere)   命名并编号的捕获分组\n        (?:re)         不捕获的分组\n        (?flags)       设置当前所在分组的标志，不捕获也不匹配\n        (?flags:re)    设置re段的标志，不捕获的分组\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231360-r6xl6q4","Type":"NodeParagraph","Properties":{"id":"20230724231360-r6xl6q4","updated":"20230724231360"},"Children":[{"Type":"NodeText","Data":"标志的语法为xyz（设置）、-xyz（清楚）、xy-z（设置xy，清楚z），标志如下："}]},{"ID":"20230724231361-8240m1p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231361-8240m1p","updated":"20230724231361"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        I              大小写敏感（默认关闭）\n        m              ^和$在匹配文本开始和结尾之外，还可以匹配行首和行尾（默认开启）\n        s              让.可以匹配\\n（默认关闭）\n        U              非贪婪的：交换x*和x*?、x+和x+?……的含义（默认关闭）\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231362-uu7k8ti","Type":"NodeParagraph","Properties":{"id":"20230724231362-uu7k8ti","updated":"20230724231362"},"Children":[{"Type":"NodeText","Data":"边界匹配："}]},{"ID":"20230724231363-uhh4ce2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231363-uhh4ce2","updated":"20230724231363"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        ^              匹配文本开始，标志m为真时，还匹配行首\n        $              匹配文本结尾，标志m为真时，还匹配行尾\n        \\A             匹配文本开始\n        \\b             单词边界（一边字符属于\\w，另一边为文首、文尾、行首、行尾或属于\\W）\n        \\B             非单词边界\n        \\z             匹配文本结尾\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231364-bzq1fs7","Type":"NodeParagraph","Properties":{"id":"20230724231364-bzq1fs7","updated":"20230724231364"},"Children":[{"Type":"NodeText","Data":"转义序列："}]},{"ID":"20230724231365-hx2zl4g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231365-hx2zl4g","updated":"20230724231365"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        \\a             响铃符（\\007）\n        \\f             换纸符（\\014）\n        \\t             水平制表符（\\011）\n        \\n             换行符（\\012）\n        \\r             回车符（\\015）\n        \\v             垂直制表符（\\013）\n        \\123           八进制表示的字符码（最多三个数字）\n        \\x7F           十六进制表示的字符码（必须两个数字）\n        \\x{10FFFF}     十六进制表示的字符码\n        \\*             字面值'*'\n        \\Q...\\E        反斜线后面的字符的字面值\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231366-b3jjoma","Type":"NodeParagraph","Properties":{"id":"20230724231366-b3jjoma","updated":"20230724231366"},"Children":[{"Type":"NodeText","Data":"字符族（预定义字符族之外，方括号内部）的语法："}]},{"ID":"20230724231367-z7vao9c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231367-z7vao9c","updated":"20230724231367"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        x              单个字符\n        A-Z            字符范围（方括号内部才可以用）\n        \\d             Perl字符族\n        [:foo:]        ASCII字符族\n        \\pF            单字符名的Unicode字符族\n        \\p{Foo}        完整字符名的Unicode字符族\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231368-yuj9vwp","Type":"NodeParagraph","Properties":{"id":"20230724231368-yuj9vwp","updated":"20230724231368"},"Children":[{"Type":"NodeText","Data":"预定义字符族作为字符族的元素："}]},{"ID":"20230724231369-srs07ic","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231369-srs07ic","updated":"20230724231369"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        [\\d]           == \\d\n        [^\\d]          == \\D\n        [\\D]           == \\D\n        [^\\D]          == \\d\n        [[:name:]]     == [:name:]\n        [^[:name:]]    == [:^name:]\n        [\\p{Name}]     == \\p{Name}\n        [^\\p{Name}]    == \\P{Name}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231370-kvq5qru","Type":"NodeParagraph","Properties":{"id":"20230724231370-kvq5qru","updated":"20230724231370"},"Children":[{"Type":"NodeText","Data":"Perl字符族："}]},{"ID":"20230724231371-o5147fu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231371-o5147fu","updated":"20230724231371"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        \\d             == [0-9]\n        \\D             == [^0-9]\n        \\s             == [\\t\\n\\f\\r ]\n        \\S             == [^\\t\\n\\f\\r ]\n        \\w             == [0-9A-Za-z_]\n        \\W             == [^0-9A-Za-z_]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231372-6os34to","Type":"NodeParagraph","Properties":{"id":"20230724231372-6os34to","updated":"20230724231372"},"Children":[{"Type":"NodeText","Data":"ASCII字符族："}]},{"ID":"20230724231373-3j9sjf9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231373-3j9sjf9","updated":"20230724231373"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"        [:alnum:]      == [0-9A-Za-z]\n        [:alpha:]      == [A-Za-z]\n        [:ascii:]      == [\\x00-\\x7F]\n        [:blank:]      == [\\t ]\n        [:cntrl:]      == [\\x00-\\x1F\\x7F]\n        [:digit:]      == [0-9]\n        [:graph:]      == [!-~] == [A-Za-z0-9!\"#$%\u0026'()*+,\\-./:;\u003c=\u003e?@[\\\\\\]^_`{|}~]\n        [:lower:]      == [a-z]\n        [:print:]      == [ -~] == [ [:graph:]]\n        [:punct:]      == [!-/:-@[-`{-~]\n        [:space:]      == [\\t\\n\\v\\f\\r ]\n        [:upper:]      == [A-Z]\n        [:word:]       == [0-9A-Za-z_]\n        [:xdigit:]     == [0-9A-Fa-f]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231374-s88mn84","Type":"NodeParagraph","Properties":{"id":"20230724231374-s88mn84","updated":"20230724231374"},"Children":[{"Type":"NodeText","Data":"本包的正则表达式保证搜索复杂度为O(n)，其中n为输入的长度。这一点很多其他开源实现是无法保证的。参见："}]},{"ID":"20230724231375-dgvz2pe","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231375-dgvz2pe","updated":"20230724231375"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"http://swtch.com/~rsc/regexp/regexp1.html\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231376-9tn5mwd","Type":"NodeParagraph","Properties":{"id":"20230724231376-9tn5mwd","updated":"20230724231376"},"Children":[{"Type":"NodeText","Data":"或其他关于自动机理论的书籍。"}]},{"ID":"20230724231377-k4jru61","Type":"NodeParagraph","Properties":{"id":"20230724231377-k4jru61","updated":"20230724231377"},"Children":[{"Type":"NodeText","Data":"所有的字符都被视为utf-8编码的码值。"}]},{"ID":"20230724231378-2mztex5","Type":"NodeParagraph","Properties":{"id":"20230724231378-2mztex5","updated":"20230724231378"},"Children":[{"Type":"NodeText","Data":"Regexp类型提供了多达16个方法，用于匹配正则表达式并获取匹配的结果。它们的名字满足如下正则表达式："}]},{"ID":"20230724231379-5gcxtvi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231379-5gcxtvi","updated":"20230724231379"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Find(All)?(String)?(Submatch)?(Index)?\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231380-y0dyqtd","Type":"NodeParagraph","Properties":{"id":"20230724231380-y0dyqtd","updated":"20230724231380"},"Children":[{"Type":"NodeText","Data":"如果'All'出现了，该方法会返回输入中所有互不重叠的匹配结果。如果一个匹配结果的前后（没有间隔字符）存在长度为0的成功匹配，该空匹配会被忽略。包含All的方法会要求一个额外的整数参数n，如果n\u003e=0，方法会返回最多前n个匹配结果。"}]},{"ID":"20230724231381-j45jxjo","Type":"NodeParagraph","Properties":{"id":"20230724231381-j45jxjo","updated":"20230724231381"},"Children":[{"Type":"NodeText","Data":"如果'String'出现了，匹配对象为字符串，否则应该是[]byte类型，返回值和匹配对象的类型是对应的。"}]},{"ID":"20230724231382-pkp98td","Type":"NodeParagraph","Properties":{"id":"20230724231382-pkp98td","updated":"20230724231382"},"Children":[{"Type":"NodeText","Data":"如果'Submatch'出现了，返回值是表示正则表达式中成功的组匹配（子匹配/次级匹配）的切片。组匹配是正则表达式内部的括号包围的次级表达式（也被称为“捕获分组”），从左到右按左括号的顺序编号。，索引0的组匹配为完整表达式的匹配结果，1为第一个分组的匹配结果，依次类推。"}]},{"ID":"20230724231383-wb96orh","Type":"NodeParagraph","Properties":{"id":"20230724231383-wb96orh","updated":"20230724231383"},"Children":[{"Type":"NodeText","Data":"如果'Index'出现了，匹配/分组匹配会用输入流的字节索引对表示result[2"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"n:2"},{"Type":"NodeText","Data":"n+1]表示第n个分组匹配的的匹配结果。如果没有'Index'，匹配结果表示为匹配到的文本。如果索引为负数，表示分组匹配没有匹配到输入流中的文本。"}]},{"ID":"20230724231384-99c2tsy","Type":"NodeParagraph","Properties":{"id":"20230724231384-99c2tsy","updated":"20230724231384"},"Children":[{"Type":"NodeText","Data":"方法集也有一个用于从RuneReader中读取文本进行匹配的子集："}]},{"ID":"20230724231385-ttya3u0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231385-ttya3u0","updated":"20230724231385"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"MatchReader, FindReaderIndex, FindReaderSubmatchIndex\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231386-f02bhyb","Type":"NodeParagraph","Properties":{"id":"20230724231386-f02bhyb","updated":"20230724231386"},"Children":[{"Type":"NodeText","Data":"该子集可能会增加。注意正则表达式匹配可能需要检验匹配结果前后的文本，因此从RuneReader匹配文本的方法很可能会读取到远远超出返回的结果所在的位置。"}]},{"ID":"20230724231387-kjut6t9","Type":"NodeParagraph","Properties":{"id":"20230724231387-kjut6t9","updated":"20230724231387"},"Children":[{"Type":"NodeText","Data":"（另有几个其他方法不满足该方法模式的）"}]},{"ID":"20230724231388-685ashb","Type":"NodeParagraph","Properties":{"id":"20230724231388-685ashb","updated":"20230724231388"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231389-ehky3v3","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231389-ehky3v3","updated":"20230724231389"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#581","TextMarkTextContent":"QuoteMeta"}]},{"ID":"20230724231390-u8w4j9s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231390-u8w4j9s","updated":"20230724231390"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func QuoteMeta(s string) string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231391-02966aj","Type":"NodeParagraph","Properties":{"id":"20230724231391-02966aj","updated":"20230724231391"},"Children":[{"Type":"NodeText","Data":"QuoteMeta返回将s中所有正则表达式元字符都进行转义后字符串。该字符串可以用在正则表达式中匹配字面值s。例如，QuoteMeta("},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[foo]"},{"Type":"NodeText","Data":")会返回"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\\[foo\\]"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230724231392-xxmp1mt","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231392-xxmp1mt","updated":"20230724231392"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#433","TextMarkTextContent":"Match"}]},{"ID":"20230724231393-pot2m2l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231393-pot2m2l","updated":"20230724231393"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Match(pattern string, b []byte) (matched bool, err error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231394-9h53yio","Type":"NodeParagraph","Properties":{"id":"20230724231394-9h53yio","updated":"20230724231394"},"Children":[{"Type":"NodeText","Data":"Match检查b中是否存在匹配pattern的子序列。更复杂的用法请使用Compile函数和Regexp对象。"}]},{"ID":"20230724231395-1sm818f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231395-1sm818f","updated":"20230724231395"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#422","TextMarkTextContent":"MatchString"}]},{"ID":"20230724231396-luotejb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231396-luotejb","updated":"20230724231396"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func MatchString(pattern string, s string) (matched bool, err error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231397-wxzxf8m","Type":"NodeParagraph","Properties":{"id":"20230724231397-wxzxf8m","updated":"20230724231397"},"Children":[{"Type":"NodeText","Data":"MatchString类似Match，但匹配对象是字符串。"}]},{"ID":"20230724231398-v9e65v6","Type":"NodeParagraph","Properties":{"id":"20230724231398-v9e65v6","updated":"20230724231398"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231399-wt15pmw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231399-wt15pmw","updated":"20230724231399"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#411","TextMarkTextContent":"MatchReader"}]},{"ID":"20230724231400-o7vw62v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231400-o7vw62v","updated":"20230724231400"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func MatchReader(pattern string, r io.RuneReader) (matched bool, err error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231401-46m0yep","Type":"NodeParagraph","Properties":{"id":"20230724231401-46m0yep","updated":"20230724231401"},"Children":[{"Type":"NodeText","Data":"MatchReader类似Match，但匹配对象是io.RuneReader。"}]},{"ID":"20230724231402-pcv58m6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231402-pcv58m6","updated":"20230724231402"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#82","TextMarkTextContent":"Regexp"}]},{"ID":"20230724231403-1hm418u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231403-1hm418u","updated":"20230724231403"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Regexp struct {\n    // 内含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231404-ifxlgg9","Type":"NodeParagraph","Properties":{"id":"20230724231404-ifxlgg9","updated":"20230724231404"},"Children":[{"Type":"NodeText","Data":"Regexp代表一个编译好的正则表达式。Regexp可以被多线程安全地同时使用。"}]},{"ID":"20230724231405-xbobvjn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231405-xbobvjn","updated":"20230724231405"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#117","TextMarkTextContent":"Compile"}]},{"ID":"20230724231406-k8kwd3s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231406-k8kwd3s","updated":"20230724231406"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Compile(expr string) (*Regexp, error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231407-ib0hy4z","Type":"NodeParagraph","Properties":{"id":"20230724231407-ib0hy4z","updated":"20230724231407"},"Children":[{"Type":"NodeText","Data":"Compile解析并返回一个正则表达式。如果成功返回，该Regexp就可用于匹配文本。"}]},{"ID":"20230724231408-crz9ew1","Type":"NodeParagraph","Properties":{"id":"20230724231408-crz9ew1","updated":"20230724231408"},"Children":[{"Type":"NodeText","Data":"在匹配文本时，该正则表达式会尽可能早的开始匹配，并且在匹配过程中选择回溯搜索到的第一个匹配结果。这种模式被称为“leftmost-first”，Perl、Python和其他实现都采用了这种模式，但本包的实现没有回溯的损耗。对POSIX的“leftmost-longest”模式，参见CompilePOSIX。"}]},{"ID":"20230724231409-gcxthjb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231409-gcxthjb","updated":"20230724231409"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#140","TextMarkTextContent":"CompilePOSIX"}]},{"ID":"20230724231410-dpjx6z2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231410-dpjx6z2","updated":"20230724231410"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func CompilePOSIX(expr string) (*Regexp, error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231411-8thd0cp","Type":"NodeParagraph","Properties":{"id":"20230724231411-8thd0cp","updated":"20230724231411"},"Children":[{"Type":"NodeText","Data":"类似Compile但会将语法约束到POSIX ERE（egrep）语法，并将匹配模式设置为leftmost-longest。"}]},{"ID":"20230724231412-ar30f1x","Type":"NodeParagraph","Properties":{"id":"20230724231412-ar30f1x","updated":"20230724231412"},"Children":[{"Type":"NodeText","Data":"在匹配文本时，该正则表达式会尽可能早的开始匹配，并且在匹配过程中选择搜索到的最长的匹配结果。这种模式被称为“leftmost-longest”，POSIX采用了这种模式（早期正则的DFA自动机模式）。"}]},{"ID":"20230724231413-aure2ax","Type":"NodeParagraph","Properties":{"id":"20230724231413-aure2ax","updated":"20230724231413"},"Children":[{"Type":"NodeText","Data":"然而，可能会有多个“leftmost-longest”匹配，每个都有不同的组匹配状态，本包在这里和POSIX不同。在所有可能的“leftmost-longest”匹配里，本包选择回溯搜索时第一个找到的，而POSIX会选择候选结果中第一个组匹配最长的（可能有多个），然后再从中选出第二个组匹配最长的，依次类推。POSIX规则计算困难，甚至没有良好定义。"}]},{"ID":"20230724231414-pljda4q","Type":"NodeParagraph","Properties":{"id":"20230724231414-pljda4q","updated":"20230724231414"},"Children":[{"Type":"NodeText","Data":"参见http://swtch.com/~rsc/regexp/regexp2.html#posix获取细节。"}]},{"ID":"20230724231415-pxdgl9d","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231415-pxdgl9d","updated":"20230724231415"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#218","TextMarkTextContent":"MustCompile"}]},{"ID":"20230724231416-8q0xyo5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231416-8q0xyo5","updated":"20230724231416"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func MustCompile(str string) *Regexp\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231417-pjxnban","Type":"NodeParagraph","Properties":{"id":"20230724231417-pjxnban","updated":"20230724231417"},"Children":[{"Type":"NodeText","Data":"MustCompile类似Compile但会在解析失败时panic，主要用于全局正则表达式变量的安全初始化。"}]},{"ID":"20230724231418-8zssc0q","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231418-8zssc0q","updated":"20230724231418"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#229","TextMarkTextContent":"MustCompilePOSIX"}]},{"ID":"20230724231419-2rd5yei","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231419-2rd5yei","updated":"20230724231419"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func MustCompilePOSIX(str string) *Regexp\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231420-kuxd8ak","Type":"NodeParagraph","Properties":{"id":"20230724231420-kuxd8ak","updated":"20230724231420"},"Children":[{"Type":"NodeText","Data":"MustCompilePOSIX类似CompilePOSIX但会在解析失败时panic，主要用于全局正则表达式变量的安全初始化。"}]},{"ID":"20230724231421-i0v1akp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231421-i0v1akp","updated":"20230724231421"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#103","TextMarkTextContent":"String"}]},{"ID":"20230724231422-mkfi5su","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231422-mkfi5su","updated":"20230724231422"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) String() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231423-2s3om6v","Type":"NodeParagraph","Properties":{"id":"20230724231423-2s3om6v","updated":"20230724231423"},"Children":[{"Type":"NodeText","Data":"String返回用于编译成正则表达式的字符串。"}]},{"ID":"20230724231424-9d97d6w","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231424-9d97d6w","updated":"20230724231424"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#388","TextMarkTextContent":"LiteralPrefix"}]},{"ID":"20230724231425-mlapfqo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231425-mlapfqo","updated":"20230724231425"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) LiteralPrefix() (prefix string, complete bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231426-aw81j6z","Type":"NodeParagraph","Properties":{"id":"20230724231426-aw81j6z","updated":"20230724231426"},"Children":[{"Type":"NodeText","Data":"LiteralPrefix返回一个字符串字面值prefix，任何匹配本正则表达式的字符串都会以prefix起始。 如果该字符串字面值包含整个正则表达式，返回值complete会设为真。"}]},{"ID":"20230724231427-ts1vxog","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231427-ts1vxog","updated":"20230724231427"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#245","TextMarkTextContent":"NumSubexp"}]},{"ID":"20230724231428-9thngvx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231428-9thngvx","updated":"20230724231428"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) NumSubexp() int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231429-q4n7br4","Type":"NodeParagraph","Properties":{"id":"20230724231429-q4n7br4","updated":"20230724231429"},"Children":[{"Type":"NodeText","Data":"NumSubexp返回该正则表达式中捕获分组的数量。"}]},{"ID":"20230724231430-tvujkyt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231430-tvujkyt","updated":"20230724231430"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#254","TextMarkTextContent":"SubexpNames"}]},{"ID":"20230724231431-qdu3wjj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231431-qdu3wjj","updated":"20230724231431"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) SubexpNames() []string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231432-4gww1l4","Type":"NodeParagraph","Properties":{"id":"20230724231432-4gww1l4","updated":"20230724231432"},"Children":[{"Type":"NodeText","Data":"SubexpNames返回该正则表达式中捕获分组的名字。第一个分组的名字是names[1]，因此，如果m是一个组匹配切片，m[i]的名字是SubexpNames()[i]。因为整个正则表达式是无法被命名的，names[0]必然是空字符串。该切片不应被修改。"}]},{"ID":"20230724231433-7q0gyxi","Type":"NodeParagraph","Properties":{"id":"20230724231433-7q0gyxi","updated":"20230724231433"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231434-1f92u7f","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231434-1f92u7f","updated":"20230724231434"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#148","TextMarkTextContent":"Longest"}]},{"ID":"20230724231435-y554hpo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231435-y554hpo","updated":"20230724231435"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) Longest()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231436-xl0jgmh","Type":"NodeParagraph","Properties":{"id":"20230724231436-xl0jgmh","updated":"20230724231436"},"Children":[{"Type":"NodeText","Data":"Longest让正则表达式在之后的搜索中都采用\"leftmost-longest\"模式。在匹配文本时，该正则表达式会尽可能早的开始匹配，并且在匹配过程中选择搜索到的最长的匹配结果。"}]},{"ID":"20230724231437-umyz1bb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231437-umyz1bb","updated":"20230724231437"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#404","TextMarkTextContent":"Match"}]},{"ID":"20230724231438-f9dvs25","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231438-f9dvs25","updated":"20230724231438"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) Match(b []byte) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231439-8yp7g96","Type":"NodeParagraph","Properties":{"id":"20230724231439-8yp7g96","updated":"20230724231439"},"Children":[{"Type":"NodeText","Data":"Match检查b中是否存在匹配pattern的子序列。"}]},{"ID":"20230724231440-9q5wbbx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231440-9q5wbbx","updated":"20230724231440"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#399","TextMarkTextContent":"MatchString"}]},{"ID":"20230724231441-3cu83g9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231441-3cu83g9","updated":"20230724231441"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) MatchString(s string) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231442-w2kq7lk","Type":"NodeParagraph","Properties":{"id":"20230724231442-w2kq7lk","updated":"20230724231442"},"Children":[{"Type":"NodeText","Data":"MatchString类似Match，但匹配对象是字符串。"}]},{"ID":"20230724231443-64nmikb","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231443-64nmikb","updated":"20230724231443"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#394","TextMarkTextContent":"MatchReader"}]},{"ID":"20230724231444-hmvk93s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231444-hmvk93s","updated":"20230724231444"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) MatchReader(r io.RuneReader) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231445-bniqft2","Type":"NodeParagraph","Properties":{"id":"20230724231445-bniqft2","updated":"20230724231445"},"Children":[{"Type":"NodeText","Data":"MatchReader类似Match，但匹配对象是io.RuneReader。"}]},{"ID":"20230724231446-dii1r2b","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231446-dii1r2b","updated":"20230724231446"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#663","TextMarkTextContent":"Find"}]},{"ID":"20230724231447-giv6oua","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231447-giv6oua","updated":"20230724231447"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) Find(b []byte) []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231448-rjp0wkw","Type":"NodeParagraph","Properties":{"id":"20230724231448-rjp0wkw","updated":"20230724231448"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的最左侧的一个匹配结果的[]byte切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231449-rfyweka","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231449-rfyweka","updated":"20230724231449"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#688","TextMarkTextContent":"FindString"}]},{"ID":"20230724231450-f4kxstf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231450-f4kxstf","updated":"20230724231450"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindString(s string) string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231451-7j9zs8k","Type":"NodeParagraph","Properties":{"id":"20230724231451-7j9zs8k","updated":"20230724231451"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的最左侧的一个匹配结果的字符串。如果没有匹配到，会返回\"\"；但如果正则表达式成功匹配了一个空字符串，也会返回\"\"。如果需要区分这种情况，请使用FindStringIndex 或FindStringSubmatch。"}]},{"ID":"20230724231452-j02p9sq","Type":"NodeParagraph","Properties":{"id":"20230724231452-j02p9sq","updated":"20230724231452"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231453-eud5b94","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231453-eud5b94","updated":"20230724231453"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#675","TextMarkTextContent":"FindIndex"}]},{"ID":"20230724231454-ax8v3ex","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231454-ax8v3ex","updated":"20230724231454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindIndex(b []byte) (loc []int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231455-hpljtn2","Type":"NodeParagraph","Properties":{"id":"20230724231455-hpljtn2","updated":"20230724231455"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的最左侧的一个匹配结果的起止位置的切片（显然len(loc)==2）。匹配结果可以通过起止位置对b做切片操作得到：b[loc[0]:loc[1]]。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231456-npbbel8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231456-npbbel8","updated":"20230724231456"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#700","TextMarkTextContent":"FindStringIndex"}]},{"ID":"20230724231457-5apawv2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231457-5apawv2","updated":"20230724231457"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindStringIndex(s string) (loc []int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231458-alarjqw","Type":"NodeParagraph","Properties":{"id":"20230724231458-alarjqw","updated":"20230724231458"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的最左侧的一个匹配结果的起止位置的切片（显然len(loc)==2）。匹配结果可以通过起止位置对b做切片操作得到：b[loc[0]:loc[1]]。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231459-3nrx2jt","Type":"NodeParagraph","Properties":{"id":"20230724231459-3nrx2jt","updated":"20230724231459"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231460-xj4mqi4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231460-xj4mqi4","updated":"20230724231460"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#713","TextMarkTextContent":"FindReaderIndex"}]},{"ID":"20230724231461-1w8g0bg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231461-1w8g0bg","updated":"20230724231461"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindReaderIndex(r io.RuneReader) (loc []int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231462-3ivjr5f","Type":"NodeParagraph","Properties":{"id":"20230724231462-3ivjr5f","updated":"20230724231462"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的最左侧的一个匹配结果的起止位置的切片（显然len(loc)==2）。匹配结果可以在输入流r的字节偏移量loc[0]到loc[1]-1（包括二者）位置找到。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231463-3oluwxq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231463-3oluwxq","updated":"20230724231463"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#726","TextMarkTextContent":"FindSubmatch"}]},{"ID":"20230724231464-cjb16z1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231464-cjb16z1","updated":"20230724231464"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindSubmatch(b []byte) [][]byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231465-gwspu1m","Type":"NodeParagraph","Properties":{"id":"20230724231465-gwspu1m","updated":"20230724231465"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的最左侧的一个匹配结果以及（可能有的）分组匹配的结果的[][]byte切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231466-cwlgmsm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231466-cwlgmsm","updated":"20230724231466"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#882","TextMarkTextContent":"FindStringSubmatch"}]},{"ID":"20230724231467-dye70l7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231467-dye70l7","updated":"20230724231467"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindStringSubmatch(s string) []string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231468-1eqwp7u","Type":"NodeParagraph","Properties":{"id":"20230724231468-1eqwp7u","updated":"20230724231468"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的最左侧的一个匹配结果以及（可能有的）分组匹配的结果的[]string切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231469-ou9j3ku","Type":"NodeParagraph","Properties":{"id":"20230724231469-ou9j3ku","updated":"20230724231469"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231470-p99kkyi","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231470-p99kkyi","updated":"20230724231470"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#873","TextMarkTextContent":"FindSubmatchIndex"}]},{"ID":"20230724231471-68vu64n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231471-68vu64n","updated":"20230724231471"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindSubmatchIndex(b []byte) []int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231472-wq91p3o","Type":"NodeParagraph","Properties":{"id":"20230724231472-wq91p3o","updated":"20230724231472"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的最左侧的一个匹配结果以及（可能有的）分组匹配的结果的起止位置的切片。匹配结果和分组匹配结果可以通过起止位置对b做切片操作得到：b[loc[2"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"n]:loc[2"},{"Type":"NodeText","Data":"n+1]]。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231473-uhx7vi5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231473-uhx7vi5","updated":"20230724231473"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#901","TextMarkTextContent":"FindStringSubmatchIndex"}]},{"ID":"20230724231474-yp1oh22","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231474-yp1oh22","updated":"20230724231474"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindStringSubmatchIndex(s string) []int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231475-s1zqx65","Type":"NodeParagraph","Properties":{"id":"20230724231475-s1zqx65","updated":"20230724231475"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的最左侧的一个匹配结果以及（可能有的）分组匹配的结果的起止位置的切片。匹配结果和分组匹配结果可以通过起止位置对b做切片操作得到：b[loc[2"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"n]:loc[2"},{"Type":"NodeText","Data":"n+1]]。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231476-kb71bcp","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231476-kb71bcp","updated":"20230724231476"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#910","TextMarkTextContent":"FindReaderSubmatchIndex"}]},{"ID":"20230724231477-h4maq9e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231477-h4maq9e","updated":"20230724231477"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindReaderSubmatchIndex(r io.RuneReader) []int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231478-8v175wu","Type":"NodeParagraph","Properties":{"id":"20230724231478-8v175wu","updated":"20230724231478"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的最左侧的一个匹配结果以及（可能有的）分组匹配的结果的起止位置的切片。匹配结果和分组匹配结果可以在输入流r的字节偏移量loc[0]到loc[1]-1（包括二者）位置找到。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231479-m5xpu7r","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231479-m5xpu7r","updated":"20230724231479"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#920","TextMarkTextContent":"FindAll"}]},{"ID":"20230724231480-nl6gvwg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231480-nl6gvwg","updated":"20230724231480"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAll(b []byte, n int) [][]byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231481-rbpe1ti","Type":"NodeParagraph","Properties":{"id":"20230724231481-rbpe1ti","updated":"20230724231481"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的所有不重叠的匹配结果的[][]byte切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231482-z2fl4ww","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231482-z2fl4ww","updated":"20230724231482"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#956","TextMarkTextContent":"FindAllString"}]},{"ID":"20230724231483-wlgtbqw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231483-wlgtbqw","updated":"20230724231483"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllString(s string, n int) []string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231484-hrn57eh","Type":"NodeParagraph","Properties":{"id":"20230724231484-hrn57eh","updated":"20230724231484"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的所有不重叠的匹配结果的[]string切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231485-yvt3oou","Type":"NodeParagraph","Properties":{"id":"20230724231485-yvt3oou","updated":"20230724231485"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231486-8dbiro8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231486-8dbiro8","updated":"20230724231486"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#938","TextMarkTextContent":"FindAllIndex"}]},{"ID":"20230724231487-cmmtye9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231487-cmmtye9","updated":"20230724231487"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllIndex(b []byte, n int) [][]int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231488-3631a0s","Type":"NodeParagraph","Properties":{"id":"20230724231488-3631a0s","updated":"20230724231488"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的所有不重叠的匹配结果的起止位置的切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231489-hgza5kn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231489-hgza5kn","updated":"20230724231489"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#974","TextMarkTextContent":"FindAllStringIndex"}]},{"ID":"20230724231490-juhxdh6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231490-juhxdh6","updated":"20230724231490"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllStringIndex(s string, n int) [][]int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231491-6rpv9vr","Type":"NodeParagraph","Properties":{"id":"20230724231491-6rpv9vr","updated":"20230724231491"},"Children":[{"Type":"NodeText","Data":"Find返回保管正则表达式re在b中的所有不重叠的匹配结果的起止位置的切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231492-tcfv4j3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231492-tcfv4j3","updated":"20230724231492"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#992","TextMarkTextContent":"FindAllSubmatch"}]},{"ID":"20230724231493-0zcpmnz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231493-0zcpmnz","updated":"20230724231493"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllSubmatch(b []byte, n int) [][][]byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231494-7d9dj6j","Type":"NodeParagraph","Properties":{"id":"20230724231494-7d9dj6j","updated":"20230724231494"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的所有不重叠的匹配结果及其对应的（可能有的）分组匹配的结果的[][][]byte切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231495-d5vd58r","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231495-d5vd58r","updated":"20230724231495"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#1034","TextMarkTextContent":"FindAllStringSubmatch"}]},{"ID":"20230724231496-s9wzeeh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231496-s9wzeeh","updated":"20230724231496"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllStringSubmatch(s string, n int) [][]string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231497-kp7gbow","Type":"NodeParagraph","Properties":{"id":"20230724231497-kp7gbow","updated":"20230724231497"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的所有不重叠的匹配结果及其对应的（可能有的）分组匹配的结果的[][]string切片。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231498-b7ify0a","Type":"NodeParagraph","Properties":{"id":"20230724231498-b7ify0a","updated":"20230724231498"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231499-rqqedz4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231499-rqqedz4","updated":"20230724231499"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#1016","TextMarkTextContent":"FindAllSubmatchIndex"}]},{"ID":"20230724231500-y01xorr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231500-y01xorr","updated":"20230724231500"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllSubmatchIndex(b []byte, n int) [][]int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231501-d1cdo0i","Type":"NodeParagraph","Properties":{"id":"20230724231501-d1cdo0i","updated":"20230724231501"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的所有不重叠的匹配结果及其对应的（可能有的）分组匹配的结果的起止位置的切片（第一层表示第几个匹配结果，完整匹配和分组匹配的起止位置对在第二层）。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231502-7uctzv6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231502-7uctzv6","updated":"20230724231502"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#1059","TextMarkTextContent":"FindAllStringSubmatchIndex"}]},{"ID":"20230724231503-260gheq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231503-260gheq","updated":"20230724231503"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) FindAllStringSubmatchIndex(s string, n int) [][]int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231504-jpup7gs","Type":"NodeParagraph","Properties":{"id":"20230724231504-jpup7gs","updated":"20230724231504"},"Children":[{"Type":"NodeText","Data":"Find返回一个保管正则表达式re在b中的所有不重叠的匹配结果及其对应的（可能有的）分组匹配的结果的起止位置的切片（第一层表示第几个匹配结果，完整匹配和分组匹配的起止位置对在第二层）。如果没有匹配到，会返回nil。"}]},{"ID":"20230724231505-ae3n21j","Type":"NodeParagraph","Properties":{"id":"20230724231505-ae3n21j","updated":"20230724231505"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231506-wu3b8vr","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231506-wu3b8vr","updated":"20230724231506"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#1088","TextMarkTextContent":"Split"}]},{"ID":"20230724231507-5hpcfvl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231507-5hpcfvl","updated":"20230724231507"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) Split(s string, n int) []string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231508-p19uzd4","Type":"NodeParagraph","Properties":{"id":"20230724231508-p19uzd4","updated":"20230724231508"},"Children":[{"Type":"NodeText","Data":"Split将re在s中匹配到的结果作为分隔符将s分割成多个字符串，并返回这些正则匹配结果之间的字符串的切片。"}]},{"ID":"20230724231509-bxljkqh","Type":"NodeParagraph","Properties":{"id":"20230724231509-bxljkqh","updated":"20230724231509"},"Children":[{"Type":"NodeText","Data":"返回的切片不会包含正则匹配的结果，只包含匹配结果之间的片段。当正则表达式re中不含正则元字符时，本方法等价于strings.SplitN。"}]},{"ID":"20230724231510-g28r7k6","Type":"NodeParagraph","Properties":{"id":"20230724231510-g28r7k6","updated":"20230724231510"},"Children":[{"Type":"NodeText","Data":"举例："}]},{"ID":"20230724231511-v3ddbv0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231511-v3ddbv0","updated":"20230724231511"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"s := regexp.MustCompile(\"a*\").Split(\"abaabaccadaaae\", 5)\n// s: [\"\", \"b\", \"b\", \"c\", \"cadaaae\"]\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231512-uc2oazr","Type":"NodeParagraph","Properties":{"id":"20230724231512-uc2oazr","updated":"20230724231512"},"Children":[{"Type":"NodeText","Data":"参数n绝对返回的子字符串的数量："}]},{"ID":"20230724231513-dwq0n2l","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231513-dwq0n2l","updated":"20230724231513"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"n \u003e 0 : 返回最多n个子字符串，最后一个子字符串是剩余未进行分割的部分。\nn == 0: 返回nil (zero substrings)\nn \u003c 0 : 返回所有子字符串\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231514-0m3l365","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231514-0m3l365","updated":"20230724231514"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#757","TextMarkTextContent":"Expand"}]},{"ID":"20230724231515-8punys0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231515-8punys0","updated":"20230724231515"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) Expand(dst []byte, template []byte, src []byte, match []int) []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231516-u1ns1sf","Type":"NodeParagraph","Properties":{"id":"20230724231516-u1ns1sf","updated":"20230724231516"},"Children":[{"Type":"NodeText","Data":"Expand返回新生成的将template添加到dst后面的切片。在添加时，Expand会将template中的变量替换为从src匹配的结果。match应该是被FindSubmatchIndex返回的匹配结果起止位置索引。（通常就是匹配src，除非你要将匹配得到的位置用于另一个[]byte）"}]},{"ID":"20230724231517-8lswpcd","Type":"NodeParagraph","Properties":{"id":"20230724231517-8lswpcd","updated":"20230724231517"},"Children":[{"Type":"NodeText","Data":"在template参数里，一个变量表示为格式如："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"name或"},{"Type":"NodeText","Data":"{name}的字符串，其中name是长度\u003e0的字母、数字和下划线的序列。一个单纯的数字字符名如$1会作为捕获分组的数字索引；其他的名字对应(?P\u003cname\u003e...)语法产生的命名捕获分组的名字。超出范围的数字索引、索引对应的分组未匹配到文本、正则表达式中未出现的分组名，都会被替换为空切片。"}]},{"ID":"20230724231518-7ezy41y","Type":"NodeParagraph","Properties":{"id":"20230724231518-7ezy41y","updated":"20230724231518"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"name格式的变量名，name会尽可能取最长序列："},{"Type":"NodeText","Data":"1x等价于"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"{1x}而非"},{"Type":"NodeText","Data":"{1}x，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"10等价于"},{"Type":"NodeText","Data":"{10}而非"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"{1}0。因此"},{"Type":"NodeText","Data":"name适用在后跟空格/换行等字符的情况，${name}适用所有情况。"}]},{"ID":"20230724231519-qne7puw","Type":"NodeParagraph","Properties":{"id":"20230724231519-qne7puw","updated":"20230724231519"},"Children":[{"Type":"NodeText","Data":"如果要在输出中插入一个字面值'"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"'，在template里可以使用"},{"Type":"NodeText","Data":"$。"}]},{"ID":"20230724231520-iid29ko","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231520-iid29ko","updated":"20230724231520"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#764","TextMarkTextContent":"ExpandString"}]},{"ID":"20230724231521-fvzjp07","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231521-fvzjp07","updated":"20230724231521"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ExpandString(dst []byte, template string, src string, match []int) []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231522-rwnp5dn","Type":"NodeParagraph","Properties":{"id":"20230724231522-rwnp5dn","updated":"20230724231522"},"Children":[{"Type":"NodeText","Data":"ExpandString类似Expand，但template和src参数为字符串。它将替换结果添加到切片并返回切片，以便让调用代码控制内存申请。"}]},{"ID":"20230724231523-o09hvfu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231523-o09hvfu","updated":"20230724231523"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#556","TextMarkTextContent":"ReplaceAllLiteral"}]},{"ID":"20230724231524-m1155aa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231524-m1155aa","updated":"20230724231524"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ReplaceAllLiteral(src, repl []byte) []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231525-bfaq23d","Type":"NodeParagraph","Properties":{"id":"20230724231525-bfaq23d","updated":"20230724231525"},"Children":[{"Type":"NodeText","Data":"ReplaceAllLiteral返回src的一个拷贝，将src中所有re的匹配结果都替换为repl。repl参数被直接使用，不会使用Expand进行扩展。"}]},{"ID":"20230724231526-8j9sue5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231526-8j9sue5","updated":"20230724231526"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#458","TextMarkTextContent":"ReplaceAllLiteralString"}]},{"ID":"20230724231527-y95idau","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231527-y95idau","updated":"20230724231527"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ReplaceAllLiteralString(src, repl string) string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231528-1u8xk7v","Type":"NodeParagraph","Properties":{"id":"20230724231528-1u8xk7v","updated":"20230724231528"},"Children":[{"Type":"NodeText","Data":"ReplaceAllLiteralString返回src的一个拷贝，将src中所有re的匹配结果都替换为repl。repl参数被直接使用，不会使用Expand进行扩展。"}]},{"ID":"20230724231529-aqupnt0","Type":"NodeParagraph","Properties":{"id":"20230724231529-aqupnt0","updated":"20230724231529"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231530-04d6q3k","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231530-04d6q3k","updated":"20230724231530"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#538","TextMarkTextContent":"ReplaceAll"}]},{"ID":"20230724231531-umfpn1w","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231531-umfpn1w","updated":"20230724231531"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ReplaceAll(src, repl []byte) []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231532-8vx8u68","Type":"NodeParagraph","Properties":{"id":"20230724231532-8vx8u68","updated":"20230724231532"},"Children":[{"Type":"NodeText","Data":"ReplaceAllLiteral返回src的一个拷贝，将src中所有re的匹配结果都替换为repl。在替换时，repl中的'"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"'符号会按照Expand方法的规则进行解释和替换，例如"},{"Type":"NodeText","Data":"1会被替换为第一个分组匹配结果。"}]},{"ID":"20230724231533-w47m0cs","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231533-w47m0cs","updated":"20230724231533"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#444","TextMarkTextContent":"ReplaceAllString"}]},{"ID":"20230724231534-z19y651","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231534-z19y651","updated":"20230724231534"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ReplaceAllString(src, repl string) string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231535-n0z9gvm","Type":"NodeParagraph","Properties":{"id":"20230724231535-n0z9gvm","updated":"20230724231535"},"Children":[{"Type":"NodeText","Data":"ReplaceAllLiteral返回src的一个拷贝，将src中所有re的匹配结果都替换为repl。在替换时，repl中的'"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"inline-math","TextMarkInlineMathContent":"'符号会按照Expand方法的规则进行解释和替换，例如"},{"Type":"NodeText","Data":"1会被替换为第一个分组匹配结果。"}]},{"ID":"20230724231536-pcrrra7","Type":"NodeParagraph","Properties":{"id":"20230724231536-pcrrra7","updated":"20230724231536"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231537-1ugz3xz","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231537-1ugz3xz","updated":"20230724231537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#566","TextMarkTextContent":"ReplaceAllFunc"}]},{"ID":"20230724231538-rf8t48v","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231538-rf8t48v","updated":"20230724231538"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ReplaceAllFunc(src []byte, repl func([]byte) []byte) []byte\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231539-7fgv4cb","Type":"NodeParagraph","Properties":{"id":"20230724231539-7fgv4cb","updated":"20230724231539"},"Children":[{"Type":"NodeText","Data":"ReplaceAllLiteral返回src的一个拷贝，将src中所有re的匹配结果（设为matched）都替换为repl(matched)。repl返回的切片被直接使用，不会使用Expand进行扩展。"}]},{"ID":"20230724231540-wcedig5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231540-wcedig5","updated":"20230724231540"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/regexp.go?name=release#468","TextMarkTextContent":"ReplaceAllStringFunc"}]},{"ID":"20230724231541-6f6dn22","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231541-6f6dn22","updated":"20230724231541"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) ReplaceAllStringFunc(src string, repl func(string) string) string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231542-ugjuasm","Type":"NodeParagraph","Properties":{"id":"20230724231542-ugjuasm","updated":"20230724231542"},"Children":[{"Type":"NodeText","Data":"ReplaceAllLiteral返回src的一个拷贝，将src中所有re的匹配结果（设为matched）都替换为repl(matched)。repl返回的字符串被直接使用，不会使用Expand进行扩展。"}]}]}