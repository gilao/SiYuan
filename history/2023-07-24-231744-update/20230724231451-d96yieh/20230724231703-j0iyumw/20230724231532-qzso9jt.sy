{"ID":"20230724231532-qzso9jt","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231532-qzso9jt","title":"encoding-gob","updated":"20230724231532"},"Children":[{"ID":"20230724231533-csc42lx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231533-csc42lx","updated":"20230724231533"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"encoding-gob"}]},{"ID":"20230724231534-8305toh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231534-8305toh","updated":"20230724231534"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import \"encoding/gob\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231535-covc044","Type":"NodeParagraph","Properties":{"id":"20230724231535-covc044","updated":"20230724231535"},"Children":[{"Type":"NodeText","Data":"gob包管理gob流——在编码器（发送器）和解码器（接受器）之间交换的binary值。一般用于传递远端程序调用（RPC）的参数和结果，如net/rpc包就有提供。"}]},{"ID":"20230724231536-8986y25","Type":"NodeParagraph","Properties":{"id":"20230724231536-8986y25","updated":"20230724231536"},"Children":[{"Type":"NodeText","Data":"本实现给每一个数据类型都编译生成一个编解码程序，当单个编码器用于传递数据流时，会分期偿还编译的消耗，是效率最高的。"}]},{"ID":"20230724231537-qyc7cz8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231537-qyc7cz8","updated":"20230724231537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Basics"}]},{"ID":"20230724231538-ynwjix5","Type":"NodeParagraph","Properties":{"id":"20230724231538-ynwjix5","updated":"20230724231538"},"Children":[{"Type":"NodeText","Data":"Gob流是自解码的。流中的所有数据都有前缀（采用一个预定义类型的集合）指明其类型。指针不会传递，而是传递值；也就是说数据是压平了的。递归的类型可以很好的工作，但是递归的值（比如说值内某个成员直接/间接指向该值）会出问题。这个问题将来可能会修复。"}]},{"ID":"20230724231539-y27l3uk","Type":"NodeParagraph","Properties":{"id":"20230724231539-y27l3uk","updated":"20230724231539"},"Children":[{"Type":"NodeText","Data":"要使用gob，先要创建一个编码器，并向其一共一系列数据：可以是值，也可以是指向实际存在数据的指针。编码器会确保所有必要的类型信息都被发送。在接收端，解码器从编码数据流中恢复数据并将它们填写进本地变量里。"}]},{"ID":"20230724231540-jryt50h","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231540-jryt50h","updated":"20230724231540"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Types and Values"}]},{"ID":"20230724231541-ehedshq","Type":"NodeParagraph","Properties":{"id":"20230724231541-ehedshq","updated":"20230724231541"},"Children":[{"Type":"NodeText","Data":"发送端和接收端的值/类型不需要严格匹配。对结构体来说，字段（根据字段名识别）如果发送端有而接收端没有，会被忽略；接收端有而发送端没有的字段也会被忽略；发送端和接收端都有的字段其类型必须是可兼容的；发送端和接收端都会在gob流和实际go类型之间进行必要的指针取址/寻址工作。举例如下："}]},{"ID":"20230724231542-rzphgfs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231542-rzphgfs","updated":"20230724231542"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"struct { A, B int }\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231543-to04x99","Type":"NodeParagraph","Properties":{"id":"20230724231543-to04x99","updated":"20230724231543"},"Children":[{"Type":"NodeText","Data":"可以和如下类型互相发送和接收："}]},{"ID":"20230724231544-373use4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231544-373use4","updated":"20230724231544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"struct { A, B int }\t// 同一类型\n*struct { A, B int }\t// 结构体需要额外重定向（指针）\nstruct { *A, **B int }\t// 字段需要额外重定向（指针）\nstruct { A, B int64 }\t// 同为整型/浮点型且符号类型相同的不同值类型，参见下面\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231545-n6sdsj3","Type":"NodeParagraph","Properties":{"id":"20230724231545-n6sdsj3","updated":"20230724231545"},"Children":[{"Type":"NodeText","Data":"可以发送给如下任一类型："}]},{"ID":"20230724231546-33z1ce5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231546-33z1ce5","updated":"20230724231546"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"struct { A, B int }\t// 同一类型\nstruct { B, A int }\t// 字段顺序改变无影响，按名称匹配\nstruct { A, B, C int }\t// 忽略多出的字段C\nstruct { B int }\t// 忽略缺少的字段A，会丢弃A的值\nstruct { B, C int }\t// 忽略缺少的字段A，忽略多出的字段C\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231547-1n8bin9","Type":"NodeParagraph","Properties":{"id":"20230724231547-1n8bin9","updated":"20230724231547"},"Children":[{"Type":"NodeText","Data":"但尝试发送给如下类型的话就会导致错误："}]},{"ID":"20230724231548-9uy514o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231548-9uy514o","updated":"20230724231548"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"struct { A int; B uint }\t// B字段改变了符号类型\nstruct { A int; B float }\t// B字段改变了类型\nstruct { }\t\t\t// 无共同字段名\nstruct { C, D int }\t\t// 无共同字段名\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231549-aqyr4f7","Type":"NodeParagraph","Properties":{"id":"20230724231549-aqyr4f7","updated":"20230724231549"},"Children":[{"Type":"NodeText","Data":"整数以两种方式传递：任意精度有符号整数和任意精度无符号整数。Gob里只有无符号和有符号整数的区别，没有int8、int16等类型的区分。如下所述，发送端会以变长编码发送整数值；接收端接收整数并保存在目标变量里。浮点数则总是使用IEEE-754 64位精度（参见下述）。"}]},{"ID":"20230724231550-jdhgt7t","Type":"NodeParagraph","Properties":{"id":"20230724231550-jdhgt7t","updated":"20230724231550"},"Children":[{"Type":"NodeText","Data":"有符号整数可以被任意有符号整形接收：int、int16等；无符号整数可以被任意无符号整形接收；浮点数可以被任意浮点数类型接收。但是，接收端类型必须能容纳该值（上溢/下溢都不行），否则解码操作会失败。"}]},{"ID":"20230724231551-xxryg6o","Type":"NodeParagraph","Properties":{"id":"20230724231551-xxryg6o","updated":"20230724231551"},"Children":[{"Type":"NodeText","Data":"结构体、数组和切片都被支持。结构体只编码和解码导出字段。字符串和byte数组/切片有专门的高效表示（参见下述）。当解码切片时，如果当前切片的容量足够会被复用，否则会申请新的底层数组（所以还是用切片地址为好）。此外，生成的切片的长度会修改为解码的成员的个数。"}]},{"ID":"20230724231552-8uow7o7","Type":"NodeParagraph","Properties":{"id":"20230724231552-8uow7o7","updated":"20230724231552"},"Children":[{"Type":"NodeText","Data":"Gob流不支持函数和通道。试图在最顶层编码这些类型的值会导致失败。结构体中包含函数或者通道类型的字段的话，会视作非导出字段（忽略）处理。"}]},{"ID":"20230724231553-dup4fod","Type":"NodeParagraph","Properties":{"id":"20230724231553-dup4fod","updated":"20230724231553"},"Children":[{"Type":"NodeText","Data":"Gob可以编码任意实现了GobEncoder接口或者encoding.BinaryMarshaler接口的类型的值（通过调用对应的方法），GobEncoder接口优先。"}]},{"ID":"20230724231554-4g9yjmo","Type":"NodeParagraph","Properties":{"id":"20230724231554-4g9yjmo","updated":"20230724231554"},"Children":[{"Type":"NodeText","Data":"Gob可以解码任意实现了GobDecoder接口或者encoding.BinaryUnmarshaler接口的类型的值（通过调用对应的方法），同样GobDecoder接口优先。"}]},{"ID":"20230724231555-zeldfbg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231555-zeldfbg","updated":"20230724231555"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Encoding Details"}]},{"ID":"20230724231556-nvejy01","Type":"NodeParagraph","Properties":{"id":"20230724231556-nvejy01","updated":"20230724231556"},"Children":[{"Type":"NodeText","Data":"这部分文档是编码细节，对多数使用者并不重要。细节是按从底向上的顺序展示的。"}]},{"ID":"20230724231557-ppwowx2","Type":"NodeParagraph","Properties":{"id":"20230724231557-ppwowx2","updated":"20230724231557"},"Children":[{"Type":"NodeText","Data":"无符号整数用两种方法发送。如果该整数小于128，则以一个字节发送该值；否则采用最小长度大端在前的字节流保存该整数，并在最前面使用一个字节保存字节流的字节数相反数。因此0被发送为(00)，7被发送为(07)，而256被发送为(FE 01 00)（字节数2，其相反数-2，用补码表示，为FE）。"}]},{"ID":"20230724231558-l84i9er","Type":"NodeParagraph","Properties":{"id":"20230724231558-l84i9er","updated":"20230724231558"},"Children":[{"Type":"NodeText","Data":"布尔值按无符号整数编码，0表示假，1表示真。"}]},{"ID":"20230724231559-gpuea6y","Type":"NodeParagraph","Properties":{"id":"20230724231559-gpuea6y","updated":"20230724231559"},"Children":[{"Type":"NodeText","Data":"有符号整数翻译为一个无符号整数（i=\u003eu）来编码。u的最低字位表示值的符号（以及是否应对值按位取反）；其余位表示值。编码算法表示为如下（非实际代码）："}]},{"ID":"20230724231560-0ni28wv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231560-0ni28wv","updated":"20230724231560"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"uint u;\nif i \u003c 0 {\n\tu = (^i \u003c\u003c 1) | 1\t// i按位取反，左移1位，第1位设为1\n} else {\n\tu = (i \u003c\u003c 1)\t// i不进行取反，左移1位，第1位为0\n}\nencodeUnsigned(u)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231561-hrokagh","Type":"NodeParagraph","Properties":{"id":"20230724231561-hrokagh","updated":"20230724231561"},"Children":[{"Type":"NodeText","Data":"这样一来，最低位就相当于标志位，但还会对负数按位取反，以便保证负数不会出现特殊情况（补码表示的负数，其表示会受到整数类型的影响）。如，-129="},{"Type":"NodeSup","Children":[{"Type":"NodeSupOpenMarker","Data":"^"},{"Type":"NodeText","Data":"128=("},{"Type":"NodeSupCloseMarker","Data":"^"}]},{"Type":"NodeText","Data":"256\u003e\u003e1)编码为(FE 01 01)。"}]},{"ID":"20230724231562-wlh7l9b","Type":"NodeParagraph","Properties":{"id":"20230724231562-wlh7l9b","updated":"20230724231562"},"Children":[{"Type":"NodeText","Data":"浮点数的数值，首先总是转换float64类型值，该值使用math.Float64bits 函数转换为一个uint64整数，然后将字节序颠倒过来，最后作为一个普通无符号数编码传输。颠倒字节序说明数字的指数和高精度位数部分首先传送。因为低位一般是0，这样可以节约编码的字节数。例如，17.0编码后只有三个字节(FE 31 40)。"}]},{"ID":"20230724231563-x6lu5yx","Type":"NodeParagraph","Properties":{"id":"20230724231563-x6lu5yx","updated":"20230724231563"},"Children":[{"Type":"NodeText","Data":"字符串和byte数组/切片发送为一个无符号整数指定的字节数后跟不作处理的字节序列。"}]},{"ID":"20230724231564-ncq6f3b","Type":"NodeParagraph","Properties":{"id":"20230724231564-ncq6f3b","updated":"20230724231564"},"Children":[{"Type":"NodeText","Data":"其它切片和数组都发送为一个无符号整数指定的成员个数后跟所有成员的递归表示的gob编码。"}]},{"ID":"20230724231565-5q1b8nz","Type":"NodeParagraph","Properties":{"id":"20230724231565-5q1b8nz","updated":"20230724231565"},"Children":[{"Type":"NodeText","Data":"映射发送为一个无符号整数指定的键值对数后给许多键和值的gob编码。非nil但无成员的映射也会发送，因此如果发送者申请了一个映射，接收方也会申请一个映射，即使该映射内没有元素。"}]},{"ID":"20230724231566-xkdwlvn","Type":"NodeParagraph","Properties":{"id":"20230724231566-xkdwlvn","updated":"20230724231566"},"Children":[{"Type":"NodeText","Data":"结构体也以键值对（字段名：字段值）序列的形式发送。字段值采用递归表示的gob编码发送。如果字段为其类型的零值，则该字段不会被发送。字段编号由编码的结构体的类型确定：编码类型的第一个字段为字段0，第二个为字段1，依次类推。当编码一个结构体的值时，字段编号出于效率考虑是增量编码的，字段总是按字段编号递增的顺序被编码，增量是无符号整数。增量编码将字段编号初始化为-1，因此无符号整型值为7的字段0编码为增量1值7。最后，所有的字段都被发送后，会发送终止标记表明结构体的结束。终止标记为一个增量为0的值，其表示为(00)。"}]},{"ID":"20230724231567-pfy3tr2","Type":"NodeParagraph","Properties":{"id":"20230724231567-pfy3tr2","updated":"20230724231567"},"Children":[{"Type":"NodeText","Data":"接口类型不会检查兼容性；所有的接口都被视为同一种“接口”类型来传输；类似整数和字节切片，它们都被视为interface{}类型。接口值发送为一个表示其具体类型的字符串标志符（必须由调用者预先注册的名称）后跟表示后续数据字节数的无符号整数（以便需要时可以跳过该值），再后跟保存在接口里的值的动态具体类型的gob编码。nil接口值会发送为标志符为空字符串、不发送值的接口。在接收到之后，由解码器验证该值是否满足接收端变量接口。"}]},{"ID":"20230724231568-yhtm9kn","Type":"NodeParagraph","Properties":{"id":"20230724231568-yhtm9kn","updated":"20230724231568"},"Children":[{"Type":"NodeText","Data":"类型的表示如下所示。当一个编码器和解码器的连接中定义了一个类型时，该类型会被指定一个整数类型ID。当调用Encoder.Encode(v)时，该方法会确保v及v所有成员都有对应ID，然后本方法会发送一系列对（typeid，encoded-v） ，其中typeid是编码类型的类型ID，encoded-v是值v的gob编码。"}]},{"ID":"20230724231569-m3joor8","Type":"NodeParagraph","Properties":{"id":"20230724231569-m3joor8","updated":"20230724231569"},"Children":[{"Type":"NodeText","Data":"为了定义一个类型，编码器会选择一个未使用的正数作为id并发送对（-type id, encoded-type），其中encoded-type 是由如下类型构成、描述该类型的wireType类型的gob编码。"}]},{"ID":"20230724231570-7qr5zrh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231570-7qr5zrh","updated":"20230724231570"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type wireType struct {\n\tArrayT  *ArrayType\n\tSliceT  *SliceType\n\tStructT *StructType\n\tMapT    *MapType\n}\ntype arrayType struct {\n\tCommonType\n\tElem typeId\n\tLen  int\n}\ntype CommonType struct {\n\tName string // 结构体的名字\n\tId  int    // 类型的ID\n}\ntype sliceType struct {\n\tCommonType\n\tElem typeId\n}\ntype structType struct {\n\tCommonType\n\tField []*fieldType // 结构体的字段\n}\ntype fieldType struct {\n\tName string // 字段名\n\tId   int    // 字段的类型ID，必须是已经定义的类型\n}\ntype mapType struct {\n\tCommonType\n\tKey  typeId\n\tElem typeId\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231571-d1be57u","Type":"NodeParagraph","Properties":{"id":"20230724231571-d1be57u","updated":"20230724231571"},"Children":[{"Type":"NodeText","Data":"如果有嵌套的类型，必须先定义所有内部类型的ID才能定义顶层类型的ID用于描述encoded-v。"}]},{"ID":"20230724231572-ygi0o4s","Type":"NodeParagraph","Properties":{"id":"20230724231572-ygi0o4s","updated":"20230724231572"},"Children":[{"Type":"NodeText","Data":"为了简化启动，有些类型是预先定义好了的，这些类型及其ID如下："}]},{"ID":"20230724231573-82inw9j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231573-82inw9j","updated":"20230724231573"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"bool        1\nint         2\nuint        3\nfloat       4\n[]byte      5\nstring      6\ncomplex     7\ninterface   8\n// 空缺用于保留ID\nWireType    16\nArrayType   17\nCommonType  18\nSliceType   19\nStructType  20\nFieldType   21\n// 22是[]fieldType类型的ID\nMapType     23\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231574-7zlr286","Type":"NodeParagraph","Properties":{"id":"20230724231574-7zlr286","updated":"20230724231574"},"Children":[{"Type":"NodeText","Data":"最后，每一次调用Encode创建的信息都会以一个编码了的无符号整数指明消息剩余部分的字节数。在开始的类型名后面，接口值也以同样的方式包装；事实上，接口值表现的就像对Encode进行递归调用一样。"}]},{"ID":"20230724231575-x7us2ah","Type":"NodeParagraph","Properties":{"id":"20230724231575-x7us2ah","updated":"20230724231575"},"Children":[{"Type":"NodeText","Data":"总的来说，一个gob流看起来是这样的："}]},{"ID":"20230724231576-5ritp8q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231576-5ritp8q","updated":"20230724231576"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"(byteCount (-type id, encoding of a wireType)* (type id, encoding of a value))*\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231577-5mpj922","Type":"NodeParagraph","Properties":{"id":"20230724231577-5mpj922","updated":"20230724231577"},"Children":[{"Type":"NodeText","Data":"其中*表示0或多次重复，值的类型id必须是预定义的，或者在流中值的前面定义。"}]},{"ID":"20230724231578-nxvj4c8","Type":"NodeParagraph","Properties":{"id":"20230724231578-nxvj4c8","updated":"20230724231578"},"Children":[{"Type":"NodeText","Data":"参见\"Gobs of data\"获取gob wire格式的设计讨论："}]},{"ID":"20230724231579-lihu30k","Type":"NodeParagraph","Properties":{"id":"20230724231579-lihu30k","updated":"20230724231579"},"Children":[{"Type":"NodeText","Data":"http://golang.org/doc/articles/gobs_of_data.html"}]},{"ID":"20230724231580-7tay0ln","Type":"NodeParagraph","Properties":{"id":"20230724231580-7tay0ln","updated":"20230724231580"},"Children":[{"Type":"NodeText","Data":"Example (Basic)"}]},{"ID":"20230724231581-fovs7n8","Type":"NodeParagraph","Properties":{"id":"20230724231581-fovs7n8","updated":"20230724231581"},"Children":[{"Type":"NodeText","Data":"Example (EncodeDecode)"}]},{"ID":"20230724231582-5ao3lh7","Type":"NodeParagraph","Properties":{"id":"20230724231582-5ao3lh7","updated":"20230724231582"},"Children":[{"Type":"NodeText","Data":"Example (Interface)"}]},{"ID":"20230724231583-yc5xdkz","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231583-yc5xdkz","updated":"20230724231583"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/type.go?name=release#773","TextMarkTextContent":"GobDecoder"}]},{"ID":"20230724231584-zgdlmip","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231584-zgdlmip","updated":"20230724231584"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type GobDecoder interface {\n    // GobDecode必须是指针的方法，使用切片数据重写指针指向的值\n    // 切片数据应该由同一具体类型的GobEncode生成\n    GobDecode([]byte) error\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231585-f4e8ae6","Type":"NodeParagraph","Properties":{"id":"20230724231585-f4e8ae6","updated":"20230724231585"},"Children":[{"Type":"NodeText","Data":"GobDecoder是一个描述数据的接口，提供自己的方案来解码GobEncoder发送的数据。"}]},{"ID":"20230724231586-en5vouk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231586-en5vouk","updated":"20230724231586"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/type.go?name=release#764","TextMarkTextContent":"GobEncoder"}]},{"ID":"20230724231587-dykmqec","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231587-dykmqec","updated":"20230724231587"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type GobEncoder interface {\n    // GobEncode方法返回一个代表值的切片数据\n    // 该切片数据由同一类型的指针方法GobDecoder接受解码\n    GobEncode() ([]byte, error)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231588-goazaya","Type":"NodeParagraph","Properties":{"id":"20230724231588-goazaya","updated":"20230724231588"},"Children":[{"Type":"NodeText","Data":"GobEncoder是一个描述数据的接口，提供自己的方案来将数据编码供GobDecoder接收并解码。一个实现了GobEncoder接口和GobDecoder接口的类型可以完全控制自身数据的表示，因此可以包含非导出字段、通道、函数等数据，这些数据gob流正常是不能传输的。"}]},{"ID":"20230724231589-y976tfp","Type":"NodeParagraph","Properties":{"id":"20230724231589-y976tfp","updated":"20230724231589"},"Children":[{"Type":"NodeText","Data":"注意：因为gob数据可以被永久保存，在软件更新的过程中保证用于GobEncoder编码的数据的稳定性（保证兼容）是较好的设计原则。例如，让GobEncode 接口在编码后数据里包含版本信息可能很有意义。"}]},{"ID":"20230724231590-20smsj2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231590-20smsj2","updated":"20230724231590"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/type.go?name=release#816","TextMarkTextContent":"Register"}]},{"ID":"20230724231591-s6vcuer","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231591-s6vcuer","updated":"20230724231591"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Register(value interface{})\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231592-9050c57","Type":"NodeParagraph","Properties":{"id":"20230724231592-9050c57","updated":"20230724231592"},"Children":[{"Type":"NodeText","Data":"Register记录value下层具体值的类型和其名称。该名称将用来识别发送或接受接口类型值时下层的具体类型。本函数只应在初始化时调用，如果类型和名字的映射不是一一对应的，会panic。"}]},{"ID":"20230724231593-b873z7y","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231593-b873z7y","updated":"20230724231593"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/type.go?name=release#788","TextMarkTextContent":"RegisterName"}]},{"ID":"20230724231594-2yxfsr6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231594-2yxfsr6","updated":"20230724231594"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func RegisterName(name string, value interface{})\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231595-1wdyauz","Type":"NodeParagraph","Properties":{"id":"20230724231595-1wdyauz","updated":"20230724231595"},"Children":[{"Type":"NodeText","Data":"RegisterName类似Register，淡灰使用提供的name代替类型的默认名称。"}]},{"ID":"20230724231596-qiut7lp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231596-qiut7lp","updated":"20230724231596"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/decoder.go?name=release#18","TextMarkTextContent":"Decoder"}]},{"ID":"20230724231597-ejw3vlr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231597-ejw3vlr","updated":"20230724231597"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Decoder struct {\n    // 内含隐藏或不导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231598-oizpn6q","Type":"NodeParagraph","Properties":{"id":"20230724231598-oizpn6q","updated":"20230724231598"},"Children":[{"Type":"NodeText","Data":"Decoder管理从连接远端读取的类型和数据信息的解释（的操作）。"}]},{"ID":"20230724231599-r19o7e9","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231599-r19o7e9","updated":"20230724231599"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/decoder.go?name=release#34","TextMarkTextContent":"NewDecoder"}]},{"ID":"20230724231600-5ewgg79","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231600-5ewgg79","updated":"20230724231600"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func NewDecoder(r io.Reader) *Decoder\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231601-f2qxga8","Type":"NodeParagraph","Properties":{"id":"20230724231601-f2qxga8","updated":"20230724231601"},"Children":[{"Type":"NodeText","Data":"函数返回一个从r读取数据的*Decoder，如果r不满足io.ByteReader接口，则会包装r为bufio.Reader。"}]},{"ID":"20230724231602-6lr8hx1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231602-6lr8hx1","updated":"20230724231602"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Decoder) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/decoder.go?name=release#193","TextMarkTextContent":"Decode"}]},{"ID":"20230724231603-56d8tz6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231603-56d8tz6","updated":"20230724231603"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (dec *Decoder) Decode(e interface{}) error\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231604-xv7ot4h","Type":"NodeParagraph","Properties":{"id":"20230724231604-xv7ot4h","updated":"20230724231604"},"Children":[{"Type":"NodeText","Data":"Decode从输入流读取下一个之并将该值存入e。如果e是nil，将丢弃该值；否则e必须是可接收该值的类型的指针。如果输入结束，方法会返回io.EOF并且不修改e（指向的值）。"}]},{"ID":"20230724231605-f7hk5kh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231605-f7hk5kh","updated":"20230724231605"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Decoder) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/decoder.go?name=release#213","TextMarkTextContent":"DecodeValue"}]},{"ID":"20230724231606-inj07hj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231606-inj07hj","updated":"20230724231606"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (dec *Decoder) DecodeValue(v reflect.Value) error\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231607-e5fuqvw","Type":"NodeParagraph","Properties":{"id":"20230724231607-e5fuqvw","updated":"20230724231607"},"Children":[{"Type":"NodeText","Data":"DecodeValue从输入流读取下一个值，如果v是reflect.Value类型的零值（v.Kind() == Invalid），方法丢弃该值；否则它会把该值存入v。此时，v必须代表一个非nil的指向实际存在值的指针或者可写入的reflect.Value（v.CanSet()为真）。如果输入结束，方法会返回io.EOF并且不修改e（指向的值）。"}]},{"ID":"20230724231608-1bypqne","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231608-1bypqne","updated":"20230724231608"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/encoder.go?name=release#16","TextMarkTextContent":"Encoder"}]},{"ID":"20230724231609-ribobk6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231609-ribobk6","updated":"20230724231609"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Encoder struct {\n    // 内含隐藏或不导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231610-ob23foo","Type":"NodeParagraph","Properties":{"id":"20230724231610-ob23foo","updated":"20230724231610"},"Children":[{"Type":"NodeText","Data":"Encoder管理将数据和类型信息编码后发送到连接远端（的操作）。"}]},{"ID":"20230724231611-01woh3r","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231611-01woh3r","updated":"20230724231611"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/encoder.go?name=release#33","TextMarkTextContent":"NewEncoder"}]},{"ID":"20230724231612-avo9emu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231612-avo9emu","updated":"20230724231612"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func NewEncoder(w io.Writer) *Encoder\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231613-o6axhf5","Type":"NodeParagraph","Properties":{"id":"20230724231613-o6axhf5","updated":"20230724231613"},"Children":[{"Type":"NodeText","Data":"NewEncoder返回一个将编码后数据写入w的*Encoder。"}]},{"ID":"20230724231614-a623aou","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231614-a623aou","updated":"20230724231614"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Encoder) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/encoder.go?name=release#170","TextMarkTextContent":"Encode"}]},{"ID":"20230724231615-et18zmy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231615-et18zmy","updated":"20230724231615"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (enc *Encoder) Encode(e interface{}) error\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231616-d7sl9zp","Type":"NodeParagraph","Properties":{"id":"20230724231616-d7sl9zp","updated":"20230724231616"},"Children":[{"Type":"NodeText","Data":"Encode方法将e编码后发送，并且会保证所有的类型信息都先发送。"}]},{"ID":"20230724231617-vf8stwv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231617-vf8stwv","updated":"20230724231617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Encoder) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/encoder.go?name=release#214","TextMarkTextContent":"EncodeValue"}]},{"ID":"20230724231618-jh5fvxp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231618-jh5fvxp","updated":"20230724231618"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (enc *Encoder) EncodeValue(value reflect.Value) error\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231619-p8q7znm","Type":"NodeParagraph","Properties":{"id":"20230724231619-p8q7znm","updated":"20230724231619"},"Children":[{"Type":"NodeText","Data":"EncodeValue方法将value代表的数据编码后发送，并且会保证所有的类型信息都先发送。"}]},{"ID":"20230724231620-hjnja22","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231620-hjnja22","updated":"20230724231620"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/encoding/gob/type.go?name=release#225","TextMarkTextContent":"CommonType"}]},{"ID":"20230724231621-cmnytzm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231621-cmnytzm","updated":"20230724231621"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type CommonType struct {\n    Name string\n    Id   typeId\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231622-jvcr7jf","Type":"NodeParagraph","Properties":{"id":"20230724231622-jvcr7jf","updated":"20230724231622"},"Children":[{"Type":"NodeText","Data":"CommonType保存所有类型的成员。这是个历史遗留“问题”，出于保持binary兼容性才保留，只用于类型描述的编码。该类型应视为不导出类型。"}]}]}