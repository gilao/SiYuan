{"ID":"20230724231529-0eftxzt","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231529-0eftxzt","title":"sync","updated":"20230724231529"},"Children":[{"ID":"20230724231530-cjz2xh4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231530-cjz2xh4","updated":"20230724231530"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"sync"}]},{"ID":"20230724231531-mobwxoy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231531-mobwxoy","updated":"20230724231531"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import \"sync\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231532-bfp7w5t","Type":"NodeParagraph","Properties":{"id":"20230724231532-bfp7w5t","updated":"20230724231532"},"Children":[{"Type":"NodeText","Data":"sync包提供了基本的同步基元，如互斥锁。除了Once和WaitGroup类型，大部分都是适用于低水平程序线程，高水平的同步使用channel通信更好一些。"}]},{"ID":"20230724231533-0v7bjrq","Type":"NodeParagraph","Properties":{"id":"20230724231533-0v7bjrq","updated":"20230724231533"},"Children":[{"Type":"NodeText","Data":"本包的类型的值不应被拷贝。"}]},{"ID":"20230724231534-ykx04vh","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231534-ykx04vh","updated":"20230724231534"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/mutex.go?name=release#27","TextMarkTextContent":"Locker"}]},{"ID":"20230724231535-1fx76ls","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231535-1fx76ls","updated":"20230724231535"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Locker interface {\n    Lock()\n    Unlock()\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231536-qo7ym9j","Type":"NodeParagraph","Properties":{"id":"20230724231536-qo7ym9j","updated":"20230724231536"},"Children":[{"Type":"NodeText","Data":"Locker接口代表一个可以加锁和解锁的对象。"}]},{"ID":"20230724231537-rxcpz4c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231537-rxcpz4c","updated":"20230724231537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/once.go?name=release#12","TextMarkTextContent":"Once"}]},{"ID":"20230724231538-gd4j4qb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231538-gd4j4qb","updated":"20230724231538"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Once struct {\n    // 包含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231539-yhy3jz8","Type":"NodeParagraph","Properties":{"id":"20230724231539-yhy3jz8","updated":"20230724231539"},"Children":[{"Type":"NodeText","Data":"Once是只执行一次动作的对象。"}]},{"ID":"20230724231540-xyoqyc2","Type":"NodeParagraph","Properties":{"id":"20230724231540-xyoqyc2","updated":"20230724231540"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231541-1k3qqf1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231541-1k3qqf1","updated":"20230724231541"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Once) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/once.go?name=release#32","TextMarkTextContent":"Do"}]},{"ID":"20230724231542-f3mg4e6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231542-f3mg4e6","updated":"20230724231542"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (o *Once) Do(f func())\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231543-66ammq5","Type":"NodeParagraph","Properties":{"id":"20230724231543-66ammq5","updated":"20230724231543"},"Children":[{"Type":"NodeText","Data":"Do方法当且仅当第一次被调用时才执行函数f。换句话说，给定变量："}]},{"ID":"20230724231544-nr080ri","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231544-nr080ri","updated":"20230724231544"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var once Once\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231545-xli1mjg","Type":"NodeParagraph","Properties":{"id":"20230724231545-xli1mjg","updated":"20230724231545"},"Children":[{"Type":"NodeText","Data":"如果once.Do(f)被多次调用，只有第一次调用会执行f，即使f每次调用Do 提供的f值不同。需要给每个要执行仅一次的函数都建立一个Once类型的实例。"}]},{"ID":"20230724231546-34qvya4","Type":"NodeParagraph","Properties":{"id":"20230724231546-34qvya4","updated":"20230724231546"},"Children":[{"Type":"NodeText","Data":"Do用于必须刚好运行一次的初始化。因为f是没有参数的，因此可能需要使用闭包来提供给Do方法调用："}]},{"ID":"20230724231547-ek9ij5t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231547-ek9ij5t","updated":"20230724231547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"config.once.Do(func() { config.init(filename) })\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231548-g58bwja","Type":"NodeParagraph","Properties":{"id":"20230724231548-g58bwja","updated":"20230724231548"},"Children":[{"Type":"NodeText","Data":"因为只有f返回后Do方法才会返回，f若引起了Do的调用，会导致死锁。"}]},{"ID":"20230724231549-llv5oan","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231549-llv5oan","updated":"20230724231549"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/mutex.go?name=release#21","TextMarkTextContent":"Mutex"}]},{"ID":"20230724231550-ltd3gt1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231550-ltd3gt1","updated":"20230724231550"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Mutex struct {\n    // 包含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231551-5ef08cr","Type":"NodeParagraph","Properties":{"id":"20230724231551-5ef08cr","updated":"20230724231551"},"Children":[{"Type":"NodeText","Data":"Mutex是一个互斥锁，可以创建为其他结构体的字段；零值为解锁状态。Mutex类型的锁和线程无关，可以由不同的线程加锁和解锁。"}]},{"ID":"20230724231552-dmt67xl","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231552-dmt67xl","updated":"20230724231552"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Mutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/mutex.go?name=release#41","TextMarkTextContent":"Lock"}]},{"ID":"20230724231553-jbsnxl5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231553-jbsnxl5","updated":"20230724231553"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (m *Mutex) Lock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231554-segjd7p","Type":"NodeParagraph","Properties":{"id":"20230724231554-segjd7p","updated":"20230724231554"},"Children":[{"Type":"NodeText","Data":"Lock方法锁住m，如果m已经加锁，则阻塞直到m解锁。"}]},{"ID":"20230724231555-niato8v","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231555-niato8v","updated":"20230724231555"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Mutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/mutex.go?name=release#82","TextMarkTextContent":"Unlock"}]},{"ID":"20230724231556-7cw5emh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231556-7cw5emh","updated":"20230724231556"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (m *Mutex) Unlock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231557-ovnuoyd","Type":"NodeParagraph","Properties":{"id":"20230724231557-ovnuoyd","updated":"20230724231557"},"Children":[{"Type":"NodeText","Data":"Unlock方法解锁m，如果m未加锁会导致运行时错误。锁和线程无关，可以由不同的线程加锁和解锁。"}]},{"ID":"20230724231558-2fsdmjv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231558-2fsdmjv","updated":"20230724231558"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/rwmutex.go?name=release#18","TextMarkTextContent":"RWMutex"}]},{"ID":"20230724231559-p7osdho","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231559-p7osdho","updated":"20230724231559"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type RWMutex struct {\n    // 包含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231560-dbvs3b3","Type":"NodeParagraph","Properties":{"id":"20230724231560-dbvs3b3","updated":"20230724231560"},"Children":[{"Type":"NodeText","Data":"RWMutex是读写互斥锁。该锁可以被同时多个读取者持有或唯一个写入者持有。RWMutex可以创建为其他结构体的字段；零值为解锁状态。RWMutex类型的锁也和线程无关，可以由不同的线程加读取锁/写入和解读取锁/写入锁。"}]},{"ID":"20230724231561-w5jk0m8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231561-w5jk0m8","updated":"20230724231561"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*RWMutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/rwmutex.go?name=release#72","TextMarkTextContent":"Lock"}]},{"ID":"20230724231562-34t35gs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231562-34t35gs","updated":"20230724231562"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (rw *RWMutex) Lock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231563-7gjbejo","Type":"NodeParagraph","Properties":{"id":"20230724231563-7gjbejo","updated":"20230724231563"},"Children":[{"Type":"NodeText","Data":"Lock方法将rw锁定为写入状态，禁止其他线程读取或者写入。"}]},{"ID":"20230724231564-99e4ot0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231564-99e4ot0","updated":"20230724231564"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*RWMutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/rwmutex.go?name=release#98","TextMarkTextContent":"Unlock"}]},{"ID":"20230724231565-ch8t6vo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231565-ch8t6vo","updated":"20230724231565"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (rw *RWMutex) Unlock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231566-vww8yof","Type":"NodeParagraph","Properties":{"id":"20230724231566-vww8yof","updated":"20230724231566"},"Children":[{"Type":"NodeText","Data":"Unlock方法解除rw的写入锁状态，如果m未加写入锁会导致运行时错误。"}]},{"ID":"20230724231567-p60irh8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231567-p60irh8","updated":"20230724231567"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*RWMutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/rwmutex.go?name=release#29","TextMarkTextContent":"RLock"}]},{"ID":"20230724231568-1xpkljk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231568-1xpkljk","updated":"20230724231568"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (rw *RWMutex) RLock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231569-rcbn0vp","Type":"NodeParagraph","Properties":{"id":"20230724231569-rcbn0vp","updated":"20230724231569"},"Children":[{"Type":"NodeText","Data":"RLock方法将rw锁定为读取状态，禁止其他线程写入，但不禁止读取。"}]},{"ID":"20230724231570-r4jqgs4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231570-r4jqgs4","updated":"20230724231570"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*RWMutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/rwmutex.go?name=release#48","TextMarkTextContent":"RUnlock"}]},{"ID":"20230724231571-6ykd4kl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231571-6ykd4kl","updated":"20230724231571"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (rw *RWMutex) RUnlock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231572-anob1eq","Type":"NodeParagraph","Properties":{"id":"20230724231572-anob1eq","updated":"20230724231572"},"Children":[{"Type":"NodeText","Data":"Runlock方法解除rw的读取锁状态，如果m未加读取锁会导致运行时错误。"}]},{"ID":"20230724231573-vfj5754","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231573-vfj5754","updated":"20230724231573"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*RWMutex) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/rwmutex.go?name=release#121","TextMarkTextContent":"RLocker"}]},{"ID":"20230724231574-p8dbukk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231574-p8dbukk","updated":"20230724231574"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (rw *RWMutex) RLocker() Locker\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231575-89li04u","Type":"NodeParagraph","Properties":{"id":"20230724231575-89li04u","updated":"20230724231575"},"Children":[{"Type":"NodeText","Data":"Rlocker方法返回一个互斥锁，通过调用rw.Rlock和rw.Runlock实现了Locker接口。"}]},{"ID":"20230724231576-7q96lgu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231576-7q96lgu","updated":"20230724231576"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/cond.go?name=release#22","TextMarkTextContent":"Cond"}]},{"ID":"20230724231577-mgfc916","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231577-mgfc916","updated":"20230724231577"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Cond struct {\n    // 在观测或更改条件时L会冻结\n    L Locker\n    // 包含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231578-z10zn2b","Type":"NodeParagraph","Properties":{"id":"20230724231578-z10zn2b","updated":"20230724231578"},"Children":[{"Type":"NodeText","Data":"Cond实现了一个条件变量，一个线程集合地，供线程等待或者宣布某事件的发生。"}]},{"ID":"20230724231579-lib5l8p","Type":"NodeParagraph","Properties":{"id":"20230724231579-lib5l8p","updated":"20230724231579"},"Children":[{"Type":"NodeText","Data":"每个Cond实例都有一个相关的锁（一般是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Mutex或"},{"Type":"NodeText","Data":"RWMutex类型的值），它必须在改变条件时或者调用Wait方法时保持锁定。Cond可以创建为其他结构体的字段，Cond在开始使用后不能被拷贝。"}]},{"ID":"20230724231580-1za1e6e","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231580-1za1e6e","updated":"20230724231580"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/cond.go?name=release#32","TextMarkTextContent":"NewCond"}]},{"ID":"20230724231581-2pr0tpo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231581-2pr0tpo","updated":"20230724231581"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func NewCond(l Locker) *Cond\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231582-yc2fzqj","Type":"NodeParagraph","Properties":{"id":"20230724231582-yc2fzqj","updated":"20230724231582"},"Children":[{"Type":"NodeText","Data":"使用锁l创建一个*Cond。"}]},{"ID":"20230724231583-jwfwntm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231583-jwfwntm","updated":"20230724231583"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Cond) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/cond.go?name=release#78","TextMarkTextContent":"Broadcast"}]},{"ID":"20230724231584-andr896","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231584-andr896","updated":"20230724231584"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (c *Cond) Broadcast()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231585-4vd0php","Type":"NodeParagraph","Properties":{"id":"20230724231585-4vd0php","updated":"20230724231585"},"Children":[{"Type":"NodeText","Data":"Broadcast唤醒所有等待c的线程。调用者在调用本方法时，建议（但并非必须）保持c.L的锁定。"}]},{"ID":"20230724231586-n5edpnx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231586-n5edpnx","updated":"20230724231586"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Cond) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/cond.go?name=release#70","TextMarkTextContent":"Signal"}]},{"ID":"20230724231587-5w6bum3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231587-5w6bum3","updated":"20230724231587"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (c *Cond) Signal()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231588-khc85r4","Type":"NodeParagraph","Properties":{"id":"20230724231588-khc85r4","updated":"20230724231588"},"Children":[{"Type":"NodeText","Data":"Signal唤醒等待c的一个线程（如果存在）。调用者在调用本方法时，建议（但并非必须）保持c.L的锁定。"}]},{"ID":"20230724231589-vfu3vho","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231589-vfu3vho","updated":"20230724231589"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Cond) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/cond.go?name=release#52","TextMarkTextContent":"Wait"}]},{"ID":"20230724231590-2wvw0ph","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231590-2wvw0ph","updated":"20230724231590"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (c *Cond) Wait()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231591-78qrupi","Type":"NodeParagraph","Properties":{"id":"20230724231591-78qrupi","updated":"20230724231591"},"Children":[{"Type":"NodeText","Data":"Wait自行解锁c.L并阻塞当前线程，在之后线程恢复执行时，Wait方法会在返回前锁定c.L。和其他系统不同，Wait除非被Broadcast或者Signal唤醒，不会主动返回。"}]},{"ID":"20230724231592-4qolkwg","Type":"NodeParagraph","Properties":{"id":"20230724231592-4qolkwg","updated":"20230724231592"},"Children":[{"Type":"NodeText","Data":"因为线程中Wait方法是第一个恢复执行的，而此时c.L未加锁。调用者不应假设Wait恢复时条件已满足，相反，调用者应在循环中等待："}]},{"ID":"20230724231593-m7ydqby","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231593-m7ydqby","updated":"20230724231593"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"c.L.Lock()\nfor !condition() {\n    c.Wait()\n}\n... make use of condition ...\nc.L.Unlock()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231594-zoirjix","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231594-zoirjix","updated":"20230724231594"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/waitgroup.go?name=release#17","TextMarkTextContent":"WaitGroup"}]},{"ID":"20230724231595-w01dx8q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231595-w01dx8q","updated":"20230724231595"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type WaitGroup struct {\n    // 包含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231596-scjn9bh","Type":"NodeParagraph","Properties":{"id":"20230724231596-scjn9bh","updated":"20230724231596"},"Children":[{"Type":"NodeText","Data":"WaitGroup用于等待一组线程的结束。父线程调用Add方法来设定应等待的线程的数量。每个被等待的线程在结束时应调用Done方法。同时，主线程里可以调用Wait方法阻塞至所有线程结束。"}]},{"ID":"20230724231597-2u0ufeb","Type":"NodeParagraph","Properties":{"id":"20230724231597-2u0ufeb","updated":"20230724231597"},"Children":[{"Type":"NodeText","Data":"Example"}]},{"ID":"20230724231598-fu87czf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231598-fu87czf","updated":"20230724231598"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*WaitGroup) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/waitgroup.go?name=release#44","TextMarkTextContent":"Add"}]},{"ID":"20230724231599-e6i7ifs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231599-e6i7ifs","updated":"20230724231599"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (wg *WaitGroup) Add(delta int)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231600-a9pz5ts","Type":"NodeParagraph","Properties":{"id":"20230724231600-a9pz5ts","updated":"20230724231600"},"Children":[{"Type":"NodeText","Data":"Add方法向内部计数加上delta，delta可以是负数；如果内部计数器变为0，Wait方法阻塞等待的所有线程都会释放，如果计数器小于0，方法panic。注意Add加上正数的调用应在Wait之前，否则Wait可能只会等待很少的线程。一般来说本方法应在创建新的线程或者其他应等待的事件之前调用。"}]},{"ID":"20230724231601-kgi08t4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231601-kgi08t4","updated":"20230724231601"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*WaitGroup) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/waitgroup.go?name=release#81","TextMarkTextContent":"Done"}]},{"ID":"20230724231602-8ker3sf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231602-8ker3sf","updated":"20230724231602"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (wg *WaitGroup) Done()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231603-9uk7m96","Type":"NodeParagraph","Properties":{"id":"20230724231603-9uk7m96","updated":"20230724231603"},"Children":[{"Type":"NodeText","Data":"Done方法减少WaitGroup计数器的值，应在线程的最后执行。"}]},{"ID":"20230724231604-kck2re7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231604-kck2re7","updated":"20230724231604"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*WaitGroup) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/waitgroup.go?name=release#86","TextMarkTextContent":"Wait"}]},{"ID":"20230724231605-rtvunyl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231605-rtvunyl","updated":"20230724231605"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (wg *WaitGroup) Wait()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231606-5rtztkx","Type":"NodeParagraph","Properties":{"id":"20230724231606-5rtztkx","updated":"20230724231606"},"Children":[{"Type":"NodeText","Data":"Wait方法阻塞直到WaitGroup计数器减为0。"}]},{"ID":"20230724231607-xy7syeg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231607-xy7syeg","updated":"20230724231607"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/pool.go?name=release#42","TextMarkTextContent":"Pool"}]},{"ID":"20230724231608-7jksbda","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231608-7jksbda","updated":"20230724231608"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Pool struct {\n    // 可选参数New指定一个函数在Get方法可能返回nil时来生成一个值\n    // 该参数不能在调用Get方法时被修改\n    New func() interface{}\n    // 包含隐藏或非导出字段\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231609-z7co72r","Type":"NodeParagraph","Properties":{"id":"20230724231609-z7co72r","updated":"20230724231609"},"Children":[{"Type":"NodeText","Data":"Pool是一个可以分别存取的临时对象的集合。"}]},{"ID":"20230724231610-73b8zj6","Type":"NodeParagraph","Properties":{"id":"20230724231610-73b8zj6","updated":"20230724231610"},"Children":[{"Type":"NodeText","Data":"Pool中保存的任何item都可能随时不做通告的释放掉。如果Pool持有该对象的唯一引用，这个item就可能被回收。"}]},{"ID":"20230724231611-hqm548d","Type":"NodeParagraph","Properties":{"id":"20230724231611-hqm548d","updated":"20230724231611"},"Children":[{"Type":"NodeText","Data":"Pool可以安全的被多个线程同时使用。"}]},{"ID":"20230724231612-pckdmfp","Type":"NodeParagraph","Properties":{"id":"20230724231612-pckdmfp","updated":"20230724231612"},"Children":[{"Type":"NodeText","Data":"Pool的目的是缓存申请但未使用的item用于之后的重用，以减轻GC的压力。也就是说，让创建高效而线程安全的空闲列表更容易。但Pool并不适用于所有空闲列表。"}]},{"ID":"20230724231613-q4ckztj","Type":"NodeParagraph","Properties":{"id":"20230724231613-q4ckztj","updated":"20230724231613"},"Children":[{"Type":"NodeText","Data":"Pool的合理用法是用于管理一组静静的被多个独立并发线程共享并可能重用的临时item。Pool提供了让多个线程分摊内存申请消耗的方法。"}]},{"ID":"20230724231614-oqpodlm","Type":"NodeParagraph","Properties":{"id":"20230724231614-oqpodlm","updated":"20230724231614"},"Children":[{"Type":"NodeText","Data":"Pool的一个好例子在fmt包里。该Pool维护一个动态大小的临时输出缓存仓库。该仓库会在过载（许多线程活跃的打印时）增大，在沉寂时缩小。"}]},{"ID":"20230724231615-omj4j7f","Type":"NodeParagraph","Properties":{"id":"20230724231615-omj4j7f","updated":"20230724231615"},"Children":[{"Type":"NodeText","Data":"另一方面，管理着短寿命对象的空闲列表不适合使用Pool，因为这种情况下内存申请消耗不能很好的分配。这时应该由这些对象自己实现空闲列表。"}]},{"ID":"20230724231616-8fjis3g","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231616-8fjis3g","updated":"20230724231616"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Pool) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/pool.go?name=release#93","TextMarkTextContent":"Get"}]},{"ID":"20230724231617-49o6ivp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231617-49o6ivp","updated":"20230724231617"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (p *Pool) Get() interface{}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231618-n4zzapb","Type":"NodeParagraph","Properties":{"id":"20230724231618-n4zzapb","updated":"20230724231618"},"Children":[{"Type":"NodeText","Data":"Get方法从池中选择任意一个item，删除其在池中的引用计数，并提供给调用者。Get方法也可能选择无视内存池，将其当作空的。调用者不应认为Get的返回这和传递给Put的值之间有任何关系。"}]},{"ID":"20230724231619-xxwwywz","Type":"NodeParagraph","Properties":{"id":"20230724231619-xxwwywz","updated":"20230724231619"},"Children":[{"Type":"NodeText","Data":"假使Get方法没有取得item：如p.New非nil，Get返回调用p.New的结果；否则返回nil。"}]},{"ID":"20230724231620-f61xaez","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231620-f61xaez","updated":"20230724231620"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Pool) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/sync/pool.go?name=release#61","TextMarkTextContent":"Put"}]},{"ID":"20230724231621-lic0mh4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231621-lic0mh4","updated":"20230724231621"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (p *Pool) Put(x interface{})\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231622-6ur85qg","Type":"NodeParagraph","Properties":{"id":"20230724231622-6ur85qg","updated":"20230724231622"},"Children":[{"Type":"NodeText","Data":"Put方法将x放入池中。"}]}]}