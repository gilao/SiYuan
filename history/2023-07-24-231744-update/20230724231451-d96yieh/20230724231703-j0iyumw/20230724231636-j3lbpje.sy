{"ID":"20230724231636-j3lbpje","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231636-j3lbpje","title":"Context 的 使用","updated":"20230724231636"},"Children":[{"ID":"20230724231637-7rulo4v","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231637-7rulo4v","updated":"20230724231637"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"Go Context 的使用"}]},{"ID":"20230724231638-9ty7sfh","Type":"NodeParagraph","Properties":{"id":"20230724231638-9ty7sfh","updated":"20230724231638"},"Children":[{"Type":"NodeText","Data":"context 是 GO 中广泛使用的程序包。用来简化在多个 go  routine 传递上下文数据，（手动/超时）中止routine 树等操作，比如"}]},{"ID":"20230724231639-j1p53qd","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231639-j1p53qd","updated":"20230724231639"},"Children":[{"ID":"20230724231640-7j2eow3","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231640-7j2eow3","updated":"20230724231640"},"Children":[{"ID":"20230724231641-y5oelcs","Type":"NodeParagraph","Properties":{"id":"20230724231641-y5oelcs","updated":"20230724231641"},"Children":[{"Type":"NodeText","Data":"官方http 包使用context 传递请求的上下文数据"}]}]},{"ID":"20230724231642-nx5tk77","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231642-nx5tk77","updated":"20230724231642"},"Children":[{"ID":"20230724231643-lsyfd26","Type":"NodeParagraph","Properties":{"id":"20230724231643-lsyfd26","updated":"20230724231643"},"Children":[{"Type":"NodeText","Data":"gRpc 使用 context 来终止某个请求产生的 routine 树"}]}]},{"ID":"20230724231644-omli411","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231644-omli411","updated":"20230724231644"},"Children":[{"ID":"20230724231645-o4l3lj9","Type":"NodeParagraph","Properties":{"id":"20230724231645-o4l3lj9","updated":"20230724231645"},"Children":[{"Type":"NodeText","Data":"控制一组呈树状结构的 goroutine ，每个goroutine 拥有相同的上下文"}]}]}]},{"ID":"20230724231646-tjbmduw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231646-tjbmduw","updated":"20230724231646"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1. context 的使用"}]},{"ID":"20230724231647-wva25vw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231647-wva25vw","updated":"20230724231647"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1 核心接口 Context"}]},{"ID":"20230724231648-898vw5t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231648-898vw5t","updated":"20230724231648"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Context interface{\n    // Deadline returns the time when work done on behalf of this context\n    // Deadline 返回代表此上下文完成工作的时间\n    // should be canceled. Deadline returns ok==false when no deadline is\n    // 应该取消， 如果没有截止日期， 返回 ok == false\n    // set.\n    Deadline() (deadline time.Time, ok bool)\n    // Done returns a channel that's closed when work done on behalf of this\n    // Done 返回一个通道，该通道在代表此操作完成时关闭\n    // context should be canceled.\n    // 上下文应该被取消\n    Done() \u003c-chan struct{}\n    // Err returns a non-nil error value after Done is closed.\n    // 关闭Done后，err 返回一个非零错误值\n    Err() error\n    // Value returns the value associated with this context for key.\n    // Value 返回与key 的此上下文关联的value\n    Value(key interface{}) interface{}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231649-1dl1xrr","Type":"NodeParagraph","Properties":{"id":"20230724231649-1dl1xrr","updated":"20230724231649"},"Children":[{"Type":"NodeText","Data":"简单介绍一下其中的方法："}]},{"ID":"20230724231650-x9x7nlu","Type":"NodeParagraph","Properties":{"id":"20230724231650-x9x7nlu","updated":"20230724231650"},"Children":[{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"-","Properties":{"id":""}}]},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Done"},{"Type":"NodeText","Data":"会返回一个channel，当该context被取消的时候，该channel会被关闭，同时对应的使用该context的routine也应该结束并返回。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"-","Properties":{"id":""}}]},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Context"},{"Type":"NodeText","Data":"中的方法是协程安全的，这也就代表了在父routine中创建的context，可以传递给任意数量的routine并让他们同时访问。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"-","Properties":{"id":""}}]},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Deadline"},{"Type":"NodeText","Data":"会返回一个超时时间，routine获得了超时时间后，可以对某些io操作设定超时时间。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeBackslash","Properties":{"id":""},"Children":[{"Type":"NodeBackslashContent","Data":"-","Properties":{"id":""}}]},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Value"},{"Type":"NodeText","Data":"可以让routine共享一些数据，当然获得数据是协程安全的。"}]},{"ID":"20230724231651-1dtd89n","Type":"NodeParagraph","Properties":{"id":"20230724231651-1dtd89n","updated":"20230724231651"},"Children":[{"Type":"NodeText","Data":"在请求处理的过程中，会调用各层的函数，每层的函数会创建自己的routine，是一个routine树。所以，context也应该反映并实现成一棵树。"}]},{"ID":"20230724231652-fjx3exd","Type":"NodeParagraph","Properties":{"id":"20230724231652-fjx3exd","updated":"20230724231652"},"Children":[{"Type":"NodeText","Data":"要创建context树，第一步是要有一个根结点。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"context.Background"},{"Type":"NodeText","Data":"函数的返回值是一个空的context，经常作为树的根结点，它一般由接收请求的第一个routine创建，不能被取消、没有值、也没有过期时间。"}]},{"ID":"20230724231653-opj6xgs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231653-opj6xgs","updated":"20230724231653"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Background() \n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231654-nb1czq6","Type":"NodeParagraph","Properties":{"id":"20230724231654-nb1czq6","updated":"20230724231654"},"Children":[{"Type":"NodeText","Data":"之后该怎么创建其它的子孙节点呢？context包为我们提供了以下函数："}]},{"ID":"20230724231655-ejprc8p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231655-ejprc8p","updated":"20230724231655"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func WithCancel(parent Context) (ctx Context, cancel CancelFunc)\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\nfunc WithValue(parent Context, key interface{}, val interface{}) Context\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231656-hru3xag","Type":"NodeParagraph","Properties":{"id":"20230724231656-hru3xag","updated":"20230724231656"},"Children":[{"Type":"NodeText","Data":"这四个函数的第一个参数都是父context，返回一个Context类型的值，这样就层层创建出不同的节点。子节点是从复制父节点得到的，并且根据接收的函数参数保存子节点的一些状态值，然后就可以将它传递给下层的routine了。"}]},{"ID":"20230724231657-rjpb9hz","Type":"NodeParagraph","Properties":{"id":"20230724231657-rjpb9hz","updated":"20230724231657"},"Children":[{"Type":"NodeText","Data":"withCancel 函数，返回一个额外的CancelFunc 函数类型 变量，该函数类型的定义为："}]},{"ID":"20230724231658-qyha8uh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231658-qyha8uh","updated":"20230724231658"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type CancelFunc func()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231659-cgfh5fa","Type":"NodeParagraph","Properties":{"id":"20230724231659-cgfh5fa","updated":"20230724231659"},"Children":[{"Type":"NodeText","Data":"调用CancelFunc对象将撤销对应的Context对象，这样父结点的所在的环境中，获得了撤销子节点context的权利，当触发某些条件时，可以调用CancelFunc对象来终止子结点树的所有routine。在子节点的routine中，需要用类似下面的代码来判断何时退出routine："}]},{"ID":"20230724231660-9qxmn77","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231660-9qxmn77","updated":"20230724231660"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"select {\n\tcase \u003c- cxt.Done():\n\t\t// do some cleaning and return \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231661-f9zykiq","Type":"NodeParagraph","Properties":{"id":"20230724231661-f9zykiq","updated":"20230724231661"},"Children":[{"Type":"NodeText","Data":"根据 ctx.Done() 判断是否结束。当顶层的Request请求处理结束，或者外部取消了这次请求，就可以cancel掉顶层context，从而使整个请求的routine树得以退出。"}]},{"ID":"20230724231662-45iwplz","Type":"NodeParagraph","Properties":{"id":"20230724231662-45iwplz","updated":"20230724231662"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WithDeadline"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WithTimeout"},{"Type":"NodeText","Data":"比"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"WithCancel"},{"Type":"NodeText","Data":"多了一个时间参数，它指示context存活的最长时间。如果超过了过期时间，会自动撤销它的子context。所以context的生命期是由父context的routine和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"deadline"},{"Type":"NodeText","Data":"共同决定的。"}]}]}