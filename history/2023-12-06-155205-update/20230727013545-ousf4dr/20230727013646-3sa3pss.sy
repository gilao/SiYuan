{"ID":"20230727013646-3sa3pss","Spec":"1","Type":"NodeDocument","Properties":{"icon":"26bd","id":"20230727013646-3sa3pss","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230727013646-3sa3pss\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230727013652-f5dis9f\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230727013652-y6pa0ee\u0026quot;,\u0026quot;scrollTop\u0026quot;:275,\u0026quot;focusId\u0026quot;:\u0026quot;20230727013652-aegesqy\u0026quot;,\u0026quot;focusStart\u0026quot;:2,\u0026quot;focusEnd\u0026quot;:2\u0026#125;","tags":"高并发架构,公众号-捡田螺的小男孩","title":"高并发系统设计的15个锦囊","updated":"20231206154849"},"Children":[{"ID":"20230727013652-f5dis9f","Type":"NodeParagraph","Properties":{"id":"20230727013652-f5dis9f","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/PPA8Iw6K2M2xVnGE-Tf6zw","TextMarkTextContent":"https://mp.weixin.qq.com/s/PPA8Iw6K2M2xVnGE-Tf6zw"}]},{"ID":"20230727013652-aegesqy","Type":"NodeParagraph","Properties":{"id":"20230727013652-aegesqy","updated":"20231206154849"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230721135527786"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20230721135527786.png?lastModify=1690393010"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727013652-9jvl9nc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-9jvl9nc","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"如何理解高并发系统"}]},{"ID":"20230727013652-ga4t8qp","Type":"NodeParagraph","Properties":{"id":"20230727013652-ga4t8qp","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"设计一个系统，保证它整体可用的同时，能够处理很高的并发用户请求，能够承受很大的流量冲击。"}]},{"ID":"20230727013652-oqs6s42","Type":"NodeParagraph","Properties":{"id":"20230727013652-oqs6s42","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们要设计高并发的系统，那就需要处理好一些常见的系统瓶颈问题，如内存不足、磁盘空间不足，连接数不够，网络宽带不够"},{"Type":"NodeText","Data":"等等，以应对突发的流量洪峰。"}]},{"ID":"20230727013652-r2yttfo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-r2yttfo","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"1、分而治之，横向扩展"}]},{"ID":"20230727013652-hbtnfoz","Type":"NodeParagraph","Properties":{"id":"20230727013652-hbtnfoz","updated":"20230727013724"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果你只部署一个应用，只部署一台服务器"},{"Type":"NodeText","Data":"，那抗住的流量请求是非常有限的。并且，单体的应用，有单点的风险，如果它挂了，那服务就不可用了。"}]},{"ID":"20230727013652-5v9pkix","Type":"NodeParagraph","Properties":{"id":"20230727013652-5v9pkix","updated":"20230727013728"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因此，设计一个高并发系统，我们可以分而治之，横向扩展"},{"Type":"NodeText","Data":"。也就是说，采用分布式部署的方式，部署多台服务器，把流量分流开，让每个服务器都承担一部分的并发和流量，提升"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"整体系统的并发能力"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727013652-11szntu","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-11szntu","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"2、微服务拆分 （系统拆分）"}]},{"ID":"20230727013652-fhaifnn","Type":"NodeParagraph","Properties":{"id":"20230727013652-fhaifnn","updated":"20230727013737"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"要提高系统的吞吐，提高系统的处理并发请求的能力。除了采用分布式部署的方式"},{"Type":"NodeText","Data":"外，还可以做"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"微服务拆分"},{"Type":"NodeText","Data":"，这样就可以达到分摊请求流量的目的，提高了并发能力。"}]},{"ID":"20230727013652-xrtjzss","Type":"NodeParagraph","Properties":{"id":"20230727013652-xrtjzss","updated":"20230727013732"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"所谓的微服务拆分"},{"Type":"NodeText","Data":"，其实就是把一个单体的应用，按功能单一性，拆分为多个服务模块。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"比如一个电商系统，拆分为用户系统、订单系统、商品系统等等"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727013652-a31z04e","Type":"NodeParagraph","Properties":{"id":"20230727013652-a31z04e","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230724154450094"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20230724154450094.png?lastModify=1690393010"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727013652-3pvj00n","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-3pvj00n","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"3、分库分表"}]},{"ID":"20230727013652-x3d4d9m","Type":"NodeParagraph","Properties":{"id":"20230727013652-x3d4d9m","updated":"20230727013744"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当业务量暴增的话，MySQL单机磁盘容量会撑爆"},{"Type":"NodeText","Data":"。并且，我们知道数据库连接数是有限的。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在高并发的场景下"},{"Type":"NodeText","Data":"，大量请求访问数据库，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MySQL"},{"Type":"NodeText","Data":"​单机是扛不住的！高并发场景下，会出现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"too many connections"},{"Type":"NodeText","Data":"​报错。"}]},{"ID":"20230727013652-dva0zf7","Type":"NodeParagraph","Properties":{"id":"20230727013652-dva0zf7","updated":"20230727013749"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"所以高并发的系统，需要考虑拆分为多个数据库，来抗住高并发的毒打"},{"Type":"NodeText","Data":"。而假如你的单表数据量非常大，存储和查询的性能就会遇到瓶颈了，如果你做了很多优化之后还是无法提升效率的时候，就需要考虑做"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分表"},{"Type":"NodeText","Data":"了。一般千万级别数据量，就需要"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分表"},{"Type":"NodeText","Data":"，每个表的数据量少一点，提升SQL查询性能。"}]},{"ID":"20230727013652-46k36ob","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-46k36ob","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"4、池化技术"}]},{"ID":"20230727013652-azazzv2","Type":"NodeParagraph","Properties":{"id":"20230727013652-azazzv2","updated":"20230727013754"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在高并发的场景下，数据库连接数"},{"Type":"NodeText","Data":"可能成为瓶颈，因为连接数是有限的。"}]},{"ID":"20230727013652-jju9a9t","Type":"NodeParagraph","Properties":{"id":"20230727013652-jju9a9t","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们的请求调用数据库时，都会先获取数据库的连接，然后依靠这个连接来查询数据，搞完收工，最后关闭连接，释放资源。如果我们不用数据库连接池的话，每次执行"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SQL"},{"Type":"NodeText","Data":"​，都要创建连接和销毁连接，这就会导致每个查询请求都变得更慢了，相应的，系统处理用户请求的能力就降低了。"}]},{"ID":"20230727013652-agibj11","Type":"NodeParagraph","Properties":{"id":"20230727013652-agibj11","updated":"20230727013757"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因此，需要使用池化技术，即数据库连接池、HTTP 连接池、Redis 连接池"},{"Type":"NodeText","Data":"等等。使用数据库连接池，可以避免每次查询都新建连接，减少不必要的资源开销，通过复用连接池，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"提高系统处理高并发请求的能力"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727013652-ovbynv8","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-ovbynv8","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"5、主从分离"}]},{"ID":"20230727013652-o45guy1","Type":"NodeParagraph","Properties":{"id":"20230727013652-o45guy1","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"通常来说，一台单机的MySQL服务器，可以支持"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"500"},{"Type":"NodeText","Data":"​左右的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TPS"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"10000"},{"Type":"NodeText","Data":"​左右的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"QPS"},{"Type":"NodeText","Data":"​，即单机支撑的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"请求访问是有限"},{"Type":"NodeText","Data":"的。因此你做了分布式部署，部署了多台机器，部署了主数据库、从数据库。"}]},{"ID":"20230727013652-sg2uilu","Type":"NodeParagraph","Properties":{"id":"20230727013652-sg2uilu","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"但是，如果双十一搞活动，流量肯定会猛增的。如果所有的查询请求，都走主库的话，主库肯定扛不住，因为查询请求量是非常非常大的。因此一般都要求做主从分离"},{"Type":"NodeText","Data":"，然后实时性要求不高的读请求，都去读从库，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"写的请求或者实时性要求高的请求，才走主库"},{"Type":"NodeText","Data":"。这样就很好保护了主库，也提高了系统的吞吐。"}]},{"ID":"20230727013652-x4dksv5","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-x4dksv5","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"6、使用缓存"}]},{"ID":"20230727013652-0688tol","Type":"NodeParagraph","Properties":{"id":"20230727013652-0688tol","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"无论是操作系统，浏览器，还是一些复杂的中间件，你都可以看到缓存的影子。我们使用缓存，主要是提升系统接口的性能，这样高并发场景，你的系统就可以支持更多的用户同时访问。"}]},{"ID":"20230727013652-39ow0rh","Type":"NodeParagraph","Properties":{"id":"20230727013652-39ow0rh","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"常用的缓存包括："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":"​缓存，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"JVM"},{"Type":"NodeText","Data":"​本地缓存，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"memcached"},{"Type":"NodeText","Data":"​等等。就拿"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":"​来说，它单机就能轻轻松松应对几万的并发，你读场景的业务，可以用缓存来抗高并发。"}]},{"ID":"20230727013652-f5tf3tj","Type":"NodeParagraph","Properties":{"id":"20230727013652-f5tf3tj","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存虽然用得爽，但是要注意缓存使用的一些问题"},{"Type":"NodeText","Data":"："}]},{"ID":"20230727013652-1t1ahop","Type":"NodeList","ListData":{},"Properties":{"id":"20230727013652-1t1ahop","updated":"20230727013652"},"Children":[{"ID":"20230727013652-xisiws5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-xisiws5","updated":"20230727013652"},"Children":[{"ID":"20230727013652-w8zu9wk","Type":"NodeParagraph","Properties":{"id":"20230727013652-w8zu9wk","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存与数据库的一致性问题"}]}]},{"ID":"20230727013652-flqb9yb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-flqb9yb","updated":"20230727013652"},"Children":[{"ID":"20230727013652-l21g55j","Type":"NodeParagraph","Properties":{"id":"20230727013652-l21g55j","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存雪崩"}]}]},{"ID":"20230727013652-8n54iv6","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-8n54iv6","updated":"20230727013652"},"Children":[{"ID":"20230727013652-ae1od71","Type":"NodeParagraph","Properties":{"id":"20230727013652-ae1od71","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存穿透"}]}]},{"ID":"20230727013652-j361tjj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-j361tjj","updated":"20230727013652"},"Children":[{"ID":"20230727013652-v4k9h42","Type":"NodeParagraph","Properties":{"id":"20230727013652-v4k9h42","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存击穿"}]}]}]},{"ID":"20230727013652-e26ai06","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-e26ai06","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"7、CDN，加速静态资源访问"}]},{"ID":"20230727013652-oax7i35","Type":"NodeParagraph","Properties":{"id":"20230727013652-oax7i35","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"商品图片，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"icon"},{"Type":"NodeText","Data":"​等等静态资源，可以对页面做"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"静态化处理，减少访问服务端的请求"},{"Type":"NodeText","Data":"。如果用户分布在全国各地，有的在上海，有的在深圳，地域相差很远，网速也各不相同。为了让用户最快访问到页面，可以使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CDN"},{"Type":"NodeText","Data":"​。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CDN"},{"Type":"NodeText","Data":"​可以让用户就近获取所需内容。"}]},{"ID":"20230727013652-gy10m2z","Type":"NodeParagraph","Properties":{"id":"20230727013652-gy10m2z","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"什么是CDN？"}]},{"ID":"20230727013652-5hi40e1","Type":"NodeBlockquote","Properties":{"id":"20230727013652-5hi40e1","updated":"20230727013652"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727013652-hl508r1","Type":"NodeParagraph","Properties":{"id":"20230727013652-hl508r1","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Content Delivery Network/Content Distribution Network,翻译过来就是内容分发网络，它表示将静态资源分发到位于多个地理位置机房的服务器，可以做到数据就近访问，加速了静态资源的访问速度，因此让系统更好处理正常别的动态请求。"}]}]},{"ID":"20230727013652-ve263eq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727013652-ve263eq","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"8. 消息队列，削锋"}]},{"ID":"20230727013652-94mvwjj","Type":"NodeParagraph","Properties":{"id":"20230727013652-94mvwjj","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们搞一些双十一、双十二等运营活动时，需要避免流量暴涨，打垮应用系统的风险"},{"Type":"NodeText","Data":"。因此一般会引入消息队列，来应对"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"高并发的场景"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727013652-ru958rt","Type":"NodeParagraph","Properties":{"id":"20230727013652-ru958rt","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image-20230724155316035"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\image-20230724155316035.png?lastModify=1690393010"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727013652-y11h40t","Type":"NodeParagraph","Properties":{"id":"20230727013652-y11h40t","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"假设你的应用系统每秒最多可以处理"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"2k"},{"Type":"NodeText","Data":"​个请求，每秒却有"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"5k"},{"Type":"NodeText","Data":"​的请求过来，可以引入消息队列，应用系统每秒从消息队列拉"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"2k"},{"Type":"NodeText","Data":"​请求处理得了。"}]},{"ID":"20230727013652-8jazc2j","Type":"NodeParagraph","Properties":{"id":"20230727013652-8jazc2j","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"有些伙伴担心这样可能会出现消息积压"},{"Type":"NodeText","Data":"的问题："}]},{"ID":"20230727013652-s2zk9qp","Type":"NodeList","ListData":{},"Properties":{"id":"20230727013652-s2zk9qp","updated":"20230727013652"},"Children":[{"ID":"20230727013652-gpczqcr","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-gpczqcr","updated":"20230727013652"},"Children":[{"ID":"20230727013652-jqbem77","Type":"NodeParagraph","Properties":{"id":"20230727013652-jqbem77","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"首先，搞一些运营活动，不会每时每刻都那么多请求过来你的系统（除非有人恶意攻击"},{"Type":"NodeText","Data":"），高峰期过去后，积压的请求可以慢慢处理；"}]}]},{"ID":"20230727013652-7ngv0gt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-7ngv0gt","updated":"20230727013652"},"Children":[{"ID":"20230727013652-s9crp3k","Type":"NodeParagraph","Properties":{"id":"20230727013652-s9crp3k","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其次，如果消息队列长度超过最大数量，可以直接抛弃用户请求或跳转到错误页面；"}]}]}]},{"ID":"20230727013652-kahezo6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-kahezo6","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"9、ElasticSearch"}]},{"ID":"20230727013652-x6p8l7v","Type":"NodeParagraph","Properties":{"id":"20230727013652-x6p8l7v","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Elasticsearch"},{"Type":"NodeText","Data":"​，大家都使用得比较多了吧，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一般搜索功能都会用到它"},{"Type":"NodeText","Data":"。它是一个分布式、高扩展、高实时的搜索与数据分析引擎，简称为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ES"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20230727013652-cxxwc2u","Type":"NodeParagraph","Properties":{"id":"20230727013652-cxxwc2u","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们在聊高并发，为啥聊到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ES"},{"Type":"NodeText","Data":"​呢？因为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ES"},{"Type":"NodeText","Data":"​可以扩容方便，天然支撑高并发。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"当数据量大的时候，不用动不动就加机器扩容，分库等等"},{"Type":"NodeText","Data":"，可以考虑用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ES"},{"Type":"NodeText","Data":"​来支持简单的查询搜索、统计类的操作。"}]},{"ID":"20230727013652-jsnglbp","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-jsnglbp","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"10、降级熔断"}]},{"ID":"20230727013652-id9c7ii","Type":"NodeParagraph","Properties":{"id":"20230727013652-id9c7ii","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"熔断降级"},{"Type":"NodeText","Data":"是保护系统的一种手段。当前互联网系统一般都是分布式部署的。而分布式系统中偶尔会出现某个基础服务不可用，最终导致整个系统不可用的情况, 这种现象被称为"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务雪崩效应"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727013652-1guzy5b","Type":"NodeParagraph","Properties":{"id":"20230727013652-1guzy5b","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"比如分布式调用链路"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A-\u0026gt;B-\u0026gt;C...."},{"Type":"NodeText","Data":"​，下图所示："}]},{"ID":"20230727013652-dvmapc5","Type":"NodeParagraph","Properties":{"id":"20230727013652-dvmapc5","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\640-169018528342510.png?lastModify=1690393010"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727013652-xe75epv","Type":"NodeBlockquote","Properties":{"id":"20230727013652-xe75epv","updated":"20230727013652"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727013652-imvot57","Type":"NodeParagraph","Properties":{"id":"20230727013652-imvot57","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果服务"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"C"},{"Type":"NodeText","Data":"​出现问题，比如是因为慢"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SQL"},{"Type":"NodeText","Data":"​导致调用缓慢，那将导致"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"B"},{"Type":"NodeText","Data":"​也会延迟，从而"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​也会延迟。堵住的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​请求会消耗占用系统的线程、IO、CPU等资源。当请求"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"A"},{"Type":"NodeText","Data":"​的服务越来越多，占用计算机的资源也越来越多，最终会导致系统瓶颈出现，造成其他的请求同样不可用，最后导致业务系统崩溃。"}]}]},{"ID":"20230727013652-9n0ngdv","Type":"NodeParagraph","Properties":{"id":"20230727013652-9n0ngdv","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"为了应对服务雪崩, 常见的做法是熔断和降级"},{"Type":"NodeText","Data":"。最简单是加开关控制，当下游系统出问题时，开关打开降级，不再调用下游系统。还可以选用开源组件"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Hystrix"},{"Type":"NodeText","Data":"​来支持。"}]},{"ID":"20230727013652-xwt6xag","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-xwt6xag","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"11、限流"}]},{"ID":"20230727013652-ki8bhhh","Type":"NodeParagraph","Properties":{"id":"20230727013652-ki8bhhh","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"限流也是我们应对高并发的一种方案。我们当然希望，在高并发大流量过来时，系统能全部请求都正常处理。但是有时候没办法，系统的CPU、网络带宽、内存、线程等资源都是有限的。因此，我们要考虑限流。"}]},{"ID":"20230727013652-walz5el","Type":"NodeParagraph","Properties":{"id":"20230727013652-walz5el","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果你的系统每秒扛住的请求是一千，如果一秒钟来了十万请求呢"},{"Type":"NodeText","Data":"？换个角度就是说，高并发的时候，流量洪峰来了，超过系统的承载能力，怎么办呢？"}]},{"ID":"20230727013652-bl25m0v","Type":"NodeParagraph","Properties":{"id":"20230727013652-bl25m0v","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这时候，我们可以采取限流方案。就是为了保护系统，多余的请求，直接丢弃。"}]},{"ID":"20230727013652-r8mi5f7","Type":"NodeBlockquote","Properties":{"id":"20230727013652-r8mi5f7","updated":"20230727013652"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727013652-u0sjoja","Type":"NodeParagraph","Properties":{"id":"20230727013652-u0sjoja","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"什么是限流"},{"Type":"NodeText","Data":"：在计算机网络中，限流就是控制网络接口发送或接收请求的速率，它可防止DoS攻击和限制Web爬虫。限流，也称流量控制。是指系统在面临高并发，或者大流量请求的情况下，限制新的请求对系统的访问，从而保证系统的稳定性。"}]}]},{"ID":"20230727013652-f2a8uvr","Type":"NodeParagraph","Properties":{"id":"20230727013652-f2a8uvr","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可以使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Guava"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RateLimiter"},{"Type":"NodeText","Data":"​单机版限流，也可以使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Redis"},{"Type":"NodeText","Data":"​分布式限流，还可以使用阿里开源组件"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sentinel"},{"Type":"NodeText","Data":"​限流。"}]},{"ID":"20230727013652-88yl77h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-88yl77h","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"12、异步"}]},{"ID":"20230727013652-80ib5x0","Type":"NodeBlockquote","Properties":{"id":"20230727013652-80ib5x0","updated":"20230727013652"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20230727013652-32c4e1q","Type":"NodeParagraph","Properties":{"id":"20230727013652-32c4e1q","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"回忆一下什么是同步，什么是异步呢？以方法调用"},{"Type":"NodeText","Data":"为例，它代表"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"调用方要阻塞等待被调用方法中的逻辑执行完成"},{"Type":"NodeText","Data":"。这种方式下，当被调用方法响应时间较长时，会造成调用方长久的阻塞，在高并发下会造成整体系统性能下降甚至发生雪崩。异步调用恰恰相反，调用方不需要等待方法逻辑执行完成就可以返回执行其他的逻辑，在被调用方法执行完毕后再通过回调、事件通知等方式将结果反馈给调用方。"}]}]},{"ID":"20230727013652-1bh6frs","Type":"NodeParagraph","Properties":{"id":"20230727013652-1bh6frs","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"因此，设计一个高并发的系统，需要在恰当的场景使用异步"},{"Type":"NodeText","Data":"。如何使用异步呢？后端可以借用消息队列实现。比如在海量秒杀请求过来时，先放到消息队列中，快速响应用户，告诉用户请求正在处理中，这样就可以释放资源来处理更多的请求。秒杀请求处理完后，通知用户秒杀抢购成功或者失败。"}]},{"ID":"20230727013652-yrrt39z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-yrrt39z","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"13、接口的常规优化"}]},{"ID":"20230727013652-d58qx0f","Type":"NodeParagraph","Properties":{"id":"20230727013652-d58qx0f","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"设计一个高并发的系统，需要设计接口的性能足够好，这样系统在相同时间，就可以处理更多的请求。当说到这里的话，可以跟面试官说说接口优化的一些方案了。大家可以看下我的这篇文章哈:"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=Mzg3NzU5NTIwNg==\u0026amp;mid=2247502660\u0026amp;idx=1\u0026amp;sn=17166646f82412cd81955930f799ab4e\u0026amp;chksm=cf22146df8559d7bcf9becd82e1d8006c35a781e5dbd0a79e0a9e121803ee40d6eae7ebd7ccb\u0026amp;token=1371687559\u0026amp;lang=zh_CN\u0026amp;scene=21#wechat_redirect","TextMarkTextContent":"实战总结！18种接口优化方案的总结"}]},{"ID":"20230727013652-jj57tal","Type":"NodeParagraph","Properties":{"id":"20230727013652-jj57tal","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"file://E:\\Typora%20picture\\640-169018546149013.png?lastModify=1690393010"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230727013652-23rhuig","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-23rhuig","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"14、压力测试确定系统瓶颈"}]},{"ID":"20230727013652-j0b16b9","Type":"NodeParagraph","Properties":{"id":"20230727013652-j0b16b9","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"设计高并发系统，离不开最重要的一环，就是压力测试"},{"Type":"NodeText","Data":"。就是在系统上线前，需要对系统进行压力测试，测清楚你的系统支撑的最大并发是多少，确定系统的瓶颈点，让自己心里有底，最好预防措施。"}]},{"ID":"20230727013652-cgwso14","Type":"NodeParagraph","Properties":{"id":"20230727013652-cgwso14","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"压测完要分析整个调用链路，性能可能出现问题是网络层（如带宽）、Nginx层、服务层、还是数据路缓存等中间件等等。"}]},{"ID":"20230727013652-t6lduut","Type":"NodeParagraph","Properties":{"id":"20230727013652-t6lduut","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"loadrunner"},{"Type":"NodeText","Data":"​是一款不错的压力测试工具，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"jmeter"},{"Type":"NodeText","Data":"​则是接口性能测试工具，都可以来做下压测。"}]},{"ID":"20230727013652-un9lhjq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727013652-un9lhjq","updated":"20230727013652"},"Children":[{"Type":"NodeText","Data":"15、应对突发流量峰值：扩容+切流量"}]},{"ID":"20230727013652-i63jxkd","Type":"NodeParagraph","Properties":{"id":"20230727013652-i63jxkd","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"如果是突发的流量高峰，除了降级、限流保证系统不跨，我们可以采用这两种方案，保证系统尽可能服务用户请求："}]},{"ID":"20230727013652-y6pa0ee","Type":"NodeList","ListData":{},"Properties":{"id":"20230727013652-y6pa0ee","updated":"20230727013652"},"Children":[{"ID":"20230727013652-3xox3hb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-3xox3hb","updated":"20230727013652"},"Children":[{"ID":"20230727013652-nfr2eoq","Type":"NodeParagraph","Properties":{"id":"20230727013652-nfr2eoq","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"扩容：比如增加从库、提升配置的方式"},{"Type":"NodeText","Data":"，提升系统/组件的流量承载能力。比如增加"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MySQL、Redis"},{"Type":"NodeText","Data":"​从库来处理查询请求。"}]}]},{"ID":"20230727013652-wy9dpem","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230727013652-wy9dpem","updated":"20230727013652"},"Children":[{"ID":"20230727013652-pth6e7r","Type":"NodeParagraph","Properties":{"id":"20230727013652-pth6e7r","updated":"20230727013652"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"切流量：服务多机房部署"},{"Type":"NodeText","Data":"，如果高并发流量来了，把流量从一个机房切换到另一个机房。"}]}]}]}]}