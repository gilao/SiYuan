{"ID":"20230828111051-dhjbhet","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f608","id":"20230828111051-dhjbhet","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230828111051-dhjbhet\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230828111116-013n1q6\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230828111051-wi7c5w2\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230828111116-gfq7drb\u0026quot;,\u0026quot;focusStart\u0026quot;:68,\u0026quot;focusEnd\u0026quot;:68\u0026#125;","tags":"Python,流式输出,gRPC,Grpc","title":"基于Python 实现流式输出","updated":"20230828111116"},"Children":[{"ID":"20230828111116-013n1q6","Type":"NodeParagraph","Properties":{"id":"20230828111116-013n1q6","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"是的，gRPC支持流式输出（Server Streaming）。你可以使用gRPC来实现一个服务端流式RPC调用，其中客户端发送一个请求，而服务器以流式方式返回多个响应。"}]},{"ID":"20230828111116-omhnaj6","Type":"NodeParagraph","Properties":{"id":"20230828111116-omhnaj6","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"要实现流式输出，你可以在.proto文件中定义一个服务器流式方法。例如："}]},{"ID":"20230828111116-vwrfywy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111116-vwrfywy","updated":"20230828111116"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHJvdG9idWY="},{"Type":"NodeCodeBlockCode","Data":"service MyService {\n  rpc StreamOutput(MyRequest) returns (stream MyResponse) {}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111116-con5z42","Type":"NodeParagraph","Properties":{"id":"20230828111116-con5z42","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"这个服务定义了一个名为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StreamOutput"},{"Type":"NodeText","Data":"​的服务器流式方法，它接受一个请求"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MyRequest"},{"Type":"NodeText","Data":"​，并以流式方式返回多个响应"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"MyResponse"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20230828111116-9p58wrm","Type":"NodeParagraph","Properties":{"id":"20230828111116-9p58wrm","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"然后，根据.proto文件生成的代码中会生成相应的服务存根（Stub）类。你可以使用这个存根类来调用服务器流式方法。"}]},{"ID":"20230828111116-pzzcnda","Type":"NodeParagraph","Properties":{"id":"20230828111116-pzzcnda","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"在客户端代码中，你可以使用存根类中提供的方法调用服务器流式方法。例如，在Python中，可以使用生成的存根类的方法"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StreamOutput()"},{"Type":"NodeText","Data":"​来发起服务器流式调用。"}]},{"ID":"20230828111116-zxxnsdg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111116-zxxnsdg","updated":"20230828111116"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"response_stream = stub.StreamOutput(request)\nfor response in response_stream:\n    # 处理每个响应\n    print(response)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111116-5f1t2fe","Type":"NodeParagraph","Properties":{"id":"20230828111116-5f1t2fe","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"在上面的示例中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"response_stream"},{"Type":"NodeText","Data":"​是一个迭代器，用于按顺序逐个获取服务器返回的响应。你可以在循环中处理每个响应。"}]},{"ID":"20230828111116-etdfhpv","Type":"NodeParagraph","Properties":{"id":"20230828111116-etdfhpv","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"在服务器端实现时，你需要对应的服务实现类来处理请求并以流式方式生成多个响应。"}]},{"ID":"20230828111116-f0wvqoo","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230828111116-f0wvqoo","updated":"20230828111116"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class MyServiceServicer(MyService):\n    def StreamOutput(self, request, context):\n        # 处理请求并生成多个响应\n        for i in range(10):\n            response = MyResponse(message=f\"Response {i+1}\")\n            yield response\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230828111116-ait1oj0","Type":"NodeParagraph","Properties":{"id":"20230828111116-ait1oj0","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"在上面的示例中，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StreamOutput()"},{"Type":"NodeText","Data":"​方法是服务器端对应的处理器，它处理客户端发来的请求，并使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"yield"},{"Type":"NodeText","Data":"​关键字以流式方式生成多个响应。"}]},{"ID":"20230828111116-gfq7drb","Type":"NodeParagraph","Properties":{"id":"20230828111116-gfq7drb","updated":"20230828111116"},"Children":[{"Type":"NodeText","Data":"这样，你就可以使用gRPC实现流式输出的RPC调用。客户端通过迭代器逐个处理服务器端返回的响应，而服务器端可以逐个发送多个响应给客户端。"}]},{"ID":"20230828111051-wi7c5w2","Type":"NodeParagraph","Properties":{"id":"20230828111051-wi7c5w2","updated":"20230828111051"}}]}