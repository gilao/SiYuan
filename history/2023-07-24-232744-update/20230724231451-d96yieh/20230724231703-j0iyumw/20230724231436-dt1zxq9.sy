{"ID":"20230724231436-dt1zxq9","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230724231436-dt1zxq9","title":"regexp-syntax","updated":"20230724231436"},"Children":[{"ID":"20230724231437-f7su7xd","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231437-f7su7xd","updated":"20230724231437"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"regexp-syntax"}]},{"ID":"20230724231438-e69gxob","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231438-e69gxob","updated":"20230724231438"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"import \"regexp/syntax\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231439-655xlb8","Type":"NodeParagraph","Properties":{"id":"20230724231439-655xlb8","updated":"20230724231439"},"Children":[{"Type":"NodeText","Data":"Package syntax parses regular expressions into parse trees and compiles parse trees into programs. Most clients of regular expressions will use the facilities of package "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://studygolang.com/regexp","TextMarkTextContent":"regexp"},{"Type":"NodeText","Data":" (such as Compile and Match) instead of this package."}]},{"ID":"20230724231440-voh9fd3","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231440-voh9fd3","updated":"20230724231440"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Syntax"}]},{"ID":"20230724231441-etepuez","Type":"NodeParagraph","Properties":{"id":"20230724231441-etepuez","updated":"20230724231441"},"Children":[{"Type":"NodeText","Data":"The regular expression syntax understood by this package when parsing with the Perl flag is as follows. Parts of the syntax can be disabled by passing alternate flags to Parse."}]},{"ID":"20230724231442-ryflv05","Type":"NodeParagraph","Properties":{"id":"20230724231442-ryflv05","updated":"20230724231442"},"Children":[{"Type":"NodeText","Data":"Single characters:"}]},{"ID":"20230724231443-a8z9que","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231443-a8z9que","updated":"20230724231443"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":".              any character, possibly including newline (flag s=true)\n[xyz]          character class\n[^xyz]         negated character class\n\\d             Perl character class\n\\D             negated Perl character class\n[[:alpha:]]    ASCII character class\n[[:^alpha:]]   negated ASCII character class\n\\pN            Unicode character class (one-letter name)\n\\p{Greek}      Unicode character class\n\\PN            negated Unicode character class (one-letter name)\n\\P{Greek}      negated Unicode character class\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231444-xrw1fi8","Type":"NodeParagraph","Properties":{"id":"20230724231444-xrw1fi8","updated":"20230724231444"},"Children":[{"Type":"NodeText","Data":"Composites:"}]},{"ID":"20230724231445-i31t9ta","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231445-i31t9ta","updated":"20230724231445"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"xy             x followed by y\nx|y            x or y (prefer x)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231446-2yuoo7d","Type":"NodeParagraph","Properties":{"id":"20230724231446-2yuoo7d","updated":"20230724231446"},"Children":[{"Type":"NodeText","Data":"Repetitions:"}]},{"ID":"20230724231447-m6vzimi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231447-m6vzimi","updated":"20230724231447"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"x*             zero or more x, prefer more\nx+             one or more x, prefer more\nx?             zero or one x, prefer one\nx{n,m}         n or n+1 or ... or m x, prefer more\nx{n,}          n or more x, prefer more\nx{n}           exactly n x\nx*?            zero or more x, prefer fewer\nx+?            one or more x, prefer fewer\nx??            zero or one x, prefer zero\nx{n,m}?        n or n+1 or ... or m x, prefer fewer\nx{n,}?         n or more x, prefer fewer\nx{n}?          exactly n x\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231448-yvq2wdq","Type":"NodeParagraph","Properties":{"id":"20230724231448-yvq2wdq","updated":"20230724231448"},"Children":[{"Type":"NodeText","Data":"Implementation restriction: The counting forms x{n,m}, x{n,}, and x{n} reject forms that create a minimum or maximum repetition count above 1000. Unlimited repetitions are not subject to this restriction."}]},{"ID":"20230724231449-hzz1qri","Type":"NodeParagraph","Properties":{"id":"20230724231449-hzz1qri","updated":"20230724231449"},"Children":[{"Type":"NodeText","Data":"Grouping:"}]},{"ID":"20230724231450-e4ell0p","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231450-e4ell0p","updated":"20230724231450"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"(re)           numbered capturing group (submatch)\n(?P\u003cname\u003ere)   named \u0026 numbered capturing group (submatch)\n(?:re)         non-capturing group\n(?flags)       set flags within current group; non-capturing\n(?flags:re)    set flags during re; non-capturing\n\nFlag syntax is xyz (set) or -xyz (clear) or xy-z (set xy, clear z). The flags are:\n\ni              case-insensitive (default false)\nm              multi-line mode: ^ and $ match begin/end line in addition to begin/end text (default false)\ns              let . match \\n (default false)\nU              ungreedy: swap meaning of x* and x*?, x+ and x+?, etc (default false)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231451-yqk32c0","Type":"NodeParagraph","Properties":{"id":"20230724231451-yqk32c0","updated":"20230724231451"},"Children":[{"Type":"NodeText","Data":"Empty strings:"}]},{"ID":"20230724231452-as94hrt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231452-as94hrt","updated":"20230724231452"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"^              at beginning of text or line (flag m=true)\n$              at end of text (like \\z not Perl's \\Z) or line (flag m=true)\n\\A             at beginning of text\n\\b             at ASCII word boundary (\\w on one side and \\W, \\A, or \\z on the other)\n\\B             not at ASCII word boundary\n\\z             at end of text\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231453-gz7n2tw","Type":"NodeParagraph","Properties":{"id":"20230724231453-gz7n2tw","updated":"20230724231453"},"Children":[{"Type":"NodeText","Data":"Escape sequences:"}]},{"ID":"20230724231454-vrc8oqj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231454-vrc8oqj","updated":"20230724231454"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\\a             bell (== \\007)\n\\f             form feed (== \\014)\n\\t             horizontal tab (== \\011)\n\\n             newline (== \\012)\n\\r             carriage return (== \\015)\n\\v             vertical tab character (== \\013)\n\\*             literal *, for any punctuation character *\n\\123           octal character code (up to three digits)\n\\x7F           hex character code (exactly two digits)\n\\x{10FFFF}     hex character code\n\\Q...\\E        literal text ... even if ... has punctuation\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231455-1r9xg9t","Type":"NodeParagraph","Properties":{"id":"20230724231455-1r9xg9t","updated":"20230724231455"},"Children":[{"Type":"NodeText","Data":"Character class elements:"}]},{"ID":"20230724231456-npfie08","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231456-npfie08","updated":"20230724231456"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"x              single character\nA-Z            character range (inclusive)\n\\d             Perl character class\n[:foo:]        ASCII character class foo\n\\p{Foo}        Unicode character class Foo\n\\pF            Unicode character class F (one-letter name)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231457-eby7qqj","Type":"NodeParagraph","Properties":{"id":"20230724231457-eby7qqj","updated":"20230724231457"},"Children":[{"Type":"NodeText","Data":"Named character classes as character class elements:"}]},{"ID":"20230724231458-uw0d4yn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231458-uw0d4yn","updated":"20230724231458"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[\\d]           digits (== \\d)\n[^\\d]          not digits (== \\D)\n[\\D]           not digits (== \\D)\n[^\\D]          not not digits (== \\d)\n[[:name:]]     named ASCII class inside character class (== [:name:])\n[^[:name:]]    named ASCII class inside negated character class (== [:^name:])\n[\\p{Name}]     named Unicode property inside character class (== \\p{Name})\n[^\\p{Name}]    named Unicode property inside negated character class (== \\P{Name})\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231459-y3jl8nh","Type":"NodeParagraph","Properties":{"id":"20230724231459-y3jl8nh","updated":"20230724231459"},"Children":[{"Type":"NodeText","Data":"Perl character classes (all ASCII-only):"}]},{"ID":"20230724231460-bqvrfpx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231460-bqvrfpx","updated":"20230724231460"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\\d             digits (== [0-9])\n\\D             not digits (== [^0-9])\n\\s             whitespace (== [\\t\\n\\f\\r ])\n\\S             not whitespace (== [^\\t\\n\\f\\r ])\n\\w             word characters (== [0-9A-Za-z_])\n\\W             not word characters (== [^0-9A-Za-z_])\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231461-6xpeofe","Type":"NodeParagraph","Properties":{"id":"20230724231461-6xpeofe","updated":"20230724231461"},"Children":[{"Type":"NodeText","Data":"ASCII character classes:"}]},{"ID":"20230724231462-suh1s7z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231462-suh1s7z","updated":"20230724231462"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"[[:alnum:]]    alphanumeric (== [0-9A-Za-z])\n[[:alpha:]]    alphabetic (== [A-Za-z])\n[[:ascii:]]    ASCII (== [\\x00-\\x7F])\n[[:blank:]]    blank (== [\\t ])\n[[:cntrl:]]    control (== [\\x00-\\x1F\\x7F])\n[[:digit:]]    digits (== [0-9])\n[[:graph:]]    graphical (== [!-~] == [A-Za-z0-9!\"#$%\u0026'()*+,\\-./:;\u003c=\u003e?@[\\\\\\]^_`{|}~])\n[[:lower:]]    lower case (== [a-z])\n[[:print:]]    printable (== [ -~] == [ [:graph:]])\n[[:punct:]]    punctuation (== [!-/:-@[-`{-~])\n[[:space:]]    whitespace (== [\\t\\n\\v\\f\\r ])\n[[:upper:]]    upper case (== [A-Z])\n[[:word:]]     word characters (== [0-9A-Za-z_])\n[[:xdigit:]]   hex digit (== [0-9A-Fa-f])\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231463-pcpwxuo","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230724231463-pcpwxuo","updated":"20230724231463"}},{"ID":"20230724231465-guaanod","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231465-guaanod","updated":"20230724231465"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/","TextMarkTextContent":"Package Files"}]},{"ID":"20230724231466-hxmwpkr","Type":"NodeParagraph","Properties":{"id":"20230724231466-hxmwpkr","updated":"20230724231466"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/compile.go","TextMarkTextContent":"compile.go"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/doc.go","TextMarkTextContent":"doc.go"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go","TextMarkTextContent":"parse.go"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/perl_groups.go","TextMarkTextContent":"perl_groups.go"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go","TextMarkTextContent":"prog.go"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go","TextMarkTextContent":"regexp.go"},{"Type":"NodeText","Data":" "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/simplify.go","TextMarkTextContent":"simplify.go"}]},{"ID":"20230724231467-75efr0e","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231467-75efr0e","updated":"20230724231467"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L107","TextMarkTextContent":"IsWordChar"}]},{"ID":"20230724231468-h7e83o7","Type":"NodeParagraph","Properties":{"id":"20230724231468-h7e83o7","updated":"20230724231468"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L107","TextMarkTextContent":"❖"}]},{"ID":"20230724231469-ltu8yrx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231469-ltu8yrx","updated":"20230724231469"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func IsWordChar(r rune) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231470-36w5vzt","Type":"NodeParagraph","Properties":{"id":"20230724231470-36w5vzt","updated":"20230724231470"},"Children":[{"Type":"NodeText","Data":"IsWordChar reports whether r is consider a “word character” during the evaluation of the \\b and \\B zero-width assertions. These assertions are ASCII-only: the word characters are [A-Za-z0-9_]."}]},{"ID":"20230724231471-hoimso4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231471-hoimso4","updated":"20230724231471"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L62","TextMarkTextContent":"EmptyOp"}]},{"ID":"20230724231472-7d7zm9b","Type":"NodeParagraph","Properties":{"id":"20230724231472-7d7zm9b","updated":"20230724231472"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L62","TextMarkTextContent":"❖"}]},{"ID":"20230724231473-b7zugvk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231473-b7zugvk","updated":"20230724231473"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type EmptyOp uint8\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231474-ayue4z3","Type":"NodeParagraph","Properties":{"id":"20230724231474-ayue4z3","updated":"20230724231474"},"Children":[{"Type":"NodeText","Data":"An EmptyOp specifies a kind or mixture of zero-width assertions."}]},{"ID":"20230724231475-mlj715v","Type":"NodeParagraph","Properties":{"id":"20230724231475-mlj715v","updated":"20230724231475"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L64","TextMarkTextContent":"❖"}]},{"ID":"20230724231476-npkv0ia","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231476-npkv0ia","updated":"20230724231476"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const (\n    EmptyBeginLine EmptyOp = 1 \u003c\u003c iota\n    EmptyEndLine\n    EmptyBeginText\n    EmptyEndText\n    EmptyWordBoundary\n    EmptyNoWordBoundary\n)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231477-4plphir","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231477-4plphir","updated":"20230724231477"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L79","TextMarkTextContent":"EmptyOpContext"}]},{"ID":"20230724231478-ad6tboo","Type":"NodeParagraph","Properties":{"id":"20230724231478-ad6tboo","updated":"20230724231478"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L79","TextMarkTextContent":"❖"}]},{"ID":"20230724231479-uwh5h64","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231479-uwh5h64","updated":"20230724231479"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func EmptyOpContext(r1, r2 rune) EmptyOp\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231480-qahlb6k","Type":"NodeParagraph","Properties":{"id":"20230724231480-qahlb6k","updated":"20230724231480"},"Children":[{"Type":"NodeText","Data":"EmptyOpContext returns the zero-width assertions satisfied at the position between the runes r1 and r2. Passing r1 == -1 indicates that the position is at the beginning of the text. Passing r2 == -1 indicates that the position is at the end of the text."}]},{"ID":"20230724231481-dzf1vld","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231481-dzf1vld","updated":"20230724231481"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L16","TextMarkTextContent":"Error"}]},{"ID":"20230724231482-c2hskj6","Type":"NodeParagraph","Properties":{"id":"20230724231482-c2hskj6","updated":"20230724231482"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L16","TextMarkTextContent":"❖"}]},{"ID":"20230724231483-m1lgbg1","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231483-m1lgbg1","updated":"20230724231483"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Error struct {\n    Code ErrorCode\n    Expr string\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231484-5co2zqf","Type":"NodeParagraph","Properties":{"id":"20230724231484-5co2zqf","updated":"20230724231484"},"Children":[{"Type":"NodeText","Data":"An Error describes a failure to parse a regular expression and gives the offending expression."}]},{"ID":"20230724231485-mbayr43","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231485-mbayr43","updated":"20230724231485"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Error) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L21","TextMarkTextContent":"Error"}]},{"ID":"20230724231486-ierp9b7","Type":"NodeParagraph","Properties":{"id":"20230724231486-ierp9b7","updated":"20230724231486"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L21","TextMarkTextContent":"❖"}]},{"ID":"20230724231487-tq4wev2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231487-tq4wev2","updated":"20230724231487"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (e *Error) Error() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231488-xe41z7m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231488-xe41z7m","updated":"20230724231488"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L26","TextMarkTextContent":"ErrorCode"}]},{"ID":"20230724231489-pilkuly","Type":"NodeParagraph","Properties":{"id":"20230724231489-pilkuly","updated":"20230724231489"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L26","TextMarkTextContent":"❖"}]},{"ID":"20230724231490-9y8w9nt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231490-9y8w9nt","updated":"20230724231490"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type ErrorCode string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231491-2gs9sdh","Type":"NodeParagraph","Properties":{"id":"20230724231491-2gs9sdh","updated":"20230724231491"},"Children":[{"Type":"NodeText","Data":"An ErrorCode describes a failure to parse a regular expression."}]},{"ID":"20230724231492-q6qd0bl","Type":"NodeParagraph","Properties":{"id":"20230724231492-q6qd0bl","updated":"20230724231492"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L28","TextMarkTextContent":"❖"}]},{"ID":"20230724231493-c46n3no","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231493-c46n3no","updated":"20230724231493"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const (\n    // Unexpected error\n    ErrInternalError ErrorCode = \"regexp/syntax: internal error\"\n\n    // Parse errors\n    ErrInvalidCharClass      ErrorCode = \"invalid character class\"\n    ErrInvalidCharRange      ErrorCode = \"invalid character class range\"\n    ErrInvalidEscape         ErrorCode = \"invalid escape sequence\"\n    ErrInvalidNamedCapture   ErrorCode = \"invalid named capture\"\n    ErrInvalidPerlOp         ErrorCode = \"invalid or unsupported Perl syntax\"\n    ErrInvalidRepeatOp       ErrorCode = \"invalid nested repetition operator\"\n    ErrInvalidRepeatSize     ErrorCode = \"invalid repeat count\"\n    ErrInvalidUTF8           ErrorCode = \"invalid UTF-8\"\n    ErrMissingBracket        ErrorCode = \"missing closing ]\"\n    ErrMissingParen          ErrorCode = \"missing closing )\"\n    ErrMissingRepeatArgument ErrorCode = \"missing argument to repetition operator\"\n    ErrTrailingBackslash     ErrorCode = \"trailing backslash at end of expression\"\n    ErrUnexpectedParen       ErrorCode = \"unexpected )\"\n)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231494-u6hyc94","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231494-u6hyc94","updated":"20230724231494"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (ErrorCode) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L48","TextMarkTextContent":"String"}]},{"ID":"20230724231495-hwstng4","Type":"NodeParagraph","Properties":{"id":"20230724231495-hwstng4","updated":"20230724231495"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L48","TextMarkTextContent":"❖"}]},{"ID":"20230724231496-xbjaoj7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231496-xbjaoj7","updated":"20230724231496"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (e ErrorCode) String() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231497-1d4fffv","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231497-1d4fffv","updated":"20230724231497"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L53","TextMarkTextContent":"Flags"}]},{"ID":"20230724231498-li7bmye","Type":"NodeParagraph","Properties":{"id":"20230724231498-li7bmye","updated":"20230724231498"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L53","TextMarkTextContent":"❖"}]},{"ID":"20230724231499-5untxa6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231499-5untxa6","updated":"20230724231499"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Flags uint16\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231500-pnrwtam","Type":"NodeParagraph","Properties":{"id":"20230724231500-pnrwtam","updated":"20230724231500"},"Children":[{"Type":"NodeText","Data":"Flags control the behavior of the parser and record information about regexp context."}]},{"ID":"20230724231501-1c1ts6v","Type":"NodeParagraph","Properties":{"id":"20230724231501-1c1ts6v","updated":"20230724231501"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L55","TextMarkTextContent":"❖"}]},{"ID":"20230724231502-iv5oen8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231502-iv5oen8","updated":"20230724231502"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const (\n    FoldCase      Flags = 1 \u003c\u003c iota // case-insensitive match\n    Literal                         // treat pattern as literal string\n    ClassNL                         // allow character classes like [^a-z] and [[:space:]] to match newline\n    DotNL                           // allow . to match newline\n    OneLine                         // treat ^ and $ as only matching at beginning and end of text\n    NonGreedy                       // make repetition operators default to non-greedy\n    PerlX                           // allow Perl extensions\n    UnicodeGroups                   // allow \\p{Han}, \\P{Han} for Unicode group and negation\n    WasDollar                       // regexp OpEndText was $, not \\z\n    Simple                          // regexp contains no counted repetition\n\n    MatchNL = ClassNL | DotNL\n\n    Perl        = ClassNL | OneLine | PerlX | UnicodeGroups // as close to Perl as possible\n    POSIX Flags = 0                                         // POSIX syntax\n)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231503-qhmlp08","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231503-qhmlp08","updated":"20230724231503"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L112","TextMarkTextContent":"Inst"}]},{"ID":"20230724231504-ykx8wqb","Type":"NodeParagraph","Properties":{"id":"20230724231504-ykx8wqb","updated":"20230724231504"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L112","TextMarkTextContent":"❖"}]},{"ID":"20230724231505-7esathd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231505-7esathd","updated":"20230724231505"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Inst struct {\n    Op   InstOp\n    Out  uint32 // all but InstMatch, InstFail\n    Arg  uint32 // InstAlt, InstAltMatch, InstCapture, InstEmptyWidth\n    Rune []rune\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231506-4pd0gzh","Type":"NodeParagraph","Properties":{"id":"20230724231506-4pd0gzh","updated":"20230724231506"},"Children":[{"Type":"NodeText","Data":"An Inst is a single instruction in a regular expression program."}]},{"ID":"20230724231507-tk35ojd","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231507-tk35ojd","updated":"20230724231507"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Inst) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L262","TextMarkTextContent":"MatchEmptyWidth"}]},{"ID":"20230724231508-6lpqz3j","Type":"NodeParagraph","Properties":{"id":"20230724231508-6lpqz3j","updated":"20230724231508"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L262","TextMarkTextContent":"❖"}]},{"ID":"20230724231509-pmgyd0a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231509-pmgyd0a","updated":"20230724231509"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (i *Inst) MatchEmptyWidth(before rune, after rune) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231510-jtz3yfo","Type":"NodeParagraph","Properties":{"id":"20230724231510-jtz3yfo","updated":"20230724231510"},"Children":[{"Type":"NodeText","Data":"MatchEmptyWidth reports whether the instruction matches an empty string between the runes before and after. It should only be called when i.Op == InstEmptyWidth."}]},{"ID":"20230724231511-ib37y5j","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231511-ib37y5j","updated":"20230724231511"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Inst) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L194","TextMarkTextContent":"MatchRune"}]},{"ID":"20230724231512-as2phtt","Type":"NodeParagraph","Properties":{"id":"20230724231512-as2phtt","updated":"20230724231512"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L194","TextMarkTextContent":"❖"}]},{"ID":"20230724231513-abb1b7o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231513-abb1b7o","updated":"20230724231513"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (i *Inst) MatchRune(r rune) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231514-dx5bu64","Type":"NodeParagraph","Properties":{"id":"20230724231514-dx5bu64","updated":"20230724231514"},"Children":[{"Type":"NodeText","Data":"MatchRune reports whether the instruction matches (and consumes) r. It should only be called when i.Op == InstRune."}]},{"ID":"20230724231515-r9jyng7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231515-r9jyng7","updated":"20230724231515"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Inst) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L203","TextMarkTextContent":"MatchRunePos"}]},{"ID":"20230724231516-2iuhmth","Type":"NodeParagraph","Properties":{"id":"20230724231516-2iuhmth","updated":"20230724231516"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L203","TextMarkTextContent":"❖"}]},{"ID":"20230724231517-uu7jo4j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231517-uu7jo4j","updated":"20230724231517"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (i *Inst) MatchRunePos(r rune) int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231518-ur5qqhp","Type":"NodeParagraph","Properties":{"id":"20230724231518-ur5qqhp","updated":"20230724231518"},"Children":[{"Type":"NodeText","Data":"MatchRunePos checks whether the instruction matches (and consumes) r. If so, MatchRunePos returns the index of the matching rune pair (or, when len(i.Rune) == 1, rune singleton). If not, MatchRunePos returns -1. MatchRunePos should only be called when i.Op == InstRune."}]},{"ID":"20230724231519-l1gm62y","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231519-l1gm62y","updated":"20230724231519"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Inst) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L280","TextMarkTextContent":"String"}]},{"ID":"20230724231520-g7l9dfb","Type":"NodeParagraph","Properties":{"id":"20230724231520-g7l9dfb","updated":"20230724231520"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L280","TextMarkTextContent":"❖"}]},{"ID":"20230724231521-0e2nz7b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231521-0e2nz7b","updated":"20230724231521"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (i *Inst) String() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231522-2nn6n0l","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231522-2nn6n0l","updated":"20230724231522"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L24","TextMarkTextContent":"InstOp"}]},{"ID":"20230724231523-d1ryzvt","Type":"NodeParagraph","Properties":{"id":"20230724231523-d1ryzvt","updated":"20230724231523"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L24","TextMarkTextContent":"❖"}]},{"ID":"20230724231524-lvnma9f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231524-lvnma9f","updated":"20230724231524"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type InstOp uint8\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231525-ikukb83","Type":"NodeParagraph","Properties":{"id":"20230724231525-ikukb83","updated":"20230724231525"},"Children":[{"Type":"NodeText","Data":"An InstOp is an instruction opcode."}]},{"ID":"20230724231526-5ufxdxx","Type":"NodeParagraph","Properties":{"id":"20230724231526-5ufxdxx","updated":"20230724231526"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L26","TextMarkTextContent":"❖"}]},{"ID":"20230724231527-lua5tb6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231527-lua5tb6","updated":"20230724231527"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const (\n    InstAlt InstOp = iota\n    InstAltMatch\n    InstCapture\n    InstEmptyWidth\n    InstMatch\n    InstFail\n    InstNop\n    InstRune\n    InstRune1\n    InstRuneAny\n    InstRuneAnyNotNL\n)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231528-ad5pj33","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231528-ad5pj33","updated":"20230724231528"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (InstOp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L54","TextMarkTextContent":"String"}]},{"ID":"20230724231529-vaaml37","Type":"NodeParagraph","Properties":{"id":"20230724231529-vaaml37","updated":"20230724231529"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L54","TextMarkTextContent":"❖"}]},{"ID":"20230724231530-7w8uwge","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231530-7w8uwge","updated":"20230724231530"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (i InstOp) String() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231531-tevlekf","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231531-tevlekf","updated":"20230724231531"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L31","TextMarkTextContent":"Op"}]},{"ID":"20230724231532-4nmm3wc","Type":"NodeParagraph","Properties":{"id":"20230724231532-4nmm3wc","updated":"20230724231532"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L31","TextMarkTextContent":"❖"}]},{"ID":"20230724231533-u0cwf1h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231533-u0cwf1h","updated":"20230724231533"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Op uint8\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231534-3mg6ck5","Type":"NodeParagraph","Properties":{"id":"20230724231534-3mg6ck5","updated":"20230724231534"},"Children":[{"Type":"NodeText","Data":"An Op is a single regular expression operator."}]},{"ID":"20230724231535-t36t4rw","Type":"NodeParagraph","Properties":{"id":"20230724231535-t36t4rw","updated":"20230724231535"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L37","TextMarkTextContent":"❖"}]},{"ID":"20230724231536-q51xnk5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231536-q51xnk5","updated":"20230724231536"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"const (\n    OpNoMatch        Op  = 1 + iota // matches no strings\n    OpEmptyMatch                    // matches empty string\n    OpLiteral                       // matches Runes sequence\n    OpCharClass                     // matches Runes interpreted as range pair list\n    OpAnyCharNotNL                  // matches any character except newline\n    OpAnyChar                       // matches any character\n    OpBeginLine                     // matches empty string at beginning of line\n    OpEndLine                       // matches empty string at end of line\n    OpBeginText                     // matches empty string at beginning of text\n    OpEndText                       // matches empty string at end of text\n    OpWordBoundary                  // matches word boundary `\\b`\n    OpNoWordBoundary                // matches word non-boundary `\\B`\n    OpCapture                       // capturing subexpression with index Cap, optional name Name\n    OpStar                          // matches Sub[0] zero or more times\n    OpPlus                          // matches Sub[0] one or more times\n    OpQuest                         // matches Sub[0] zero or one times\n    OpRepeat                        // matches Sub[0] at least Min times, at most Max (Max == -1 is no limit)\n    OpConcat                        // matches concatenation of Subs\n    OpAlternate                     // matches alternation of Subs\n)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231537-qajhh3b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231537-qajhh3b","updated":"20230724231537"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L17","TextMarkTextContent":"Prog"}]},{"ID":"20230724231538-wogvoqo","Type":"NodeParagraph","Properties":{"id":"20230724231538-wogvoqo","updated":"20230724231538"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L17","TextMarkTextContent":"❖"}]},{"ID":"20230724231539-pxfesxs","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231539-pxfesxs","updated":"20230724231539"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Prog struct {\n    Inst   []Inst\n    Start  int // index of start instruction\n    NumCap int // number of InstCapture insts in re\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231540-yqasesd","Type":"NodeParagraph","Properties":{"id":"20230724231540-yqasesd","updated":"20230724231540"},"Children":[{"Type":"NodeText","Data":"A Prog is a compiled regular expression program."}]},{"ID":"20230724231541-lu0l3e5","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231541-lu0l3e5","updated":"20230724231541"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/compile.go#L80","TextMarkTextContent":"Compile"}]},{"ID":"20230724231542-5ls18do","Type":"NodeParagraph","Properties":{"id":"20230724231542-5ls18do","updated":"20230724231542"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/compile.go#L80","TextMarkTextContent":"❖"}]},{"ID":"20230724231543-k9izvvd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231543-k9izvvd","updated":"20230724231543"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Compile(re *Regexp) (*Prog, error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231544-cbor2iz","Type":"NodeParagraph","Properties":{"id":"20230724231544-cbor2iz","updated":"20230724231544"},"Children":[{"Type":"NodeText","Data":"Compile compiles the regexp into a program to be executed. The regexp should have been simplified already (returned from re.Simplify)."}]},{"ID":"20230724231545-b875aoq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231545-b875aoq","updated":"20230724231545"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Prog) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L149","TextMarkTextContent":"Prefix"}]},{"ID":"20230724231546-ivhzw19","Type":"NodeParagraph","Properties":{"id":"20230724231546-ivhzw19","updated":"20230724231546"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L149","TextMarkTextContent":"❖"}]},{"ID":"20230724231547-7iu63z7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231547-7iu63z7","updated":"20230724231547"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (p *Prog) Prefix() (prefix string, complete bool)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231548-krbjiju","Type":"NodeParagraph","Properties":{"id":"20230724231548-krbjiju","updated":"20230724231548"},"Children":[{"Type":"NodeText","Data":"Prefix returns a literal string that all matches for the regexp must start with. Complete is true if the prefix is the entire match."}]},{"ID":"20230724231549-7lyhna7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231549-7lyhna7","updated":"20230724231549"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Prog) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L168","TextMarkTextContent":"StartCond"}]},{"ID":"20230724231550-yx68to1","Type":"NodeParagraph","Properties":{"id":"20230724231550-yx68to1","updated":"20230724231550"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L168","TextMarkTextContent":"❖"}]},{"ID":"20230724231551-rd27tzu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231551-rd27tzu","updated":"20230724231551"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (p *Prog) StartCond() EmptyOp\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231552-qcpfueb","Type":"NodeParagraph","Properties":{"id":"20230724231552-qcpfueb","updated":"20230724231552"},"Children":[{"Type":"NodeText","Data":"StartCond returns the leading empty-width conditions that must be true in any match. It returns ^EmptyOp(0) if no matches are possible."}]},{"ID":"20230724231553-60l1skf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231553-60l1skf","updated":"20230724231553"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Prog) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L119","TextMarkTextContent":"String"}]},{"ID":"20230724231554-bu0p8ok","Type":"NodeParagraph","Properties":{"id":"20230724231554-bu0p8ok","updated":"20230724231554"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/prog.go#L119","TextMarkTextContent":"❖"}]},{"ID":"20230724231555-mhov040","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231555-mhov040","updated":"20230724231555"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (p *Prog) String() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231556-utvhrdw","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724231556-utvhrdw","updated":"20230724231556"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"type "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L18","TextMarkTextContent":"Regexp"}]},{"ID":"20230724231557-w37f9ok","Type":"NodeParagraph","Properties":{"id":"20230724231557-w37f9ok","updated":"20230724231557"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L18","TextMarkTextContent":"❖"}]},{"ID":"20230724231558-tue11zi","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231558-tue11zi","updated":"20230724231558"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Regexp struct {\n    Op       Op  // operator\n    Flags    Flags\n    Sub      []*Regexp  // subexpressions, if any\n    Sub0     [1]*Regexp // storage for short Sub\n    Rune     []rune     // matched runes, for OpLiteral, OpCharClass\n    Rune0    [2]rune    // storage for short Rune\n    Min, Max int        // min, max for OpRepeat\n    Cap      int        // capturing index, for OpCapture\n    Name     string     // capturing name, for OpCapture\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231559-exy8fg8","Type":"NodeParagraph","Properties":{"id":"20230724231559-exy8fg8","updated":"20230724231559"},"Children":[{"Type":"NodeText","Data":"A Regexp is a node in a regular expression syntax tree."}]},{"ID":"20230724231560-qzopqnf","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231560-qzopqnf","updated":"20230724231560"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L701","TextMarkTextContent":"Parse"}]},{"ID":"20230724231561-27hbwcc","Type":"NodeParagraph","Properties":{"id":"20230724231561-27hbwcc","updated":"20230724231561"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/parse.go#L701","TextMarkTextContent":"❖"}]},{"ID":"20230724231562-2fitk99","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231562-2fitk99","updated":"20230724231562"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func Parse(s string, flags Flags) (*Regexp, error)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231563-vwdabja","Type":"NodeParagraph","Properties":{"id":"20230724231563-vwdabja","updated":"20230724231563"},"Children":[{"Type":"NodeText","Data":"Parse parses a regular expression string s, controlled by the specified Flags, and returns a regular expression parse tree. The syntax is described in the top-level comment."}]},{"ID":"20230724231564-u0i98pn","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231564-u0i98pn","updated":"20230724231564"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L306","TextMarkTextContent":"CapNames"}]},{"ID":"20230724231565-2thsrhz","Type":"NodeParagraph","Properties":{"id":"20230724231565-2thsrhz","updated":"20230724231565"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L306","TextMarkTextContent":"❖"}]},{"ID":"20230724231566-s5xi47m","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231566-s5xi47m","updated":"20230724231566"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) CapNames() []string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231567-hpm1a68","Type":"NodeParagraph","Properties":{"id":"20230724231567-hpm1a68","updated":"20230724231567"},"Children":[{"Type":"NodeText","Data":"CapNames walks the regexp to find the names of capturing groups."}]},{"ID":"20230724231568-h1wyp6g","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231568-h1wyp6g","updated":"20230724231568"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L62","TextMarkTextContent":"Equal"}]},{"ID":"20230724231569-eejjt85","Type":"NodeParagraph","Properties":{"id":"20230724231569-eejjt85","updated":"20230724231569"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L62","TextMarkTextContent":"❖"}]},{"ID":"20230724231570-40d85vy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231570-40d85vy","updated":"20230724231570"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (x *Regexp) Equal(y *Regexp) bool\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231571-iwc3p8e","Type":"NodeParagraph","Properties":{"id":"20230724231571-iwc3p8e","updated":"20230724231571"},"Children":[{"Type":"NodeText","Data":"Equal returns true if x and y have identical structure."}]},{"ID":"20230724231572-bo96oal","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231572-bo96oal","updated":"20230724231572"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L292","TextMarkTextContent":"MaxCap"}]},{"ID":"20230724231573-1iwo942","Type":"NodeParagraph","Properties":{"id":"20230724231573-1iwo942","updated":"20230724231573"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L292","TextMarkTextContent":"❖"}]},{"ID":"20230724231574-oqaecvg","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231574-oqaecvg","updated":"20230724231574"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) MaxCap() int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231575-lcqaggd","Type":"NodeParagraph","Properties":{"id":"20230724231575-lcqaggd","updated":"20230724231575"},"Children":[{"Type":"NodeText","Data":"MaxCap walks the regexp to find the maximum capture index."}]},{"ID":"20230724231576-hk3tmj0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231576-hk3tmj0","updated":"20230724231576"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/simplify.go#L14","TextMarkTextContent":"Simplify"}]},{"ID":"20230724231577-uqvpnia","Type":"NodeParagraph","Properties":{"id":"20230724231577-uqvpnia","updated":"20230724231577"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/simplify.go#L14","TextMarkTextContent":"❖"}]},{"ID":"20230724231578-oxdyfdp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231578-oxdyfdp","updated":"20230724231578"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) Simplify() *Regexp\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231579-ua0u6v7","Type":"NodeParagraph","Properties":{"id":"20230724231579-ua0u6v7","updated":"20230724231579"},"Children":[{"Type":"NodeText","Data":"Simplify returns a regexp equivalent to re but without counted repetitions and with various other simplifications, such as rewriting /(?:a+)+/ to /a+/. The resulting regexp will execute correctly but its string representation will not produce the same parse tree, because capturing parentheses may have been duplicated or removed. For example, the simplified form for /(x){1,2}/ is /(x)(x)?/ but both parentheses capture as $1. The returned regexp may share structure with or be the original."}]},{"ID":"20230724231580-yntyhfh","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724231580-yntyhfh","updated":"20230724231580"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"func (*Regexp) "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L245","TextMarkTextContent":"String"}]},{"ID":"20230724231581-caagi1b","Type":"NodeParagraph","Properties":{"id":"20230724231581-caagi1b","updated":"20230724231581"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/master/src/regexp/syntax/regexp.go#L245","TextMarkTextContent":"❖"}]},{"ID":"20230724231582-jswl5ze","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231582-jswl5ze","updated":"20230724231582"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (re *Regexp) String() string\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}