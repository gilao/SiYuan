{"ID":"20231117110857-3f98wrq","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f378","id":"20231117110857-3f98wrq","tags":"公众号-路多辛","title":"Web 开发中 route 和router 有什么区别","updated":"20231117161440"},"Children":[{"ID":"20231117110935-00zdxs6","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117110935-00zdxs6","updated":"20231117110935"},"Children":[{"Type":"NodeText","Data":"什么是路由？"}]},{"ID":"20231117110935-ks5zv3r","Type":"NodeParagraph","Properties":{"id":"20231117110935-ks5zv3r","updated":"20231117110953"},"Children":[{"Type":"NodeText","Data":"在 Web 开发中，会经常和路由打交道，可能有的同学并没有仔细思考过到底什么是路由。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"路由是根据用户请求的 URL 来确定返回给用户的内容或页面的技术，即将 HTTP 请求映射到相应的处理代码，使得用户能够通过访问不同的 URL 来获取正确的页面或功能。"},{"Type":"NodeText","Data":"在 Web 应用程序中，有很多不同的页面和功能需要通过不同的 URL 进行访问，这就需要通过路由来将 HTTP 请求映射到相应的处理代码上。借助路由，开发者可以创建出更加灵活和可维护的 Web 应用程序，提高应用程序的质量和安全性。"}]},{"ID":"20231117110937-xcvhu8m","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117110937-xcvhu8m","updated":"20231117111356"},"Children":[{"Type":"NodeText","Data":"route  与 router 的基本区别"}]},{"ID":"20231117111420-k2r1fnj","Type":"NodeParagraph","Properties":{"id":"20231117111420-k2r1fnj","updated":"20231117111420"},"Children":[{"Type":"NodeText","Data":"在日常开发中，在表示路由的时候，想必很多同学都纠结过到底使用 route 还是 router。 这两个词虽然看起来和听起来都很相似，但代表着不同的概念。"}]},{"ID":"20231117111420-gycgtes","Type":"NodeParagraph","Properties":{"id":"20231117111420-gycgtes","updated":"20231117111607"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"route 通常指的是应用程序中的一个路由规则，定义了 URL 模式与应用程序中的特定行为之间的映射。"},{"Type":"NodeText","Data":"简单来说，"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);"},"TextMarkType":"text strong","TextMarkTextContent":"是一个 URL 路径与处理这个路径请求的代码之间的关系。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-card-warning-background); color: var(--b3-card-warning-color);\"}"},{"Type":"NodeText","Data":"当用户访问特定的 URL 时，route 决定了应该呈现哪个视图或组件，或者执行哪个控制器的哪个动作。例如，在一个博客应用中，可能会有一个 route 将 /post/list 映射到显示所有博客的动作。route 通常包含了路径模式、处理函数（如控制器动作）、中间件等。可以是静态的（如/about）或动态的（如 /post/:id，其中 :id 是一个变量）。"}]},{"ID":"20231117111420-pyow1xv","Type":"NodeParagraph","Properties":{"id":"20231117111420-pyow1xv","updated":"20231117111626"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"router 是一种机制，通常是一个对象或一个库，负责监听浏览器地址的变化，解析 URL，并根据定义好的 route 规则分发请求到相应的处理逻辑。router 决定了应用程序如何响应用户的请求，管理着所有的 route 规则，并在用户访问某个 URL 时，决定使用哪个 route 规则来处理这个请求。"},{"Type":"NodeText","Data":"router 通常提供了定义 route 的接口、导航控制（如前进、后退、重定向）、路由守卫（如权限验证）、路由嵌套等高级功能。在现代前端框架中，router 还负责处理浏览器历史记录和状态管理。"}]},{"ID":"20231117153452-w9dxo7x","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117153452-w9dxo7x","updated":"20231117153452"},"Children":[{"Type":"NodeText","Data":"以 Gin 框架看 route 和 router"}]},{"ID":"20231117153452-mrt2t9p","Type":"NodeParagraph","Properties":{"id":"20231117153452-mrt2t9p","updated":"20231117153452"},"Children":[{"Type":"NodeText","Data":"接下来以 Golang 框架 Gin 为例，来理解下 route 和 router的不同。"}]},{"ID":"20231117153452-8badkyo","Type":"NodeParagraph","Properties":{"id":"20231117153452-8badkyo","updated":"20231117153452"},"Children":[{"Type":"NodeText","Data":"从上文我们已经知道 route 是指 URL 路径和用来处理该路径请求的函数之间的映射关系。在Gin中，一个路由由 HTTP 请求方式、路径和处理该路径请求的处理函数组成。例如，以定义一个处理 GET 请求的 /login 路径的路由，代码如下："}]},{"ID":"20231117153452-abs6kps","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231117153452-abs6kps","updated":"20231117155736"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"github.com/gin-gonic/gin\"\n\t\"net/http\"\n)\n\nfunc main() {\n\tr := gin.Default()\n\tr.GET(\"/login\", loginHandler)\n\terr := r.Run(\":80\")\n\tif err != nil {\n\t\treturn\n\t}\n}\n\nfunc loginHandler(c *gin.Context) {\n\tc.JSON(http.StatusOK, gin.H{\"message\": \"login success\"})\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231117155742-rassk31","Type":"NodeParagraph","Properties":{"id":"20231117155742-rassk31","updated":"20231117155747"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其中第10行的 r.GET 定义了一个路由，/login 是路径，而 loginHandler 是处理该路径请求的函数，这部分就是一个典型的 route。"}]},{"ID":"20231117155742-kjee1nz","Type":"NodeParagraph","Properties":{"id":"20231117155742-kjee1nz","updated":"20231117155843"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"router 在 Gin 中指的是路由处理系统，是一个更高层次的实体，负责管理所有的路由，并根据客户端发来的请求找到并执行对应的处理函数。Gin的 router 还负责中间件的管理和请求的分发。"},{"Type":"NodeTextMark","Properties":{"style":"background-color: var(--b3-font-background3); color: var(--b3-font-color5);"},"TextMarkType":"text strong","TextMarkTextContent":"当创建一个 Gin 实例时，实际上就是在创建一个 router。"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"background-color: var(--b3-font-background3); color: var(--b3-font-color5);\"}"},{"Type":"NodeText","Data":"例如上面示例代码的第9行 r := gin.Default()，在这个实例 r 中，可以注册多个路由，定义中间件，创建路由组等。router 是 Gin 框架的核心，背后使用了高效的 HTTP 路由库来处理路由匹配。"}]},{"ID":"20231117155752-wmgdsqo","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117155752-wmgdsqo","updated":"20231117155922"},"Children":[{"Type":"NodeText","Data":"route 与 router 的性能考量"}]},{"ID":"20231117155923-051exwh","Type":"NodeParagraph","Properties":{"id":"20231117155923-051exwh","updated":"20231117161216"}},{"ID":"20231117161235-lckjzus","Type":"NodeParagraph","Properties":{"id":"20231117161235-lckjzus","updated":"20231117161235"},"Children":[{"Type":"NodeText","Data":"在使用 Web 框架时，route 和 router 的性能考量通常涉及以下几个方面："}]},{"ID":"20231117161235-b4tr2sw","Type":"NodeList","ListData":{},"Properties":{"id":"20231117161235-b4tr2sw","updated":"20231117161440"},"Children":[{"ID":"20231117161235-fct3pl2","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-fct3pl2","updated":"20231117161430"},"Children":[{"ID":"20231117161235-0y4wsbc","Type":"NodeParagraph","Properties":{"id":"20231117161235-0y4wsbc","updated":"20231117161430"},"Children":[{"Type":"NodeText","Data":"路由匹配的效率："},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"router 的实现算法对性能至关重要，Gin 使用了基于 trie 的算法来进行路由匹配"},{"Type":"NodeText","Data":"，这种算法在查找路由时非常高效，尤其是对于大量路由的情况。简洁且明确的路由规则可以提高匹配速度。例如，避免过多的通配符和正则表达式可以减少匹配时的计算量。"}]}]},{"ID":"20231117161235-5arv7co","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-5arv7co","updated":"20231117161440"},"Children":[{"ID":"20231117161235-67ct55c","Type":"NodeParagraph","Properties":{"id":"20231117161235-67ct55c","updated":"20231117161440"},"Children":[{"Type":"NodeText","Data":"中间件的使用：中间件虽然提供了方便的扩展点，但每个中间件都会增加请求处理的时间。因此，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"应当仅使用必要的中间件，并确保没有性能问题。中间件的执行顺序也会影响性能，应当合理安排轻量级或者优先级高的中间件先执行。"}]}]},{"ID":"20231117161235-esv4jsn","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-esv4jsn","updated":"20231117161235"},"Children":[{"ID":"20231117161235-rtwg76o","Type":"NodeParagraph","Properties":{"id":"20231117161235-rtwg76o","updated":"20231117161235"},"Children":[{"Type":"NodeText","Data":"路由设计：合理的路由层级设计可以减少框架在匹配路由时的查找深度，例如，使用路由组来组织相关的路由。对于参数化的路由（如 /user/:id），应当注意参数解析的性能影响，并在可能的情况下优化。"}]}]},{"ID":"20231117161235-8b723yu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-8b723yu","updated":"20231117161235"},"Children":[{"ID":"20231117161235-4avfxs3","Type":"NodeParagraph","Properties":{"id":"20231117161235-4avfxs3","updated":"20231117161235"},"Children":[{"Type":"NodeText","Data":"服务器和硬件资源：router 的性能也受服务器硬件资源的限制，包括CPU、内存和网络带宽。在高负载环境下，使用负载均衡可以分散请求，减少单个服务器的压力。"}]}]},{"ID":"20231117161235-g0s24yv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-g0s24yv","updated":"20231117161235"},"Children":[{"ID":"20231117161235-etitouy","Type":"NodeParagraph","Properties":{"id":"20231117161235-etitouy","updated":"20231117161235"},"Children":[{"Type":"NodeText","Data":"缓存策略：对于重复的请求，可以通过缓存请求结果来提高响应速度，减少路由处理的负担。对于静态文件的路由，使用合适的缓存策略和 CDN 服务可以显著提高性能。"}]}]},{"ID":"20231117161235-2wu5t38","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-2wu5t38","updated":"20231117161235"},"Children":[{"ID":"20231117161235-nby65ok","Type":"NodeParagraph","Properties":{"id":"20231117161235-nby65ok","updated":"20231117161235"},"Children":[{"Type":"NodeText","Data":"代码优化：路由的处理函数应当高效执行，避免在热路径上进行复杂的计算或者阻塞操作。对于可以异步执行的操作，应当避免阻塞主线程，以提高吞吐量。"}]}]},{"ID":"20231117161235-ohctckt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117161235-ohctckt","updated":"20231117161235"},"Children":[{"ID":"20231117161235-8btff5e","Type":"NodeParagraph","Properties":{"id":"20231117161235-8btff5e","updated":"20231117161235"},"Children":[{"Type":"NodeText","Data":"测试和监控：定期进行性能测试，识别和优化潜在的瓶颈。实时监控应用的性能，以便快速响应任何性能下降的情况。"}]}]}]},{"ID":"20231117161231-i6fweik","Type":"NodeParagraph","Properties":{"id":"20231117161231-i6fweik"}}]}