{"ID":"20230727000918-nufn7co","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230727000918-nufn7co","title":"14. 数据类型并发安全的问题","updated":"20230727000918"},"Children":[{"ID":"20230727000919-dh7s7fx","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727000919-dh7s7fx","updated":"20230727000919"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"14. 数据类型并发安全的问题"}]},{"ID":"20230727000920-46ut6qs","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000920-46ut6qs","updated":"20230727000920"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"在Go中数组、切片和map都是非线程安全的。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000921-a1pu0xk","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000921-a1pu0xk","updated":"20230727000921"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"什么是线程(并发)安全？"}]},{"ID":"20230727000922-bsdavp9","Type":"NodeParagraph","Properties":{"id":"20230727000922-bsdavp9","updated":"20230727000922"},"Children":[{"Type":"NodeText","Data":"线程(并发)安全是指程序在并发执行或者多个线程同时操作的情况下，执行结果还是正确的。"}]},{"ID":"20230727000923-p2flxch","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000923-p2flxch","updated":"20230727000923"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"非线程安全原因"}]},{"ID":"20230727000924-gkkno5d","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000924-gkkno5d","updated":"20230727000924"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"map"}]},{"ID":"20230727000925-xa5hhsh","Type":"NodeBlockquote","Properties":{"id":"20230727000925-xa5hhsh","updated":"20230727000925"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000926-hqu6dt4","Type":"NodeParagraph","Properties":{"id":"20230727000926-hqu6dt4","updated":"20230727000926"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Go语言中的 map 在并发情况下，==只读是线程安全的，同时读写是线程不安全的。==同一个变量在多个goroutine中访问需要保证其安全性。"}]}]},{"ID":"20230727000927-ud17qk7","Type":"NodeParagraph","Properties":{"id":"20230727000927-ud17qk7","updated":"20230727000927"},"Children":[{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"因为map变量为指针类型变量，并发写时，多个协程同时操作一个内存"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，类似于多线程操作同一个资源会发生竞争关系，共享资源会遭到破坏，因此golang出于安全的考虑，抛出致命错误：fatal error: concurrent map writes。"}]},{"ID":"20230727000928-1pzwxtg","Type":"NodeParagraph","Properties":{"id":"20230727000928-1pzwxtg","updated":"20230727000928"},"Children":[{"Type":"NodeText","Data":"非并发安全map（普通的map）"}]},{"ID":"20230727000929-ozlk5wc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000929-ozlk5wc","updated":"20230727000929"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n \nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"sync\"\n)\n \nvar m = make(map[string]int)\n \nfunc get(key string) int {\n\treturn m[key]\n}\n \nfunc set(key string, value int) {\n\tm[key] = value\n}\n \nfunc main() {\n\twg := sync.WaitGroup{}\n\tfor i := 0; i \u003c 10; i++ {\n\t\twg.Add(1)\n\t\tgo func(n int) {\n\t\t\tkey := strconv.Itoa(n)\n\t\t\tset(key, n)\n\t\t\tfmt.Printf(\"k=:%v,v:=%v\\n\", key, get(key))\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\twg.Wait()\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000930-fm9w2iu","Type":"NodeParagraph","Properties":{"id":"20230727000930-fm9w2iu","updated":"20230727000930"},"Children":[{"Type":"NodeText","Data":"并发安全map："}]},{"ID":"20230727000931-ts5njq5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000931-ts5njq5","updated":"20230727000931"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"fmt\"\n\t\"strconv\"\n\t\"sync\"\n)\n\nvar m = make(map[string]int)\n\nfunc get(key string) int {\n\treturn m[key]\n}\n\nfunc set(key string, value int) {\n\tm[key] = value\n}\n\nfunc main() { // 不加 lock 则是非并发安全\n\twg := sync.WaitGroup{}\n\tvar lock sync.Mutex\n\tfor i := 0; i \u003c 10; i++ {\n\t\twg.Add(1)\n\t\tgo func(n int) {\n\t\t\tkey := strconv.Itoa(n)\n\t\t\tlock.Lock()\n\t\t\tset(key, n)\n\t\t\tlock.Unlock()\n\t\t\t// lock.Lock()\n\t\t\tfmt.Printf(\"k=:%v,v:=%v\\n\", key, get(key))\n\t\t\t// lock.Unlock()\n\t\t\twg.Done()\n\t\t}(i)\n\t}\n\twg.Wait()\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000932-sxplka9","Type":"NodeParagraph","Properties":{"id":"20230727000932-sxplka9","updated":"20230727000932"},"Children":[{"Type":"NodeText","Data":"解决方案："}]},{"ID":"20230727000933-l5if24o","Type":"NodeParagraph","Properties":{"id":"20230727000933-l5if24o","updated":"20230727000933"},"Children":[{"Type":"NodeText","Data":"（1）在写操作时增加锁"}]},{"ID":"20230727000934-rwogegy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000934-rwogegy","updated":"20230727000934"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n \nimport (\n\t\"fmt\"\n\t\"sync\"\n)\n \nfunc main() {\n\tvar lock sync.Mutex\n\tvar maplist map[string]int\n\tmaplist = map[string]int{\"one\": 1, \"two\": 2}\n\tlock.Lock()\n\tmaplist[\"three\"] = 3\n\tlock.Unlock()\n\tfmt.Println(maplist)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000935-czjfe2f","Type":"NodeParagraph","Properties":{"id":"20230727000935-czjfe2f","updated":"20230727000935"},"Children":[{"Type":"NodeText","Data":"（2）sync.Map包"}]},{"ID":"20230727000936-p8kd5qj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000936-p8kd5qj","updated":"20230727000936"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"fmt\"\n\t\"sync\"\n)\nfunc main() {\n\tm := sync.Map{} // 或者 var mm sync.Map\n\tm.Store(\"a\", 1)\n\tm.Store(\"b\", 2)\n\tm.Store(\"c\", 3)\n\tfmt.Println(m.Load(\"a\"))\n\tm.Range(func(key, value interface{}) bool {\n\t\tfmt.Println(key, value)\n\t\treturn true\n\t})\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000937-mj1ct0g","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000937-mj1ct0g","updated":"20230727000937"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"数组"}]},{"ID":"20230727000938-jq3yq72","Type":"NodeParagraph","Properties":{"id":"20230727000938-jq3yq72","updated":"20230727000938"},"Children":[{"Type":"NodeText","Data":"指定索引进行读写时，数组是支持并发读写索引区的数据的，但是索引区的数据在并发时会被覆盖的；"}]},{"ID":"20230727000939-pl0ip64","Type":"NodeParagraph","Properties":{"id":"20230727000939-pl0ip64","updated":"20230727000939"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"解决方案"}]},{"ID":"20230727000940-m7aegym","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000940-m7aegym","updated":"20230727000940"},"Children":[{"ID":"20230727000941-22fm3b6","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000941-22fm3b6","updated":"20230727000941"},"Children":[{"ID":"20230727000942-r2l4m71","Type":"NodeParagraph","Properties":{"id":"20230727000942-r2l4m71","updated":"20230727000942"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"加锁"}]}]},{"ID":"20230727000943-9q428l3","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230727000943-9q428l3","updated":"20230727000943"},"Children":[{"ID":"20230727000944-9cxk550","Type":"NodeParagraph","Properties":{"id":"20230727000944-9cxk550","updated":"20230727000944"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"控制并发顺序"}]}]}]},{"ID":"20230727000945-jw37co4","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000945-jw37co4","updated":"20230727000945"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"切片"}]},{"ID":"20230727000946-3eckhjo","Type":"NodeParagraph","Properties":{"id":"20230727000946-3eckhjo","updated":"20230727000946"},"Children":[{"Type":"NodeText","Data":"指定索引进行读写：是支持并发读写索引区的数据的，但是索引区的数据在并发时可能会被覆盖的；"}]},{"ID":"20230727000947-oluhxmk","Type":"NodeParagraph","Properties":{"id":"20230727000947-oluhxmk","updated":"20230727000947"},"Children":[{"Type":"NodeText","Data":"发生切片动态扩容：并发场景下扩容可能会被覆盖。"}]},{"ID":"20230727000948-rtl407l","Type":"NodeBlockquote","Properties":{"id":"20230727000948-rtl407l","updated":"20230727000948"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000949-xk3hqqc","Type":"NodeParagraph","Properties":{"id":"20230727000949-xk3hqqc","updated":"20230727000949"},"Children":[{"Type":"NodeText","Data":"切片是对数组的抽象，其底层就是数组，在并发下写数据到相同的索引位会被覆盖，并且切片也有自动扩容的功能，当切片要进行扩容时，就要替换底层的数组，在切换底层数组时，多个goroutine是同时运行的，哪个goroutine先运行是不确定的，不论哪个goroutine先写入内存，肯定就有一次写入会覆盖之前的写入，所以在动态扩容时并发写入数组是不安全的；"}]}]},{"ID":"20230727000950-535jm1r","Type":"NodeParagraph","Properties":{"id":"20230727000950-535jm1r","updated":"20230727000950"},"Children":[{"Type":"NodeText","Data":"解决方案"}]},{"ID":"20230727000951-0ortkrn","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000951-0ortkrn","updated":"20230727000951"},"Children":[{"ID":"20230727000952-fbz3w99","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000952-fbz3w99","updated":"20230727000952"},"Children":[{"ID":"20230727000953-6x0w6td","Type":"NodeParagraph","Properties":{"id":"20230727000953-6x0w6td","updated":"20230727000953"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"加互斥锁"}]}]},{"ID":"20230727000954-46ovb2c","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230727000954-46ovb2c","updated":"20230727000954"},"Children":[{"ID":"20230727000955-k4qw9a9","Type":"NodeParagraph","Properties":{"id":"20230727000955-k4qw9a9","updated":"20230727000955"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用channel串行化操作"}]}]},{"ID":"20230727000956-jlxkisl","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20230727000956-jlxkisl","updated":"20230727000956"},"Children":[{"ID":"20230727000957-rs2cfam","Type":"NodeParagraph","Properties":{"id":"20230727000957-rs2cfam","updated":"20230727000957"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"使用sync.map代替切片"},{"Type":"NodeText","Data":"(github上著名的iris框架也曾遇到过切片动态扩容导致webscoket连接数减少的bug，最终采用sync.map解决了该问题， 采用sync.map解决切片并发安全)"}]}]}]},{"ID":"20230727000958-scjme1m","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000958-scjme1m","updated":"20230727000958"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"Go其他数据类型的并发安全性"}]},{"ID":"20230727000959-nn6xjmt","Type":"NodeParagraph","Properties":{"id":"20230727000959-nn6xjmt","updated":"20230727000959"},"Children":[{"Type":"NodeText","Data":"数据类型参考："}]},{"ID":"20230727000960-8n0ng42","Type":"NodeParagraph","Properties":{"id":"20230727000960-8n0ng42","updated":"20230727000960"},"Children":[{"Type":"NodeText","Data":"Go 中所有类型并发赋值的安全性。"}]},{"ID":"20230727000961-6ulmiq9","Type":"NodeParagraph","Properties":{"id":"20230727000961-6ulmiq9","updated":"20230727000961"},"Children":[{"Type":"NodeText","Data":"（1）"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"由一条机器指令完成赋值的类型并发赋值是安全的"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，这些类型有："},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"字节型，布尔型、整型、浮点型、字符型、指针、函数。"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000962-csv9oge","Type":"NodeParagraph","Properties":{"id":"20230727000962-csv9oge","updated":"20230727000962"},"Children":[{"Type":"NodeText","Data":"（2）"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"数组由一个或多个元素组成，大部分情况并发不安全。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"注意：当位宽不大于 64 位且是 2 的整数次幂（8，16，32，64），那么其并发赋值是安全的。"}]},{"ID":"20230727000963-km31o7s","Type":"NodeParagraph","Properties":{"id":"20230727000963-km31o7s","updated":"20230727000963"},"Children":[{"Type":"NodeText","Data":"（3）"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"struct 或底层是 struct 的类型并发赋值大部分情况并发不安全"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，这些类型有：复"},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"数、字符串、 数组、切片、映射、通道、接口。"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"注意："},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"当 struct 赋值时退化为单个字段由一个机器指令完成赋值时，并发赋值又是安全的"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"。这种情况有："}]},{"ID":"20230727000964-zisrlba","Type":"NodeParagraph","Properties":{"id":"20230727000964-zisrlba","updated":"20230727000964"},"Children":[{"Type":"NodeText","Data":"（a）实部或虚部相同的复数的并发赋值；"}]},{"ID":"20230727000965-tk6h6fo","Type":"NodeParagraph","Properties":{"id":"20230727000965-tk6h6fo","updated":"20230727000965"},"Children":[{"Type":"NodeText","Data":"（b）等长字符串的并发赋值；"}]},{"ID":"20230727000966-6abxfu1","Type":"NodeParagraph","Properties":{"id":"20230727000966-6abxfu1","updated":"20230727000966"},"Children":[{"Type":"NodeText","Data":"（c）同长度同容量切片的并发赋值；"}]},{"ID":"20230727000967-jctr4fv","Type":"NodeParagraph","Properties":{"id":"20230727000967-jctr4fv","updated":"20230727000967"},"Children":[{"Type":"NodeText","Data":"（d）同一种具体类型不同值并发赋给接口。"}]}]}