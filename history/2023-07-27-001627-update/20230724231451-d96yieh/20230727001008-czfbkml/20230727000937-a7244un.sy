{"ID":"20230727000937-a7244un","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230727000937-a7244un","title":"3. 数组","updated":"20230727000937"},"Children":[{"ID":"20230727000938-itg72tu","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727000938-itg72tu","updated":"20230727000938"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"3. 数组"}]},{"ID":"20230727000939-iwk01v4","Type":"NodeParagraph","Properties":{"id":"20230727000939-iwk01v4","updated":"20230727000939"},"Children":[{"Type":"NodeText","Data":"数组是同一种数据类型元素的集合。 在Go语言中，数组从声明时就确定，使用时可以修改数组成员，但是"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数组大小不可变化。"},{"Type":"NodeText","Data":" 基本语法："}]},{"ID":"20230727000940-fvr8a3n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000940-fvr8a3n","updated":"20230727000940"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var a [3]int\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000941-4sbeghg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000941-4sbeghg","updated":"20230727000941"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"数组的定义"}]},{"ID":"20230727000942-k6l9two","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000942-k6l9two","updated":"20230727000942"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var 数组变量名 [元素数量]T\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000943-4byeytj","Type":"NodeParagraph","Properties":{"id":"20230727000943-4byeytj","updated":"20230727000943"},"Children":[{"Type":"NodeText","Data":"比如："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"var a [5]int"},{"Type":"NodeText","Data":"， 数组的长度必须是常量，并且长度是数组类型的一部分。一旦定义，长度不能变。 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[5]int"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[10]int"},{"Type":"NodeText","Data":"是不同的类型，无法比较，长度也算类型的一部分。"}]},{"ID":"20230727000944-ud52qzv","Type":"NodeParagraph","Properties":{"id":"20230727000944-ud52qzv","updated":"20230727000944"},"Children":[{"Type":"NodeText","Data":"数组可以通过下标进行访问，下标是从"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"开始，最后一个元素下标是："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"len-1"},{"Type":"NodeText","Data":"，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"访问越界（下标在合法范围之外），则触发访问越界，会panic。"}]},{"ID":"20230727000945-54tr32u","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000945-54tr32u","updated":"20230727000945"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"数组的初始化"}]},{"ID":"20230727000946-fa09gtj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000946-fa09gtj","updated":"20230727000946"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// 初始化列表来设置数组元素的值\n\nvar testArray [3]int                        \n//数组会初始化为int类型的零值\n\nvar numArray = [3]int{1, 2}                 \n//使用指定的初始值完成初始化\n\nvar cityArray = [3]string{\"北京\", \"上海\", \"深圳\"} \n//使用指定的初始值完成初始化\n\n//按照上面的方法每次都要确保提供的初始值和数组长度一致，一般情况下我们可以让编译器根据初始值的个数自行推断数组的长度\n\nvar testArray [3]int\nvar numArray = [...]int{1, 2}\nvar cityArray = [...]string{\"北京\", \"上海\", \"深圳\"}\n\n// 使用指定索引值的方式来初始化数组\na := [...]int{1: 1, 3: 5}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000947-uiu9ov3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000947-uiu9ov3","updated":"20230727000947"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"数组的遍历"}]},{"ID":"20230727000948-djtds1h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000948-djtds1h","updated":"20230727000948"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\tvar a = [...]string{\"北京\", \"上海\", \"深圳\"}\n\t// 方法1：for循环遍历\n\tfor i := 0; i \u003c len(a); i++ {\n\t\tfmt.Println(a[i])\n\t}\n\n\t// 方法2：for range遍历\n\tfor index, value := range a {\n\t\tfmt.Println(index, value)\n\t}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000949-17t2lvg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000949-17t2lvg","updated":"20230727000949"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"多维数组"}]},{"ID":"20230727000950-d3bor3k","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000950-d3bor3k","updated":"20230727000950"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"二维数组的定义"}]},{"ID":"20230727000951-52lvkf3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000951-52lvkf3","updated":"20230727000951"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\ta := [3][2]string{\n\t\t{\"北京\", \"上海\"},\n\t\t{\"广州\", \"深圳\"},\n\t\t{\"成都\", \"重庆\"},\n\t}\n\tfmt.Println(a) //[[北京 上海] [广州 深圳] [成都 重庆]]\n\tfmt.Println(a[2][1]) //支持索引取值:重庆\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000952-ngz33um","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000952-ngz33um","updated":"20230727000952"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"二维数组的遍历"}]},{"ID":"20230727000953-kilg3it","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000953-kilg3it","updated":"20230727000953"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\ta := [3][2]string{\n\t\t{\"北京\", \"上海\"},\n\t\t{\"广州\", \"深圳\"},\n\t\t{\"成都\", \"重庆\"},\n\t}\n\tfor _, v1 := range a {\n\t\tfor _, v2 := range v1 {\n\t\t\tfmt.Printf(\"%s\\t\", v2)\n\t\t}\n\t\tfmt.Println()\n\t}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000954-wiuh924","Type":"NodeParagraph","Properties":{"id":"20230727000954-wiuh924","updated":"20230727000954"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230727000955-h5yo1p8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000955-h5yo1p8","updated":"20230727000955"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"北京\t上海\t\n广州\t深圳\t\n成都\t重庆\t\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000956-zvptvsy","Type":"NodeParagraph","Properties":{"id":"20230727000956-zvptvsy","updated":"20230727000956"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意："},{"Type":"NodeText","Data":" 多维数组"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"只有第一层"},{"Type":"NodeText","Data":"可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"..."},{"Type":"NodeText","Data":"来让编译器推导数组长度。例如："}]},{"ID":"20230727000957-bn85pkw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000957-bn85pkw","updated":"20230727000957"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"//支持的写法\na := [...][2]string{\n\t{\"北京\", \"上海\"},\n\t{\"广州\", \"深圳\"},\n\t{\"成都\", \"重庆\"},\n}\n//不支持多维数组的内层使用...\nb := [3][...]string{\n\t{\"北京\", \"上海\"},\n\t{\"广州\", \"深圳\"},\n\t{\"成都\", \"重庆\"},\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000958-ghtpopx","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000958-ghtpopx","updated":"20230727000958"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"数组是值类型"}]},{"ID":"20230727000959-j0hugtx","Type":"NodeParagraph","Properties":{"id":"20230727000959-j0hugtx","updated":"20230727000959"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"数组是值类型，赋值和传参会复制整个数组。因此改变副本的值，不会改变本身的值。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000960-oo3mjed","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000960-oo3mjed","updated":"20230727000960"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func modifyArray(x [3]int) {\n\tx[0] = 100\n}\n\nfunc modifyArray2(x [3][2]int) {\n\tx[2][0] = 100\n}\nfunc main() {\n\ta := [3]int{10, 20, 30}\n\tmodifyArray(a) //在modify中修改的是a的副本x\n\tfmt.Println(a) //[10 20 30]\n\tb := [3][2]int{\n\t\t{1, 1},\n\t\t{1, 1},\n\t\t{1, 1},\n\t}\n\tmodifyArray2(b) //在modify中修改的是b的副本x\n\tfmt.Println(b)  //[[1 1] [1 1] [1 1]]\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000961-aoai51y","Type":"NodeParagraph","Properties":{"id":"20230727000961-aoai51y","updated":"20230727000961"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意："}]},{"ID":"20230727000962-d5qppyp","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000962-d5qppyp","updated":"20230727000962"},"Children":[{"ID":"20230727000963-d5c2wg2","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000963-d5c2wg2","updated":"20230727000963"},"Children":[{"ID":"20230727000964-1d792he","Type":"NodeParagraph","Properties":{"id":"20230727000964-1d792he","updated":"20230727000964"},"Children":[{"Type":"NodeText","Data":"数组支持 “==“、”!=” 操作符，因为内存总是被初始化过的。"}]}]},{"ID":"20230727000965-a5lubrd","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230727000965-a5lubrd","updated":"20230727000965"},"Children":[{"ID":"20230727000966-e2vq5vz","Type":"NodeParagraph","Properties":{"id":"20230727000966-e2vq5vz","updated":"20230727000966"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"[n]*T"},{"Type":"NodeText","Data":"表示指针数组，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"*[n]T"},{"Type":"NodeText","Data":"表示数组指针 。"}]}]}]},{"ID":"20230727000967-308e1fg","Type":"NodeParagraph","Properties":{"id":"20230727000967-308e1fg","updated":"20230727000967"},"Children":[{"Type":"NodeText","Data":"在 Golang 中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"数组是一种值类型，这意味着当数组被复制时，实际上是复制整个数组的内容，而不只是复制它的引用。这也就意味着对于非常大的数组，复制操作会消耗相当大的内存和时间"},{"Type":"NodeText","Data":"。因此，在实际开发中，"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"通常使用切片(slice)来代替数组"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeText","Data":"，切片是一种便捷且灵活的数据结构，可以根据需要动态改变大小。"}]}]}