{"ID":"20230727000927-shbp2qa","Spec":"1","Type":"NodeDocument","Properties":{"id":"20230727000927-shbp2qa","title":"32. go strings包","updated":"20230727000927"},"Children":[{"ID":"20230727000928-jv0sgnp","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727000928-jv0sgnp","updated":"20230727000928"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"32. go strings包"}]},{"ID":"20230727000929-1tpgkji","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000929-1tpgkji","updated":"20230727000929"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.字符串查找"}]},{"ID":"20230727000930-ksrcq0g","Type":"NodeParagraph","Properties":{"id":"20230727000930-ksrcq0g","updated":"20230727000930"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"strings"},{"Type":"NodeText","Data":"是Go内置的标准包,主要用于字符串查找、替换、比较等。常用方法如下:"}]},{"ID":"20230727000931-nr9ctp1","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000931-nr9ctp1","updated":"20230727000931"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.1 方法列表"}]},{"ID":"20230727000932-0myqpbr","Type":"NodeTable","Data":"| 方法名                                      | 描述                                                         |\n| :------------------------------------------ | :----------------------------------------------------------- |\n| `Count(s, substr string)int`                | 返回字符串s包含字符串substr的个数                            |\n| `Contains(s, substr string)bool`            | 判断字符串s是否包含substr字符串                              |\n| `ContainsAny(s, chars string)bool`          | 判断字符串s是否包含chars字符串中的任意一个字符               |\n| `ContainsRune(s string, r rune)bool`        | 判断字符串s是否包含unicode的码值r                            |\n| `LastIndex(s, substr string)int`            | 返回字符串s中字符串substr最后一次出现的位置                  |\n| `Index(s, substr string)int`                | 返回字符串s中字符串substr首次出现的位置                      |\n| `IndexByte(s string, c byte)int`            | 返回字符串s中字符c首次出现的位置                             |\n| `IndexRune(s string, r rune)int`            | 返回unicode的码值r在字符串s中首次出现的位置                  |\n| `IndexAny(s, chars string)int`              | 返回字符串chars中的任意一个字符unicode码值, 在s中首次出现的位置 |\n| `LastIndexAny(s, chars string)int`          | 返回字符串chars中的任意一个字符unicode码值, 在s中最后一次出现的位置 |\n| `LastIndexByte(s string, c byte)int`        | 返回字符串s中字符c最后一次出现的位置                         |\n| `HasPrefix(s, prefix string)bool`           | 判断字符串s是否有前缀prefix                                  |\n| `HasSuffix(s, suffix string)bool`           | 判断字符串s是否有后缀suffix                                  |\n| `IndexFunc(s string, f func(r)bool)int`     | 返回字符串s中满足函数f(r)==true, 字符首次出现的位置          |\n| `LastIndexFunc(s string, f func(r)bool)int` | 返回字符串s中满足函数f(r)==true , 字符最后一次出现的位置     |","TableAligns":[1,1],"Properties":{"id":"20230727000932-0myqpbr","updated":"20230727000932"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Count(s, substr string)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s包含字符串substr的个数"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Contains(s, substr string)bool"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"判断字符串s是否包含substr字符串"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ContainsAny(s, chars string)bool"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"判断字符串s是否包含chars字符串中的任意一个字符"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ContainsRune(s string, r rune)bool"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"判断字符串s是否包含unicode的码值r"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LastIndex(s, substr string)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s中字符串substr最后一次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Index(s, substr string)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s中字符串substr首次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexByte(s string, c byte)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s中字符c首次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexRune(s string, r rune)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回unicode的码值r在字符串s中首次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexAny(s, chars string)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串chars中的任意一个字符unicode码值, 在s中首次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LastIndexAny(s, chars string)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串chars中的任意一个字符unicode码值, 在s中最后一次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LastIndexByte(s string, c byte)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s中字符c最后一次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HasPrefix(s, prefix string)bool"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"判断字符串s是否有前缀prefix"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"HasSuffix(s, suffix string)bool"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"判断字符串s是否有后缀suffix"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"IndexFunc(s string, f func(r)bool)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s中满足函数f(r)==true, 字符首次出现的位置"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"LastIndexFunc(s string, f func(r)bool)int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"返回字符串s中满足函数f(r)==true , 字符最后一次出现的位置"}]}]}]},{"ID":"20230727000933-vxmhcks","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000933-vxmhcks","updated":"20230727000933"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.2 使用示例"}]},{"ID":"20230727000934-snmrr9d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000934-snmrr9d","updated":"20230727000934"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n \"fmt\"\n \"strings\"\n \"unicode\"\n)\n\nfunc main() {\n // 返回字符串s包含字符串substr的个数\n s := \"hello word\"\n fmt.Printf(\"字符串:%s,o出现数量: %d\\n\",s,strings.Count(s,\"o\"))\n // 判断字符串s是否包含substr字符串\n fmt.Printf(\"字符串:%s 是否包含%s ? %t \\n\",s,\"word\",strings.Contains(s,\"word\"))\n fmt.Printf(\"字符串:%s 是否包含%s ? %t \\n\",s,\"go\",strings.Contains(s,\"go\"))\n // 判断字符串s是否包含chars字符串中的任意一个字符\n fmt.Printf(\"字符串:%s 是否包含%s中的任意一个字符 ? %t \\n\",s,\"go\",strings.ContainsAny(s,\"go\"))\n fmt.Printf(\"字符串:%s 是否包含%s中的任意一个字符 ? %t \\n\",s,\"gg\",strings.ContainsAny(s,\"gg\"))\n // 判断字符串s是否包含unicode的码值r\n r := 'w'\n fmt.Printf(\"字符串:%s 是否包含unicode的码值%c? %t \\n\",s,r,strings.ContainsRune(s,r))\n fmt.Printf(\"字符串:%s 是否包含unicode的码值%d? %t \\n\",s,119,strings.ContainsRune(s,119))\n // 返回字符串s中字符串substr最后一次出现的位置\n fmt.Printf(\"在字符串%s中,字符串%s最后一次出现的位置? %d \\n\",s,\"o\",strings.LastIndex(s,\"o\"))\n // 返回字符串s中字符串substr首次出现的位置\n fmt.Printf(\"在字符串%s中,字符串%s首次出现的位置? %d \\n\",s,\"o\",strings.Index(s,\"o\"))\n // 返回字符串s中字符c首次出现的位置\n var b byte = 'l'\n fmt.Printf(\"在字符串%s中,字符%c首次出现的位置? %d \\n\",s,b,strings.IndexByte(s,b))\n // 返回字符串s中字符c最后一次出现的位置\n fmt.Printf(\"在字符串%s中,字符%c最后一次出现的位置? %d \\n\",s,b,strings.LastIndexByte(s,b))\n\n // 返回unicode的码值r在字符串s中首次出现的位置\n fmt.Printf(\"在字符串%s中,unicode的码值%d(%c)首次出现的位置? %d \\n\",s,104,104,strings.IndexRune(s,104))\n // 返回字符串chars中的任意一个字符unicode码值,在s中首次出现的位置\n s3 := \"rd\"\n fmt.Printf(\"返回字符串%s中的任意一个字符unicode码值(%s)首次出现的位置? %d \\n\",s,s3,strings.LastIndexAny(s,s3))\n\n // 判断字符串s是否有前缀prefix\n a := \"VIP001\"\n fmt.Printf(\"字符串:%s 是否有前缀%s ? %t \\n\",a,\"vip\",strings.HasPrefix(a,\"vip\"))\n fmt.Printf(\"字符串:%s 是否有前缀%s ? %t \\n\",a,\"VIP\",strings.HasPrefix(a,\"VIP\"))\n\n // 判断字符串s是否有后缀suffix\n sn := \"K011_Mn\"\n fmt.Printf(\"字符串:%s 是否有后缀%s ? %t \\n\",sn,\"MN\",strings.HasSuffix(sn,\"MN\"))\n fmt.Printf(\"字符串:%s 是否有后缀%s ? %t \\n\",sn,\"Mn\",strings.HasSuffix(sn,\"Mn\"))\n // 返回字符串s中满足函数f(r)==true,字符首次出现的位置 (判断第一个汉字的位置)\n f := func(c rune) bool {\n  return unicode.Is(unicode.Han,c)\n }\n s4 := \"go!中国人\"\n fmt.Printf(\"字符串:%s 首次出现汉字的位置%d \\n\",s4,strings.IndexFunc(s4,f))\n fmt.Printf(\"字符串:%s 最后一次出现汉字的位置%d \\n\",s4,strings.LastIndexFunc(s4,f))\n}\n/** 输出\n  字符串:hello word,o出现数量: 2\n  字符串:hello word 是否包含word ? true \n  字符串:hello word 是否包含go ? false \n  字符串:hello word 是否包含go中的任意一个字符 ? true \n  字符串:hello word 是否包含gg中的任意一个字符 ? false \n  字符串:hello word 是否包含unicode的码值w? true \n  字符串:hello word 是否包含unicode的码值119? true \n  在字符串hello word中,字符串o最后一次出现的位置? 7 \n  在字符串hello word中,字符串o首次出现的位置? 4 \n  在字符串hello word中,字符l首次出现的位置? 2 \n  在字符串hello word中,字符l最后一次出现的位置? 3 \n  在字符串hello word中,unicode的码值104(h)首次出现的位置? 0 \n  返回字符串hello word中的任意一个字符unicode码值(rd)首次出现的位置? 9 \n  字符串:VIP001 是否有前缀vip ? false \n  字符串:VIP001 是否有前缀VIP ? true \n  字符串:K011_Mn 是否有后缀MN ? false \n  字符串:K011_Mn 是否有后缀Mn ? true \n  字符串:go!中国人 首次出现汉字的位置3 \n  字符串:go!中国人 最后一次出现汉字的位置9 \n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000935-1ld1s00","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000935-1ld1s00","updated":"20230727000935"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 字符串分割"}]},{"ID":"20230727000936-ysyx3sx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000936-ysyx3sx","updated":"20230727000936"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.1 方法列表"}]},{"ID":"20230727000937-4s2uroa","Type":"NodeTable","Data":"| 方法名                                         | 描述                                                         |\n| :--------------------------------------------- | :----------------------------------------------------------- |\n| `Fields(s string)[]string`                     | 将字符串s以空白字符分割，返回切片                            |\n| `FieldsFunc(s string, f func(r) bool)[]string` | 将字符串s以满足`f(r)==true`的字符分割， 分割后返回切片       |\n| `Split(s,sep string)[]string`                  | 将字符串s以sep作为分割符进行分割， 分割后字符最后去掉sep,返回切片 |\n| `SplitAfter(s,sep string)[]string`             | 将字符串s以sep作为分割符进行分割， 分割后字符最后加上sep,返回切片 |\n| `SplitAfterN(s,sep string, n int)[]string`     | 将字符串s以sep作为分割符进行分割， 分割后字符最后加上sep,n决定分割成切片长度 |\n| `SplitN(s,sep string, n int)[]string`          | 将字符串s以sep作为分割符进行分割， 分割后字符最后去掉sep,n决定分割成切片长度 |","TableAligns":[1,1],"Properties":{"id":"20230727000937-4s2uroa","updated":"20230727000937"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Fields(s string)[]string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s以空白字符分割，返回切片"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"FieldsFunc(s string, f func(r) bool)[]string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s以满足"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"f(r)==true"},{"Type":"NodeText","Data":"的字符分割， 分割后返回切片"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Split(s,sep string)[]string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s以sep作为分割符进行分割， 分割后字符最后去掉sep,返回切片"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SplitAfter(s,sep string)[]string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s以sep作为分割符进行分割， 分割后字符最后加上sep,返回切片"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SplitAfterN(s,sep string, n int)[]string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s以sep作为分割符进行分割， 分割后字符最后加上sep,n决定分割成切片长度"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"SplitN(s,sep string, n int)[]string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s以sep作为分割符进行分割， 分割后字符最后去掉sep,n决定分割成切片长度"}]}]}]},{"ID":"20230727000938-0mas7yx","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000938-0mas7yx","updated":"20230727000938"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"2.2 使用示例"}]},{"ID":"20230727000939-m1xch8x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000939-m1xch8x","updated":"20230727000939"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n \"unicode\"\n)\nfunc main() {\n s := \"Go! Go! 中国人!\"\n // 将字符串s以空白字符分割，返回切片\n slice := strings.Fields(s)\n fmt.Printf(\"将字符串:【%s】以空白字符分割，返回切片:%v \\n\",s,slice)\n // 将字符串s以满足f(r)==true的字符分割，分割后返回切片。\n // 以特殊符号分割\n    f := func(r rune) bool{\n     // 不是字母，也不是数字\n     return !unicode.IsLetter(r) \u0026\u0026 !unicode.IsNumber(r)\n }\n ss := \"张三@19*BeiJing\u0026高中生|男(打球\"\n slice2 := strings.FieldsFunc(ss,f)\n fmt.Printf(\"将字符串:【%s】 以满足f(r)==true【不是数字和字母都是分隔符】的字符分割，返回切片:%v \\n\",ss,slice2)\n\n // 将字符串s以sep作为分割符进行分割，分割后字符最后去掉sep\n s2 := \"@123@张@AB@001\"\n sep1 := \"@\"\n slic1 := strings.Split(s2,sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，分割后最后去掉:%s 返回切片: %v 切片长度: %d \\n\",s2,sep1,sep1,slic1,len(slic1))\n\n // 将字符串s以sep作为分割符进行分割，分割后字符最后加上sep,返回切片\n slic2 := strings.SplitAfter(s2,sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，分割后最后加上:%s 返回切片: %v 切片长度: %d \\n\",s2,sep1,sep1,slic2,len(slic2))\n // 将字符串s以sep作为分割符进行分割，分割后字符最后加上sep,n决定分割成切片长度\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后加上%s \\n\",s2,sep1,0,strings.SplitAfterN(s2,sep1,0),sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后加上%s \\n\",s2,sep1,1,strings.SplitAfterN(s2,sep1,1),sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后加上%s \\n\",s2,sep1,5,strings.SplitAfterN(s2,sep1,5),sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后加上%s \\n\",s2,sep1,6,strings.SplitAfterN(s2,sep1,6),sep1)\n // 将字符串s以sep作为分割符进行分割，分割后字符最后去掉sep,n决定分割成切片长度\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后去掉%s \\n\",s2,sep1,1,strings.SplitN(s2,sep1,1),sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后去掉%s \\n\",s2,sep1,3,strings.SplitN(s2,sep1,3),sep1)\n fmt.Printf(\"将字符串:【%s】以%s进行分割，指定分割切片长度%d: %v 分割后去掉%s \\n\",s2,sep1,5,strings.SplitN(s2,sep1,5),sep1)\n}\n/** 输出\n将字符串:【Go! Go! 中国人!】以空白字符分割，返回切片:[Go! Go! 中国人!] \n将字符串:【张三@19*BeiJing\u0026高中生|男(打球】 以满足f(r)==true【不是数字和字母都是分隔符】的字符分割，返回切片:[张三 19 BeiJing 高中生 男 打球] \n将字符串:【@123@张@AB@001】以@进行分割，分割后最后去掉:@ 返回切片: [ 123 张 AB 001] 切片长度: 5 \n将字符串:【@123@张@AB@001】以@进行分割，分割后最后加上:@ 返回切片: [@ 123@ 张@ AB@ 001] 切片长度: 5 \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度0: [] 分割后加上@ \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度1: [@123@张@AB@001] 分割后加上@ \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度5: [@ 123@ 张@ AB@ 001] 分割后加上@ \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度6: [@ 123@ 张@ AB@ 001] 分割后加上@ \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度1: [@123@张@AB@001] 分割后去掉@ \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度3: [ 123 张@AB@001] 分割后去掉@ \n将字符串:【@123@张@AB@001】以@进行分割，指定分割切片长度5: [ 123 张 AB 001] 分割后去掉@ \n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000940-swc88gq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000940-swc88gq","updated":"20230727000940"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.大小写切换"}]},{"ID":"20230727000941-9uiyz7i","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000941-9uiyz7i","updated":"20230727000941"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.1 方法列表"}]},{"ID":"20230727000942-vlz437a","Type":"NodeTable","Data":"| 方法名                                                  | 描述                                              |\n| :------------------------------------------------------ | :------------------------------------------------ |\n| `Title(s string)string`                                 | 将字符串s每个单词首字母大写                       |\n| `ToLower(s string)string`                               | 将字符串s转换成小写返回                           |\n| `ToLowerSpecial(c unicode.SpecialCase,s string)string`  | 将字符串s中所有字符串按c指定的 映射转换成小写返回 |\n| `ToTitle(s string)string`                               | 将字符串s转换成大写返回                           |\n| `ToTitleSpecial(c unicode.SpecialCase,s string) string` | 将字符串s中所有的字符按c指定的 映射转换成大写返回 |\n| `ToUpper(s string)string`                               | 将字符串s转换成大写返回                           |\n| `ToUpperSpecial(c unicode.SpecialCase,s string) string` | 将字符串s中所有的字符按c指定的 映射转换成大写返回 |","TableAligns":[1,1],"Properties":{"id":"20230727000942-vlz437a","updated":"20230727000942"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Title(s string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s每个单词首字母大写"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToLower(s string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s转换成小写返回"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToLowerSpecial(c unicode.SpecialCase,s string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s中所有字符串按c指定的 映射转换成小写返回"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToTitle(s string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s转换成大写返回"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToTitleSpecial(c unicode.SpecialCase,s string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s中所有的字符按c指定的 映射转换成大写返回"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToUpper(s string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s转换成大写返回"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToUpperSpecial(c unicode.SpecialCase,s string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s中所有的字符按c指定的 映射转换成大写返回"}]}]}]},{"ID":"20230727000943-i0cmgzq","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000943-i0cmgzq","updated":"20230727000943"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.2 使用示例"}]},{"ID":"20230727000944-leec01e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000944-leec01e","updated":"20230727000944"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n)\nfunc main() {\n\n str := \"hello word\"\n str1 := \"HELLO WORD\"\n // Title(s string) string: 每个单词首字母大写\n fmt.Printf(\"Title-\u003e将字符串%s 每个单词首字母大写: %s\\n\",str,strings.Title(str))\n // ToLower(s string) string : 将字符串s转换成小写返回\n fmt.Printf(\"ToLower-\u003e将字符串%s 转换成小写返回: %s\\n\",str1,strings.ToLower(str1))\n // ToTitle(s string)string: 将字符串s转换成大写返回\n fmt.Printf(\"ToTitle-\u003e将字符串%s 转换成大写返回: %s\\n\",str,strings.ToTitle(str))\n // ToUpper(s string)string: 将字符串s转换成大写返回\n fmt.Printf(\"ToUpper-\u003e将字符串%s 转换成大写返回: %s\\n\",str,strings.ToUpper(str))\n}\n/**输出\nTitle-\u003e将字符串hello word 每个单词首字母大写: Hello Word\nToLower-\u003e将字符串HELLO WORD 转换成小写返回: hello word\nToTitle-\u003e将字符串hello word 转换成大写返回: HELLO WORD\nToUpper-\u003e将字符串hello word 转换成大写返回: HELLO WORD\n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000945-wrathq0","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000945-wrathq0","updated":"20230727000945"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.3 ToTitle和ToUpper的区别"}]},{"ID":"20230727000946-ei41k6c","Type":"NodeParagraph","Properties":{"id":"20230727000946-ei41k6c","updated":"20230727000946"},"Children":[{"Type":"NodeText","Data":"大部分情况下， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToUpper"},{"Type":"NodeText","Data":" 与 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ToTitle"},{"Type":"NodeText","Data":" 返回值相同，但在处理某些"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"unicode"},{"Type":"NodeText","Data":"编码字符则不同,示例如下:"}]},{"ID":"20230727000947-ud97b7a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000947-ud97b7a","updated":"20230727000947"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n)\nfunc main() {\n strr := \"ǳ ǵǵǳǳǳ hello world！\"\n fmt.Printf(\"ToTitle-\u003e将字符串%s 转换成大写返回: %s\\n\",strr,strings.ToTitle(strr))\n // ToUpper(s string)string: 将字符串s转换成大写返回\n fmt.Printf(\"ToUpper-\u003e将字符串%s 转换成大写返回: %s\\n\",strr,strings.ToUpper(strr))\n}\n/** 输出\nToTitle-\u003e将字符串ǳ ǵǵǳǳǳ hello world！ 转换成大写返回: ǲ ǴǴǲǲǲ HELLO WORLD！\nToUpper-\u003e将字符串ǳ ǵǵǳǳǳ hello world！ 转换成大写返回: Ǳ ǴǴǱǱǱ HELLO WORLD！\n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000948-5pj00mo","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000948-5pj00mo","updated":"20230727000948"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.字符串删除"}]},{"ID":"20230727000949-45onfwu","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000949-45onfwu","updated":"20230727000949"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.1 方法列表"}]},{"ID":"20230727000950-70w3zxq","Type":"NodeTable","Data":"| 方法名                                           | 描述                                            |\n| :----------------------------------------------- | :---------------------------------------------- |\n| `Trim(s,cutset string)string`                    | 将字符串`s`首尾包含在`cutset`中的任一字符去掉   |\n| `TrimFunc(s string,f func(r)bool)string`         | 将字符串`s`首尾满足函数`f(r)==true`的字符串去掉 |\n| `TrimLeft(s,cutset string)string`                | 将字符串`s`左边包含在`cutset`中的任一字符去掉   |\n| `TrimLeftFunc(s string,f func(r)bool) string`    | 将字符串`s`左边满足函数`f(r)==true`的字符串去掉 |\n| `TrimPrefix(s,prefix string)string`              | 将字符串`s`中前缀字符串`prefix`去掉             |\n| `TrimRight(s,cutset string) string`              | 将字符串`s`右边包含在`cutset`中的任一字符去掉   |\n| `TrimRightFunc(s string, f func(r) bool) string` | 将字符串`s`右边满足函数`f(r)==true`的字符串去掉 |\n| `TrimSpace(s string) string`                     | 将字符串首尾空白去掉                            |\n| `TrimSuffix(s, suffix string) string`            | 将字符串`s`中后缀字符串`suffix`去掉             |","TableAligns":[1,1],"Properties":{"id":"20230727000950-70w3zxq","updated":"20230727000950"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Trim(s,cutset string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"首尾包含在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cutset"},{"Type":"NodeText","Data":"中的任一字符去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimFunc(s string,f func(r)bool)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"首尾满足函数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"f(r)==true"},{"Type":"NodeText","Data":"的字符串去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimLeft(s,cutset string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"左边包含在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cutset"},{"Type":"NodeText","Data":"中的任一字符去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimLeftFunc(s string,f func(r)bool) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"左边满足函数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"f(r)==true"},{"Type":"NodeText","Data":"的字符串去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimPrefix(s,prefix string)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"中前缀字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"prefix"},{"Type":"NodeText","Data":"去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimRight(s,cutset string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"右边包含在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cutset"},{"Type":"NodeText","Data":"中的任一字符去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimRightFunc(s string, f func(r) bool) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"右边满足函数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"f(r)==true"},{"Type":"NodeText","Data":"的字符串去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimSpace(s string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串首尾空白去掉"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"TrimSuffix(s, suffix string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"s"},{"Type":"NodeText","Data":"中后缀字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"suffix"},{"Type":"NodeText","Data":"去掉"}]}]}]},{"ID":"20230727000951-b1hl30z","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000951-b1hl30z","updated":"20230727000951"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"4.2 使用示例"}]},{"ID":"20230727000952-0uachv4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000952-0uachv4","updated":"20230727000952"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n)\nfunc main() {\n // 将字符串首尾包含在cutset中的任一字符去掉\n str := \"@*test@-@124@!*\"\n cutset := \"*#@!\"\n fmt.Printf(\"将字符串【%s】首尾包含在【%s】中的任一字符去掉,返回:【%s】\\n\",str,cutset,strings.Trim(str,cutset))\n // 将字符串首尾满足函数`f(r)==true`的字符串去掉\n f := func(r rune) bool {\n  if strings.Contains(\"*#@!\",string(r)) {\n   return true\n  }\n  return false\n }\n fmt.Printf(\"将字符串【%s】首尾满足函数f的字符去掉,返回:【%s】\\n\",str,strings.TrimFunc(str,f))\n // 将字符串左边包含在cutset中的任一字符去掉\n fmt.Printf(\"将字符串【%s】左边包含在【%s】中的任一字符去掉,返回:【%s】\\n\",str,cutset,strings.TrimLeft(str,cutset))\n\n // 将字符串左边满足函数`f(r)==true`的字符串去掉\n fmt.Printf(\"将字符串【%s】左边满足函数f的字符去掉,返回:【%s】\\n\",str,strings.TrimLeftFunc(str,f))\n \n // 将字符串右边包含在cutset中的任一字符去掉\n fmt.Printf(\"将字符串【%s】右边包含在【%s】中的任一字符去掉,返回:【%s】\\n\",str,cutset,strings.TrimRight(str,cutset))\n fmt.Printf(\"将字符串【%s】右边满足函数f的字符去掉,返回:【%s】\\n\",str,strings.TrimRightFunc(str,f))\n\n // 将字符串中前缀字符串prefix去掉\n str1 := \"VIP00001_U\"\n fmt.Printf(\"将字符串【%s】前缀【%s】去掉,返回:【%s】\\n\",str1,\"VIP\",strings.TrimPrefix(str1,\"VIP\"))\n fmt.Printf(\"将字符串【%s】前缀【%s】去掉,返回:【%s】\\n\",str1,\"vip\",strings.TrimPrefix(str1,\"vip\"))\n\n  // 将字符串中后缀字符串suffix去掉\n fmt.Printf(\"将字符串【%s】后缀【%s】去掉,返回:【%s】\\n\",str1,\"U\",strings.TrimSuffix(str1,\"U\"))\n fmt.Printf(\"将字符串【%s】后缀【%s】去掉,返回:【%s】\\n\",str1,\"u\",strings.TrimSuffix(str1,\"u\"))\n\n // 将字符串首尾空白去掉\n str2 := \"  hello  word !  \"\n fmt.Printf(\"将字符串【%s】首尾空白去掉,返回:【%s】\\n\",str2,strings.TrimSpace(str2))\n}\n/**输出\n将字符串【@*test@-@124@!*】首尾包含在【*#@!】中的任一字符去掉,返回:【test@-@124】\n将字符串【@*test@-@124@!*】首尾满足函数f的字符去掉,返回:【test@-@124】\n将字符串【@*test@-@124@!*】左边包含在【*#@!】中的任一字符去掉,返回:【test@-@124@!*】\n将字符串【@*test@-@124@!*】左边满足函数f的字符去掉,返回:【test@-@124@!*】\n将字符串【@*test@-@124@!*】右边包含在【*#@!】中的任一字符去掉,返回:【@*test@-@124】\n将字符串【@*test@-@124@!*】右边满足函数f的字符去掉,返回:【@*test@-@124】\n将字符串【VIP00001_U】前缀【VIP】去掉,返回:【00001_U】\n将字符串【VIP00001_U】前缀【vip】去掉,返回:【VIP00001_U】\n将字符串【VIP00001_U】后缀【U】去掉,返回:【VIP00001_】\n将字符串【VIP00001_U】后缀【u】去掉,返回:【VIP00001_U】\n将字符串【  hello  word !  】首尾空白去掉,返回:【hello  word !】\n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000953-akwl9zr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000953-akwl9zr","updated":"20230727000953"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.拼接和重复"}]},{"ID":"20230727000954-yh2r445","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000954-yh2r445","updated":"20230727000954"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.1 方法列表"}]},{"ID":"20230727000955-g0urcr5","Type":"NodeTable","Data":"| 方法名                                    | 描述                               |\n| :---------------------------------------- | :--------------------------------- |\n| `Join(elems []string, sep string) string` | 将字符串切片elems，使用sep进行拼接 |\n| `Repeat(s string, count int) string`      | 将字符串s,重复count次              |","TableAligns":[1,1],"Properties":{"id":"20230727000955-g0urcr5","updated":"20230727000955"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Join(elems []string, sep string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串切片elems，使用sep进行拼接"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Repeat(s string, count int) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s,重复count次"}]}]}]},{"ID":"20230727000956-21qekk8","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000956-21qekk8","updated":"20230727000956"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"5.3 使用示例"}]},{"ID":"20230727000957-xywh77e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000957-xywh77e","updated":"20230727000957"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n)\nfunc main() {\n // 字符串拼接\n fmt.Printf(\"字符串拼接:Join-\u003e %s\\n\",strings.Join([]string{\"a\",\"b\",\"c\"},\"|\"))\n // 字符串重复\n fmt.Printf(\"字符串重复:Repeat-\u003e %s\\n\",strings.Repeat(\"Go!\",10))\n}\n/**输出\n字符串拼接:Join-\u003e a|b|c\n字符串重复:Repeat-\u003e Go!Go!Go!Go!Go!Go!Go!Go!Go!Go!\n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000958-sdvkddq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000958-sdvkddq","updated":"20230727000958"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6.字符串替换"}]},{"ID":"20230727000959-mrw7ebm","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000959-mrw7ebm","updated":"20230727000959"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6.1 方法列表"}]},{"ID":"20230727000960-sm26iaq","Type":"NodeTable","Data":"| 方法名                                     | 描述                                                         |\n| :----------------------------------------- | :----------------------------------------------------------- |\n| `Replace(s, old, new string, n int)string` | 将字符串s前n个不重叠old子串都替换为new的新字符串 如果n\u003c0会替换所有old子串。 |\n| `ReplaceAll(s, old, new string) string`    | 将字符串s中的old子串全部替换为new的新字符串                  |","TableAligns":[1,1],"Properties":{"id":"20230727000960-sm26iaq","updated":"20230727000960"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Replace(s, old, new string, n int)string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s前n个不重叠old子串都替换为new的新字符串 如果n\u003c0会替换所有old子串。"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ReplaceAll(s, old, new string) string"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"将字符串s中的old子串全部替换为new的新字符串"}]}]}]},{"ID":"20230727000961-efu08ze","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000961-efu08ze","updated":"20230727000961"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"6.2 使用示例"}]},{"ID":"20230727000962-cusd7q0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000962-cusd7q0","updated":"20230727000962"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n)\nfunc main() {\n // 字符串替换,如果n\u003c0会替换所有old子串。\n s := \"a,b,c,d,e,f\"\n old := \",\"\n newStr := \".\"\n    fmt.Printf(\"将字符串【%s】中的前%d个【%s】替换为【%s】结果是【%s】\\n\",s,2,old,newStr,strings.Replace(s,old,newStr,2))\n    fmt.Printf(\"将字符串【%s】中的前%d个【%s】替换为【%s】结果是【%s】\\n\",s,7,old,newStr,strings.Replace(s,old,newStr,7))\n    fmt.Printf(\"将字符串【%s】中的前%d个【%s】替换为【%s】结果是【%s】\\n\",s,-1,old,newStr,strings.Replace(s,old,newStr,-1))\n // 字符串全部替换\n fmt.Printf(\"将字符串【%s】中的【%s】全部替换为【%s】结果是【%s】\\n\",s,old,newStr,strings.ReplaceAll(s,old,newStr))\n}\n/**输出\n将字符串【a,b,c,d,e,f】中的前2个【,】替换为【.】结果是【a.b.c,d,e,f】\n将字符串【a,b,c,d,e,f】中的前7个【,】替换为【.】结果是【a.b.c.d.e.f】\n将字符串【a,b,c,d,e,f】中的前-1个【,】替换为【.】结果是【a.b.c.d.e.f】\n将字符串【a,b,c,d,e,f】中的【,】全部替换为【.】结果是【a.b.c.d.e.f】\n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000963-thd7d4t","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000963-thd7d4t","updated":"20230727000963"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.字符串比较"}]},{"ID":"20230727000964-orp0hrv","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000964-orp0hrv","updated":"20230727000964"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.1 方法列表"}]},{"ID":"20230727000965-dm6lria","Type":"NodeTable","Data":"| 方法名                        | 描述                                                         |\n| :---------------------------- | :----------------------------------------------------------- |\n| `Compare(a, b string) int`    | 按字典顺序比较a和b字符串的大小 如果 a \u003e b，返回一个大于 0 的数 如果 a == b，返回 0 如果 a \u003c b，返回一个小于 0 的数 |\n| `EqualFold(s, t string) bool` | 判断s和t两个UTF-8字符串是否相等，忽略大小写                  |","TableAligns":[1,1],"Properties":{"id":"20230727000965-dm6lria","updated":"20230727000965"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"方法名"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"描述"}]}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Compare(a, b string) int"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"按字典顺序比较a和b字符串的大小 如果 a \u003e b，返回一个大于 0 的数 如果 a == b，返回 0 如果 a \u003c b，返回一个小于 0 的数"}]}]},{"Type":"NodeTableRow","TableAligns":[1,1],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"EqualFold(s, t string) bool"}]},{"Type":"NodeTableCell","TableCellAlign":1,"Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"判断s和t两个UTF-8字符串是否相等，忽略大小写"}]}]}]},{"ID":"20230727000966-qhd6h9j","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230727000966-qhd6h9j","updated":"20230727000966"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"#### ","Properties":{"id":""}},{"Type":"NodeText","Data":"7.1 使用示例"}]},{"ID":"20230727000967-vyux6c4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28qKg==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000967-vyux6c4","updated":"20230727000967"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28qKg==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\nimport (\n \"fmt\"\n \"strings\"\n)\nfunc main() {\n // 字符串比较大小\n s := \"a\"\n s1 := \"c\"\n s2 := \"c\"\n fmt.Printf(\"%s \u003e %s 返回 : %d \\n\",s,s1,strings.Compare(s,s1))\n fmt.Printf(\"%s \u003e %s 返回 : %d \\n\",s1,s,strings.Compare(s1,s))\n fmt.Printf(\"%s \u003e %s 返回 : %d \\n\",s1,s2,strings.Compare(s1,s2))\n // 字符串比较一致性\n a := \"go\"\n b := \"Go\"\n c := \"go\"\n fmt.Printf(\"%s和%s是否相等(忽略大小写)？%t \\n\",a,b,strings.EqualFold(a,b))\n fmt.Printf(\"%s和%s是否相等(忽略大小写)？%t \\n\",a,c,strings.EqualFold(a,c))\n fmt.Printf(\"%s和%s是否相等(不忽略大小写)？%t \\n\",a,b,a == b)\n fmt.Printf(\"%s和%s是否相等(不忽略大小写)？%t \\n\",a,c,a == c)\n}\n/**输出\na \u003e c 返回 : -1 \nc \u003e a 返回 : 1 \nc \u003e c 返回 : 0 \ngo和Go是否相等(忽略大小写)？true \ngo和go是否相等(忽略大小写)？true \ngo和Go是否相等(不忽略大小写)？false \ngo和go是否相等(不忽略大小写)？true \n*/\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]}]}