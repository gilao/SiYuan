{"ID":"20230727000930-xaqxra7","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f99e","id":"20230727000930-xaqxra7","tags":"函数方法,Go 代码","title":"15 函数声明之方法","updated":"20230727003949"},"Children":[{"ID":"20230727000931-riubt3e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727000931-riubt3e","updated":"20230727000931"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"15 函数声明之方法"}]},{"ID":"20230727000932-wo2rs58","Type":"NodeParagraph","Properties":{"id":"20230727000932-wo2rs58","updated":"20230727000932"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"什么是方法？"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"方法与函数的区别是，函数不属于任何类型，方法属于特定的类型。"}]},{"ID":"20230727000933-o7v2zvk","Type":"NodeParagraph","Properties":{"id":"20230727000933-o7v2zvk","updated":"20230727000933"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"普通类型的方法接受者"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"Go语言中的 ​​方法（Method）​​ 是一种作用于特定类型变量的函数。这种特定类型变量叫做 ​​接收者（Receiver）​​。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"接收者的概念就类似于其他语言中的​​this​​或者 ​​self​​。"}]},{"ID":"20230727000934-dn65fi3","Type":"NodeParagraph","Properties":{"id":"20230727000934-dn65fi3","updated":"20230727000934"},"Children":[{"Type":"NodeText","Data":"方法的定义格式如下："}]},{"ID":"20230727000935-vm8rnvw","Type":"NodeBlockquote","Properties":{"id":"20230727000935-vm8rnvw","updated":"20230727000935"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230727000936-8gnz8wz","Type":"NodeParagraph","Properties":{"id":"20230727000936-8gnz8wz","updated":"20230727000936"},"Children":[{"Type":"NodeText","Data":"func (接收者变量 接收者类型) 方法名(参数列表) (返回参数) {"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"函数体"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"}"}]}]},{"ID":"20230727000937-pazqw7h","Type":"NodeParagraph","Properties":{"id":"20230727000937-pazqw7h","updated":"20230727000937"},"Children":[{"Type":"NodeText","Data":"其中，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"接收者变量：接收者中的参数变量名在命名时，官方建议使用接收者类型名称首字母的小写"},{"Type":"NodeText","Data":"，而不是self、this之类的命名。例如，Person类型的接收者变量应该命名为 p，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Connector类型的接收者变量应该命名为c等。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"接收者类型：接收者类型和参数类似，可以是指针类型和非指针类型。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"方法名、参数列表、返回参数：具体格式与函数定义相同。"}]},{"ID":"20230727000938-mj93nf0","Type":"NodeParagraph","Properties":{"id":"20230727000938-mj93nf0","updated":"20230727000938"},"Children":[{"Type":"NodeText","Data":"举个栗子，func ( x DDDD) FOO(var type) ( ret type , err Errot)，这里来说一下 x DDDD是什么意思。"}]},{"ID":"20230727000939-t110qli","Type":"NodeParagraph","Properties":{"id":"20230727000939-t110qli","updated":"20230727000939"},"Children":[{"Type":"NodeText","Data":"在go语言中，没"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"有类的概念但是可以给类型（结构体，自定义类型）定义方法。"}]},{"ID":"20230727000940-4iybapz","Type":"NodeParagraph","Properties":{"id":"20230727000940-4iybapz","updated":"20230727000940"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"所谓方法就是定义了接受者的函数，方法和函数只差了一个，那就是方法在 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"func"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":" 和标识符之间多了一个参数。接受者定义在func关键字和函数名之间:"}]},{"ID":"20230727000941-2iz0vl5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000941-2iz0vl5","updated":"20230727000941"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type Person struct {\n    name string\n    age int\n}\n\nfunc (p Person) say() {\n    fmt.Printf(\"I'm %s,%d years old\\n\",p.name,p.age)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000942-va9s75e","Type":"NodeParagraph","Properties":{"id":"20230727000942-va9s75e","updated":"20230727000942"},"Children":[{"Type":"NodeText","Data":"有了对方法及接受者的简单认识之后，接下来主要谈一下接受者的类型问题。"}]},{"ID":"20230727000943-g9e8dzc","Type":"NodeParagraph","Properties":{"id":"20230727000943-g9e8dzc","updated":"20230727000943"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"接收者有两种，一种是值接收者，一种是指针接收者。顾名思义，值接收者，是接收者的类型是一个值，是一个副本，方法内部无法对其真正的接收者做更改；指针接收者，接收者的类型是一个指针，是接收者的引用，对这个引用的修改之间影响真正的接收者。"}]},{"ID":"20230727000944-ofu6wls","Type":"NodeParagraph","Properties":{"id":"20230727000944-ofu6wls","updated":"20230727000944"},"Children":[{"Type":"NodeText","Data":"情况一：接受者是struct"}]},{"ID":"20230727000945-q30xtc9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000945-q30xtc9","updated":"20230727000945"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"fmt\"\n\ntype Person struct {\nname string\nage int\n}\nfunc (p Person) say() {\nfmt.Printf(\"I'm %s,%d years old\\n\",p.name,p.age)\n}\nfunc (p Person) older(){\n    p.age = p.age +1\n}\nfunc main() {\n    var p1 Person = Person{\"zhansan\",16}\n    p1.older()\n    p1.say()\n    //output: I'm zhangsan，16 years old\n    var p2 *Person = \u0026Person{\"lisi\",17}\n    p2.older()\n    p2.say()\n    //output: I'm lisi，17 years old\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000946-c5z17ae","Type":"NodeParagraph","Properties":{"id":"20230727000946-c5z17ae","updated":"20230727000946"},"Children":[{"Type":"NodeText","Data":"对于p1的调用，读者应该不会有什么疑问。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"对于p2的调用可能存在这样的疑问，p2明明是个指针，为什么再调用了older方法之后，打印结果还是17 years old?"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"**方法的接受者是Person而调用者是*Person ，其实在p2调用时存在一个转换p2.older() -\u003e "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"p2.older(); p2.say() -\u0026gt; "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em em","TextMarkTextContent":"p2.say()"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"*"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"p2是什么想必读者也是明白的（就一个p2指向Person实例）。那么疑问也就自然的解开了,方法执行时的接受者实际上还是一个值而非引用。"}]},{"ID":"20230727000947-ykxpzmc","Type":"NodeParagraph","Properties":{"id":"20230727000947-ykxpzmc","updated":"20230727000947"},"Children":[{"Type":"NodeText","Data":"情况二：接受者是指针"}]},{"ID":"20230727000948-cjzxak0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000948-cjzxak0","updated":"20230727000948"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"fmt\"\n\ntype Person struct {\nname string\nage int\n}\nfunc (p *Person) say() {\nfmt.Printf(\"I'm %s,%d years old\\n\",p.name,p.age)\n}\nfunc (p *Person) older(){\n    p.age = p.age +1\n}\nfunc main() {\n    var p1 Person = Person{\"zhansan\",16}\n    p1.older()\n    p1.say()\n    //output: I'm zhangsan，17 years old\n    var p2 *Person = \u0026Person{\"lisi\",17}\n    p2.older()\n    p2.say()\n    //output: I'm lisi，18 years old\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000949-qlk85a6","Type":"NodeParagraph","Properties":{"id":"20230727000949-qlk85a6","updated":"20230727000949"},"Children":[{"Type":"NodeText","Data":"p1的调用中也存在一个转换，"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"p1.older -\u003e *p1.older"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"p1.say() -\u003e *p1.say()"}]},{"ID":"20230727000950-3dw4k69","Type":"NodeParagraph","Properties":{"id":"20230727000950-3dw4k69","updated":"20230727000950"},"Children":[{"Type":"NodeText","Data":"在举一个清晰的调用例子："}]},{"ID":"20230727000951-0b745df","Type":"NodeParagraph","Properties":{"id":"20230727000951-0b745df","updated":"20230727000951"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"我们参照着来写一下 Go 的方法定义。"}]},{"ID":"20230727000952-6qgc8fx","Type":"NodeParagraph","Properties":{"id":"20230727000952-6qgc8fx","updated":"20230727000952"},"Children":[{"Type":"NodeText","Data":"首先，我们是先要定义一个类型，比如就是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"user"},{"Type":"NodeText","Data":" 好了，然后我们再定义方法。"}]},{"ID":"20230727000953-ifxgcid","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000953-ifxgcid","updated":"20230727000953"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type user struct {\n        name string\n        email string\n}\n\nfunc (u user) notify() {\n        fmt.Println(\"Email is %d\", u.email)\n}\n\nfunc (u *user) changeEmail(email string) {\n        u.email = email\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000954-8oym4jc","Type":"NodeParagraph","Properties":{"id":"20230727000954-8oym4jc","updated":"20230727000954"},"Children":[{"Type":"NodeText","Data":"我们定义了两个方法，一个是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"notify"},{"Type":"NodeText","Data":"，它是值接收者方法；还有一个是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"changeEmail"},{"Type":"NodeText","Data":"，它是指针接收者方法。可以看到，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"值接收者方法，接收者是一个副本，无法修改；指针接收者是引用，可以修改。"}]},{"ID":"20230727000955-6sken49","Type":"NodeParagraph","Properties":{"id":"20230727000955-6sken49","updated":"20230727000955"},"Children":[{"Type":"NodeText","Data":"我们再来看一下调用。"}]},{"ID":"20230727000956-eue6hli","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000956-eue6hli","updated":"20230727000956"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"daryl := {\"daryl\", \"daryl@oldexample.com\"}\ndaryl.changeEmail(\"daryl@example.com\")\ndaryl.notify()\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000957-ruzepow","Type":"NodeParagraph","Properties":{"id":"20230727000957-ruzepow","updated":"20230727000957"},"Children":[{"Type":"NodeText","Data":"看看，是不是很熟悉！对，就像 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"php"},{"Type":"NodeText","Data":" 代码一样，有没有！"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"daryl"},{"Type":"NodeText","Data":" 就是对象，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"name"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"email"},{"Type":"NodeText","Data":" 就是属性，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"notify"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"changeEmail"},{"Type":"NodeText","Data":" 就是它的方法。只是，不同的是，我们没有将它放到 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"class"},{"Type":"NodeText","Data":" 中，而是用另外一种方式让它们结合了，有了关系！"}]},{"ID":"20230727000958-zqvzdia","Type":"NodeParagraph","Properties":{"id":"20230727000958-zqvzdia","updated":"20230727000958"},"Children":[{"Type":"NodeText","Data":"再举一个例子"}]},{"ID":"20230727000959-q558kjz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000959-q558kjz","updated":"20230727000959"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type T struct {\nName string\n}\n\nfunc (t T) M1() {\nt.Name = “name1”\n}\n\nfunc (t *T) M2() {\nt.Name = “name2”\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000960-00cecvh","Type":"NodeParagraph","Properties":{"id":"20230727000960-00cecvh","updated":"20230727000960"},"Children":[{"Type":"NodeText","Data":"M1() 的接收者是值类型 T, M2() 的接收者是值类型 *T , 两个方法内都是改变Name值。"}]},{"ID":"20230727000961-24or4o3","Type":"NodeParagraph","Properties":{"id":"20230727000961-24or4o3","updated":"20230727000961"},"Children":[{"Type":"NodeText","Data":"下面声明一个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":" 类型的变量，并调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"M1()"},{"Type":"NodeText","Data":" 和 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"M2()"},{"Type":"NodeText","Data":" 。"}]},{"ID":"20230727000962-u5mfa6o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000962-u5mfa6o","updated":"20230727000962"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"t1 := T{“t1”}\n\nfmt.Println(“M1调用前：”, t1.Name)\nt1.M1()\nfmt.Println(“M1调用后：”, t1.Name)\n\nfmt.Println(“M2调用前：”, t1.Name)\nt1.M2()\nfmt.Println(“M2调用后：”, t1.Name)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000963-gcqbe1x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000963-gcqbe1x","updated":"20230727000963"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"M1调用前： t1\nM1调用后： t1\nM2调用前： t1\nM2调用后： name2 \n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000964-z89jy52","Type":"NodeParagraph","Properties":{"id":"20230727000964-z89jy52","updated":"20230727000964"},"Children":[{"Type":"NodeText","Data":"先来约定一下：接收者可以看作是函数的第一个参数，即这样的： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"func M1(t T)"},{"Type":"NodeText","Data":", "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"func M2(t *T)"},{"Type":"NodeText","Data":"。 go不是面向对象的语言，所以用那种看起来像面向对象的语法来理解可能有偏差。"}]},{"ID":"20230727000965-mh6rdi5","Type":"NodeParagraph","Properties":{"id":"20230727000965-mh6rdi5","updated":"20230727000965"},"Children":[{"Type":"NodeText","Data":"当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"t1.M1()"},{"Type":"NodeText","Data":" 时相当于 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"M1(t1)"},{"Type":"NodeText","Data":" ，实参和行参都是类型 T，可以接受。此时在M1()中的t只是t1的值拷贝，所以M1()的修改影响不到t1。"}]},{"ID":"20230727000966-9n3zacd","Type":"NodeParagraph","Properties":{"id":"20230727000966-9n3zacd","updated":"20230727000966"},"Children":[{"Type":"NodeText","Data":"当调用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"t1.M2()"},{"Type":"NodeText","Data":" =\u003e "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"M2(t1)"},{"Type":"NodeText","Data":"，这是将 T 类型传给了 *T 类型，go可能会取 t1 的地址传进去： "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"M2(\u0026amp;t1)"},{"Type":"NodeText","Data":"。所以 M2() 的修改可以影响 t1 。"}]},{"ID":"20230727000967-bqdhoa7","Type":"NodeParagraph","Properties":{"id":"20230727000967-bqdhoa7","updated":"20230727000967"},"Children":[{"Type":"NodeText","Data":"转载请注明："},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.iamlintao.com/","TextMarkTextContent":"26点的博客"},{"Type":"NodeText","Data":" » "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"http://www.iamlintao.com/6976.html","TextMarkTextContent":"Go基础：函数声明之方法接受者（函数名之前括号中的内容）"}]},{"ID":"20230727003949-3tvb2mf","Type":"NodeParagraph","Properties":{"id":"20230727003949-3tvb2mf"}}]}