{"ID":"20231211220111-4k8dlra","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f5c4","id":"20231211220111-4k8dlra","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231211220111-4k8dlra\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231211220122-8ovplnr\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231213225334-8ksheeh\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;","title":"03-拦截器","updated":"20231213225334"},"Children":[{"ID":"20231211220122-8ovplnr","Type":"NodeParagraph","Properties":{"id":"20231211220122-8ovplnr","updated":"20231211220122"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"拦截器"},{"Type":"NodeText","Data":"和其他框架的拦截器（也称middleware）作用是一样的。利用拦截器我们可以在不侵入业务逻辑的前提下修改或者记录服务端或客户端的请求与响应，利用拦截器我们可以实现诸如日志记录、权限认证、限流等诸多功能"}]},{"ID":"20231211220122-u22m69w","Type":"NodeParagraph","Properties":{"id":"20231211220122-u22m69w","updated":"20231211220122"},"Children":[{"Type":"NodeText","Data":"上一篇提到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​的通信模式分为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"unary"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"streaming"},{"Type":"NodeText","Data":"​几种模式，拦截器也分为两种："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"unary interceptors"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"streaming interceptors"},{"Type":"NodeText","Data":"​ ，两种拦截器可以分别应用在服务端和客户端，所以gRPC总共为我们提供了四种拦截器。它们已经被定义成了go中的接口，我们创建的拦截器只要实现这些接口即可"}]},{"ID":"20231213225334-8ksheeh","Type":"NodeParagraph","Properties":{"id":"20231213225334-8ksheeh"}}]}