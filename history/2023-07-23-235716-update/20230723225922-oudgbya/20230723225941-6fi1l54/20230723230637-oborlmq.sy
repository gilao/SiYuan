{"ID":"20230723230637-oborlmq","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f953","id":"20230723230637-oborlmq","tags":"高并发,架构设计,需要仔细看","title":"高并发设计架构","updated":"20230723235416"},"Children":[{"ID":"20230723235358-z0tsku1","Type":"NodeParagraph","Properties":{"id":"20230723235358-z0tsku1","updated":"20230723235403"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==\u0026amp;mid=2247551305\u0026amp;idx=2\u0026amp;sn=19421d85cce101307c6daebf73c10f82\u0026amp;chksm=fbb180b7ccc609a1e33749264fe6d0b576b189a35344c950cff8e63ef9e2713c4115013f84c6\u0026amp;scene=27","TextMarkTextContent":"https://mp.weixin.qq.com/s?__biz=MzU0OTE4MzYzMw==\u0026amp;mid=2247551305\u0026amp;idx=2\u0026amp;sn=19421d85cce101307c6daebf73c10f82\u0026amp;chksm=fbb180b7ccc609a1e33749264fe6d0b576b189a35344c950cff8e63ef9e2713c4115013f84c6\u0026amp;scene=27"}]},{"ID":"20230723235223-f20vdfe","Type":"NodeParagraph","Properties":{"id":"20230723235223-f20vdfe","updated":"20230723235357"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"image"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/image-20230723235250-20d1bnx.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20230723235416-29oljrd","Type":"NodeParagraph","Properties":{"id":"20230723235416-29oljrd","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"方便打包部署，启用监控告警系统，保障系统正常运行，便于修改配置"}]},{"ID":"20230723235416-8keltoa","Type":"NodeParagraph","Properties":{"id":"20230723235416-8keltoa","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"高并发架构设计需要从三大方面来建设和分析："}]},{"ID":"20230723235416-yorxbek","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-yorxbek","updated":"20230723235416"},"Children":[{"ID":"20230723235416-qc0ieoy","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-qc0ieoy","updated":"20230723235416"},"Children":[{"ID":"20230723235416-lgl7lxg","Type":"NodeParagraph","Properties":{"id":"20230723235416-lgl7lxg","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"基础物理层：进行一些服务的部署，需要保障系统的稳定性和扩展性。"}]}]},{"ID":"20230723235416-qs7le9e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-qs7le9e","updated":"20230723235416"},"Children":[{"ID":"20230723235416-ik3h9st","Type":"NodeParagraph","Properties":{"id":"20230723235416-ik3h9st","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"系统架构层：设计各种架构和模块的设计，设计出合理的架构，支持后续的并发请求"}]}]},{"ID":"20230723235416-45zcbrs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-45zcbrs","updated":"20230723235416"},"Children":[{"ID":"20230723235416-vdd99yr","Type":"NodeParagraph","Properties":{"id":"20230723235416-vdd99yr","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务端应用层：提高代码的性能和架构，保障系统在最小运行资源下提供服务"}]}]}]},{"ID":"20230723235416-y5wjczi","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723235416-y5wjczi","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"一、基础物理层"}]},{"ID":"20230723235416-8e0hui2","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-8e0hui2","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"部署：多IDC（互联网数据中心） + 异地多活"}]},{"ID":"20230723235416-l353vs5","Type":"NodeParagraph","Properties":{"id":"20230723235416-l353vs5","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"基础物理层一般包含了服务器、IDC、部署方式等等。一般使用容器部署方式"}]},{"ID":"20230723235416-tcf5qjo","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-tcf5qjo","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"监控：可观测性"}]},{"ID":"20230723235416-taonxx5","Type":"NodeParagraph","Properties":{"id":"20230723235416-taonxx5","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"系统的可观测性主要包含三个部分: logging、tracing、metrics。这个一般都要引入可观测系统，这样才能帮助我们在异常的时候能够快速定位问题。属于必备设施。"}]},{"ID":"20230723235416-mww6cq1","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723235416-mww6cq1","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"二、系统架构层"}]},{"ID":"20230723235416-q1i10s4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-q1i10s4","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"系统分层设计：分层、分割、分布式；"}]},{"ID":"20230723235416-bfkwgls","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-bfkwgls","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"架构分层"}]},{"ID":"20230723235416-kvq7f5v","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-kvq7f5v","updated":"20230723235416"},"Children":[{"ID":"20230723235416-hy02vow","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-hy02vow","updated":"20230723235416"},"Children":[{"ID":"20230723235416-g7r72b7","Type":"NodeParagraph","Properties":{"id":"20230723235416-g7r72b7","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"应用层：网站首页、用户中心、商品中心、购物车、红包业务、活动中心等，负责具体业务和视图展示"}]}]},{"ID":"20230723235416-1zko7dt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-1zko7dt","updated":"20230723235416"},"Children":[{"ID":"20230723235416-tlppevo","Type":"NodeParagraph","Properties":{"id":"20230723235416-tlppevo","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务层：订单服务、用户管理服务、红包服务、商品服务等，为应用层提供服务支持"}]}]},{"ID":"20230723235416-9yukx8w","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-9yukx8w","updated":"20230723235416"},"Children":[{"ID":"20230723235416-x2izgt4","Type":"NodeParagraph","Properties":{"id":"20230723235416-x2izgt4","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"数据层：关系数据库、nosql数据库等，提供数据存储查询服务"}]}]},{"ID":"20230723235416-05re33x","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-05re33x","updated":"20230723235416"},"Children":[{"ID":"20230723235416-x8uphgo","Type":"NodeParagraph","Properties":{"id":"20230723235416-x8uphgo","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"将系统在横向维度上切分成几个部分，每一层的功能职责要足够单一，然后通过上层对下层的依赖和调度组成一个完整的系统"}]}]},{"ID":"20230723235416-xct5yvu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-xct5yvu","updated":"20230723235416"},"Children":[{"ID":"20230723235416-9qznw4b","Type":"NodeParagraph","Properties":{"id":"20230723235416-9qznw4b","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"比如把电商系统分成：应用层，服务层，数据层。(具体分多少个层次根据自己的业务场景)"}]}]}]},{"ID":"20230723235416-f629yje","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-f629yje","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"业务分割"}]},{"ID":"20230723235416-n7n7iev","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-n7n7iev","updated":"20230723235416"},"Children":[{"ID":"20230723235416-n9ufmwf","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-n9ufmwf","updated":"20230723235416"},"Children":[{"ID":"20230723235416-5nulqc7","Type":"NodeParagraph","Properties":{"id":"20230723235416-5nulqc7","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在纵向方面对业务进行切分，****将一块相对复杂的业务分割成不同的模块单元，对应的是模块的划分，通过合理的模块划分，使得每个模块都能可以满足 高内聚低耦合 的设计要求，这样不同的模块可以分布式部署，也能提高并发处理能力和功能扩展"}]}]},{"ID":"20230723235416-4bnt1t8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-4bnt1t8","updated":"20230723235416"},"Children":[{"ID":"20230723235416-rg9zbwr","Type":"NodeParagraph","Properties":{"id":"20230723235416-rg9zbwr","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"比如用户中心可以分割成：账户信息模块，订单列表模块，充值模块，优惠券模块等"}]}]}]},{"ID":"20230723235416-gwva1bc","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-gwva1bc","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"分布式"}]},{"ID":"20230723235416-2qb79cq","Type":"NodeParagraph","Properties":{"id":"20230723235416-2qb79cq","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分布式应用和服务,将分层或者分割后的业务分布式部署，独立的应用服务器，数据库，缓存服务器，当业务达到一定用户量的时候，再进行服务器均衡负载，数据库，缓存主从集群"}]},{"ID":"20230723235416-jxdfjzg","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-jxdfjzg","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"集群架构设计：应用集群、数据集群"}]},{"ID":"20230723235416-vgg7ave","Type":"NodeParagraph","Properties":{"id":"20230723235416-vgg7ave","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"应对高并发系统，不管是应用层面还是数据层面，单机都不可能搞定，因此都需要搭建集群架构，然后通过负载均衡来对外提供服务。同时集群架构还能保证系统的可用性，当某台服务或者机器异常，负载均衡会自动剔除，不会影响对外服务。"}]},{"ID":"20230723235416-t2z9sue","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230723235416-t2z9sue","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"应用服务器集群"}]},{"ID":"20230723235416-u2ojd1k","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-u2ojd1k","updated":"20230723235416"},"Children":[{"ID":"20230723235416-fr4dfni","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-fr4dfni","updated":"20230723235416"},"Children":[{"ID":"20230723235416-3a60hsa","Type":"NodeParagraph","Properties":{"id":"20230723235416-3a60hsa","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"nginx 反向代理"}]}]},{"ID":"20230723235416-p0feh4q","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-p0feh4q","updated":"20230723235416"},"Children":[{"ID":"20230723235416-r0yzmbw","Type":"NodeParagraph","Properties":{"id":"20230723235416-r0yzmbw","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"slb"}]}]},{"ID":"20230723235416-nqytleu","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-nqytleu","updated":"20230723235416"},"Children":[{"ID":"20230723235416-c03sjb0","Type":"NodeParagraph","Properties":{"id":"20230723235416-c03sjb0","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"LVS …"}]}]}]},{"ID":"20230723235416-f7ooici","Type":"NodeHeading","HeadingLevel":5,"Properties":{"id":"20230723235416-f7ooici","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"数据集群(关系/nosql数据库)"}]},{"ID":"20230723235416-ps34l9q","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-ps34l9q","updated":"20230723235416"},"Children":[{"ID":"20230723235416-picswss","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-picswss","updated":"20230723235416"},"Children":[{"ID":"20230723235416-vmenqsj","Type":"NodeParagraph","Properties":{"id":"20230723235416-vmenqsj","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"主从分离，一主多从"}]}]},{"ID":"20230723235416-xi0j3zo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-xi0j3zo","updated":"20230723235416"},"Children":[{"ID":"20230723235416-8hupr22","Type":"NodeParagraph","Properties":{"id":"20230723235416-8hupr22","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"数据读写分离"}]}]}]},{"ID":"20230723235416-m7qbe3z","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-m7qbe3z","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"数据库设计：读写分离+分库分表+冷热分离"}]},{"ID":"20230723235416-fsuwbgx","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-fsuwbgx","updated":"20230723235416"},"Children":[{"ID":"20230723235416-34n2v8d","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-34n2v8d","updated":"20230723235416"},"Children":[{"ID":"20230723235416-u59fnoh","Type":"NodeParagraph","Properties":{"id":"20230723235416-u59fnoh","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"读写分离：互联网系统大多数都是读多写少，因此读写分离可以帮助主库抗量。一般我们都是一主多从的架构，可以抗量，也可以保证数据不丢。分库分表只能解决 QPS 高，但是无法解决 TPS 高，比如写入的量足够大的话（TPS 高），就得读写分离。"}]}]},{"ID":"20230723235416-gpgi956","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-gpgi956","updated":"20230723235416"},"Children":[{"ID":"20230723235416-xt02xo3","Type":"NodeParagraph","Properties":{"id":"20230723235416-xt02xo3","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分库分表：数据存储量大的时候，就需要通过分库分表来存储。先分，避免后期要拆，后期拆的话，就面临洗数据的问题，就需要采用双写模式来搞定。"}]}]}]},{"ID":"20230723235416-okolt2b","Type":"NodeParagraph","Properties":{"id":"20230723235416-okolt2b","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"分库分表模式虽然能显著提升数据库的容量，但会增加系统复杂性，而且由于只能支持少数几个维度读写，从某种意义上来说对业务系统也是一种限制，因此在设计分库分表方案的时候需要结合具体业务场景，更全面的考虑。"}]},{"ID":"20230723235416-vn6z0va","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-vn6z0va","updated":"20230723235416"},"Children":[{"ID":"20230723235416-tje9gal","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-tje9gal","updated":"20230723235416"},"Children":[{"ID":"20230723235416-a3vgraz","Type":"NodeParagraph","Properties":{"id":"20230723235416-a3vgraz","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"冷热分离，针对业务而言，如果数据有冷热之分的话，可以将历史冷数据与当前热数据分开存储，这样可以减轻当前热数据的存储量，可以提高性能"}]}]}]},{"ID":"20230723235416-xk8ajc0","Type":"NodeParagraph","Properties":{"id":"20230723235416-xk8ajc0","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"不过，****既然是高并发系统，不能应用层直接读写 DB 的，一定有一个缓存在上面，如果直接读写 DB 能够搞定，其实不能叫高并发了，只能说是并发有点高。"},{"Type":"NodeText","Data":"在非互联网系统里面还是可以的。"}]},{"ID":"20230723235416-u55fuv7","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-u55fuv7","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"缓存设计：多级缓存架构和本地缓存"}]},{"ID":"20230723235416-fx02gpg","Type":"NodeParagraph","Properties":{"id":"20230723235416-fx02gpg","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"缓存最大的作用是可以提高系统性能，保护后端存储不被大流量打垮，增加系统的伸缩性，缓存的设计，需要分多个思路并行："}]},{"ID":"20230723235416-rzgp187","Type":"NodeList","ListData":{},"Properties":{"id":"20230723235416-rzgp187","updated":"20230723235416"},"Children":[{"ID":"20230723235416-b6ltnpb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-b6ltnpb","updated":"20230723235416"},"Children":[{"ID":"20230723235416-kig5cl7","Type":"NodeParagraph","Properties":{"id":"20230723235416-kig5cl7","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"首先要考虑的，就是必须在数据库之上，增加一层分布式缓存，如Redis和Memcached。这里需要考虑一下缓存和数据库一致性的问题。"}]}]},{"ID":"20230723235416-71q3l2j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-71q3l2j","updated":"20230723235416"},"Children":[{"ID":"20230723235416-784z2to","Type":"NodeParagraph","Properties":{"id":"20230723235416-784z2to","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"其次需要考虑的是多级缓存架构，分几级缓存设计，同时设计热点缓存架构。"}]}]},{"ID":"20230723235416-3ahnb9h","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230723235416-3ahnb9h","updated":"20230723235416"},"Children":[{"ID":"20230723235416-nvocrak","Type":"NodeParagraph","Properties":{"id":"20230723235416-nvocrak","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"采用多个分布式缓存来搭建多级缓存架构"}]}]}]},{"ID":"20230723235416-44dyuv6","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-44dyuv6","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"消息队列设计：MQ抗量和削峰"}]},{"ID":"20230723235416-ixv72c4","Type":"NodeParagraph","Properties":{"id":"20230723235416-ixv72c4","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"针对流量突峰，仅仅有缓存来抗量可能还不够，还需要使用消息队列来削峰。使用消息队列后，可以将同步处理的请求改为通过消费MQ消息来异步消费，这样可以大大减少系统处理的压力，增加系统的并发量。常用的消息队列如kafka。"}]},{"ID":"20230723235416-wkfjcez","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-wkfjcez","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"服务治理设计：超时、熔断、降级、限流等"}]},{"ID":"20230723235416-74neqt4","Type":"NodeParagraph","Properties":{"id":"20230723235416-74neqt4","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"超时、熔断、降级、限流等都是常规策略，可以在另外服务治理章节去细看。"}]},{"ID":"20230723235416-e3sucnt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-e3sucnt","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"资源隔离设计：SET部署"}]},{"ID":"20230723235416-y6hp4p1","Type":"NodeParagraph","Properties":{"id":"20230723235416-y6hp4p1","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"资源隔离有各种类型，物理层面的服务器资源、中间件资源、代码层面的线程池、连接池，这些都可以做隔离。"}]},{"ID":"20230723235416-kosoew5","Type":"NodeParagraph","Properties":{"id":"20230723235416-kosoew5","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一般我们最常见的就是应用部署层面的，比如SET化部署。一个服务对外的使用方可能有A业务、B业务，那么如何保证AB业务不会相互影响，那么就是SET化部署。SET化部署也可以防止非关键业务来影响关键核心业务。一个隔离的维度可以是按业务场景区分，分为关键集群，次关键集群和非关键集群三类，这样能避免关键和非关键业务相互影响。"}]},{"ID":"20230723235416-wnmz4jd","Type":"NodeParagraph","Properties":{"id":"20230723235416-wnmz4jd","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"SET化部署就是把业务系统分为多个可扩展的逻辑分区，每个SET化的逻辑分区都可以独立部署并提供服务,SET也可以理解为“逻辑机房”，主要目的就是为了进行独立部署并做到业务上的逻辑隔离。"}]},{"ID":"20230723235416-q91m4s8","Type":"NodeParagraph","Properties":{"id":"20230723235416-q91m4s8","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"关于 SET 的具体例子：微信红包用户发一个红包时，微信红包系统生成一个ID作为这个红包的唯一标识。接下来这个红包的所有发红包、抢红包、拆红包、查询红包详情等操作，都根据这个ID关联。红包系统根据这个红包ID，按一定的规则（如按ID尾号取模等），垂直上下切分。切分后，一个垂直链条上的逻辑Server服务器、DB统称为一个SET。各个SET之间相互独立，互相解耦。并且同一个红包ID的所有请求，包括发红包、抢红包、拆红包、查详情详情等，垂直stick到同一个SET内处理，高度内聚。通过这样的方式，系统将所有红包请求这个巨大的洪流分散为多股小流，互不影响，分而治之。"}]},{"ID":"20230723235416-m2lzk4z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230723235416-m2lzk4z","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"三、服务端应用层"}]},{"ID":"20230723235416-13cx5h4","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-13cx5h4","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"多线程、线程同步、协程"}]},{"ID":"20230723235416-j6l69lg","Type":"NodeParagraph","Properties":{"id":"20230723235416-j6l69lg","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"并发问题一直是服务端编程中的重点和难点问题，为了优化系统的并发量，单机解决高并发问题从最初的 Fork 进程开始，到进程池/线程池，再到 Epoll 事件驱动(Nginx)，再到协程（如 Goroutine）。"}]},{"ID":"20230723235416-37f07tq","Type":"NodeParagraph","Properties":{"id":"20230723235416-37f07tq","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"对于 Go 语言，尽可能的多使用协程去提高并发能力。"}]},{"ID":"20230723235416-1pcjg98","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-1pcjg98","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"异步化"}]},{"ID":"20230723235416-pmhaofe","Type":"NodeParagraph","Properties":{"id":"20230723235416-pmhaofe","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"消息队列也是一种异步化操作，但是除了依赖外部的中间件如消息队列，在应用内我们也可以通过线程池、协程的方式做异步化，能异步的尽量异步处理，可以可以提高并发。"}]},{"ID":"20230723235416-88k7u6p","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230723235416-88k7u6p","updated":"20230723235416"},"Children":[{"Type":"NodeText","Data":"预处理：预加载、预热"}]},{"ID":"20230723235416-i4gqqhi","Type":"NodeParagraph","Properties":{"id":"20230723235416-i4gqqhi","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"系统的预热一般有JVM预热、缓存预热、DB预热等，通过预热的方式让系统先热起来，为高并发流量的到来做好准备。预热实际应用的场景有很多，比如在电商的大促到来前，我们可以把一些热点的商品提前加载到缓存中，防止大流量冲击DB。"}]},{"ID":"20230723235416-lv9y089","Type":"NodeParagraph","Properties":{"id":"20230723235416-lv9y089","updated":"20230723235416"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"现在还有一种预热思路是利用业务的特性做一些预加载，比如feeds流刷新的时候，提前加载1-2页数据，这样用户往下刷新的时候，就感觉不到卡顿。"}]}]}