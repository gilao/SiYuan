{"ID":"20230724221128-9fansgr","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f386","id":"20230724221128-9fansgr","tags":"elasticsearch,Go 代码,需要仔细看","title":"Elasticsearch 开发入门 Golang","updated":"20230724221227"},"Children":[{"ID":"20230724221215-r5w57ki","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-r5w57ki","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"git clone --branch master https://github.com/elastic/go-elasticsearch.git $GOPATH/src/github.com/elastic/go-elasticsearch\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-82ict7r","Type":"NodeParagraph","Properties":{"id":"20230724221215-82ict7r","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"go.mod 文件"}]},{"ID":"20230724221215-n1w2cih","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-n1w2cih","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"require github.com/elastic/go-elasticsearch/v7 master\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-n5f2z0u","Type":"NodeParagraph","Properties":{"id":"20230724221215-n5f2z0u","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"客户端"}]},{"ID":"20230724221215-73j0eqv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-73j0eqv","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"require github.com/elastic/go-elasticsearch/v7 7.x\nrequire github.com/elastic/go-elasticsearch/v7 7.0.0\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-3m1zphv","Type":"NodeParagraph","Properties":{"id":"20230724221215-3m1zphv","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"可以在一个项目中使用客户端的多个版本"}]},{"ID":"20230724221215-3ao9b9n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-3ao9b9n","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// go.mod\ngithub.com/elastic/go-elasticsearch/v6 6.x\ngithub.com/elastic/go-elasticsearch/v7 7.x\n\n// main.go\nimport (\n  elasticsearch6 \"github.com/elastic/go-elasticsearch/v6\"\n  elasticsearch7 \"github.com/elastic/go-elasticsearch/v7\"\n)\n// ...\nes6, _ := elasticsearch6.NewDefaultClient()\nes7, _ := elasticsearch7.NewDefaultClient()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-6xk1vjj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-6xk1vjj","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"安装 Elasticsearch 及 Kibana"}]},{"ID":"20230724221215-ty7bm05","Type":"NodeParagraph","Properties":{"id":"20230724221215-ty7bm05","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用 docker-compose.yml 的文件"}]},{"ID":"20230724221215-di3byzr","Type":"NodeParagraph","Properties":{"id":"20230724221215-di3byzr","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"docker-compose.yml"}]},{"ID":"20230724221215-j15gv9u","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-j15gv9u","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"---\nversion: \"3\"\nservices:\n  elasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:7.10.0\n    container_name: es01\n    environment:\n      - node.name=es01\n      - cluster.name=docker-cluster\n      - bootstrap.memory_lock=true\n      - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n      - discovery.type=single-node\n    ulimits:\n      memlock:\n        soft: -1\n        hard: -1\n    volumes:\n      - esdata:/usr/share/elasticsearch/data\n    ports:\n      - 9200:9200\n\n  kibana:\n    image: docker.elastic.co/kibana/kibana:7.10.0\n    ports:\n      - 5601:5601\n    depends_on:\n      - elasticsearch\n\nvolumes:\n  esdata:\n    driver: local\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-6n0ll0b","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-6n0ll0b","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"测试 elasticsearch 包"}]},{"ID":"20230724221215-yllgshg","Type":"NodeParagraph","Properties":{"id":"20230724221215-yllgshg","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** elasticsearch 软件包将两个单独的软件包捆绑在一起，分别用于调用 Elasticsearch API 和通过 HTTP 传输数据：esapi 和 estransport。 **"}]},{"ID":"20230724221215-vfv8202","Type":"NodeParagraph","Properties":{"id":"20230724221215-vfv8202","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用 elastic search.NewDefaultClient() 函数创建具有默认设置的客户端。"}]},{"ID":"20230724221215-2r8kcab","Type":"NodeParagraph","Properties":{"id":"20230724221215-2r8kcab","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"main.go"}]},{"ID":"20230724221215-zq50mv7","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-zq50mv7","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"log\"\n    // Import the Elasticsearch library packages\n    \"github.com/elastic/go-elasticsearch/v7\"\n)\n\nfunc main() {\n    es, err := elasticsearch.NewDefaultClient()\n    if err != nil {\n    log.Fatalf(\"Error creating the client: %s\", err)\n    }\n\n    res, err := es.Info()\n    if err != nil {\n    log.Fatalf(\"Error getting response: %s\", err)\n    }\n\n    defer res.Body.Close()\n    log.Println(res)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-m62rvqe","Type":"NodeParagraph","Properties":{"id":"20230724221215-m62rvqe","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"注意："},{"Type":"NodeText","Data":"关闭并使用响应body至关重要，以便在默认的HTTP传输中重新使用持久性TCP连接。如果你对响应正文不感兴趣，请调用 io.Copy(ioutil.Discard, res.Body)。"}]},{"ID":"20230724221215-1crq4tr","Type":"NodeParagraph","Properties":{"id":"20230724221215-1crq4tr","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 当你 export ELASTICSEARCH_URL环境变量时，它将用于设置集群端点。 用逗号分隔多个地址。 **"}]},{"ID":"20230724221215-ab1ja0n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724221215-ab1ja0n","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"插入文档到索引"}]},{"ID":"20230724221215-wf06ijg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-wf06ijg","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"创建一个Go脚本并导入包"}]},{"ID":"20230724221215-rlezla0","Type":"NodeParagraph","Properties":{"id":"20230724221215-rlezla0","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 现在，我们已经确保正确安装和设置了我们需要的所有内容，我们可以开始使用 Go 脚本了。 编辑之前的 main.go 文件，然后将 main 包放在顶部。 请确保导入所有必需的程序包和库，如以下示例所示： **"}]},{"ID":"20230724221215-j0htiyk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-j0htiyk","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"reflect\"\n    \"strconv\"\n    \"strings\"\n    \"bytes\"\n\n    // Import the Elasticsearch library packages\n    \"github.com/elastic/go-elasticsearch/v7\"\n    \"github.com/elastic/go-elasticsearch/v7/esapi\"\n)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-7ikp6wy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-7ikp6wy","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"为 Elasticsearch 文档的字段创建结构数据类型"}]},{"ID":"20230724221215-8h23gad","Type":"NodeParagraph","Properties":{"id":"20230724221215-8h23gad","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 我们将使用 Golang struct 数据类型为要编制索引的 Elasticsearch 文档以及索引的相应字段创建框架： **"}]},{"ID":"20230724221215-mn31cl3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-mn31cl3","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Declare a struct for Elasticsearch fields\ntype ElasticDocs struct {\n  SomeStr string\n  SomeInt int\n  SomeBool bool\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-oyhfkho","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-oyhfkho","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"声明一个将 Elasticsearch 结构数据转换为 JSON 字符串的函数"}]},{"ID":"20230724221215-53engn3","Type":"NodeParagraph","Properties":{"id":"20230724221215-53engn3","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"接下来，让我们看一个简单的函数，它将 Elasticsearch struct 文档实例转换为 JSON 字符串。 下面显示的代码可能看起来有些复杂，但是实际上发生的事情很简单–所有功能所做的就是将结构转换为字符串文字，然后将该字符串传递给 Golang 的 json.Marshal() 方法以使其返回字符串的JSON编码："}]},{"ID":"20230724221215-22ed3mt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-22ed3mt","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// A function for marshaling structs to JSON string\nfunc jsonStruct(doc ElasticDocs) string {\n\t// Create struct instance of the Elasticsearch fields struct object\n\tdocStruct := \u0026ElasticDocs{\n\t\tSomeStr: doc.SomeStr,\n\t\tSomeInt: doc.SomeInt,\n\t\tSomeBool: doc.SomeBool,\n\t}\n\n\tfmt.Println(\"\\ndocStruct:\", docStruct)\n\tfmt.Println(\"docStruct TYPE:\", reflect.TypeOf(docStruct))\n\n\t// Marshal the struct to JSON and check for errors\n\tb, err := json.Marshal(docStruct)\n\tif err != nil {\n\t\tfmt.Println(\"json.Marshal ERROR:\", err)\n\t\treturn string(err.Error())\n\t}\n\n\treturn string(b)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-ywx1go6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-ywx1go6","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"声明 main() 函数并创建新的 Elasticsearch Golang 客户端实例"}]},{"ID":"20230724221215-1fzvnxp","Type":"NodeParagraph","Properties":{"id":"20230724221215-1fzvnxp","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 在我们的 Go 脚本中，所有 API 方法调用都必须位于 main() 函数内部或从另一个函数内部进行调用。 让我们为 API 调用创建一个新的上下文对象，并为 Elasticsearch 文档创建一个 map 对象： **"}]},{"ID":"20230724221215-e1sl8fu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-e1sl8fu","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\n\t// Allow for custom formatting of log output\n\tlog.SetFlags(0)\n\n\t// Create a context object for the API calls\n\tctx := context.Background()\n\n\t// Create a mapping for the Elasticsearch documents\n\tvar (\n\t\tdocMap map[string]interface{}\n\t)\n\n\tfmt.Println(\"docMap:\", docMap)\n\tfmt.Println(\"docMap TYPE:\", reflect.TypeOf(docMap))\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-7xaukym","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-7xaukym","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"实例化 Elasticsearch 客户端配置和 Golang 客户端实例"}]},{"ID":"20230724221215-gmzw6xe","Type":"NodeParagraph","Properties":{"id":"20230724221215-gmzw6xe","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 在这一步中，我们将实例化一个新的 Elasticsearch 配置对象。 确保将正确的主机和端口信息以及任何用户名或密码传递给其 “Adressess” 属性。 **"}]},{"ID":"20230724221215-zg1hh1c","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-zg1hh1c","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\t// Declare an Elasticsearch configuration\n\tcfg := elasticsearch.Config{\n\t\tAddresses: []string{\n\t\t\"http://localhost:9200\",\n\t\t},\n\t\tUsername: \"user\",\n\t\tPassword: \"pass\",\n\t}\n\n\t// Instantiate a new Elasticsearch client object instance\n\tclient, err := elasticsearch.NewClient(cfg)\n\n\tif err != nil {\n\t\tfmt.Println(\"Elasticsearch connection error:\", err)\n\t}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-7mfi8n6","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-7mfi8n6","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"检查用于 Elasticsearch 的 Golang 客户端在连接到集群时是否返回了任何错误"}]},{"ID":"20230724221215-wkvd3x4","Type":"NodeParagraph","Properties":{"id":"20230724221215-wkvd3x4","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 接下来，我们将检查与 Elasticsearch 的连接是否成功或是否返回了任何错误： **"}]},{"ID":"20230724221215-o3aw4rk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-o3aw4rk","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\t// Have the client instance return a response\n\tres, err := client.Info()\n\n\t// Deserialize the response into a map.\n\tif err != nil {\n\t\tlog.Fatalf(\"client.Info() ERROR:\", err)\n\t} else {\n\t\tlog.Printf(\"client response:\", res)\n\t}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-hdfb20h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-hdfb20h","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"创建 Elasticsearch 结构文档并将其放入数组"}]},{"ID":"20230724221215-uh0o8e6","Type":"NodeParagraph","Properties":{"id":"20230724221215-uh0o8e6","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们将声明一个空字符串数组，以存储当前以 JSON 字符串表示的 Elasticsearch 文档。 以下代码显示了一些将用于索引的 Elasticsearch 文档示例。 要设置其字段的值，你需要做的就是修改结构实例的属性："}]},{"ID":"20230724221215-6jc2om8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-6jc2om8","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\t// Declare empty array for the document strings\n\tvar docs []string\n\n\t// Declare documents to be indexed using struct\n\tdoc1 := ElasticDocs{}\n\tdoc1.SomeStr = \"Some Value\"\n\tdoc1.SomeInt = 123456\n\tdoc1.SomeBool = true\n\n\tdoc2 := ElasticDocs{}\n\tdoc2.SomeStr = \"Another Value\"\n\tdoc2.SomeInt = 42\n\tdoc2.SomeBool = false\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-coowyqm","Type":"NodeParagraph","Properties":{"id":"20230724221215-coowyqm","updated":"20230724221215"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"我们会将这些文档实例传递给我们先前声明的 jsonStruct() 函数，并使它们返回代表每个文档的 JSON 字符串。 然后，我们将使用 Golang 的 append() 函数将 JSON 字符串添加到字符串数组中："}]},{"ID":"20230724221215-i8xer63","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-i8xer63","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// Marshal Elasticsearch document struct objects to JSON string\n\tdocStr1 := jsonStruct(doc1)\n\tdocStr2 := jsonStruct(doc2)\n\n\t// Append the doc strings to an array\n\tdocs = append(docs, docStr1)\n\tdocs = append(docs, docStr2)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-pgitxjr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-pgitxjr","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"迭代 Elasticsearch 文档数组并调用 Golang 客户端的 IndexRequest() 方法"}]},{"ID":"20230724221215-u8fmyv4","Type":"NodeParagraph","Properties":{"id":"20230724221215-u8fmyv4","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 现在我们已经建立了一个文档数组，我们将对其进行迭代，并在进行过程中向 Elasticsearch 集群发出 API 请求。 这些API调用将通过调用 Golang 驱动程序的 esapi.IndexRequest() 方法来索引文档：**"}]},{"ID":"20230724221215-ztm5q2h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-ztm5q2h","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\t// Iterate the array of string documents\n\tfor i, bod := range docs {\n\t\tfmt.Println(\"\\nDOC _id:\", i+1)\n\t\tfmt.Println(bod)\n\n\t\t// Instantiate a request object\n\t\treq := esapi.IndexRequest {\n\t\t\tIndex: \"some_index\",\n\t\t\tDocumentID: strconv.Itoa(i + 1),\n\t\t\tBody: strings.NewReader(bod),\n\t\t\tRefresh: \"true\",\n\t\t}\n\n\t\tfmt.Println(reflect.TypeOf(req))\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-77by3ri","Type":"NodeParagraph","Properties":{"id":"20230724221215-77by3ri","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 在上面一定要注意的是：我们设置 Refresh 为 true。这在实际的使用中并不建议，原因是每次写入的时候都会 refresh。当我们面对大量的数据时，这样的操作会造成效率的底下。 **"}]},{"ID":"20230724221215-gnsqllc","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230724221215-gnsqllc","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"检查 IndexRequest() API 方法调用是否返回任何错误"}]},{"ID":"20230724221215-t9a24au","Type":"NodeParagraph","Properties":{"id":"20230724221215-t9a24au","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"**在 文档数组上进行迭代的最后一步是从 API 调用中获取响应，并检查是否存在错误： **"}]},{"ID":"20230724221215-x19nqd6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-x19nqd6","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\t\t// Return an API response object from request\n\t\tres, err := req.Do(ctx, client)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"IndexRequest ERROR: %s\", err)\n\t\t}\n\n\t\tdefer res.Body.Close()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-ku4sgi8","Type":"NodeParagraph","Properties":{"id":"20230724221215-ku4sgi8","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 在下面显示的代码中，如果没有错误返回，我们将解析 API 响应返回的结果对象： **"}]},{"ID":"20230724221215-aei00st","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-aei00st","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"\t\tif res.IsError() {\n\t\t\tlog.Printf(\"%s ERROR indexing document ID=%d\", res.Status(), i+1)\n\t\t} else {\n\t\n\t\t\t// Deserialize the response into a map.\n\t\t\tvar resMap map[string]interface{}\n\t\t\tif err := json.NewDecoder(res.Body).Decode(\u0026resMap); err != nil {\n\t\t\t\tlog.Printf(\"Error parsing the response body: %s\", err)\n\t\t\t} else {\n\t\t\t\tlog.Printf(\"\\nIndexRequest() RESPONSE:\")\n\t\t\t\t// Print the response status and indexed document version.\n\t\t\t\tfmt.Println(\"Status:\", res.Status())\n\t\t\t\tfmt.Println(\"Result:\", resMap[\"result\"])\n\t\t\t\tfmt.Println(\"Version:\", int(resMap[\"_version\"].(float64)))\n\t\t\t\tfmt.Println(\"resMap:\", resMap)\n\t\t\t\tfmt.Println(\"\\n\")\n\t\t\t}\n\t\t}\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-yz5n1ri","Type":"NodeParagraph","Properties":{"id":"20230724221215-yz5n1ri","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 每个文档迭代都应打印出一个map[string] interface{} 对象响应，如下所示： **"}]},{"ID":"20230724221215-m8k01zd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-m8k01zd","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"resMap: map[_id:1 _index:some_index _primary_term:1 _seq_no:32 _shards:map[failed:0 successful:1 total:2] _type:_doc _version:2 forced_refresh:true result:updated]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-268hebp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724221215-268hebp","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"完整代码"}]},{"ID":"20230724221215-uh7gr33","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-uh7gr33","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"context\"\n    \"encoding/json\"\n    \"fmt\"\n    \"log\"\n    \"reflect\"\n    \"strconv\"\n    \"strings\"\n    \"bytes\"\n\n    // Import the Elasticsearch library packages\n    \"github.com/elastic/go-elasticsearch/v7\"\n    \"github.com/elastic/go-elasticsearch/v7/esapi\"\n)\n\n// Declare a struct for Elasticsearch fields\ntype ElasticDocs struct {\n\tSomeStr string\n\tSomeInt int\n\tSomeBool bool\n}\n\n// A function for marshaling structs to JSON string\nfunc jsonStruct(doc ElasticDocs) string {\n\t// Create struct instance of the Elasticsearch fields struct object\n\tdocStruct := \u0026ElasticDocs{\n\t\tSomeStr: doc.SomeStr,\n\t\tSomeInt: doc.SomeInt,\n\t\tSomeBool: doc.SomeBool,\n\t}\n\n\tfmt.Println(\"\\ndocStruct:\", docStruct)\n\tfmt.Println(\"docStruct TYPE:\", reflect.TypeOf(docStruct))\n\n\t// Marshal the struct to JSON and check for errors\n\tb, err := json.Marshal(docStruct)\n\tif err != nil {\n\t\tfmt.Println(\"json.Marshal ERROR:\", err)\n\t\treturn string(err.Error())\n\t}\n\n\treturn string(b)\n}\n\nfunc main() {\n\n\t// Allow for custom formatting of log output\n\tlog.SetFlags(0)\n\n\t// Create a context object for the API calls\n\tctx := context.Background()\n\n\t// Create a mapping for the Elasticsearch documents\n\tvar (\n\t\tdocMap map[string]interface{}\n\t)\n\n\tfmt.Println(\"docMap:\", docMap)\n\tfmt.Println(\"docMap TYPE:\", reflect.TypeOf(docMap))\n\n\t// Declare an Elasticsearch configuration\n\tcfg := elasticsearch.Config{\n\t\tAddresses: []string{\n\t\t\"http://localhost:9200\",\n\t\t},\n\t\tUsername: \"user\",\n\t\tPassword: \"pass\",\n\t}\n\n\t// Instantiate a new Elasticsearch client object instance\n\tclient, err := elasticsearch.NewClient(cfg)\n\n\tif err != nil {\n\t\tfmt.Println(\"Elasticsearch connection error:\", err)\n\t}\n\n\t// Have the client instance return a response\n\tres, err := client.Info()\n\n\t// Deserialize the response into a map.\n\tif err != nil {\n\t\tlog.Fatalf(\"client.Info() ERROR:\", err)\n\t} else {\n\t\tlog.Printf(\"client response:\", res)\n\t}\n\n\t// Declare empty array for the document strings\n\tvar docs []string\n\n\t// Declare documents to be indexed using struct\n\tdoc1 := ElasticDocs{}\n\tdoc1.SomeStr = \"Some Value\"\n\tdoc1.SomeInt = 123456\n\tdoc1.SomeBool = true\n\n\tdoc2 := ElasticDocs{}\n\tdoc2.SomeStr = \"Another Value\"\n\tdoc2.SomeInt = 42\n\tdoc2.SomeBool = false\n\n\t// Marshal Elasticsearch document struct objects to JSON string\n\tdocStr1 := jsonStruct(doc1)\n\tdocStr2 := jsonStruct(doc2)\n\n\t// Append the doc strings to an array\n\tdocs = append(docs, docStr1)\n\tdocs = append(docs, docStr2)\n\n\t// Iterate the array of string documents\n\tfor i, bod := range docs {\n\t\tfmt.Println(\"\\nDOC _id:\", i+1)\n\t\tfmt.Println(bod)\n\n\t\t// Instantiate a request object\n\t\treq := esapi.IndexRequest {\n\t\t\tIndex: \"some_index\",\n\t\t\tDocumentID: strconv.Itoa(i + 1),\n\t\t\tBody: strings.NewReader(bod),\n\t\t\tRefresh: \"true\",\n\t\t}\n\n\t\tfmt.Println(reflect.TypeOf(req))\n\n\t\t// Return an API response object from request\n\t\tres, err := req.Do(ctx, client)\n\t\tif err != nil {\n\t\t\tlog.Fatalf(\"IndexRequest ERROR: %s\", err)\n\t\t}\n\n\t\tdefer res.Body.Close()\n\n\t\tif res.IsError() {\n\t\t\tlog.Printf(\"%s ERROR indexing document ID=%d\", res.Status(), i+1)\n\t\t} else {\n\t\n\t\t\t// Deserialize the response into a map.\n\t\t\tvar resMap map[string]interface{}\n\t\t\tif err := json.NewDecoder(res.Body).Decode(\u0026resMap); err != nil {\n\t\t\t\tlog.Printf(\"Error parsing the response body: %s\", err)\n\t\t\t} else {\n\t\t\t\tlog.Printf(\"\\nIndexRequest() RESPONSE:\")\n\t\t\t\t// Print the response status and indexed document version.\n\t\t\t\tfmt.Println(\"Status:\", res.Status())\n\t\t\t\tfmt.Println(\"Result:\", resMap[\"result\"])\n\t\t\t\tfmt.Println(\"Version:\", int(resMap[\"_version\"].(float64)))\n\t\t\t\tfmt.Println(\"resMap:\", resMap)\n\t\t\t\tfmt.Println(\"\\n\")\n\t\t\t}\n\t\t}\n\t}\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-y4418jw","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20230724221215-y4418jw","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"运行上面的代码，我们将看到如下的输出"}]},{"ID":"20230724221215-qp0ef9e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-qp0ef9e","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"$ go run main.go\ngo: finding github.com/elastic/go-elasticsearch latest\ndocMap: map[]\ndocMap TYPE: map[string]interface {}\nclient response:%!(EXTRA *esapi.Response=[200 OK] {\n  \"name\" : \"es01\",\n  \"cluster_name\" : \"docker-cluster\",\n  \"cluster_uuid\" : \"ZYQ9cGOdS06uZvxOvjug8A\",\n  \"version\" : {\n    \"number\" : \"7.10.0\",\n    \"build_flavor\" : \"default\",\n    \"build_type\" : \"docker\",\n    \"build_hash\" : \"51e9d6f22758d0374a0f3f5c6e8f3a7997850f96\",\n    \"build_date\" : \"2020-11-09T21:30:33.964949Z\",\n    \"build_snapshot\" : false,\n    \"lucene_version\" : \"8.7.0\",\n    \"minimum_wire_compatibility_version\" : \"6.8.0\",\n    \"minimum_index_compatibility_version\" : \"6.0.0-beta1\"\n  },\n  \"tagline\" : \"You Know, for Search\"\n}\n)\n\ndocStruct: \u0026{Some Value 123456 true}\ndocStruct TYPE: *main.ElasticDocs\n\ndocStruct: \u0026{Another Value 42 false}\ndocStruct TYPE: *main.ElasticDocs\n\nDOC _id: 1\n{\"SomeStr\":\"Some Value\",\"SomeInt\":123456,\"SomeBool\":true}\nesapi.IndexRequest\n\nIndexRequest() RESPONSE:\nStatus: 200 OK\nResult: updated\nVersion: 4\nresMap: map[_id:1 _index:some_index _primary_term:1 _seq_no:36 _shards:map[failed:0 successful:1 total:2] _type:_doc _version:4 forced_refresh:true result:updated]\n\n\n\nDOC _id: 2\n{\"SomeStr\":\"Another Value\",\"SomeInt\":42,\"SomeBool\":false}\nesapi.IndexRequest\n\nIndexRequest() RESPONSE:\nStatus: 200 OK\nResult: updated\nVersion: 18\nresMap: map[_id:2 _index:some_index _primary_term:1 _seq_no:37 _shards:map[failed:0 successful:1 total:2] _type:_doc _version:18 forced_refresh:true result:updated]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-8poiaw3","Type":"NodeParagraph","Properties":{"id":"20230724221215-8poiaw3","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 我们可以在 Kibana 中使用如下的命令来进行查看被导入的文档： **"}]},{"ID":"20230724221215-lyinx8n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-lyinx8n","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"GET some_index/_search\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-34n322b","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724221215-34n322b","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"搜索文档"}]},{"ID":"20230724221215-mna7zwo","Type":"NodeParagraph","Properties":{"id":"20230724221215-mna7zwo","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 我们接下来搜索已经建立好的文档。我们接下来搜索在 SomeStr 这个字段含有 **"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Another"},{"Type":"NodeText","Data":" 的文档。在 main.go 里添加如下的代码："}]},{"ID":"20230724221215-h3gtysc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-h3gtysc","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"    // Search for the indexed document\n    // Build the request body\n    var buf bytes.Buffer\n    query := map[string]interface{}{\n        \"query\": map[string]interface{}{\n            \"match\": map[string]interface{}{\n                \"SomeStr\": \"Another\",\n            },\n        },\n    }\n\n    if err := json.NewEncoder(\u0026buf).Encode(query); err != nil {\n        log.Fatalf(\"Error encoding query: %s\", err)\n    }\n\n    // Perform the search request.\n    res, err = client.Search(\n        client.Search.WithContext(context.Background()),\n        client.Search.WithIndex(\"some_index\"),\n        client.Search.WithBody(\u0026buf),\n        client.Search.WithTrackTotalHits(true),\n        client.Search.WithPretty(),\n    )\n\n    if err != nil {\n        log.Fatalf(\"Error getting response: %s\", err)\n    }\n\n    defer res.Body.Close()\n\n    if res.IsError() {\n        var e map[string]interface{}\n        if err := json.NewDecoder(res.Body).Decode(\u0026e); err != nil {\n            log.Fatalf(\"Error parsing the response body: %s\", err)\n        } else {\n            // Print the response status and error information.\n            log.Fatalf(\"[%s] %s: %s\",\n                res.Status(),\n                e[\"error\"].(map[string]interface{})[\"type\"],\n                e[\"error\"].(map[string]interface{})[\"reason\"],\n            )\n        }\n    }\n\n\n    var  r map[string]interface{}\n    if err := json.NewDecoder(res.Body).Decode(\u0026r); err != nil {\n        log.Fatalf(\"Error parsing the response body: %s\", err)\n    }\n\n    // Print the response status, number of results, and request duration.\n    log.Printf(\n        \"[%s] %d hits; took: %dms\",\n        res.Status(),\n        int(r[\"hits\"].(map[string]interface{})[\"total\"].(map[string]interface{})[\"value\"].(float64)),\n        int(r[\"took\"].(float64)),\n    )\n\n    // Print the ID and document source for each hit.\n    for _, hit := range r[\"hits\"].(map[string]interface{})[\"hits\"].([]interface{}) {\n        log.Printf(\" * ID=%s, %s\", hit.(map[string]interface{})[\"_id\"], hit.(map[string]interface{})[\"_source\"])\n    }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-wp66dof","Type":"NodeParagraph","Properties":{"id":"20230724221215-wp66dof","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 运行上面的代码。我们可以看到如下新添加的结果： **"}]},{"ID":"20230724221215-1hnkouj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-1hnkouj","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"[200 OK] 1 hits; took: 1ms\n\n* ID=2, map[SomeBool:%!s(bool=false) SomeInt:%!s(float64=42) SomeStr:Another Value]\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724221215-29bhxz2","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724221215-29bhxz2","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"删除文档"}]},{"ID":"20230724221215-q7a47o0","Type":"NodeParagraph","Properties":{"id":"20230724221215-q7a47o0","updated":"20230724221215"},"Children":[{"Type":"NodeText","Data":"** 删除一个文档非常容易。在 main.go 文件中，我们添加如下的代码来删除文档 id 为 1 的文档： **"}]},{"ID":"20230724221215-94oju5g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724221215-94oju5g","updated":"20230724221215"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"  // Set up the request object.\n    req := esapi.DeleteRequest{\n        Index:      \"some_index\",\n        DocumentID: strconv.Itoa(1),\n    }\n\n    res, err = req.Do(context.Background(), client)\n    if err != nil {\n      log.Fatalf(\"Error getting response: %s\", err)\n    }\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}