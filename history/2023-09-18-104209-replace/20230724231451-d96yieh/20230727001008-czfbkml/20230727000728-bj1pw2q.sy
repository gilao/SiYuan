{"ID":"20230727000728-bj1pw2q","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f681","id":"20230727000728-bj1pw2q","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230727000728-bj1pw2q\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230727000729-59trajr\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230727000863-g5aehjs\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230727000729-59trajr\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"goroutine,并发,进程间通信方式,Channel,引用类型,Select","title":"08. Channel 通道","updated":"20230727002320"},"Children":[{"ID":"20230727000729-59trajr","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230727000729-59trajr","updated":"20230727000729"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"8. Channel 通道"}]},{"ID":"20230727000730-87ygtbn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000730-87ygtbn","updated":"20230727000730"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Channel 介绍"}]},{"ID":"20230727000731-hpvi0gs","Type":"NodeParagraph","Properties":{"id":"20230727000731-hpvi0gs","updated":"20230727000731"},"Children":[{"Type":"NodeText","Data":"Go语言中的通道（channel）是一种特殊的类型。"},{"Type":"NodeSoftBreak","Data":"\n","Properties":{"id":""}},{"Type":"NodeText","Data":"在任何时候，"},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"同时只能有一个 goroutine 访问通道进行发送和获取数据。"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"goroutine 间通过通道就可以通信。"}]},{"ID":"20230727000732-itavdal","Type":"NodeParagraph","Properties":{"id":"20230727000732-itavdal","updated":"20230727000732"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通道像一个传送带或者队列，总是遵循先入先出（First In First Out）的规则，保证收发数据的顺序。"}]},{"ID":"20230727000733-80xyr97","Type":"NodeParagraph","Properties":{"id":"20230727000733-80xyr97","updated":"20230727000733"},"Children":[{"Type":"NodeText","Data":"（1）channel本身是一个队列，先进先出"}]},{"ID":"20230727000734-8fqaoz6","Type":"NodeParagraph","Properties":{"id":"20230727000734-8fqaoz6","updated":"20230727000734"},"Children":[{"Type":"NodeText","Data":"=="},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（2）线程安全，不需要加锁"},{"Type":"NodeText","Data":"=="}]},{"ID":"20230727000735-j54dlrx","Type":"NodeParagraph","Properties":{"id":"20230727000735-j54dlrx","updated":"20230727000735"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（3）本身是有类型的"},{"Type":"NodeText","Data":"，string, int 等，如果要存多种类型，则定义成 interface类型"}]},{"ID":"20230727000736-nkhff3h","Type":"NodeParagraph","Properties":{"id":"20230727000736-nkhff3h","updated":"20230727000736"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"（4）channel是引用类型，必须make之后才能使用"},{"Type":"NodeText","Data":"，"},{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"一旦 make，它的容量就确定了，不会动态增加！！"},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"它和map，slice不一样"}]},{"ID":"20230727000737-27q8vxq","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000737-27q8vxq","updated":"20230727000737"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"特点"}]},{"ID":"20230727000738-ghbaomh","Type":"NodeParagraph","Properties":{"id":"20230727000738-ghbaomh","updated":"20230727000738"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"（1）一旦初始化容量，就不会改变了。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000739-ey28tm7","Type":"NodeParagraph","Properties":{"id":"20230727000739-ey28tm7","updated":"20230727000739"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"（2）当写满时，不可以写，取空时，不可以取。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000740-6dcs5rn","Type":"NodeParagraph","Properties":{"id":"20230727000740-6dcs5rn","updated":"20230727000740"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"（3）发送将持续阻塞直到数据被接收。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"把数据往通道中发送时，如果接收方一直都没有接收，那么发送操作将持续阻塞。Go 程序运行时能智能地发现一些永远无法发送成功的语句并做出提示"}]},{"ID":"20230727000741-hfr3vnp","Type":"NodeParagraph","Properties":{"id":"20230727000741-hfr3vnp","updated":"20230727000741"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"（4）接收将持续阻塞直到发送方发送数据。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"如果接收方接收时，通道中没有发送方发送数据，接收方也会发生阻塞，直到发送方发送数据为止。"}]},{"ID":"20230727000742-ecqsj71","Type":"NodeParagraph","Properties":{"id":"20230727000742-ecqsj71","updated":"20230727000742"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeMark","Children":[{"Type":"NodeMark2OpenMarker","Data":"=="},{"Type":"NodeText","Data":"（5）每次接收一个元素。通道一次只能接收一个数据元素。"},{"Type":"NodeMark2CloseMarker","Data":"=="}]},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]}]},{"ID":"20230727000743-l1xhmpb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000743-l1xhmpb","updated":"20230727000743"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Channel的特性"}]},{"ID":"20230727000744-053kerp","Type":"NodeTable","Data":"| 操作 | nil   | 已关闭的channel                       | 未关闭有缓冲区的channel                                      | 未关闭无缓冲的channel                             |\n| ---- | ----- | ------------------------------------- | ------------------------------------------------------------ | ------------------------------------------------- |\n| 关闭 | painc | panic                                 | 成功关闭，**然后可以读取缓冲区的值，读取完之后，继续读取到的是 channel 类型的默认值** | 成功关闭，之后**读取到的是 channel 类型的默认值** |\n| 接受 | 阻塞  | 不阻塞，读取到的是channel类型的默认值 | 不阻塞，正常读取值                                           | 阻塞                                              |\n| 发送 | 阻塞  | panic                                 | 不阻塞，正常写入值                                           | 阻塞                                              |","TableAligns":[0,0,0,0,0],"Properties":{"id":"20230727000744-053kerp","updated":"20230727000744"},"Children":[{"Type":"NodeTableHead","Properties":{"id":""},"Children":[{"Type":"NodeTableRow","Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"操作"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"nil"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"已关闭的channel"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"未关闭有缓冲区的channel"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"未关闭无缓冲的channel"}]}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"关闭"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"painc"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"panic"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"成功关闭，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"然后可以读取缓冲区的值，读取完之后，继续读取到的是 channel 类型的默认值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"成功关闭，之后"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"读取到的是 channel 类型的默认值"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"接受"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"阻塞"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不阻塞，读取到的是channel类型的默认值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不阻塞，正常读取值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"阻塞"}]}]},{"Type":"NodeTableRow","TableAligns":[0,0,0,0,0],"Properties":{"id":""},"Children":[{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"发送"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"阻塞"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"panic"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"不阻塞，正常写入值"}]},{"Type":"NodeTableCell","Properties":{"id":""},"Children":[{"Type":"NodeText","Data":"阻塞"}]}]}]},{"ID":"20230727000745-tnke66h","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000745-tnke66h","updated":"20230727000745"},"Children":[{"ID":"20230727000746-z4142k5","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000746-z4142k5","updated":"20230727000746"},"Children":[{"ID":"20230727000747-ucc1ql6","Type":"NodeParagraph","Properties":{"id":"20230727000747-ucc1ql6","updated":"20230727000747"},"Children":[{"Type":"NodeText","Data":"给一个 nil Channel 发送数据，造成永远阻塞；"}]}]},{"ID":"20230727000748-p74ywij","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000748-p74ywij","updated":"20230727000748"},"Children":[{"ID":"20230727000749-oo1jn4g","Type":"NodeParagraph","Properties":{"id":"20230727000749-oo1jn4g","updated":"20230727000749"},"Children":[{"Type":"NodeText","Data":"从一个 nil Channel 接受数据，造成永远阻塞；"}]}]},{"ID":"20230727000750-jd16tpn","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000750-jd16tpn","updated":"20230727000750"},"Children":[{"ID":"20230727000751-72qygzp","Type":"NodeParagraph","Properties":{"id":"20230727000751-72qygzp","updated":"20230727000751"},"Children":[{"Type":"NodeText","Data":"给一个已经关闭的Channel发送数据，引起 panic；"}]}]},{"ID":"20230727000752-w5c37f4","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000752-w5c37f4","updated":"20230727000752"},"Children":[{"ID":"20230727000753-dr5uxhg","Type":"NodeParagraph","Properties":{"id":"20230727000753-dr5uxhg","updated":"20230727000753"},"Children":[{"Type":"NodeText","Data":"从一个已经关闭的Channel接受数据，如果缓冲区为空，则返回零值；"}]}]},{"ID":"20230727000754-0ach547","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000754-0ach547","updated":"20230727000754"},"Children":[{"ID":"20230727000755-69xithn","Type":"NodeParagraph","Properties":{"id":"20230727000755-69xithn","updated":"20230727000755"},"Children":[{"Type":"NodeText","Data":"无缓冲的Channel是同步的，而有缓冲的Channel是非同步的"}]}]}]},{"ID":"20230727000756-09qvqv4","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000756-09qvqv4","updated":"20230727000756"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"channel 类型"}]},{"ID":"20230727000757-1xvk5x9","Type":"NodeParagraph","Properties":{"id":"20230727000757-1xvk5x9","updated":"20230727000757"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":"是 Go 语言中一种特有的类型。声明通道类型变量的格式如下："}]},{"ID":"20230727000758-b7pmyyh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000758-b7pmyyh","updated":"20230727000758"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var 变量名称 chan 元素类型\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000759-7qzof3k","Type":"NodeParagraph","Properties":{"id":"20230727000759-7qzof3k","updated":"20230727000759"},"Children":[{"Type":"NodeText","Data":"其中："}]},{"ID":"20230727000760-xvzewnf","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000760-xvzewnf","updated":"20230727000760"},"Children":[{"ID":"20230727000761-lbp3qdt","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000761-lbp3qdt","updated":"20230727000761"},"Children":[{"ID":"20230727000762-m2dam42","Type":"NodeParagraph","Properties":{"id":"20230727000762-m2dam42","updated":"20230727000762"},"Children":[{"Type":"NodeText","Data":"chan：是关键字"}]}]},{"ID":"20230727000763-h2hr6yd","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000763-h2hr6yd","updated":"20230727000763"},"Children":[{"ID":"20230727000764-isav1gb","Type":"NodeParagraph","Properties":{"id":"20230727000764-isav1gb","updated":"20230727000764"},"Children":[{"Type":"NodeText","Data":"元素类型：是指通道中传递元素的类型"}]}]}]},{"ID":"20230727000765-udrp5ak","Type":"NodeParagraph","Properties":{"id":"20230727000765-udrp5ak","updated":"20230727000765"},"Children":[{"Type":"NodeText","Data":"举几个例子："}]},{"ID":"20230727000766-ras3ucz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000766-ras3ucz","updated":"20230727000766"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var ch1 chan int   // 声明一个传递整型的通道\nvar ch2 chan bool  // 声明一个传递布尔型的通道\nvar ch3 chan []int // 声明一个传递int切片的通道\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000767-5q7yh6z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000767-5q7yh6z","updated":"20230727000767"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"channel 零值"}]},{"ID":"20230727000768-m35sudu","Type":"NodeParagraph","Properties":{"id":"20230727000768-m35sudu","updated":"20230727000768"},"Children":[{"Type":"NodeText","Data":"未初始化的通道类型变量其默认零值是 nil"}]},{"ID":"20230727000769-0a9uzwu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000769-0a9uzwu","updated":"20230727000769"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var ch chan int \nfmt.Println(ch) // \u003cnil\u003e\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000770-iatu4om","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000770-iatu4om","updated":"20230727000770"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"初始化 channel"}]},{"ID":"20230727000771-lo99gvo","Type":"NodeParagraph","Properties":{"id":"20230727000771-lo99gvo","updated":"20230727000771"},"Children":[{"Type":"NodeText","Data":"声明的通道类型变量需要使用内置的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"make"},{"Type":"NodeText","Data":"函数初始化之后才能使用。具体格式如下 ："}]},{"ID":"20230727000772-xswbvt5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000772-xswbvt5","updated":"20230727000772"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"make(chan 元素类型,[缓冲大小])\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000773-5pzka3r","Type":"NodeParagraph","Properties":{"id":"20230727000773-5pzka3r","updated":"20230727000773"},"Children":[{"Type":"NodeText","Data":"其中："}]},{"ID":"20230727000774-o7scf59","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000774-o7scf59","updated":"20230727000774"},"Children":[{"ID":"20230727000775-88ly9ld","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000775-88ly9ld","updated":"20230727000775"},"Children":[{"ID":"20230727000776-a8cwgkg","Type":"NodeParagraph","Properties":{"id":"20230727000776-a8cwgkg","updated":"20230727000776"},"Children":[{"Type":"NodeText","Data":"channel 的缓冲大小是可选的"}]}]}]},{"ID":"20230727000777-ccxz6gp","Type":"NodeParagraph","Properties":{"id":"20230727000777-ccxz6gp","updated":"20230727000777"},"Children":[{"Type":"NodeText","Data":"举几个例子"}]},{"ID":"20230727000778-qdkn5jc","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000778-qdkn5jc","updated":"20230727000778"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"ch4 := make(chan int)\nch5 := make(chan bool, 1)  // 声明一个缓冲区大小为1的通道\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000779-ocvvxco","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000779-ocvvxco","updated":"20230727000779"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"通道的使用"}]},{"ID":"20230727000780-x6yc25z","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000780-x6yc25z","updated":"20230727000780"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"通道的创建"}]},{"ID":"20230727000781-d198nqx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000781-d198nqx","updated":"20230727000781"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"C := make(chan string)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000782-h13tflz","Type":"NodeParagraph","Properties":{"id":"20230727000782-h13tflz","updated":"20230727000782"},"Children":[{"Type":"NodeText","Data":"简短变量赋值"}]},{"ID":"20230727000783-28xmu8x","Type":"NodeParagraph","Properties":{"id":"20230727000783-28xmu8x","updated":"20230727000783"},"Children":[{"Type":"NodeText","Data":"使用内置函数make 创建一个通道，这是使用关键字 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"chan"},{"Type":"NodeText","Data":"指定的"}]},{"ID":"20230727000784-3x1u0c2","Type":"NodeParagraph","Properties":{"id":"20230727000784-3x1u0c2","updated":"20230727000784"},"Children":[{"Type":"NodeText","Data":"关键字 chan 后面的 string 指出这个通道将用于存储字符串数据，这个通道只能收发字符串的值。"}]},{"ID":"20230727000785-h4j1fvm","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000785-h4j1fvm","updated":"20230727000785"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"向通道发送消息"}]},{"ID":"20230727000786-adefwx4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000786-adefwx4","updated":"20230727000786"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"c \u003c- \"Hello World\"\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000787-6xhq7i7","Type":"NodeParagraph","Properties":{"id":"20230727000787-6xhq7i7","updated":"20230727000787"},"Children":[{"Type":"NodeText","Data":"请注意其中的\u003c-，这表示将右边的字符串发送给左边的通道。如果通道被指定为收发字符串，则只能向它发送字符串消息，如果向它发送其他类型的消息将导致错误。"}]},{"ID":"20230727000788-m3m1aku","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000788-m3m1aku","updated":"20230727000788"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"向通道接收消息"}]},{"ID":"20230727000789-1lfgc52","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000789-1lfgc52","updated":"20230727000789"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"msg := \u003c- c  // 从ch中接收值并赋值给变量x\n\u003c- ch\t // 从ch 中接收值，忽略结果\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000790-0b37akd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000790-0b37akd","updated":"20230727000790"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"关闭通道"}]},{"ID":"20230727000791-nye6q48","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000791-nye6q48","updated":"20230727000791"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"close(msg)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000792-3w09yj5","Type":"NodeParagraph","Properties":{"id":"20230727000792-3w09yj5","updated":"20230727000792"},"Children":[{"Type":"NodeText","Data":"close 用来关闭通道，禁止向通道发送消息。"}]},{"ID":"20230727000793-mm2sdfm","Type":"NodeParagraph","Properties":{"id":"20230727000793-mm2sdfm","updated":"20230727000793"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"注意："},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"一个通道值是可以被垃圾回收掉的。通道通常由发送方执行关闭操作，并且只有在接收方明确等待通道关闭的信号时才需要执行关闭操作。它和关闭文件不一样，通常在结束操作之后关闭文件是必须要做的，但关闭通道不是必须的。"}]},{"ID":"20230727000794-vblgp8y","Type":"NodeParagraph","Properties":{"id":"20230727000794-vblgp8y","updated":"20230727000794"},"Children":[{"Type":"NodeText","Data":"关闭后的通道有以下特点："}]},{"ID":"20230727000795-i0vq6k1","Type":"NodeList","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000795-i0vq6k1","updated":"20230727000795"},"Children":[{"ID":"20230727000796-bea9yw5","Type":"NodeListItem","Data":"1","ListData":{"Typ":1,"Tight":true,"Start":1,"Delimiter":46,"Padding":3,"Marker":"MQ==","Num":1},"Properties":{"id":"20230727000796-bea9yw5","updated":"20230727000796"},"Children":[{"ID":"20230727000797-fke3mzt","Type":"NodeParagraph","Properties":{"id":"20230727000797-fke3mzt","updated":"20230727000797"},"Children":[{"Type":"NodeText","Data":"对一个关闭的通道再发送值就会导致 panic。"}]}]},{"ID":"20230727000798-4ijno88","Type":"NodeListItem","Data":"2","ListData":{"Typ":1,"Tight":true,"Start":2,"Delimiter":46,"Padding":3,"Marker":"Mg==","Num":2},"Properties":{"id":"20230727000798-4ijno88","updated":"20230727000798"},"Children":[{"ID":"20230727000799-ltwr7z3","Type":"NodeParagraph","Properties":{"id":"20230727000799-ltwr7z3","updated":"20230727000799"},"Children":[{"Type":"NodeText","Data":"对一个关闭的通道进行接收会一直获取值直到通道为空。"}]}]},{"ID":"20230727000800-swd6ykh","Type":"NodeListItem","Data":"3","ListData":{"Typ":1,"Tight":true,"Start":3,"Delimiter":46,"Padding":3,"Marker":"Mw==","Num":3},"Properties":{"id":"20230727000800-swd6ykh","updated":"20230727000800"},"Children":[{"ID":"20230727000801-v36g3p0","Type":"NodeParagraph","Properties":{"id":"20230727000801-v36g3p0","updated":"20230727000801"},"Children":[{"Type":"NodeText","Data":"对一个关闭的并且没有值的通道执行接收操作会得到对应类型的零值。"}]}]},{"ID":"20230727000802-fk3je7f","Type":"NodeListItem","Data":"4","ListData":{"Typ":1,"Tight":true,"Start":4,"Delimiter":46,"Padding":3,"Marker":"NA==","Num":4},"Properties":{"id":"20230727000802-fk3je7f","updated":"20230727000802"},"Children":[{"ID":"20230727000803-rkax473","Type":"NodeParagraph","Properties":{"id":"20230727000803-rkax473","updated":"20230727000803"},"Children":[{"Type":"NodeText","Data":"关闭一个已经关闭的通道会导致 panic。"}]}]}]},{"ID":"20230727000804-wr7y26f","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000804-wr7y26f","updated":"20230727000804"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"无缓冲的通道"}]},{"ID":"20230727000805-gt8jkl9","Type":"NodeParagraph","Properties":{"id":"20230727000805-gt8jkl9","updated":"20230727000805"},"Children":[{"Type":"NodeText","Data":"无缓冲的通道又称为阻塞的通道。我们来看一下如下代码片段。"}]},{"ID":"20230727000806-fc1m9kn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000806-fc1m9kn","updated":"20230727000806"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\tch := make(chan int)\n\tch \u003c- 10\n\tfmt.Println(\"发送成功\")\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000807-66i1qz8","Type":"NodeParagraph","Properties":{"id":"20230727000807-66i1qz8","updated":"20230727000807"},"Children":[{"Type":"NodeText","Data":"上面这段代码能够通过编译，但是执行的时候会出现以下错误："}]},{"ID":"20230727000808-pl6b094","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"YmFzaA==","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000808-pl6b094","updated":"20230727000808"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"YmFzaA==","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"fatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan send]:\nmain.main()\n        .../main.go:8 +0x54\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000809-ymjjvaw","Type":"NodeParagraph","Properties":{"id":"20230727000809-ymjjvaw","updated":"20230727000809"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"deadlock"},{"Type":"NodeText","Data":"表示我们程序中的 goroutine 都被挂起导致程序死锁了。为什么会出现"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"deadlock"},{"Type":"NodeText","Data":"错误呢？"}]},{"ID":"20230727000810-jl1pm1u","Type":"NodeParagraph","Properties":{"id":"20230727000810-jl1pm1u","updated":"20230727000810"},"Children":[{"Type":"NodeText","Data":"因为我们使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ch := make(chan int)"},{"Type":"NodeText","Data":"创建的是无缓冲的通道，无缓冲的通道只有在有接收方能够接收值的时候才能发送成功，否则会一直处于等待发送的阶段。同理，如果对一个无缓冲通道执行接收操作时，没有任何向通道中发送值的操作那么也会导致接收操作阻塞。就像田径比赛中的4x100接力赛，想要完成交棒必须有一个能够接棒的运动员，否则只能等待。简单来说就是无缓冲的通道必须有至少一个接收方才能发送成功。"}]},{"ID":"20230727000811-07cme7b","Type":"NodeParagraph","Properties":{"id":"20230727000811-07cme7b","updated":"20230727000811"},"Children":[{"Type":"NodeText","Data":"上面的代码会阻塞在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ch \u0026lt;- 10"},{"Type":"NodeText","Data":"这一行代码形成死锁，那如何解决这个问题呢？"}]},{"ID":"20230727000812-w2aq8yy","Type":"NodeParagraph","Properties":{"id":"20230727000812-w2aq8yy","updated":"20230727000812"},"Children":[{"Type":"NodeText","Data":"其中一种可行的方法是创建一个 goroutine 去接收值，例如："}]},{"ID":"20230727000813-2sjw7ly","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000813-2sjw7ly","updated":"20230727000813"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func recv(c chan int) {\n\tret := \u003c-c\n\tfmt.Println(\"接收成功\", ret)\n}\n\nfunc main() {\n\tch := make(chan int)\n\tgo recv(ch) // 创建一个 goroutine 从通道接收值\n\tch \u003c- 10\n\tfmt.Println(\"发送成功\")\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000814-qwx39m2","Type":"NodeParagraph","Properties":{"id":"20230727000814-qwx39m2","updated":"20230727000814"},"Children":[{"Type":"NodeText","Data":"首先无缓冲通道"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ch"},{"Type":"NodeText","Data":"上的发送操作会阻塞，直到另一个 goroutine 在该通道上执行接收操作，这时数字10才能发送成功，两个 goroutine 将继续执行。相反，如果接收操作先执行，接收方所在的 goroutine 将阻塞，直到 main goroutine 中向该通道发送数字10。"}]},{"ID":"20230727000815-h4z4wvw","Type":"NodeParagraph","Properties":{"id":"20230727000815-h4z4wvw","updated":"20230727000815"},"Children":[{"Type":"NodeText","Data":"使用无缓冲通道进行通信将导致发送和接收的 goroutine 同步化。因此，无缓冲通道也被称为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"同步通道"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727000816-vaxoovn","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000816-vaxoovn","updated":"20230727000816"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"有缓冲的通道"}]},{"ID":"20230727000817-uz3oy77","Type":"NodeParagraph","Properties":{"id":"20230727000817-uz3oy77","updated":"20230727000817"},"Children":[{"Type":"NodeText","Data":"还有另外一种解决上面死锁问题的方法，那就是使用有缓冲区的通道。我们可以在使用 make 函数初始化通道时，可以为其指定通道的容量，例如："}]},{"ID":"20230727000818-q01hf17","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000818-q01hf17","updated":"20230727000818"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func main() {\n\tch := make(chan int, 1) // 创建一个容量为1的有缓冲区通道\n\tch \u003c- 10\n\tfmt.Println(\"发送成功\")\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000819-xs1td45","Type":"NodeParagraph","Properties":{"id":"20230727000819-xs1td45","updated":"20230727000819"},"Children":[{"Type":"NodeText","Data":"只要通道的容量大于零，那么该通道就属于有缓冲的通道，通道的容量表示通道中最大能存放的元素数量。当通道内已有元素数达到最大容量后，再向通道执行发送操作就会阻塞，除非有从通道执行接收操作。就像你小区的快递柜只有那么个多格子，格子满了就装不下了，就阻塞了，等到别人取走一个快递员就能往里面放一个。"}]},{"ID":"20230727000820-1q68k4i","Type":"NodeParagraph","Properties":{"id":"20230727000820-1q68k4i","updated":"20230727000820"},"Children":[{"Type":"NodeText","Data":"我们可以使用内置的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"len"},{"Type":"NodeText","Data":"函数获取通道内元素的数量，使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"cap"},{"Type":"NodeText","Data":"函数获取通道的容量，虽然我们很少会这么做。"}]},{"ID":"20230727000821-xiyiraa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000821-xiyiraa","updated":"20230727000821"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"多返回值模式"}]},{"ID":"20230727000822-cro4i27","Type":"NodeParagraph","Properties":{"id":"20230727000822-cro4i27","updated":"20230727000822"},"Children":[{"Type":"NodeText","Data":"当向通道中发送完数据时，我们可以通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"close"},{"Type":"NodeText","Data":"函数来关闭通道。当一个通道被关闭后，再往该通道发送值会引发"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"panic"},{"Type":"NodeText","Data":"，从该通道取值的操作会先取完通道中的值。通道内的值被接收完后再对通道执行接收操作得到的值会一直都是对应元素类型的零值。那我们如何判断一个通道是否被关闭了呢？"}]},{"ID":"20230727000823-q3mo7l0","Type":"NodeParagraph","Properties":{"id":"20230727000823-q3mo7l0","updated":"20230727000823"},"Children":[{"Type":"NodeText","Data":"对一个通道执行接收操作时支持使用如下多返回值模式。"}]},{"ID":"20230727000824-di44bh9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000824-di44bh9","updated":"20230727000824"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"value, ok := \u003c- ch\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000825-ce9732s","Type":"NodeParagraph","Properties":{"id":"20230727000825-ce9732s","updated":"20230727000825"},"Children":[{"Type":"NodeText","Data":"其中："}]},{"ID":"20230727000826-yvg35vb","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000826-yvg35vb","updated":"20230727000826"},"Children":[{"ID":"20230727000827-pmhz3rf","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000827-pmhz3rf","updated":"20230727000827"},"Children":[{"ID":"20230727000828-ye1usak","Type":"NodeParagraph","Properties":{"id":"20230727000828-ye1usak","updated":"20230727000828"},"Children":[{"Type":"NodeText","Data":"value：从通道中取出的值，如果通道被关闭则返回对应类型的零值。"}]}]},{"ID":"20230727000829-w9c42ck","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000829-w9c42ck","updated":"20230727000829"},"Children":[{"ID":"20230727000830-q5q2sak","Type":"NodeParagraph","Properties":{"id":"20230727000830-q5q2sak","updated":"20230727000830"},"Children":[{"Type":"NodeText","Data":"ok：通道ch关闭时返回 false，否则返回 true。"}]}]}]},{"ID":"20230727000831-xn4ruii","Type":"NodeParagraph","Properties":{"id":"20230727000831-xn4ruii","updated":"20230727000831"},"Children":[{"Type":"NodeText","Data":"下面代码片段中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"f2"},{"Type":"NodeText","Data":"函数会循环从通道"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ch"},{"Type":"NodeText","Data":"中接收所有值，直到通道被关闭后退出。"}]},{"ID":"20230727000832-d7e515x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000832-d7e515x","updated":"20230727000832"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func f2(ch chan int) {\n\tfor {\n\t\tv, ok := \u003c-ch\n\t\tif !ok {\n\t\t\tfmt.Println(\"通道已关闭\")\n\t\t\tbreak\n\t\t}\n\t\tfmt.Printf(\"v:%#v ok:%#v\\n\", v, ok)\n\t}\n}\n\nfunc main() {\n\tch := make(chan int, 2)\n\tch \u003c- 1\n\tch \u003c- 2\n\tclose(ch)\n\tf2(ch)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000833-mmer18h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000833-mmer18h","updated":"20230727000833"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"for range接收值"}]},{"ID":"20230727000834-0rc2izf","Type":"NodeParagraph","Properties":{"id":"20230727000834-0rc2izf","updated":"20230727000834"},"Children":[{"Type":"NodeText","Data":"通常我们会选择使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for range"},{"Type":"NodeText","Data":"循环从通道中接收值，当通道被关闭后，会在通道内的所有值被接收完毕后会自动退出循环。上面那个示例我们使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"for range"},{"Type":"NodeText","Data":"改写后会很简洁。"}]},{"ID":"20230727000835-53wh7bj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000835-53wh7bj","updated":"20230727000835"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func f3(ch chan int) {\n\tfor v := range ch {\n\t\tfmt.Println(v)\n\t}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000836-7tsds8c","Type":"NodeParagraph","Properties":{"id":"20230727000836-7tsds8c","updated":"20230727000836"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"注意：目前Go语言中并没有提供一个不对通道进行读取操作就能判断通道是否被关闭的方法。不能简单的通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"len(ch)"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"操作来判断通道是否被关闭。"}]},{"ID":"20230727000837-wvjj250","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000837-wvjj250","updated":"20230727000837"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"单向通道"}]},{"ID":"20230727000838-1xjx3lz","Type":"NodeParagraph","Properties":{"id":"20230727000838-1xjx3lz","updated":"20230727000838"},"Children":[{"Type":"NodeText","Data":"在某些场景下我们可能会将通道作为参数在多个任务函数间进行传递，通常我们会选择在不同的任务函数中对通道的使用进行限制，比如限制通道在某个函数中只能执行发送或只能执行接收操作。想象一下，我们现在有"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"和"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"两个函数，其中"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"函数会返回一个通道，并且会持续将符合条件的数据发送至该通道，并在发送完成后将该通道关闭。而"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"函数的任务是从通道中接收值进行计算，这两个函数之间通过"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Processer"},{"Type":"NodeText","Data":"函数返回的通道进行通信。完整的示例代码如下。"}]},{"ID":"20230727000839-u5qr83f","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000839-u5qr83f","updated":"20230727000839"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"fmt\"\n)\n\n// Producer 返回一个通道\n// 并持续将符合条件的数据发送至返回的通道中\n// 数据发送完成后会将返回的通道关闭\nfunc Producer() chan int {\n\tch := make(chan int, 2)\n\t// 创建一个新的goroutine执行发送数据的任务\n\tgo func() {\n\t\tfor i := 0; i \u003c 10; i++ {\n\t\t\tif i%2 == 1 {\n\t\t\t\tch \u003c- i\n\t\t\t}\n\t\t}\n\t\tclose(ch) // 任务完成后关闭通道\n\t}()\n\n\treturn ch\n}\n\n// Consumer 从通道中接收数据进行计算\nfunc Consumer(ch chan int) int {\n\tsum := 0\n\tfor v := range ch {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tch := Producer()\n\n\tres := Consumer(ch)\n\tfmt.Println(res) // 25\n\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000840-qoaopvg","Type":"NodeParagraph","Properties":{"id":"20230727000840-qoaopvg","updated":"20230727000840"},"Children":[{"Type":"NodeText","Data":"从上面的示例代码中可以看出正常情况下"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"函数中只会对通道进行接收操作，但是这不代表不可以在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"函数中对通道进行发送操作。作为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"函数的提供者，我们在返回通道的时候可能只希望调用方拿到返回的通道后只能对其进行接收操作。但是我们没有办法阻止在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Consumer"},{"Type":"NodeText","Data":"函数中对通道进行发送操作。"}]},{"ID":"20230727000841-hredrjf","Type":"NodeParagraph","Properties":{"id":"20230727000841-hredrjf","updated":"20230727000841"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"Go语言中提供了单向通道来处理这种需要限制通道只能进行某种操作的情况。"}]},{"ID":"20230727000842-fsu5xe3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000842-fsu5xe3","updated":"20230727000842"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"\u003c- chan int // 只接收通道，只能接收不能发送\nchan \u003c- int // 只发送通道，只能发送不能接收\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000843-ss4jdx3","Type":"NodeParagraph","Properties":{"id":"20230727000843-ss4jdx3","updated":"20230727000843"},"Children":[{"Type":"NodeText","Data":"其中，箭头"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\u0026lt;-"},{"Type":"NodeText","Data":"和关键字"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"chan"},{"Type":"NodeText","Data":"的相对位置表明了当前通道允许的操作，这种限制将在编译阶段进行检测。另外对一个只接收通道执行close也是不允许的，因为默认通道的关闭操作应该由发送方来完成。"}]},{"ID":"20230727000844-2k37z3m","Type":"NodeParagraph","Properties":{"id":"20230727000844-2k37z3m","updated":"20230727000844"},"Children":[{"Type":"NodeText","Data":"我们使用单向通道将上面的示例代码进行如下改造"}]},{"ID":"20230727000845-boqawxk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000845-boqawxk","updated":"20230727000845"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// Producer2 返回一个接收通道\nfunc Producer2() \u003c-chan int {\n\tch := make(chan int, 2)\n\t// 创建一个新的goroutine执行发送数据的任务\n\tgo func() {\n\t\tfor i := 0; i \u003c 10; i++ {\n\t\t\tif i%2 == 1 {\n\t\t\t\tch \u003c- i\n\t\t\t}\n\t\t}\n\t\tclose(ch) // 任务完成后关闭通道\n\t}()\n\n\treturn ch\n}\n\n// Consumer2 参数为接收通道\nfunc Consumer2(ch \u003c-chan int) int {\n\tsum := 0\n\tfor v := range ch {\n\t\tsum += v\n\t}\n\treturn sum\n}\n\nfunc main() {\n\tch2 := Producer2()\n  \n\tres2 := Consumer2(ch2)\n\tfmt.Println(res2) // 25\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000846-b1ob1n9","Type":"NodeParagraph","Properties":{"id":"20230727000846-b1ob1n9","updated":"20230727000846"},"Children":[{"Type":"NodeText","Data":"**这一次， "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"函数返回的是一个只接收通道，这就从代码层面限制了该函数返回的通道只能进行接收操作，保证了数据安全。**很多读者看到这个示例可能会觉着这样的限制是多余的，但是试想一下如果"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"Producer"},{"Type":"NodeText","Data":"函数可以在其他地方被其他人调用，你该如何限制他人不对该通道执行发送操作呢？并且返回限制操作的单向通道也会让代码语义更清晰、更易读。"}]},{"ID":"20230727000847-fqs45km","Type":"NodeParagraph","Properties":{"id":"20230727000847-fqs45km","updated":"20230727000847"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"在函数传参及任何赋值操作中全向通道（正常通道）可以转换为单向通道，但是无法反向转换。"}]},{"ID":"20230727000848-uwfnen4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000848-uwfnen4","updated":"20230727000848"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"var ch3 = make(chan int, 1)\nch3 \u003c- 10\nclose(ch3)\nConsumer2(ch3) // 函数传参时将ch3转为单向通道\n\nvar ch4 = make(chan int, 1)\nch4 \u003c- 10\nvar ch5 \u003c-chan int // 声明一个只接收通道ch5\nch5 = ch4          // 变量赋值时将ch4转为单向通道\n\u003c-ch50\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000849-mlejv8n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000849-mlejv8n","updated":"20230727000849"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"阻塞和流程控制"}]},{"ID":"20230727000850-o4oaxw9","Type":"NodeParagraph","Properties":{"id":"20230727000850-o4oaxw9","updated":"20230727000850"},"Children":[{"Type":"NodeText","Data":"Goroutine会立即返回（非阻塞），因此要让进程处于阻塞状态，必须采用一些流程控制技巧。例如，从通道接收并打印消息的程序需要阻塞，以免终止。"}]},{"ID":"20230727000851-d32xaji","Type":"NodeParagraph","Properties":{"id":"20230727000851-d32xaji","updated":"20230727000851"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"\u0026lt;-位于关键字chan左边时，表示通道在函数内是只读的；\u0026lt;-位于关键字chan右边时，表示通道在函数内是只写的；没有指定\u0026lt;-时，表示通道是可读写的。"}]},{"ID":"20230727000852-0nexi2y","Type":"NodeParagraph","Properties":{"id":"20230727000852-0nexi2y","updated":"20230727000852"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"通过指定通道访问权限，有助于确保通道中数据的完整性，还可指定程序的哪部分可向通道发送数据或接收来自通道的数据。"}]},{"ID":"20230727000853-opylyyy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000853-opylyyy","updated":"20230727000853"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"fmt\"\n)\n\n// 初始化一个只写入的通道\nfunc produce(ch chan\u003c- int, number int) {\n    for i := 1; i \u003c= number; i++ {\n        ch \u003c- i // 写入数据到通道\n    }\n    close(ch) // 关闭通道\n}\n\n// 初始化一个只读取的通道\nfunc consume(ch \u003c-chan int) {\n    for v := range ch { // 从通道中读取数据\n        fmt.Println(v)\n    }\n}\n\nfunc main() {\n    var ch chan int = make(chan int) // 创建一个可读写的通道\n\n    go produce(ch, 10) // 只向通道写入数据\n    consume(ch) // 只从通道中读取数据\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000854-v97h27p","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000854-v97h27p","updated":"20230727000854"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"使用select 语句"}]},{"ID":"20230727000855-6tyr9l3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000855-6tyr9l3","updated":"20230727000855"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"Channel1 := make(chan string)\nChannel2 := make(chan string)\n\nselect {\n　　case msg1 := \u003c-Channel1:\n　　　　fmt.Println(\"received\", msg1)\n　　case msg2 := \u003c-Channel2:\n　　　　fmt.Println(\"received\", msg2)\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000856-a08byf8","Type":"NodeParagraph","Properties":{"id":"20230727000856-a08byf8","updated":"20230727000856"},"Children":[{"Type":"NodeText","Data":"如果从通道Channel1那里收到了消息，将执行第一条case语句；如果从通道Channel2那里收到了消息，将执行第二条case语句。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"具体执行哪条case语句，取决于消息到达的时间，哪条消息最先到达决定了将执行哪条case语句。通常，接下来收到的其他消息将被丢弃。收到一条消息后，select语句将不再阻塞。"}]},{"ID":"20230727000857-akww8c1","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000857-akww8c1","updated":"20230727000857"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"Channel 底层数组"}]},{"ID":"20230727000858-c8nus8o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000858-c8nus8o","updated":"20230727000858"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"hchan对象"}]},{"ID":"20230727000859-37rrv0y","Type":"NodeParagraph","Properties":{"id":"20230727000859-37rrv0y","updated":"20230727000859"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"hchan"},{"Type":"NodeText","Data":" 对象表示运行时的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":"。"}]},{"ID":"20230727000860-39ys9p8","Type":"NodeParagraph","Properties":{"id":"20230727000860-39ys9p8","updated":"20230727000860"},"Children":[{"Type":"NodeText","Data":"对于无缓冲 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":" 来说，发送队列和接收队列至少有一个为空，一个无缓冲 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":" 和一个阻塞在该 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":" 上面的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"goroutine"},{"Type":"NodeText","Data":"，使用 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"select"},{"Type":"NodeText","Data":" 语句发送和接收。"}]},{"ID":"20230727000861-bauzhgl","Type":"NodeParagraph","Properties":{"id":"20230727000861-bauzhgl","updated":"20230727000861"},"Children":[{"Type":"NodeText","Data":"对于有缓冲 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":" 来说，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"qcount \u0026gt; 0"},{"Type":"NodeText","Data":" 意味着接收队列为空，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"qcount \u0026lt; dataqsiz"},{"Type":"NodeText","Data":" 意味着发送队列为空。"}]},{"ID":"20230727000862-27mgq1e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000862-27mgq1e","updated":"20230727000862"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type hchan struct {\n qcount   uint           // channel 元素数量\n dataqsiz uint           // channel 缓冲区环形队列长度\n buf      unsafe.Pointer // 指向缓冲区的底层数组 (针对有缓冲的 channel)\n elemsize uint16         // channel 元素大小\n closed   uint32         // 是否关闭\n elemtype *_type         // channel 元素类型\n sendx    uint           // 当前已发送元素在队列中的索引\n recvx    uint           // 当前已接收元素在队列中的索引\n recvq    waitq          // 接收 goroutine 队列 (数据结构是链表)\n sendq    waitq          // 发送 goroutine 队列 (数据结构是链表)\n \n // lock 保护结构体中的所有字段，以及 sudogs 对象中被当前 channel 阻塞的几个字段\n // 不要在持有锁时修改另一个 goroutine 的状态（特别是没有进入 ready 状态的 goroutine）\n // 因为这会导致栈收缩而发生死锁\n lock mutex\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000863-g5aehjs","Type":"NodeParagraph","Properties":{"id":"20230727000863-g5aehjs","updated":"20230727000863"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"image-20230601005627527","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\image-20230601005627527.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000864-f35ezib","Type":"NodeParagraph","Properties":{"id":"20230727000864-f35ezib","updated":"20230727000864"},"Children":[{"Type":"NodeText","Data":"上面的图片展示了一个典型的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":" 数据结构图，其中各元素表示为:"}]},{"ID":"20230727000865-p8rs7qt","Type":"NodeList","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000865-p8rs7qt","updated":"20230727000865"},"Children":[{"ID":"20230727000866-qn4hhvs","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000866-qn4hhvs","updated":"20230727000866"},"Children":[{"ID":"20230727000867-3xt6xdc","Type":"NodeParagraph","Properties":{"id":"20230727000867-3xt6xdc","updated":"20230727000867"},"Children":[{"Type":"NodeText","Data":"缓冲区环形队列长度为 8, 也就是最多可以存放 8 个数据"}]}]},{"ID":"20230727000868-b8p15jc","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000868-b8p15jc","updated":"20230727000868"},"Children":[{"ID":"20230727000869-04cdijy","Type":"NodeParagraph","Properties":{"id":"20230727000869-04cdijy","updated":"20230727000869"},"Children":[{"Type":"NodeText","Data":"发送索引指向 7，接收索引指向 0，说明当前缓存队列已满，无法再放入数据了，此时新的发送/接收 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"goroutine"},{"Type":"NodeText","Data":" 会进入发送/接收队列"}]}]},{"ID":"20230727000870-005phbm","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000870-005phbm","updated":"20230727000870"},"Children":[{"ID":"20230727000871-4r48tt7","Type":"NodeParagraph","Properties":{"id":"20230727000871-4r48tt7","updated":"20230727000871"},"Children":[{"Type":"NodeText","Data":"发送队列中有 3 个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"goroutine"},{"Type":"NodeText","Data":" 等待发送"}]}]},{"ID":"20230727000872-ctzstpl","Type":"NodeListItem","Data":"-","ListData":{"Tight":true,"BulletChar":45,"Padding":2,"Marker":"LQ==","Num":-1},"Properties":{"id":"20230727000872-ctzstpl","updated":"20230727000872"},"Children":[{"ID":"20230727000873-lxepcc2","Type":"NodeParagraph","Properties":{"id":"20230727000873-lxepcc2","updated":"20230727000873"},"Children":[{"Type":"NodeText","Data":"接收队列中有 5 个 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"goroutine"},{"Type":"NodeText","Data":" 等待接收"}]}]}]},{"ID":"20230727000874-tka55nd","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20230727000874-tka55nd","updated":"20230727000874"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"### ","Properties":{"id":""}},{"Type":"NodeText","Data":"waitq对象"}]},{"ID":"20230727000875-j18ntgo","Type":"NodeParagraph","Properties":{"id":"20230727000875-j18ntgo","updated":"20230727000875"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"waitq"},{"Type":"NodeText","Data":" 对象表示因为 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"channel"},{"Type":"NodeText","Data":" 缓冲区空间不足而陷入等待的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"goroutine"},{"Type":"NodeText","Data":" 发送/接收队列, 数据结构是双向链表，其中头节点和尾节点都是 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sudog"},{"Type":"NodeText","Data":" 对象，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"sudog"},{"Type":"NodeText","Data":" 对象的字段和具体作用在之前的 "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"GMP 调度器 - 数据结构"},{"Type":"NodeText","Data":" 一文中已经讲过，这里不再赘述。"}]},{"ID":"20230727000876-22leuch","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000876-22leuch","updated":"20230727000876"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"type waitq struct {\n    first\t*sudog\n    last\t*sudog\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000877-uuj86e3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000877-uuj86e3","updated":"20230727000877"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"总结"}]},{"ID":"20230727000878-z27m7xh","Type":"NodeParagraph","Properties":{"id":"20230727000878-z27m7xh","updated":"20230727000878"},"Children":[{"Type":"NodeText","Data":"下面的表格中总结了对不同状态下的通道执行相应操作的结果。"}]},{"ID":"20230727000879-gnfd088","Type":"NodeParagraph","Properties":{"id":"20230727000879-gnfd088","updated":"20230727000879"},"Children":[{"Type":"NodeImage","Properties":{"id":""},"Children":[{"Type":"NodeBang","Data":"!","Properties":{"id":""}},{"Type":"NodeOpenBracket","Data":"[","Properties":{"id":""}},{"Type":"NodeLinkText","Data":"img","Properties":{"id":""}},{"Type":"NodeCloseBracket","Data":"]","Properties":{"id":""}},{"Type":"NodeOpenParen","Data":"(","Properties":{"id":""}},{"Type":"NodeLinkDest","Data":"E:\\Typora picture\\channel.png","Properties":{"id":""}},{"Type":"NodeCloseParen","Data":")","Properties":{"id":""}}]}]},{"ID":"20230727000880-qahyk5x","Type":"NodeParagraph","Properties":{"id":"20230727000880-qahyk5x","updated":"20230727000880"},"Children":[{"Type":"NodeStrong","Children":[{"Type":"NodeStrongA6kOpenMarker","Data":"**"},{"Type":"NodeText","Data":"注意："},{"Type":"NodeStrongA6kCloseMarker","Data":"**"}]},{"Type":"NodeText","Data":"对已经关闭的通道再执行 close 也会引发 panic。"}]},{"ID":"20230727000881-6ypjlm9","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230727000881-6ypjlm9","updated":"20230727000881"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"通道误用示例"}]},{"ID":"20230727000882-ep0u5f8","Type":"NodeParagraph","Properties":{"id":"20230727000882-ep0u5f8","updated":"20230727000882"},"Children":[{"Type":"NodeText","Data":"示例一"}]},{"ID":"20230727000883-izr9u8d","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000883-izr9u8d","updated":"20230727000883"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// demo1 通道误用导致的bug\nfunc demo1() {\n\twg := sync.WaitGroup{}\n\n\tch := make(chan int, 10)\n\tfor i := 0; i \u003c 10; i++ {\n\t\tch \u003c- i\n\t}\n\tclose(ch)\n\n\twg.Add(3)\n\tfor j := 0; j \u003c 3; j++ {\n\t\tgo func() {\n\t\t\tfor {\n\t\t\t\ttask := \u003c-ch\n\t\t\t\t// 这里假设对接收的数据执行某些操作\n\t\t\t\tfmt.Println(task)\n\t\t\t}\n\t\t\twg.Done()\n\t\t}()\n\t}\n\twg.Wait()\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000884-gxiggst","Type":"NodeParagraph","Properties":{"id":"20230727000884-gxiggst","updated":"20230727000884"},"Children":[{"Type":"NodeText","Data":"将上述代码编译执行后，匿名函数所在的 goroutine 并不会按照预期在通道被关闭后退出。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"因为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"task := \u0026lt;- ch"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"的接收操作在通道被关闭后会一直接收到零值，而不会退出。此处的接收操作应该使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"task, ok := \u0026lt;- ch"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"，通过判断布尔值"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong code","TextMarkTextContent":"ok"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"为假时退出；或者使用select 来处理通道。"}]},{"ID":"20230727000885-le39fyt","Type":"NodeParagraph","Properties":{"id":"20230727000885-le39fyt","updated":"20230727000885"},"Children":[{"Type":"NodeText","Data":"示例二"}]},{"ID":"20230727000886-hoptfi8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockInfo":"Z28=","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230727000886-hoptfi8","updated":"20230727000886"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28=","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"// demo2 通道误用导致的bug\nfunc demo2() {\n\tch := make(chan string)\n\tgo func() {\n\t\t// 这里假设执行一些耗时的操作\n\t\ttime.Sleep(3 * time.Second)\n\t\tch \u003c- \"job result\"\n\t}()\n\n\tselect {\n\tcase result := \u003c-ch:\n\t\tfmt.Println(result)\n\tcase \u003c-time.After(time.Second): // 较小的超时时间\n\t\treturn\n\t}\n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230727000887-xsky28y","Type":"NodeParagraph","Properties":{"id":"20230727000887-xsky28y","updated":"20230727000887"},"Children":[{"Type":"NodeText","Data":"上述代码片段可能导致 goroutine 泄露（goroutine 并未按预期退出并销毁）。由于 select 命中了超时逻辑，导致通道没有消费者（无接收操作），而其定义的通道为无缓冲通道，因此 goroutine 中的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"ch \u0026lt;- \u0026quot;job result\u0026quot;"},{"Type":"NodeText","Data":"操作会一直阻塞，最终导致 goroutine 泄露。"}]}]}