{"ID":"20231204205722-1cstga2","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f4e6","id":"20231204205722-1cstga2","tags":"深入理解GO标准库,公众号-凉凉的知识库,Go-http","title":"深入理解Go标准库 http server 的优雅关闭","updated":"20231211205627"},"Children":[{"ID":"20231204205745-wy1w9xc","Type":"NodeParagraph","Properties":{"id":"20231204205745-wy1w9xc"}},{"ID":"20231204205722-cl0vmm4","Type":"NodeParagraph","Properties":{"id":"20231204205722-cl0vmm4","updated":"20231211201659"},"Children":[{"Type":"NodeText","Data":"还记得怎么启动一个HTTP Server么？"}]},{"ID":"20231211201700-ggrpizr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211201700-ggrpizr","updated":"20231211201719"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"net\"\n\t\"net/http\"\n)\n\nfunc main() {\n\t// 方式1\n\terr := http.ListenAndServe(\":8080\", nil)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t// 方式2\n\t// server := \u0026http.Server{Addr: \":8080\"}\n\t// err := server.ListenAndServe()\n\t// if err != nil {\n\t//  panic(err)\n\t// }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211201737-s7tpwxv","Type":"NodeParagraph","Properties":{"id":"20231211201737-s7tpwxv","updated":"20231211201737"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ListenAndServe"},{"Type":"NodeText","Data":"​在不出错的情况下，会一直阻塞在这个位置，如何停止这样的一个HTTP Server呢？"}]},{"ID":"20231211201737-si0b1c6","Type":"NodeParagraph","Properties":{"id":"20231211201737-si0b1c6","updated":"20231211201737"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CTRL+C"},{"Type":"NodeText","Data":"​是结束一个进程常用的方式，它和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"kill pid"},{"Type":"NodeText","Data":"​或者"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"kill -l 15 pid"},{"Type":"NodeText","Data":"​命令本质上没有任何区别，他们都是向进程发送了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SIGTERM"},{"Type":"NodeText","Data":"​信号。因为程序没有设置对"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SIGTERM"},{"Type":"NodeText","Data":"​信号的处理程序，所以系统默认的信号处理程序结束了我们的进程"}]},{"ID":"20231211201746-n3aaama","Type":"NodeParagraph","Properties":{"id":"20231211201746-n3aaama","updated":"20231211201746"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"这会带来什么问题？"}]},{"ID":"20231211201746-lbjqm9j","Type":"NodeParagraph","Properties":{"id":"20231211201746-lbjqm9j","updated":"20231211201746"},"Children":[{"Type":"NodeText","Data":"在服务器的进程被杀死时，我们的服务器可能正在处理请求并未完成。因此对于客户端产生了一个预期外的错误"}]},{"ID":"20231211201747-wc9c20k","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211201747-wc9c20k","updated":"20231211201753"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"curl -v --max-time 4 127.0.0.1:8009/foo\n\n* Connection #0 to host 127.0.0.1 left intact\n*   Trying 127.0.0.1:8009...\n* Connected to 127.0.0.1 (127.0.0.1) port 8009 (#0)\n\u003e GET /foo HTTP/1.1\n\u003e Host: 127.0.0.1:8009\n\u003e User-Agent: curl/7.86.0\n\u003e Accept: */*\n\u003e \n\n* Empty reply from server\n* Closing connection 0\ncurl: (52) Empty reply from server\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211201759-nw9biig","Type":"NodeParagraph","Properties":{"id":"20231211201759-nw9biig","updated":"20231211201759"},"Children":[{"Type":"NodeText","Data":"如果有nginx代理，因为upstream的中断，nginx会产生502的响应"}]},{"ID":"20231211201800-s1a8iep","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211201800-s1a8iep","updated":"20231211201805"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"curl -v --max-time 11 127.0.0.1:8010/foo\n*   Trying 127.0.0.1:8010...\n* Connected to 127.0.0.1 (127.0.0.1) port 8010 (#0)\n\u003e GET /foo HTTP/1.1\n\u003e Host: 127.0.0.1:8010\n\u003e User-Agent: curl/7.86.0\n\u003e Accept: */*\n\u003e \n* Mark bundle as not supporting multiuse\n\u003c HTTP/1.1 502 Bad Gateway\n\u003c Server: nginx/1.25.3\n\u003c Date: Sat, 02 Dec 2023 10:14:33 GMT\n\u003c Content-Type: text/html\n\u003c Content-Length: 497\n\u003c Connection: keep-alive\n\u003c ETag: \"6537cac7-1f1\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211201811-w7nj2pa","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231211201811-w7nj2pa","updated":"20231211201811"},"Children":[{"Type":"NodeText","Data":"优雅关闭的初步实现"}]},{"ID":"20231211201811-t1oaxyt","Type":"NodeParagraph","Properties":{"id":"20231211201811-t1oaxyt","updated":"20231211201811"},"Children":[{"Type":"NodeText","Data":"优雅关闭（"},{"Type":"NodeTextMark","TextMarkType":"em","TextMarkTextContent":"graceful shutdown"},{"Type":"NodeText","Data":"）指的是我们的HTTP Server关闭前既拒绝新来的请求，又正确的处理完正在进行中的请求，随后进程退出。如何实现？"}]},{"ID":"20231211201811-nprw0dr","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211201811-nprw0dr","updated":"20231211201923"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"异步启动HTTP server"}]},{"ID":"20231211201811-qli369x","Type":"NodeParagraph","Properties":{"id":"20231211201811-qli369x","updated":"20231211201811"},"Children":[{"Type":"NodeText","Data":"因为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ListenAndServe"},{"Type":"NodeText","Data":"​会阻塞goroutine，如果还需要让代码继续执行，我们需要把它放到一个异步的goroutine中"}]},{"ID":"20231211201815-i48lkl4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211201815-i48lkl4","updated":"20231211201904"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"go func() {\n  if err := srv.ListenAndServe();err != nil {\n      panic(err)\n  }\n}()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211201910-6m97h30","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211201910-6m97h30","updated":"20231211201910"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"第二步：设置"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"SIGTERM"},{"Type":"NodeText","Data":"​​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"信号处理程序"}]},{"ID":"20231211201910-v3anslh","Type":"NodeParagraph","Properties":{"id":"20231211201910-v3anslh","updated":"20231211201910"},"Children":[{"Type":"NodeText","Data":"操作系统默认的信号处理程序是直接结束进程，因此要实现graceful shutdown，要设置程序自己的信号处理程序。"}]},{"ID":"20231211201910-eoehui4","Type":"NodeParagraph","Properties":{"id":"20231211201910-eoehui4","updated":"20231211201910"},"Children":[{"Type":"NodeText","Data":"Go中可以使用如下的方式来处理信号"}]},{"ID":"20231211201910-7bnkgyt","Type":"NodeList","ListData":{},"Properties":{"id":"20231211201910-7bnkgyt","updated":"20231211201910"},"Children":[{"ID":"20231211201910-gtwvm0q","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231211201910-gtwvm0q","updated":"20231211201910"},"Children":[{"ID":"20231211201910-rfjlaix","Type":"NodeParagraph","Properties":{"id":"20231211201910-rfjlaix","updated":"20231211201910"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"signal.Notify"},{"Type":"NodeText","Data":"​来设置我们要监听的信号，一旦有程序设定的信号发生时，信号会被写入channel中"}]}]},{"ID":"20231211201910-lm1y4aj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231211201910-lm1y4aj","updated":"20231211201910"},"Children":[{"ID":"20231211201910-er9ergt","Type":"NodeParagraph","Properties":{"id":"20231211201910-er9ergt","updated":"20231211201910"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"signalCh chan os.Signal"},{"Type":"NodeText","Data":"​我们定义的是一个带缓冲的channel，当channel中没有数据时读操作会阻塞"}]}]}]},{"ID":"20231211201911-lrzwya2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211201911-lrzwya2","updated":"20231211201939"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"signalCh := make(chan os.Signal, 1)\nsignal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)\n\nsig := \u003c-signalCh\nlog.Printf(\"Received signal: %v\\n\", sig)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211201940-1r620b2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211201940-1r620b2","updated":"20231211201957"},"Children":[{"Type":"NodeText","Data":"第三步：平滑的关闭HTTP Server"}]},{"ID":"20231211202015-29ef8a7","Type":"NodeParagraph","Properties":{"id":"20231211202015-29ef8a7","updated":"20231211202015"},"Children":[{"Type":"NodeText","Data":"在自定义的信号处理程序中处理什么呢？"}]},{"ID":"20231211202015-f03sqk1","Type":"NodeParagraph","Properties":{"id":"20231211202015-f03sqk1","updated":"20231211202015"},"Children":[{"Type":"NodeText","Data":"1、首先需要关闭端口的监听，此时新的请求就无法建立连接"}]},{"ID":"20231211202015-n2xhuve","Type":"NodeParagraph","Properties":{"id":"20231211202015-n2xhuve","updated":"20231211202015"},"Children":[{"Type":"NodeText","Data":"2、对空闲的连接进行关闭"}]},{"ID":"20231211202015-gw69d7e","Type":"NodeParagraph","Properties":{"id":"20231211202015-gw69d7e","updated":"20231211202015"},"Children":[{"Type":"NodeText","Data":"3、对进行中的连接等待处理完成，变成空闲连接后进行关闭"}]},{"ID":"20231211202015-9gau8s9","Type":"NodeParagraph","Properties":{"id":"20231211202015-9gau8s9","updated":"20231211202015"},"Children":[{"Type":"NodeText","Data":"在Go 1.8以前实现上述操作需要编写大量的代码，也有一些第三方的库（tylerstillwate/graceful、facebookarchive/grace等）可供使用。但Go1.8之后标准库提供了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Shutdown()"},{"Type":"NodeText","Data":"​方法"}]},{"ID":"20231211202020-y2v61uk","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211202020-y2v61uk","updated":"20231211202042"},"Children":[{"Type":"NodeText","Data":"实现：综合上面三步有以下实现"}]},{"ID":"20231211202016-s7q9ui0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211202016-s7q9ui0","updated":"20231211202114"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n\t\"context\"\n\t\"log\"\n\t\"math/rand\"\n\t\"net/http\"\n\t\"os\"\n\t\"os/signal\"\n\t\"syscall\"\n\t\"time\"\n)\n\nfunc main() {\n\tmx := http.NewServeMux()\n\tmx.HandleFunc(\"/foo\", func(w http.ResponseWriter, r *http.Request) {\n\t\ttime.Sleep(time.Duration(rand.Intn(10)) * time.Second)\n\t\tw.Write([]byte(\"Receive path foo\\n\"))\n\t})\n\n\tsrv := http.Server{\n\t\tAddr:    \":8009\",\n\t\tHandler: mx,\n\t}\n\n\tgo func() {\n\t\tif err := srv.ListenAndServe(); err != nil {\n\t\t\tpanic(err)\n\t\t}\n\t}()\n\n\tsignalCh := make(chan os.Signal, 1)\n\tsignal.Notify(signalCh, syscall.SIGINT, syscall.SIGTERM)\n\n\tsig := \u003c-signalCh\n\tlog.Printf(\"Received signal: %v\\n\", sig)\n\n\tif err := srv.Shutdown(context.Background()); err != nil {\n\t\tlog.Fatalf(\"Server shutdown failed: %v\\n\", err)\n\t}\n\n\tlog.Println(\"Server shutdown gracefully\")\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211205542-azrzj9h","Type":"NodeParagraph","Properties":{"id":"20231211205542-azrzj9h","updated":"20231211205542"},"Children":[{"Type":"NodeText","Data":"没有收到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SIGINT"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SIGTERM"},{"Type":"NodeText","Data":"​信号前，main goroutine被"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"signalCh"},{"Type":"NodeText","Data":"​的读阻塞"}]},{"ID":"20231211205542-zo8dzb7","Type":"NodeParagraph","Properties":{"id":"20231211205542-zo8dzb7","updated":"20231211205542"},"Children":[{"Type":"NodeText","Data":"一旦收到信号，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"signalCh"},{"Type":"NodeText","Data":"​的阻塞被解除会往下执行server的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Shutdown()"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Shutdown()"},{"Type":"NodeText","Data":"​函数会处理好活跃和非活跃的连接，并返回结果"}]},{"ID":"20231211205542-rnadcde","Type":"NodeParagraph","Properties":{"id":"20231211205542-rnadcde","updated":"20231211205542"},"Children":[{"Type":"NodeText","Data":"上述代码有什么问题么？"}]},{"ID":"20231211205543-1hocmfb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231211205543-1hocmfb","updated":"20231211205558"},"Children":[{"Type":"NodeText","Data":"优雅关闭实现的细节"}]},{"ID":"20231211205558-47vxo5j","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211205558-47vxo5j","updated":"20231211205606"},"Children":[{"Type":"NodeText","Data":"当"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Shutdown"},{"Type":"NodeText","Data":"​​​被调用时"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ListenAndServe"},{"Type":"NodeText","Data":"​​​会立刻返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ErrServerClosed"},{"Type":"NodeText","Data":"​​​的错误"}]},{"ID":"20231211205608-2l3dl3g","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211205608-2l3dl3g","updated":"20231211205613"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"go func() {\n    if err := srv.ListenAndServe(); err != nil {\n        panic(err)\n    }\n}()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211205621-382tzp9","Type":"NodeParagraph","Properties":{"id":"20231211205621-382tzp9","updated":"20231211205621"},"Children":[{"Type":"NodeText","Data":"对于上文的代码，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Shutdown()"},{"Type":"NodeText","Data":"​刚被调用，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ListenAndServe"},{"Type":"NodeText","Data":"​所在的goroutine就抛出了panic，因而也导致main goroutine被退出，并没有达到运行"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Shutdown()"},{"Type":"NodeText","Data":"​预期的效果"}]},{"ID":"20231211205621-3o52uwv","Type":"NodeParagraph","Properties":{"id":"20231211205621-3o52uwv","updated":"20231211205621"},"Children":[{"Type":"NodeText","Data":"如果依旧想对"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ListenAndServe"},{"Type":"NodeText","Data":"​的错误抛出painc，需要忽略"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http.ErrServerClosed"},{"Type":"NodeText","Data":"​的错误"}]},{"ID":"20231211205622-n9x752j","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211205622-n9x752j","updated":"20231211205627"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"go func() {\n    err := srv.ListenAndServe()\n    if err != nil \u0026\u0026 err != http.ErrServerClosed {\n        panic(err)\n    }\n}()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}