{"ID":"20231211220111-4k8dlra","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f5c4","id":"20231211220111-4k8dlra","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231211220111-4k8dlra\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231211220122-8ovplnr\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231213225334-8ksheeh\u0026quot;,\u0026quot;scrollTop\u0026quot;:0\u0026#125;","title":"03-拦截器","updated":"20231214000229"},"Children":[{"ID":"20231211220122-8ovplnr","Type":"NodeParagraph","Properties":{"id":"20231211220122-8ovplnr","updated":"20231211220122"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"拦截器"},{"Type":"NodeText","Data":"和其他框架的拦截器（也称middleware）作用是一样的。利用拦截器我们可以在不侵入业务逻辑的前提下修改或者记录服务端或客户端的请求与响应，利用拦截器我们可以实现诸如日志记录、权限认证、限流等诸多功能"}]},{"ID":"20231211220122-u22m69w","Type":"NodeParagraph","Properties":{"id":"20231211220122-u22m69w","updated":"20231213235408"},"Children":[{"Type":"NodeText","Data":"上一篇提到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​的通信模式分为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"unary"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"streaming"},{"Type":"NodeText","Data":"​几种模式，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":"拦截器也分为两种："},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"code strong text","TextMarkTextContent":"unary interceptors"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":"和"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"code strong text","TextMarkTextContent":"streaming interceptors"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":" ，两种拦截器可以分别应用在服务端和客户端，所以gRPC总共为我们提供了四种拦截器。它们已经被定义成了go中的接口，我们创建的拦截器只要实现这些接口即可"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"}]},{"ID":"20231213235911-k4v8uyt","Type":"NodeParagraph","Properties":{"id":"20231213235911-k4v8uyt","updated":"20231213235911"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1322492ff62efd63ca3699e0b60488f2"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1322492ff62efd63ca3699e0b60488f2-20231213235911-swp7qjg.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231213225334-8ksheeh","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213225334-8ksheeh","updated":"20231213235930"},"Children":[{"Type":"NodeText","Data":"服务端拦截器"}]},{"ID":"20231213235930-dcqonvi","Type":"NodeParagraph","Properties":{"id":"20231213235930-dcqonvi","updated":"20231214000004"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务端的拦截器从请求开始按顺序执行拦截器，在执行完对应RPC的逻辑之后，再按反向的顺序执行拦截器中对响应的处理逻辑。"}]},{"ID":"20231213235946-p03lomh","Type":"NodeParagraph","Properties":{"id":"20231213235946-p03lomh","updated":"20231213235946"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"7eb62f10fac384a56948caa922ea9a45"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/7eb62f10fac384a56948caa922ea9a45-20231213235946-kl6pza7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231214000007-nzbcrwb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231214000007-nzbcrwb","updated":"20231214000023"},"Children":[{"Type":"NodeText","Data":"unary interceptors"}]},{"ID":"20231214000024-5odxir0","Type":"NodeParagraph","Properties":{"id":"20231214000024-5odxir0","updated":"20231214000034"},"Children":[{"Type":"NodeText","Data":"对于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"unary"},{"Type":"NodeText","Data":"​服务的拦截器只需实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnaryServerInterceptor"},{"Type":"NodeText","Data":"​接口即可"}]},{"ID":"20231214000035-j134v5h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231214000035-j134v5h","updated":"20231214000120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func(ctx context.Context, req interface{}, \n     info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231214000147-qgx7t88","Type":"NodeList","ListData":{},"Properties":{"id":"20231214000147-qgx7t88","updated":"20231214000207"},"Children":[{"ID":"20231214000147-i36go8b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-i36go8b","updated":"20231214000155"},"Children":[{"ID":"20231214000122-mxuokbf","Type":"NodeParagraph","Properties":{"id":"20231214000122-mxuokbf","updated":"20231214000155"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ctx context.Context"},{"Type":"NodeText","Data":"​：单个请求的上下文"}]}]},{"ID":"20231214000147-opgjvs3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-opgjvs3","updated":"20231214000200"},"Children":[{"ID":"20231214000135-lslpl2m","Type":"NodeParagraph","Properties":{"id":"20231214000135-lslpl2m","updated":"20231214000200"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"req interface{}"},{"Type":"NodeText","Data":"​：RPC服务的请求结构体"}]}]},{"ID":"20231214000147-twah05k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-twah05k","updated":"20231214000204"},"Children":[{"ID":"20231214000136-c4dxndd","Type":"NodeParagraph","Properties":{"id":"20231214000136-c4dxndd","updated":"20231214000204"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"info *UnaryServerInfo"},{"Type":"NodeText","Data":"​：RPC的服务信息"}]}]},{"ID":"20231214000147-58azlzt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-58azlzt","updated":"20231214000207"},"Children":[{"ID":"20231214000138-38veszf","Type":"NodeParagraph","Properties":{"id":"20231214000138-38veszf","updated":"20231214000207"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handler UnaryHandler"},{"Type":"NodeText","Data":"​：它包装了服务实现，通过调用它我们可以完成RPC并获取到响应"}]}]}]},{"ID":"20231214000140-9ria88r","Type":"NodeParagraph","Properties":{"id":"20231214000140-9ria88r","updated":"20231214000140"},"Children":[{"Type":"NodeText","Data":"参数看不懂没关系，我们来看一个例子"}]},{"ID":"20231214000208-jskb1ot","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231214000208-jskb1ot","updated":"20231214000218"},"Children":[{"Type":"NodeText","Data":"示例"}]},{"ID":"20231214000219-meoiyyn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231214000219-meoiyyn","updated":"20231214000229"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 实现 unary interceptors\nfunc orderUnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n // Pre-processing logic\n s := time.Now()\n\n // Invoking the handler to complete the normal execution of a unary RPC.\n m, err := handler(ctx, req)\n\n // Post processing logic\n log.Printf(\"Method: %s, req: %s, resp: %s, latency: %s\\n\",\n  info.FullMethod, req, m, time.Now().Sub(s))\n  \n return m, err\n}\n\nfunc main() {\n s := grpc.NewServer(\n    // 使用 unary interceptors\n  grpc.UnaryInterceptor(orderUnaryServerInterceptor),\n )\n \n  pb.RegisterOrderManagementServer(s, \u0026OrderManagementImpl{})\n  \n // ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231214000228-tnsqzas","Type":"NodeParagraph","Properties":{"id":"20231214000228-tnsqzas"}}]}