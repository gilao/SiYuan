{"ID":"20231117213948-l4cbemp","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f306","id":"20231117213948-l4cbemp","tags":"公众号-Golang语言开发栈","title":"Go 语言实现创建型设计模式-工厂模式","updated":"20231117221611"},"Children":[{"ID":"20231117214028-y0ywopu","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117214028-y0ywopu","updated":"20231117214031"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231117214044-r6ozkbw","Type":"NodeParagraph","Properties":{"id":"20231117214044-r6ozkbw","updated":"20231117214745"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工厂模式是一种创建型设计模式，包含三种类型，分别是简单工厂、工厂方法和抽象工厂。"}]},{"ID":"20231117214044-4etj0wr","Type":"NodeParagraph","Properties":{"id":"20231117214044-4etj0wr","updated":"20231117214756"},"Children":[{"Type":"NodeText","Data":"在《设计模式》"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[1]"},{"Type":"NodeText","Data":"一书中，因为 GoF"},{"Type":"NodeTextMark","TextMarkType":"sup","TextMarkTextContent":"[2]"},{"Type":"NodeText","Data":" 认为简单工厂是工厂方法的一种特例，所以 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GoF 把工厂模式分为两种类型，分别是工厂方法和抽象工厂。"}]},{"ID":"20231117214044-kh0qwwb","Type":"NodeParagraph","Properties":{"id":"20231117214044-kh0qwwb","updated":"20231117214044"},"Children":[{"Type":"NodeText","Data":"本文我们使用第一种分类方式，分别介绍一下工厂模式的三种类型。"}]},{"ID":"20231117214046-j488395","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117214046-j488395","updated":"20231117214051"},"Children":[{"Type":"NodeText","Data":"使用场景"}]},{"ID":"20231117214105-ahi8o1w","Type":"NodeParagraph","Properties":{"id":"20231117214105-ahi8o1w","updated":"20231117214718"},"Children":[{"Type":"NodeText","Data":"在介绍工厂模式的使用场景之前，我们需要先简单了解工厂模式的组成结构，"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一般分为抽象产品、具体产品、抽象工厂和具体工厂。"}]},{"ID":"20231117214105-u650tlf","Type":"NodeBlockquote","Properties":{"id":"20231117214105-u650tlf","updated":"20231117214105"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20231117214105-scgaweh","Type":"NodeParagraph","Properties":{"id":"20231117214105-scgaweh","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"注意：简单工厂模式，不区分抽象工厂和具体工厂。"}]}]},{"ID":"20231117214105-kijoagq","Type":"NodeParagraph","Properties":{"id":"20231117214105-kijoagq","updated":"20231117214105"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"简单工厂"}]},{"ID":"20231117214105-wv792hj","Type":"NodeParagraph","Properties":{"id":"20231117214105-wv792hj","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"简单工厂适用于具体产品较少，且不会频繁添加具体产品的场景。因为每多一个具体产品，在工厂中就多一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if"},{"Type":"NodeText","Data":"​ 分支。"}]},{"ID":"20231117214105-wy29igu","Type":"NodeParagraph","Properties":{"id":"20231117214105-wy29igu","updated":"20231117214105"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工厂方法"}]},{"ID":"20231117214105-15za05h","Type":"NodeParagraph","Properties":{"id":"20231117214105-15za05h","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"工厂方法适用于具体产品较多，且需要频繁添加具体产品的场景。使用工厂方法可以避免使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"if"},{"Type":"NodeText","Data":"​ 分支，当我们需要添加具体产品时，只需创建新的具体产品和具体工厂，符合开闭原则和单一职责原则。"}]},{"ID":"20231117214105-dxb81g5","Type":"NodeParagraph","Properties":{"id":"20231117214105-dxb81g5","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"而且还可以将每个具体产品的创建逻辑拆分到不同的工厂中，避免使用一个工厂导致的代码过于复杂。"}]},{"ID":"20231117214105-rkv2lg7","Type":"NodeBlockquote","Properties":{"id":"20231117214105-rkv2lg7","updated":"20231117214105"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20231117214105-sd1gvqb","Type":"NodeParagraph","Properties":{"id":"20231117214105-sd1gvqb","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"注意：拆分多个工厂，则需要维护多个工厂的代码。"}]}]},{"ID":"20231117214105-0s1jlug","Type":"NodeParagraph","Properties":{"id":"20231117214105-0s1jlug","updated":"20231117214105"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"抽象工厂"}]},{"ID":"20231117214105-ijhhje0","Type":"NodeParagraph","Properties":{"id":"20231117214105-ijhhje0","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"抽象工厂适用于一个具体工厂需要负责生产多个不同产品，并且工厂的职责不会继续增加的场景（即抽象工厂定义的一组方法不会继续增加）。"}]},{"ID":"20231117214105-hdv83qr","Type":"NodeParagraph","Properties":{"id":"20231117214105-hdv83qr","updated":"20231117214105"},"Children":[{"Type":"NodeText","Data":"否则，不仅所有具体工厂都需要修改，抽象产品和具体产品也需要修改，违反开闭原则。"}]},{"ID":"20231117214108-1ia1wu2","Type":"NodeParagraph","Properties":{"id":"20231117214108-1ia1wu2"}},{"ID":"20231117213948-87foa41","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117213948-87foa41","updated":"20231117214900"},"Children":[{"Type":"NodeText","Data":"实现方式"}]},{"ID":"20231117214921-ddaaw7h","Type":"NodeParagraph","Properties":{"id":"20231117214921-ddaaw7h","updated":"20231117214921"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"简单工厂"}]},{"ID":"20231117214921-0uhfgce","Type":"NodeParagraph","Properties":{"id":"20231117214921-0uhfgce","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"简单工厂模式违反了开闭原则，严格意义上不算是一个设计模式，它主要包括三个结构，分别是工厂、抽象产品和具体产品。"}]},{"ID":"20231117214921-zxsxhsd","Type":"NodeList","ListData":{},"Properties":{"id":"20231117214921-zxsxhsd","updated":"20231117214921"},"Children":[{"ID":"20231117214921-lo29s88","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-lo29s88","updated":"20231117214921"},"Children":[{"ID":"20231117214921-db6h4hv","Type":"NodeParagraph","Properties":{"id":"20231117214921-db6h4hv","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"工厂 - 负责调用具体产品生产产品，返回值是抽象产品（接口）。"}]}]},{"ID":"20231117214921-h3lfjsw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-h3lfjsw","updated":"20231117214921"},"Children":[{"ID":"20231117214921-308vu9u","Type":"NodeParagraph","Properties":{"id":"20231117214921-308vu9u","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"抽象产品 - 负责定义产品，接口类型，包含一组方法。"}]}]},{"ID":"20231117214921-hgnzome","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-hgnzome","updated":"20231117214921"},"Children":[{"ID":"20231117214921-xxf63b6","Type":"NodeParagraph","Properties":{"id":"20231117214921-xxf63b6","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"具体产品 - 负责被工厂调用，实现抽象产品（接口）。"}]}]}]},{"ID":"20231117214921-c4s0sq2","Type":"NodeParagraph","Properties":{"id":"20231117214921-c4s0sq2","updated":"20231117214921"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"工厂方法"}]},{"ID":"20231117214921-y9j96ky","Type":"NodeParagraph","Properties":{"id":"20231117214921-y9j96ky","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"工厂方法模式符合开闭原则，它相比简单工厂模式，多了一个抽象工厂的结构，总共包括四个结构，分别是抽象工厂、具体工厂、抽象产品和具体产品。"}]},{"ID":"20231117214921-jpagcn4","Type":"NodeList","ListData":{},"Properties":{"id":"20231117214921-jpagcn4","updated":"20231117214921"},"Children":[{"ID":"20231117214921-iz8uryv","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-iz8uryv","updated":"20231117214921"},"Children":[{"ID":"20231117214921-vmr20a8","Type":"NodeParagraph","Properties":{"id":"20231117214921-vmr20a8","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"抽象工厂（单个） - 负责定义工厂，接口类型，包含一组方法。"}]}]},{"ID":"20231117214921-v1r8je8","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-v1r8je8","updated":"20231117214921"},"Children":[{"ID":"20231117214921-qnm0tbk","Type":"NodeParagraph","Properties":{"id":"20231117214921-qnm0tbk","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"具体工厂（多个） - 负责通过实例化具体产品创建产品，实现抽象工厂（接口）。"}]}]},{"ID":"20231117214921-z2tt006","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-z2tt006","updated":"20231117214921"},"Children":[{"ID":"20231117214921-z3yecxc","Type":"NodeParagraph","Properties":{"id":"20231117214921-z3yecxc","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"抽象产品（单个） - 负责定义产品，接口类型，包含一组方法。"}]}]},{"ID":"20231117214921-b00m9si","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-b00m9si","updated":"20231117214921"},"Children":[{"ID":"20231117214921-tmw4g9a","Type":"NodeParagraph","Properties":{"id":"20231117214921-tmw4g9a","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"具体产品（多个） - 负责被具体工厂调用，实现抽象产品（接口）。"}]}]}]},{"ID":"20231117214921-nmloggv","Type":"NodeBlockquote","Properties":{"id":"20231117214921-nmloggv","updated":"20231117214921"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20231117214921-txqoon5","Type":"NodeParagraph","Properties":{"id":"20231117214921-txqoon5","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"注意：此处“抽象工厂”是工厂方法模式中的一个结构，不要与抽象工厂模式混淆。"}]}]},{"ID":"20231117214921-zfny741","Type":"NodeParagraph","Properties":{"id":"20231117214921-zfny741","updated":"20231117214921"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"抽象工厂"}]},{"ID":"20231117214921-jppyyme","Type":"NodeParagraph","Properties":{"id":"20231117214921-jppyyme","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"抽象工厂模式也是总共包括四个结构，它与工厂方法模式不同，工厂方法模式中抽象产品只有一个，而抽象工厂模式抽象产品有多个。"}]},{"ID":"20231117214921-2ngu2fa","Type":"NodeParagraph","Properties":{"id":"20231117214921-2ngu2fa","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"但是，四个结构的职责与工厂方法模式相同。"}]},{"ID":"20231117214921-ue9atpl","Type":"NodeList","ListData":{},"Properties":{"id":"20231117214921-ue9atpl","updated":"20231117214921"},"Children":[{"ID":"20231117214921-x07uyan","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-x07uyan","updated":"20231117214921"},"Children":[{"ID":"20231117214921-fvr45xe","Type":"NodeParagraph","Properties":{"id":"20231117214921-fvr45xe","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"抽象工厂（单个）"}]}]},{"ID":"20231117214921-7jxfobw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-7jxfobw","updated":"20231117214921"},"Children":[{"ID":"20231117214921-3mj1dxe","Type":"NodeParagraph","Properties":{"id":"20231117214921-3mj1dxe","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"具体工厂（多个）"}]}]},{"ID":"20231117214921-1xxyrv3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-1xxyrv3","updated":"20231117214921"},"Children":[{"ID":"20231117214921-3fu7t9d","Type":"NodeParagraph","Properties":{"id":"20231117214921-3fu7t9d","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"抽象产品（多个）"}]}]},{"ID":"20231117214921-j7thkot","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231117214921-j7thkot","updated":"20231117214921"},"Children":[{"ID":"20231117214921-1tcg9br","Type":"NodeParagraph","Properties":{"id":"20231117214921-1tcg9br","updated":"20231117214921"},"Children":[{"Type":"NodeText","Data":"具体产品（多个）"}]}]}]},{"ID":"20231117215002-94s6fh0","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231117215002-94s6fh0","updated":"20231117215012"},"Children":[{"Type":"NodeText","Data":"Go 实现"}]},{"ID":"20231117215012-7ddbr0f","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231117215012-7ddbr0f","updated":"20231117215020"},"Children":[{"Type":"NodeText","Data":"简单工厂"}]},{"ID":"20231117215024-jdyw17s","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231117215024-jdyw17s","updated":"20231117220513"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport \"fmt\"\n\n// IDrink 抽象产品- 饮料\ntype IDrink interface {\n\tKind() // 抽象方法 - 类别\n\tName() // 抽象方法 - 名称\n}\n\n// CocaCola 具体产品 - 可口可乐\ntype CocaCola struct {\n}\n\n// Kind 具体方法\nfunc (c *CocaCola) Kind() {\n\tfmt.Println(\"碳酸饮料\")\n}\n\n// Name 具体方法\nfunc (c *CocaCola) Name() {\n\tfmt.Println(\"可口可乐\")\n}\n\n// Sprite 具体产品 - 雪碧\ntype Sprite struct {\n}\n\n// Kind 具体方法\nfunc (c *Sprite) Kind() {\n\tfmt.Println(\"碳酸饮料\")\n}\n\n// Name 具体方法\nfunc (c *Sprite) Name() {\n\tfmt.Println(\"雪碧\")\n}\n\n// SimpleFactory 工厂\ntype SimpleFactory struct {\n}\n\n// Produce 生产 - 返回值（抽象产品）\nfunc (s *SimpleFactory) Produce(name string) (drink IDrink) {\n\tif name == \"CocaCole\" {\n\t\tdrink = new(CocaCola)\n\t} else if name == \"Sprite\" {\n\t\tdrink = new(Sprite)\n\t}\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231117220543-zg77gt8","Type":"NodeParagraph","Properties":{"id":"20231117220543-zg77gt8","updated":"20231117220543"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们可以发现，我们通过代码定义简单工厂模式的三个结构。"}]},{"ID":"20231117220543-c5uzc54","Type":"NodeParagraph","Properties":{"id":"20231117220543-c5uzc54","updated":"20231117220543"},"Children":[{"Type":"NodeText","Data":"定义一个包含一组方法的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IDrink"},{"Type":"NodeText","Data":"​ 接口，代表抽象产品；"}]},{"ID":"20231117220543-tx9x8a1","Type":"NodeParagraph","Properties":{"id":"20231117220543-tx9x8a1","updated":"20231117220543"},"Children":[{"Type":"NodeText","Data":"定义一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CocaCola"},{"Type":"NodeText","Data":"​ 结构体和一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sprite"},{"Type":"NodeText","Data":"​ 结构体，并都实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IDrink"},{"Type":"NodeText","Data":"​ 接口，代表具体产品；"}]},{"ID":"20231117220543-qp2mztk","Type":"NodeParagraph","Properties":{"id":"20231117220543-qp2mztk","updated":"20231117220543"},"Children":[{"Type":"NodeText","Data":"定义一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SimpleFactory"},{"Type":"NodeText","Data":"​ 结构体，并定义一个返回值是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IDrink"},{"Type":"NodeText","Data":"​ 的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Produce"},{"Type":"NodeText","Data":"​ 方法，代表工厂。"}]},{"ID":"20231117220606-vcmgexg","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231117220606-vcmgexg","updated":"20231117220739"},"Children":[{"Type":"NodeText","Data":"工厂方法"}]},{"ID":"20231117220739-62g2gw5","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231117220739-62g2gw5","updated":"20231117221536"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\npackage main\n\nimport \"fmt\"\n\n// IDrink 抽象产品- 饮料\ntype IDrink interface {\n\tKind() // 抽象方法 - 类别\n\tName() // 抽象方法 - 名称\n}\n\n// CocaCola 具体产品 - 可口可乐\ntype CocaCola struct {\n}\n\n// Kind 具体方法\nfunc (c *CocaCola) Kind() {\n\tfmt.Println(\"碳酸饮料\")\n}\n\n// Name 具体方法\nfunc (c *CocaCola) Name() {\n\tfmt.Println(\"可口可乐\")\n}\n\n// Sprite 具体产品 - 雪碧\ntype Sprite struct {\n}\n\n// Kind 具体方法\nfunc (c *Sprite) Kind() {\n\tfmt.Println(\"碳酸饮料\")\n}\n\n// Name 具体方法\nfunc (c *Sprite) Name() {\n\tfmt.Println(\"雪碧\")\n}\n\n// IFactory 抽象工厂\ntype IFactory interface {\n\tProduce() IDrink // 抽象方法\n}\n\n// CocaColaFactory 具体工厂\ntype CocaColaFactory struct {\n}\n\n// Produce 具体方法\nfunc (c *CocaColaFactory) Produce() (drink IDrink) {\n\tdrink = new(CocaCola)\n\treturn\n}\n\n// SpriteFactory 具体工厂\ntype SpriteFactory struct {\n}\n\n// Produce 具体方法\nfunc (s *SpriteFactory) Produce() (drink IDrink) {\n\tdrink = new(Sprite)\n\treturn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231117221529-nv4yr2z","Type":"NodeParagraph","Properties":{"id":"20231117221529-nv4yr2z","updated":"20231117221529"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们通过代码定义工厂方法模式的四个结构。"}]},{"ID":"20231117221529-v489es9","Type":"NodeParagraph","Properties":{"id":"20231117221529-v489es9","updated":"20231117221529"},"Children":[{"Type":"NodeText","Data":"定义一个包含一组方法的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IDrink"},{"Type":"NodeText","Data":"​ 接口，代表抽象产品；"}]},{"ID":"20231117221529-p9hz315","Type":"NodeParagraph","Properties":{"id":"20231117221529-p9hz315","updated":"20231117221529"},"Children":[{"Type":"NodeText","Data":"定义一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CocaCola"},{"Type":"NodeText","Data":"​ 结构体和一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Sprite"},{"Type":"NodeText","Data":"​ 结构体，并都实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IDrink"},{"Type":"NodeText","Data":"​ 接口，代表具体产品；"}]},{"ID":"20231117221529-i8ozktx","Type":"NodeParagraph","Properties":{"id":"20231117221529-i8ozktx","updated":"20231117221529"},"Children":[{"Type":"NodeText","Data":"定义一个包含一组方法的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IFactory"},{"Type":"NodeText","Data":"​ 接口，代表抽象工厂；"}]},{"ID":"20231117221529-0drzf0z","Type":"NodeParagraph","Properties":{"id":"20231117221529-0drzf0z","updated":"20231117221529"},"Children":[{"Type":"NodeText","Data":"定义一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CocaColaFactory"},{"Type":"NodeText","Data":"​ 结构体和一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SpriteFactory"},{"Type":"NodeText","Data":"​ 结构体，并都实现 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"IFactory"},{"Type":"NodeText","Data":"​ 接口，代表具体工厂；"}]},{"ID":"20231117221546-6v1kfl3","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231117221546-6v1kfl3","updated":"20231117221610"},"Children":[{"Type":"NodeText","Data":"抽象工厂"}]},{"ID":"20231117221611-0b8jduw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231117221611-0b8jduw","updated":"20231117221611"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]}]}