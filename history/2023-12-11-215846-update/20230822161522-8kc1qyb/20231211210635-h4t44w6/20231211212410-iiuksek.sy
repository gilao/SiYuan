{"ID":"20231211212410-iiuksek","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2721","id":"20231211212410-iiuksek","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231211212410-iiuksek\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231211212418-lhoo9ky\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231211212444-fzo0ils\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20231211212444-fzo0ils\u0026quot;,\u0026quot;focusStart\u0026quot;:11,\u0026quot;focusEnd\u0026quot;:11\u0026#125;","tags":"公众号-凉凉的知识库,gRPC","title":"02-通信模式","updated":"20231211215845"},"Children":[{"ID":"20231211212418-lhoo9ky","Type":"NodeParagraph","Properties":{"id":"20231211212418-lhoo9ky"}},{"ID":"20231211212410-xtpzmv8","Type":"NodeParagraph","Properties":{"id":"20231211212410-xtpzmv8","updated":"20231211212443"},"Children":[{"Type":"NodeText","Data":"上一篇介绍了如何编写 protobuf 的 idl，并使用 idl 生成了 gRPC 的代码，现在来看看如何编写客户端和服务端的代码"}]},{"ID":"20231211212444-fzo0ils","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231211212444-fzo0ils","updated":"20231211212534"},"Children":[{"Type":"NodeText","Data":"Simple RPC（Unary RPC)"}]},{"ID":"20231211212534-xbt4jsa","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211212534-xbt4jsa","updated":"20231211212542"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"\nsyntax = \"proto3\";\n\npackage ecommerce;\n\nimport \"google/protobuf/wrappers.proto\";\n\noption go_package = \"ecommerce/\";\n\nmessage Order {\n  string id = 1;\n  repeated string items = 2;\n  string description = 3;\n  float price = 4;\n  string destination = 5;\n}\n\nservice OrderManagement {\n  rpc getOrder(google.protobuf.StringValue) returns (Order);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211212549-6fvdxfl","Type":"NodeParagraph","Properties":{"id":"20231211212549-6fvdxfl","updated":"20231211212549"},"Children":[{"Type":"NodeText","Data":"定义如上的 idl，需要关注几个事项"}]},{"ID":"20231211212549-bkbt3tl","Type":"NodeList","ListData":{},"Properties":{"id":"20231211212549-bkbt3tl","updated":"20231211212549"},"Children":[{"ID":"20231211212549-pv0ydea","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231211212549-pv0ydea","updated":"20231211212549"},"Children":[{"ID":"20231211212549-1w2wddz","Type":"NodeParagraph","Properties":{"id":"20231211212549-1w2wddz","updated":"20231211212549"},"Children":[{"Type":"NodeText","Data":"使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"protobuf"},{"Type":"NodeText","Data":"​最新版本"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"syntax = \u0026quot;proto3\u0026quot;;"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20231211212549-mxngl9l","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231211212549-mxngl9l","updated":"20231211212549"},"Children":[{"ID":"20231211212549-d3fz21k","Type":"NodeParagraph","Properties":{"id":"20231211212549-d3fz21k","updated":"20231211212549"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"protoc-gen-go"},{"Type":"NodeText","Data":"​要求 pb 文件必须指定 go 包的路径。即"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"option go_package = \u0026quot;ecommerce/\u0026quot;;"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20231211212549-cilatl7","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231211212549-cilatl7","updated":"20231211212549"},"Children":[{"ID":"20231211212549-8b9yim2","Type":"NodeParagraph","Properties":{"id":"20231211212549-8b9yim2","updated":"20231211212549"},"Children":[{"Type":"NodeText","Data":"定义的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"method"},{"Type":"NodeText","Data":"​仅能有一个入参和出参数。如果需要传递多个参数需要定义成"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"message"},{"Type":"NodeText","Data":"​"}]}]},{"ID":"20231211212549-9gtjnlg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231211212549-9gtjnlg","updated":"20231211212549"},"Children":[{"ID":"20231211212549-ujbernc","Type":"NodeParagraph","Properties":{"id":"20231211212549-ujbernc","updated":"20231211212549"},"Children":[{"Type":"NodeText","Data":"使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"import"},{"Type":"NodeText","Data":"​引用另外一个文件的 pb。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"google/protobuf/wrappers.proto"},{"Type":"NodeText","Data":"​是 google 内置的类型"}]}]}]},{"ID":"20231211212549-78qvav8","Type":"NodeParagraph","Properties":{"id":"20231211212549-78qvav8","updated":"20231211212549"},"Children":[{"Type":"NodeText","Data":"生成 go 和 grpc 的代码"}]},{"ID":"20231211214907-bb2t0z9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211214907-bb2t0z9","updated":"20231211214908"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"$ protoc -I ./pb \\\n  --go_out ./ecommerce --go_opt paths=source_relative \\\n  --go-grpc_out ./ecommerce --go-grpc_opt paths=source_relative \\\n  ./pb/product.proto\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211214910-mtpesuh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211214910-mtpesuh","updated":"20231211214915"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"ecommerce\n├── product.pb.go\n└── product_grpc.pb.go\npb\n└── product.proto\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211214924-4dwn1ig","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211214924-4dwn1ig","updated":"20231211214937"},"Children":[{"Type":"NodeText","Data":"Server 实现"}]},{"ID":"20231211214937-afp95wd","Type":"NodeParagraph","Properties":{"id":"20231211214937-afp95wd","updated":"20231211214942"},"Children":[{"Type":"NodeText","Data":"1、由 pb 文件生成的 gRPC 代码中包含了 service 的接口定义，它和我们定义的 idl 是吻合的"}]},{"ID":"20231211214943-hqmewjx","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211214943-hqmewjx","updated":"20231211214951"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"service OrderManagement {\n  rpc getOrder(google.protobuf.StringValue) returns (Order);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215001-w0zzx1a","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215001-w0zzx1a","updated":"20231211215003"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type OrderManagementServer interface {\n GetOrder(context.Context, *wrapperspb.StringValue) (*Order, error)\n mustEmbedUnimplementedOrderManagementServer()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215005-u4d8n86","Type":"NodeParagraph","Properties":{"id":"20231211215005-u4d8n86","updated":"20231211215012"},"Children":[{"Type":"NodeText","Data":"2、我们的业务逻辑就是实现这个接口"}]},{"ID":"20231211215018-okq25vy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215018-okq25vy","updated":"20231211215024"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n \"context\"\n \"log\"\n\n pb \"github.com/liangwt/note/grpc/unary_rpc_example/ecommerce\"\n \"google.golang.org/grpc/codes\"\n \"google.golang.org/grpc/status\"\n \"google.golang.org/protobuf/types/known/wrapperspb\"\n)\n\nvar _ pb.OrderManagementServer = \u0026OrderManagementImpl{}\n\nvar orders = make(map[string]pb.Order)\n\ntype OrderManagementImpl struct {\n pb.UnimplementedOrderManagementServer\n}\n\n// Simple RPC\nfunc (s *OrderManagementImpl) GetOrder(ctx context.Context, orderId *wrapperspb.StringValue) (*pb.Order, error) {\n ord, exists := orders[orderId.Value]\n if exists {\n  return \u0026ord, status.New(codes.OK, \"\").Err()\n }\n\n return nil, status.Errorf(codes.NotFound, \"Order does not exist. : \", orderId)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215039-przpsos","Type":"NodeParagraph","Properties":{"id":"20231211215039-przpsos","updated":"20231211215039"},"Children":[{"Type":"NodeText","Data":"3、在实现完业务逻辑之后，我们可以创建并启动服务"}]},{"ID":"20231211215040-ifmnkio","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215040-ifmnkio","updated":"20231211215046"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n \"net\"\n\n pb \"github.com/liangwt/note/grpc/unary_rpc_example/ecommerce\"\n \"google.golang.org/grpc\"\n)\n\nfunc main() {\n s := grpc.NewServer()\n\n pb.RegisterOrderManagementServer(s, \u0026OrderManagementImpl{})\n\n lis, err := net.Listen(\"tcp\", \":8009\")\n if err != nil {\n  panic(err)\n }\n\n if err := s.Serve(lis); err != nil {\n  panic(err)\n }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215055-glh2c1c","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215055-glh2c1c","updated":"20231211215056"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务端代码实现的流程如下"}]},{"ID":"20231211215116-np4xmc1","Type":"NodeParagraph","Properties":{"id":"20231211215116-np4xmc1","updated":"20231211215116"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"55db22e5637ad27618b71b17010701e8"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/55db22e5637ad27618b71b17010701e8-20231211215116-oe6g9qx.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215117-keispis","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215117-keispis","updated":"20231211215128"},"Children":[{"Type":"NodeText","Data":"client实现"}]},{"ID":"20231211215146-at4mieh","Type":"NodeParagraph","Properties":{"id":"20231211215146-at4mieh","updated":"20231211215146"},"Children":[{"Type":"NodeText","Data":"1、由 pb 文件生成的 gRPC 代码中包含了 client 的实现，它和我们定义的 idl 也是吻合的"}]},{"ID":"20231211215147-d7c82rn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215147-d7c82rn","updated":"20231211215152"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"service OrderManagement {\n  rpc getOrder(google.protobuf.StringValue) returns (Order);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215152-sremutj","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215152-sremutj","updated":"20231211215158"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"type orderManagementClient struct {\n cc grpc.ClientConnInterface\n}\n\nfunc NewOrderManagementClient(cc grpc.ClientConnInterface) OrderManagementClient {\n return \u0026orderManagementClient{cc}\n}\n\nfunc (c *orderManagementClient) GetOrder(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Order, error) {\n out := new(Order)\n err := c.cc.Invoke(ctx, \"/ecommerce.OrderManagement/getOrder\", in, out, opts...)\n if err != nil {\n  return nil, err\n }\n return out, nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215211-9v8izwo","Type":"NodeParagraph","Properties":{"id":"20231211215211-9v8izwo","updated":"20231211215212"},"Children":[{"Type":"NodeText","Data":"2、直接使用 client 来进行 rpc 调用"}]},{"ID":"20231211215212-dfiq0sv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215212-dfiq0sv","updated":"20231211215219"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n \"context\"\n \"log\"\n \"time\"\n\n pb \"github.com/liangwt/note/grpc/unary_rpc_example/ecommerce\"\n \"google.golang.org/grpc\"\n \"google.golang.org/protobuf/types/known/wrapperspb\"\n)\n\nfunc main() {\n conn, err := grpc.Dial(\"127.0.0.1:8009\", grpc.WithInsecure())\n if err != nil {\n  panic(err)\n }\n defer conn.Close()\n\n client := pb.NewOrderManagementClient(conn)\n\n ctx, cancel := context.WithTimeout(context.Background(), time.Second)\n defer cancel()\n\n // Get Order\n retrievedOrder, err := client.GetOrder(ctx, \u0026wrapperspb.StringValue{Value: \"101\"})\n if err != nil {\n  panic(err)\n }\n\n log.Print(\"GetOrder Response -\u003e : \", retrievedOrder)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215222-1spxa6f","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215222-1spxa6f","updated":"20231211215249"},"Children":[{"Type":"NodeText","Data":"客户端代码实现的流程如下："}]},{"ID":"20231211215255-zzuj9as","Type":"NodeParagraph","Properties":{"id":"20231211215255-zzuj9as","updated":"20231211215255"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"807b523e4da0dfc8df9364d265ed7065"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/807b523e4da0dfc8df9364d265ed7065-20231211215255-oary1ao.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215302-8pn75qe","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215302-8pn75qe","updated":"20231211215302"},"Children":[{"Type":"NodeText","Data":"小总结"}]},{"ID":"20231211215302-n71og7j","Type":"NodeParagraph","Properties":{"id":"20231211215302-n71og7j","updated":"20231211215302"},"Children":[{"Type":"NodeText","Data":"✨ 前文提到过"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"protobuf协议"},{"Type":"NodeText","Data":"​是平台无关的。演示的客户端和服务端都是 golang 的，即使客户端和服务端不同语言也是类似的可以通信的"}]},{"ID":"20231211215302-05benhd","Type":"NodeParagraph","Properties":{"id":"20231211215302-05benhd","updated":"20231211215302"},"Children":[{"Type":"NodeText","Data":"✨ 对于上面介绍的的这种类似于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"http1.x"},{"Type":"NodeText","Data":"​的模式：客户端发送请求，服务端响应请求，一问一答的模式在 gRPC 里叫做"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Simple RPC"},{"Type":"NodeText","Data":"​ (也称"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Unary RPC)"},{"Type":"NodeText","Data":"​。gRPC 同时也支持其他类型的交互方式。"}]},{"ID":"20231211215302-l74oafl","Type":"NodeParagraph","Properties":{"id":"20231211215302-l74oafl","updated":"20231211215302"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/mmbiz_png/kWF4acROZUDddYfyZ6D4CJoiarwTFWdmw5PKwkLwfFgFN0vicD12yWnmPB7wfyXsZ1zwBlK9DwNYN7KxUvGNBdUw/640?wx_fmt=png\u0026tp=wxpic\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215327-9izanxv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231211215327-9izanxv","updated":"20231211215327"},"Children":[{"Type":"NodeText","Data":"Server-Streaming RPC 服务器端流式 RPC"}]},{"ID":"20231211215327-60xvken","Type":"NodeParagraph","Properties":{"id":"20231211215327-60xvken","updated":"20231211215327"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"服务器端流式 RPC"},{"Type":"NodeText","Data":"​，显然是单向流，并代指 Server 为 Stream 而 Client 为普通 RPC 请求"}]},{"ID":"20231211215327-xm39ptx","Type":"NodeParagraph","Properties":{"id":"20231211215327-xm39ptx","updated":"20231211215327"},"Children":[{"Type":"NodeText","Data":"简单来讲就是客户端发起一次普通的 RPC 请求，服务端通过流式响应多次发送数据集，客户端 Recv 接收数据集。大致如图："}]},{"ID":"20231211215327-7rod7ar","Type":"NodeParagraph","Properties":{"id":"20231211215327-7rod7ar","updated":"20231211215327"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/mmbiz_png/kWF4acROZUDddYfyZ6D4CJoiarwTFWdmwHLBKk1Q8qGpESOzzGT0kxJLypYnH7ngORhJknso2jgBhRqX4Oa9uwQ/640?wx_fmt=png\u0026tp=wxpic\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215337-3436ghg","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215337-3436ghg","updated":"20231211215416"},"Children":[{"Type":"NodeText","Data":"pb 定义"}]},{"ID":"20231211215436-u1o6yo4","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215436-u1o6yo4","updated":"20231211215442"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"proto3\";\n\npackage ecommerce;\n\noption go_package = \"ecommerce/\";\n\nimport \"google/protobuf/wrappers.proto\";\n\nmessage Order {\n  string id = 1;\n  repeated string items = 2;\n  string description = 3;\n  float price = 4;\n  string destination = 5;\n}\n\nservice OrderManagement {\n  rpc searchOrders(google.protobuf.StringValue) returns (stream Order);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215447-zi65c0o","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215447-zi65c0o","updated":"20231211215529"},"Children":[{"Type":"NodeText","Data":"server 实现"}]},{"ID":"20231211215426-nezz1t1","Type":"NodeParagraph","Properties":{"id":"20231211215426-nezz1t1","updated":"20231211215426"},"Children":[{"Type":"NodeText","Data":"✨ 注意与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Simple RPC"},{"Type":"NodeText","Data":"​的区别：因为我们的服务端是流式响应的，因此对于服务端来说函数入参"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"多"},{"Type":"NodeText","Data":"了一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream OrderManagement_SearchOrdersServer"},{"Type":"NodeText","Data":"​参数用来写入多个响应，可以把它看作是客户端的对象"}]},{"ID":"20231211215426-2cai9pk","Type":"NodeParagraph","Properties":{"id":"20231211215426-2cai9pk","updated":"20231211215426"},"Children":[{"Type":"NodeText","Data":"✨ 可以通过调用这个流对象的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Send(...)"},{"Type":"NodeText","Data":"​，来往客户端写入数据"}]},{"ID":"20231211215426-ba8hfpt","Type":"NodeParagraph","Properties":{"id":"20231211215426-ba8hfpt","updated":"20231211215426"},"Children":[{"Type":"NodeText","Data":"✨ 通过返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nil"},{"Type":"NodeText","Data":"​或者"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"error"},{"Type":"NodeText","Data":"​来表示全部数据写完了"}]},{"ID":"20231211215532-r8yqhks","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215532-r8yqhks","updated":"20231211215559"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (s *server) SearchOrders(query *wrapperspb.StringValue,\n                              stream pb.OrderManagement_SearchOrdersServer) error {\n for _, order := range orders {\n  for _, str := range order.Items {\n   if strings.Contains(str, query.Value) {\n    err := stream.Send(\u0026order)\n    if err != nil {\n     return fmt.Errorf(\"error send: %v\", err)\n    }\n   }\n  }\n }\n\n return nil\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215608-5urbzec","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215608-5urbzec","updated":"20231211215615"},"Children":[{"Type":"NodeText","Data":"client实现"}]},{"ID":"20231211215620-4j48a71","Type":"NodeParagraph","Properties":{"id":"20231211215620-4j48a71","updated":"20231211215620"},"Children":[{"Type":"NodeText","Data":"✨ 注意与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Simple RPC"},{"Type":"NodeText","Data":"​的区别：因为我们的服务端是流式响应的，因此 RPC 函数返回值"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream"},{"Type":"NodeText","Data":"​是一个流，可以把它看作是服务端的对象"}]},{"ID":"20231211215620-eobqgxk","Type":"NodeParagraph","Properties":{"id":"20231211215620-eobqgxk","updated":"20231211215620"},"Children":[{"Type":"NodeText","Data":"✨ 使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recv"},{"Type":"NodeText","Data":"​函数来不断从服务端接收数据"}]},{"ID":"20231211215620-atfuzfd","Type":"NodeParagraph","Properties":{"id":"20231211215620-atfuzfd","updated":"20231211215620"},"Children":[{"Type":"NodeText","Data":"✨ 当"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recv"},{"Type":"NodeText","Data":"​返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"io.EOF"},{"Type":"NodeText","Data":"​代表流已经结束"}]},{"ID":"20231211215621-iumgi7x","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215621-iumgi7x","updated":"20231211215628"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"c := pb.NewOrderManagementClient(conn)\nctx, cancelFn := context.WithCancel(context.Background())\ndefer cancelFn()\n\nstream, err := c.SearchOrders(ctx, \u0026wrapperspb.StringValue{Value: \"Google\"})\nif err != nil{\n  panic(err)\n}\n\nfor{\n  order, err := stream.Recv()\n  if err == io.EOF{\n    break\n  }\n\n  log.Println(\"Search Result: \", order)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215641-h8lue99","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215641-h8lue99","updated":"20231211215641"},"Children":[{"Type":"NodeText","Data":"小总结"}]},{"ID":"20231211215646-38kfehm","Type":"NodeParagraph","Properties":{"id":"20231211215646-38kfehm","updated":"20231211215646"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"4a904c01a1557972e050570918b09c28"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/4a904c01a1557972e050570918b09c28-20231211215646-cflvbi2.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215655-5uf6pde","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231211215655-5uf6pde","updated":"20231211215716"},"Children":[{"Type":"NodeText","Data":"Client-Streaming RPC 客户端流式RPC"}]},{"ID":"20231211215724-dgk8rg3","Type":"NodeParagraph","Properties":{"id":"20231211215724-dgk8rg3","updated":"20231211215724"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"客户端流式 RPC"},{"Type":"NodeText","Data":"​，显然也是单向流，客户端通过流式发起"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"多次"},{"Type":"NodeText","Data":" RPC 请求给服务端，服务端发起"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"一次"},{"Type":"NodeText","Data":"响应给客户端，大致如图："}]},{"ID":"20231211215724-rplwoa9","Type":"NodeParagraph","Properties":{"id":"20231211215724-rplwoa9","updated":"20231211215724"},"Children":[{"Type":"NodeText","Data":"服务端没有必要等到客户端发送完所有请求再响应，可以在收到部分请求之后就响应"}]},{"ID":"20231211215728-a1db3zl","Type":"NodeParagraph","Properties":{"id":"20231211215728-a1db3zl","updated":"20231211215728"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"3de3426262e8a2f9edf3a0f64b2663e9"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/3de3426262e8a2f9edf3a0f64b2663e9-20231211215728-aztfvi4.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215739-4tqlkci","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215739-4tqlkci","updated":"20231211215739"},"Children":[{"Type":"NodeText","Data":"pb 定义"}]},{"ID":"20231211215750-83j7owf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215750-83j7owf","updated":"20231211215758"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"syntax = \"proto3\";\n\npackage ecommerce;\n\noption go_package = \"ecommerce/\";\n\nimport \"google/protobuf/wrappers.proto\";\n\nmessage Order {\n  string id = 1;\n  repeated string items = 2;\n  string description = 3;\n  float price = 4;\n  string destination = 5;\n}\n\nservice OrderManagement {\n  rpc updateOrders(stream Order) returns (google.protobuf.StringValue);\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215804-ne807cy","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215804-ne807cy","updated":"20231211215804"},"Children":[{"Type":"NodeText","Data":"server 实现"}]},{"ID":"20231211215815-2j8e4bw","Type":"NodeParagraph","Properties":{"id":"20231211215815-2j8e4bw","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 注意与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Simple RPC"},{"Type":"NodeText","Data":"​的区别：因为我们的客户端是流式请求的，因此请求参数"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream OrderManagement_UpdateOrdersServer"},{"Type":"NodeText","Data":"​就是流对象"}]},{"ID":"20231211215815-vmk3ngm","Type":"NodeParagraph","Properties":{"id":"20231211215815-vmk3ngm","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 可以从"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream OrderManagement_UpdateOrdersServer"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recv"},{"Type":"NodeText","Data":"​函数读取消息"}]},{"ID":"20231211215815-025jnv7","Type":"NodeParagraph","Properties":{"id":"20231211215815-025jnv7","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 当"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Recv"},{"Type":"NodeText","Data":"​返回"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"io.EOF"},{"Type":"NodeText","Data":"​代表流已经结束"}]},{"ID":"20231211215815-2ucaijm","Type":"NodeParagraph","Properties":{"id":"20231211215815-2ucaijm","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream OrderManagement_UpdateOrdersServer"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SendAndClose"},{"Type":"NodeText","Data":"​函数关闭并发送响应"}]},{"ID":"20231211215815-r8a6z9b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215815-r8a6z9b","updated":"20231211215815"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"// 在这段程序中，我们对每一个 Recv 都进行了处理\n// 当发现 io.EOF (流关闭) 后，需要将最终的响应结果发送给客户端，同时关闭正在另外一侧等待的 Recv\nfunc (s *server) UpdateOrders(stream pb.OrderManagement_UpdateOrdersServer) error {\n ordersStr := \"Updated Order IDs : \"\n for {\n  order, err := stream.Recv()\n  if err == io.EOF {\n   // Finished reading the order stream.\n   return stream.SendAndClose(\n    \u0026wrapperspb.StringValue{Value: \"Orders processed \" + ordersStr})\n  }\n  // Update order\n  orders[order.Id] = *order\n\n  log.Println(\"Order ID \", order.Id, \": Updated\")\n  ordersStr += order.Id + \", \"\n }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215815-kfry1k2","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215815-kfry1k2","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"Client 实现"}]},{"ID":"20231211215815-168l61l","Type":"NodeParagraph","Properties":{"id":"20231211215815-168l61l","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 注意与"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Simple RPC"},{"Type":"NodeText","Data":"​的区别：因为我们的客户端是流式响应的，因此 RPC 函数返回值"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream"},{"Type":"NodeText","Data":"​是一个流"}]},{"ID":"20231211215815-vzcgtix","Type":"NodeParagraph","Properties":{"id":"20231211215815-vzcgtix","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 可以通过调用这个流对象的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Send(...)"},{"Type":"NodeText","Data":"​，来往这个对象写入数据"}]},{"ID":"20231211215815-uky83zi","Type":"NodeParagraph","Properties":{"id":"20231211215815-uky83zi","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"✨ 使用"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CloseAndRecv"},{"Type":"NodeText","Data":"​函数关闭并发送响应"}]},{"ID":"20231211215815-d209l9q","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231211215815-d209l9q","updated":"20231211215815"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"c := pb.NewOrderManagementClient(conn)\nctx, cancelFn := context.WithCancel(context.Background())\ndefer cancelFn()\n\nstream, err := c.UpdateOrders(ctx)\nif err != nil {\n  panic(err)\n}\n\nif err := stream.Send(\u0026pb.Order{\n  Id:          \"00\",\n  Items:       []string{\"A\", \"B\"},\n  Description: \"A with B\",\n  Price:       0.11,\n  Destination: \"ABC\",\n}); err != nil {\n  panic(err)\n}\n\nif err := stream.Send(\u0026pb.Order{\n  Id:          \"01\",\n  Items:       []string{\"C\", \"D\"},\n  Description: \"C with D\",\n  Price:       1.11,\n  Destination: \"ABCDEFG\",\n}); err != nil {\n  panic(err)\n}\n\nres, err := stream.CloseAndRecv()\nif err != nil {\n  panic(err)\n}\n\nlog.Printf(\"Update Orders Res : %s\", res)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231211215815-su1g7x9","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231211215815-su1g7x9","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"小总结"}]},{"ID":"20231211215815-d8y9ikj","Type":"NodeParagraph","Properties":{"id":"20231211215815-d8y9ikj","updated":"20231211215815"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/mmbiz_png/kWF4acROZUDddYfyZ6D4CJoiarwTFWdmwP3bmj1mV02LecmN6qXNOUt904hTQpf0LI0uvqic6EIyt2YZTALtw3qA/640?wx_fmt=png\u0026tp=wxpic\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215836-nbqmvya","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231211215836-nbqmvya","updated":"20231211215836"},"Children":[{"Type":"NodeText","Data":"Bidirectional-Streaming RPC 双向流式 RPC"}]},{"ID":"20231211215843-ru8spvg","Type":"NodeParagraph","Properties":{"id":"20231211215843-ru8spvg","updated":"20231211215843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"双向流式 RPC"},{"Type":"NodeText","Data":"​，顾名思义是双向流。由客户端以流式的方式发起请求，服务端同样以流式的方式响应请求"}]},{"ID":"20231211215843-hv22kom","Type":"NodeParagraph","Properties":{"id":"20231211215843-hv22kom","updated":"20231211215843"},"Children":[{"Type":"NodeText","Data":"首个请求一定是 Client 发起，但具体交互方式（谁先谁后、一次发多少、响应多少、什么时候关闭）根据程序编写的方式来确定（可以结合协程）"}]},{"ID":"20231211215843-fzhqfpo","Type":"NodeParagraph","Properties":{"id":"20231211215843-fzhqfpo","updated":"20231211215843"},"Children":[{"Type":"NodeText","Data":"假设该双向流是"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"按顺序发送"},{"Type":"NodeText","Data":"的话，大致如图："}]},{"ID":"20231211215843-hpja62f","Type":"NodeParagraph","Properties":{"id":"20231211215843-hpja62f","updated":"20231211215843"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"图片"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"https://mmbiz.qpic.cn/mmbiz_png/kWF4acROZUDddYfyZ6D4CJoiarwTFWdmwLbvOSakOoRsictLn2tSSB1FJHqnJCWd0Rjq6NdWDGAoaVXknpMlTddw/640?wx_fmt=png\u0026tp=wxpic\u0026wxfrom=5\u0026wx_lazy=1\u0026wx_co=1"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231211215845-isrev24","Type":"NodeParagraph","Properties":{"id":"20231211215845-isrev24"}}]}