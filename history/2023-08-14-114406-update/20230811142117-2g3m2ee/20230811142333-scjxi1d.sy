{"ID":"20230811142333-scjxi1d","Spec":"1","Type":"NodeDocument","Properties":{"icon":"2615","id":"20230811142333-scjxi1d","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230811142333-scjxi1d\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230811142827-sfdkk83\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230814113237-imon1ug\u0026quot;,\u0026quot;scrollTop\u0026quot;:6582,\u0026quot;focusId\u0026quot;:\u0026quot;20230814113042-rwirhov\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","title":"大模型启动脚本","updated":"20230814114357"},"Children":[{"ID":"20230811142827-sfdkk83","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230811142827-sfdkk83","updated":"20230811142831"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"def update_source(sample, metedata):\n    metedatas[\"source\"] = sample[\"source\"]\n    return metedata\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230811142827-c4cj6gi","Type":"NodeParagraph","Properties":{"id":"20230811142827-c4cj6gi","updated":"20230811143810"},"Children":[{"Type":"NodeText","Data":"这段代码定义了一个函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"update_source"},{"Type":"NodeText","Data":"​的函数，该函数接受两个参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sample"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"metadata"},{"Type":"NodeText","Data":"​。函数的目的是将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sample"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;source\u0026quot;"},{"Type":"NodeText","Data":"​值更新到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"metadata"},{"Type":"NodeText","Data":"​ 中的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;source\u0026quot;"},{"Type":"NodeText","Data":"​字段，并返回更新后的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"metadata"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20230811142333-4of91kv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230811142333-4of91kv","updated":"20230811143140"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"def load_file(filepath, sentence_size=SENTENCE_SIZE):\n        if filepath.lower().endswith(\".md\"):\n        loader = UnstructuredFileLoader(filepath, mode=\"elements\")\n        docs = loader.load()\n    elif filepath.lower().endswith(\".json\"):\n        loader = JSONLoader(filepath, jq_schema=\".[]\", content_key=\"knowledge\", metadata_func=update_source)\n        textsplitter = ChineseTextSplitter(pdf=False, sentence_size=sentence_size)\n        docs = loader.load_and_split(textsplitter)\n    elif filepath.lower().endswith(\".txt\"):\n        loader = TextLoader(filepath, autodetect_encoding=True)\n        textsplitter = ChineseTextSplitter(pdf=False, sentence_size=sentence_size)\n        docs = loader.load_and_split(textsplitter)\n    elif filepath.lower().endswith(\".pdf\"):\n        loader = UnstructuredPaddlePDFLoader(filepath)\n        textsplitter = ChineseTextSplitter(pdf=True, sentence_size=sentence_size)\n        docs = loader.load_and_split(textsplitter)\n    elif filepath.lower().endswith(\".jpg\") or filepath.lower().endswith(\".png\"):\n        loader = UnstructuredPaddleImageLoader(filepath, mode=\"elements\")\n        textsplitter = ChineseTextSplitter(pdf=False, sentence_size=sentence_size)\n        docs = loader.load_and_split(text_splitter=textsplitter)\n    else:\n        loader = UnstructuredFileLoader(filepath, mode=\"elements\")\n        textsplitter = ChineseTextSplitter(pdf=False, sentence_size=sentence_size)\n        docs = loader.load_and_split(text_splitter=textsplitter)\n    write_check_file(filepath, docs)\n    return docs\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230811142639-kgc2gmw","Type":"NodeParagraph","Properties":{"id":"20230811142639-kgc2gmw","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"这段代码定义了一个函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"load_file"},{"Type":"NodeText","Data":"​，它接受一个参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"filepath"},{"Type":"NodeText","Data":"​ 和一个可选参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"sentence_size"},{"Type":"NodeText","Data":"​，并返回一个 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 列表。"}]},{"ID":"20230811142639-yvf6uf8","Type":"NodeParagraph","Properties":{"id":"20230811142639-yvf6uf8","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"该函数根据 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"filepath"},{"Type":"NodeText","Data":"​ 的扩展名来确定如何加载文件并创建适当的加载器。根据不同的扩展名，函数采用不同的加载器来处理文件。以下是对不同扩展名的处理逻辑："}]},{"ID":"20230811142639-cjcq9fj","Type":"NodeList","ListData":{},"Properties":{"id":"20230811142639-cjcq9fj","updated":"20230811142639"},"Children":[{"ID":"20230811142639-gsh3ml4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811142639-gsh3ml4","updated":"20230811142639"},"Children":[{"ID":"20230811142639-ondr44u","Type":"NodeParagraph","Properties":{"id":"20230811142639-ondr44u","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"如果文件扩展名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".md"},{"Type":"NodeText","Data":"​，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnstructuredFileLoader"},{"Type":"NodeText","Data":"​ 加载器以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;elements\u0026quot;"},{"Type":"NodeText","Data":"​ 模式加载文件，并将结果存储在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 中。"}]}]},{"ID":"20230811142639-wro6z9e","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811142639-wro6z9e","updated":"20230811142639"},"Children":[{"ID":"20230811142639-6rx4zaf","Type":"NodeParagraph","Properties":{"id":"20230811142639-6rx4zaf","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"如果文件扩展名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".json"},{"Type":"NodeText","Data":"​，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"JSONLoader"},{"Type":"NodeText","Data":"​ 加载器来加载文件，并结合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChineseTextSplitter"},{"Type":"NodeText","Data":"​ 对文本进行分割，最后将结果存储在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 中。"}]}]},{"ID":"20230811142639-ia9mg11","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811142639-ia9mg11","updated":"20230811142639"},"Children":[{"ID":"20230811142639-qs7cago","Type":"NodeParagraph","Properties":{"id":"20230811142639-qs7cago","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"如果文件扩展名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".txt"},{"Type":"NodeText","Data":"​，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"TextLoader"},{"Type":"NodeText","Data":"​ 加载器来加载文件，并结合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChineseTextSplitter"},{"Type":"NodeText","Data":"​ 对文本进行分割，最后将结果存储在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 中。"}]}]},{"ID":"20230811142639-b5q0ckb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811142639-b5q0ckb","updated":"20230811142639"},"Children":[{"ID":"20230811142639-xbxve5c","Type":"NodeParagraph","Properties":{"id":"20230811142639-xbxve5c","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"如果文件扩展名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".pdf"},{"Type":"NodeText","Data":"​，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnstructuredPaddlePDFLoader"},{"Type":"NodeText","Data":"​ 加载器来加载文件，并结合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChineseTextSplitter"},{"Type":"NodeText","Data":"​ 对文本进行分割，最后将结果存储在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 中。"}]}]},{"ID":"20230811142639-uave9lb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811142639-uave9lb","updated":"20230811142639"},"Children":[{"ID":"20230811142639-fo0hgsa","Type":"NodeParagraph","Properties":{"id":"20230811142639-fo0hgsa","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"如果文件扩展名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".jpg"},{"Type":"NodeText","Data":"​ 或 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":".png"},{"Type":"NodeText","Data":"​，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnstructuredPaddleImageLoader"},{"Type":"NodeText","Data":"​ 加载器以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;elements\u0026quot;"},{"Type":"NodeText","Data":"​ 模式加载文件，并结合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChineseTextSplitter"},{"Type":"NodeText","Data":"​ 对文本进行分割，最后将结果存储在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 中。"}]}]},{"ID":"20230811142639-g4mx2nw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811142639-g4mx2nw","updated":"20230811142639"},"Children":[{"ID":"20230811142639-6sdeiyj","Type":"NodeParagraph","Properties":{"id":"20230811142639-6sdeiyj","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"如果以上条件都不满足，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnstructuredFileLoader"},{"Type":"NodeText","Data":"​ 加载器以 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026quot;elements\u0026quot;"},{"Type":"NodeText","Data":"​ 模式加载文件，并结合 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ChineseTextSplitter"},{"Type":"NodeText","Data":"​ 对文本进行分割，最后将结果存储在 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 中。"}]}]}]},{"ID":"20230811142639-jbqz1d9","Type":"NodeParagraph","Properties":{"id":"20230811142639-jbqz1d9","updated":"20230811142639"},"Children":[{"Type":"NodeText","Data":"最后，函数调用了 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"write_check_file(filepath, docs)"},{"Type":"NodeText","Data":"​ 来写入检查文件，然后返回 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​ 列表作为结果。"}]},{"ID":"20230811142639-011zkhi","Type":"NodeParagraph","Properties":{"id":"20230811142639-011zkhi","updated":"20230811142650"},"Children":[{"Type":"NodeText","Data":"这段代码的作用是根据给定的文件路径加载文件内容，并根据文件的类型和规则进行解析和处理。"}]},{"ID":"20230811142642-badxd8z","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230811142642-badxd8z","updated":"20230811144135"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"def write_check_file(filepath, docs):\n  folder_path = os.path.join(os.path.dirname(filepath), \"tmp_files\")\n  if not os.path.exists(floder_path):\n    os.makedirs(folder_path)\n  fp = os.path.join(folder_path, 'load_file.txt')\n  with open(fp, 'a+', encoding='utf-8') as fout:\n    fout.write(\"filepath=%s,len=%s\" % (filepath, len(docs)))\n    fout.write('\\n')\n    for i in docs:\n      fout.write(str(i))\n      fout.write('\\n')\n    fout.close()\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230811144244-dard34s","Type":"NodeParagraph","Properties":{"id":"20230811144244-dard34s","updated":"20230811144244"},"Children":[{"Type":"NodeText","Data":"这段代码定义了一个名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"write_check_file"},{"Type":"NodeText","Data":"​ 的函数，它接受两个参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"filepath"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"docs"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20230811144244-p3ufewr","Type":"NodeParagraph","Properties":{"id":"20230811144244-p3ufewr","updated":"20230811144244"},"Children":[{"Type":"NodeText","Data":"函数的主要目的是将文件路径和文档内容写入到一个检查文件中。首先，函数创建了一个名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"tmp_files"},{"Type":"NodeText","Data":"​ 的文件夹路径，用于存放检查文件。如果该文件夹路径不存在，则创建它。"}]},{"ID":"20230811144244-pfkujp2","Type":"NodeParagraph","Properties":{"id":"20230811144244-pfkujp2","updated":"20230811144244"},"Children":[{"Type":"NodeText","Data":"然后，函数打开一个名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"load_file.txt"},{"Type":"NodeText","Data":"​ 的文件对象，并以追加模式打开。接下来，函数逐行将文件路径和文档内容写入文件中。首先写入文件路径和文档数量的信息，然后写入每个文档的内容。"}]},{"ID":"20230811144244-nc8xezi","Type":"NodeParagraph","Properties":{"id":"20230811144244-nc8xezi","updated":"20230811144244"},"Children":[{"Type":"NodeText","Data":"最后，函数关闭文件对象。"}]},{"ID":"20230811144244-f5atncd","Type":"NodeParagraph","Properties":{"id":"20230811144244-f5atncd","updated":"20230811144248"},"Children":[{"Type":"NodeText","Data":"总体来说，这段代码的作用是将文件路径和文档内容写入到一个检查文件中，用于记录加载文件的过程和结果。"}]},{"ID":"20230811145534-mdewey9","Type":"NodeParagraph","Properties":{"id":"20230811145534-mdewey9"}},{"ID":"20230811153230-5dkvzhv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230811153230-5dkvzhv","updated":"20230811153746"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"def generate_prompt(related_docs: List[str], \n                    query: str,\n                    prompt_template: str = PROMPT_TEMPLATE, ) -\u003e str:\n    context = \"\\n\".join([doc.page_content for doc in related_docs])\n    prompt = prompt_template.replace(\"{question}\", query).replacec(\"{context}\",context)\n    return prompt\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230811153919-ss9bvpm","Type":"NodeParagraph","Properties":{"id":"20230811153919-ss9bvpm","updated":"20230811153919"},"Children":[{"Type":"NodeText","Data":"这段代码定义了一个名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"generate_prompt"},{"Type":"NodeText","Data":"​ 的函数。它接受三个参数："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"related_docs"},{"Type":"NodeText","Data":"​（相关文档列表）、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"query"},{"Type":"NodeText","Data":"​（查询内容）、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt_template"},{"Type":"NodeText","Data":"​（提示模板），并返回一个字符串。"}]},{"ID":"20230811153919-a3kbqb6","Type":"NodeParagraph","Properties":{"id":"20230811153919-a3kbqb6","updated":"20230811153919"},"Children":[{"Type":"NodeText","Data":"该函数的主要目的是根据给定的相关文档、查询内容和提示模板生成一个提示文本。首先，通过列表解析式，将相关文档列表中每个文档的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"page_content"},{"Type":"NodeText","Data":"​ 属性提取出来，并使用换行符连接起来形成一个文本字符串，存储在变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"context"},{"Type":"NodeText","Data":"​ 中。"}]},{"ID":"20230811153919-qhd93qk","Type":"NodeParagraph","Properties":{"id":"20230811153919-qhd93qk","updated":"20230811153919"},"Children":[{"Type":"NodeText","Data":"然后，使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt_template"},{"Type":"NodeText","Data":"​ 中的占位符 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"{question}"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"{context}"},{"Type":"NodeText","Data":"​ ，分别将查询内容和文档内容替换进去，得到最终的提示文本，存储在变量 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt"},{"Type":"NodeText","Data":"​ 中。"}]},{"ID":"20230811153919-1cifx0x","Type":"NodeParagraph","Properties":{"id":"20230811153919-1cifx0x","updated":"20230811153919"},"Children":[{"Type":"NodeText","Data":"最后，将生成的提示文本作为函数的输出进行返回。"}]},{"ID":"20230811153919-5bbp1nt","Type":"NodeParagraph","Properties":{"id":"20230811153919-5bbp1nt","updated":"20230811153919"},"Children":[{"Type":"NodeText","Data":"需要注意的是，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt_template"},{"Type":"NodeText","Data":"​ 参数有一个默认值 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PROMPT_TEMPLATE"},{"Type":"NodeText","Data":"​，它表示如果没有提供 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"prompt_template"},{"Type":"NodeText","Data":"​ 参数，则使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"PROMPT_TEMPLATE"},{"Type":"NodeText","Data":"​ 的默认值。"}]},{"ID":"20230811153919-2x4xpgt","Type":"NodeParagraph","Properties":{"id":"20230811153919-2x4xpgt","updated":"20230811153919"},"Children":[{"Type":"NodeText","Data":"总体而言，这个函数用来根据相关文档、查询内容和提示模板生成一段提示文本。如果您还有其他问题，请随时提问。"}]},{"ID":"20230811153837-u03jkr2","Type":"NodeParagraph","Properties":{"id":"20230811153837-u03jkr2"}},{"ID":"20230811145535-lkkp0xv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230811145535-lkkp0xv","updated":"20230811145536"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"def seperate_list(ls: List[int]) -\u003e List[List[int]]:\n    lists = []\n    ls1 = [ls[0]]\n    for i in range(1, len(ls)):\n        if ls[i - 1] + 1 == ls[i]:\n            ls1.append(ls[i])\n        else:\n            lists.append(ls1)\n            ls1 = [ls[i]]\n    lists.append(ls1)\n    return lists\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230811150133-wswzvn6","Type":"NodeParagraph","Properties":{"id":"20230811150133-wswzvn6","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"这段代码定义了一个名为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"separate_list"},{"Type":"NodeText","Data":"​ 的函数，该函数接受一个整数列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls"},{"Type":"NodeText","Data":"​，并返回一个整数列表的列表。"}]},{"ID":"20230811150133-hxw6cmv","Type":"NodeParagraph","Properties":{"id":"20230811150133-hxw6cmv","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"函数的主要目的是将连续递增的整数子序列划分为多个子列表。首先，函数创建一个空列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lists"},{"Type":"NodeText","Data":"​ 用于存储结果子列表。"}]},{"ID":"20230811150133-nndwlaf","Type":"NodeParagraph","Properties":{"id":"20230811150133-nndwlaf","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"接下来，函数初始化一个临时列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls1"},{"Type":"NodeText","Data":"​，并将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls"},{"Type":"NodeText","Data":"​ 中的第一个元素添加到其中。"}]},{"ID":"20230811150133-ociuh5t","Type":"NodeParagraph","Properties":{"id":"20230811150133-ociuh5t","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"然后，函数通过遍历 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls"},{"Type":"NodeText","Data":"​ 的索引从 1 到 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls"},{"Type":"NodeText","Data":"​ 的长度减一，进行以下操作："}]},{"ID":"20230811150133-d4nj6nv","Type":"NodeList","ListData":{},"Properties":{"id":"20230811150133-d4nj6nv","updated":"20230811150133"},"Children":[{"ID":"20230811150133-ymtdfj4","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811150133-ymtdfj4","updated":"20230811150133"},"Children":[{"ID":"20230811150133-7572z5l","Type":"NodeParagraph","Properties":{"id":"20230811150133-7572z5l","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"如果当前元素 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls[i]"},{"Type":"NodeText","Data":"​ 是前一个元素 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls[i - 1]"},{"Type":"NodeText","Data":"​ 加 1，则说明它们属于同一个递增子序列，将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls[i]"},{"Type":"NodeText","Data":"​ 添加到临时列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls1"},{"Type":"NodeText","Data":"​ 中。"}]}]},{"ID":"20230811150133-0hixx7t","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230811150133-0hixx7t","updated":"20230811150133"},"Children":[{"ID":"20230811150133-hrctia9","Type":"NodeParagraph","Properties":{"id":"20230811150133-hrctia9","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"否则，将临时列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls1"},{"Type":"NodeText","Data":"​ 添加到结果列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lists"},{"Type":"NodeText","Data":"​ 中，并重新初始化 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls1"},{"Type":"NodeText","Data":"​ 为只包含当前元素 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls[i]"},{"Type":"NodeText","Data":"​ 的列表。"}]}]}]},{"ID":"20230811150133-5trbvy5","Type":"NodeParagraph","Properties":{"id":"20230811150133-5trbvy5","updated":"20230811150133"},"Children":[{"Type":"NodeText","Data":"最后，循环结束后，将最后的临时列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ls1"},{"Type":"NodeText","Data":"​ 添加到结果列表 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"lists"},{"Type":"NodeText","Data":"​ 中，并返回结果列表作为函数的输出。"}]},{"ID":"20230811150133-zgbplhb","Type":"NodeParagraph","Properties":{"id":"20230811150133-zgbplhb","updated":"20230811150137"},"Children":[{"Type":"NodeText","Data":"总体而言，这段代码的作用是将给定的整数列表按照连续递增的子序列进行划分，并返回划分后的整数列表的列表。"}]},{"ID":"20230811151041-e50rh9d","Type":"NodeParagraph","Properties":{"id":"20230811151041-e50rh9d"}},{"ID":"20230811160951-z7b7488","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230811160951-z7b7488","updated":"20230814093026"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"# 基于向量得分的相似性检索\ndef similarity_search_with_score_by_vector(\n        self, embedding: List[float], k: int = 4\n) -\u003e List[Tuple[Document, float]]:\n\n# \n    scores, indices = self.index.search(np.array([embedding], dtype=np.float32),k)\n\n    docs = []\n    id_set = set()\n    store_len = len(self.index_to_docstore_id)\n    for j,i in enumerate(indices[0]):\n        if i == -1 or 0 \u003c self.score_threshold \u003c scores[0][j]:\n            # This happens when not enough docs are returned.\n            continue\n        _id = self.index_to_docstore_id[i]\n        doc = self.docstore.search(_id)\n        if not self.chunk_conent:\n            if not isinstance(doc, Document):\n                raise ValueError(f\"Could not find document for id {_id}, got {doc}\")\n            doc.metadata[\"score\"] = int(scores[0][j])\n            docs.append(doc)\n            continue\n        id_set.add(i)\n        docs_len = len(doc.page_content)\n        for k in range(1, max(i, store_len - i)):\n            break_flag = False\n            for l in [i + k, i - k]:\n                if 0 \u003c= l \u003c len(self.index_to_docstore_id):\n                    _id0 = self.index_to_docstore_id[l]\n                    doc0 = self.docstore.search(_id0)\n                    if docs_len + len(doc0.page_content) \u003e self.chunk_size:\n                        break_flag = True\n                        break\n                    elif doc0.metadata[\"source\"] == doc.metadata[\"source\"]:\n                        docs_len += len(doc0.page_content)\n                        id_set.add(l)\n            if break_flag:\n                break\n    if not self.chunk_conent:\n        return docs\n    if len(id_set) == 0 and self.score_threshold \u003e 0:\n        return []\n    id_list = sorted(list(id_set))\n    id_lists = seperate_list(id_list)\n    for id_seq in id_lists:\n        for id in id_seq:\n            if id == id_seq[0]:\n                _id = self.index_to_docstore_id[id]\n                doc = self.docstore.search(_id)\n            else:\n                _id0 = self.index_to_docstore_id[id]\n                doc0 = self.docstore.search(_id0)\n                doc.page_content += \" \" + doc0.page_content\n        if not isinstance(doc, Document):\n            raise ValueError(f\"Could not find document for id {_id}, got {doc}\")\n        try:\n            doc_score = min([scores[0][id] for id in [indices[0].tolist().index(i) for i in id_seq if i in indices[0]]])\n        except:\n            continue\n        doc.metadata[\"score\"] = int(doc_score)\n        docs.append(doc)\n    torch_gc()\n    return docs\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230814101238-hqmbp45","Type":"NodeParagraph","Properties":{"id":"20230814101238-hqmbp45","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"这是一个名为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"similarity_search_with_score_by_vector"},{"Type":"NodeText","Data":"​的方法，该方法用于基于向量进行相似度搜索，并返回带有得分的文档列表。方法接收两个参数："},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"embedding"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"k"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20230814101238-0xuyrwd","Type":"NodeList","ListData":{},"Properties":{"id":"20230814101238-0xuyrwd","updated":"20230814101238"},"Children":[{"ID":"20230814101238-tswy6ov","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814101238-tswy6ov","updated":"20230814101238"},"Children":[{"ID":"20230814101238-bioso0g","Type":"NodeParagraph","Properties":{"id":"20230814101238-bioso0g","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"embedding"},{"Type":"NodeText","Data":"​是一个包含浮点数的列表，表示待搜索的向量。"}]}]},{"ID":"20230814101238-loi7jgs","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814101238-loi7jgs","updated":"20230814101238"},"Children":[{"ID":"20230814101238-0olloog","Type":"NodeParagraph","Properties":{"id":"20230814101238-0olloog","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"k"},{"Type":"NodeText","Data":"​表示返回结果的数量，默认为4。"}]}]}]},{"ID":"20230814101238-cclttjf","Type":"NodeParagraph","Properties":{"id":"20230814101238-cclttjf","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"方法首先使用提供的向量进行搜索，并返回得分和索引。然后，它通过遍历索引并获取对应的文档信息来构建文档列表。"}]},{"ID":"20230814101238-jr2iwxu","Type":"NodeParagraph","Properties":{"id":"20230814101238-jr2iwxu","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"在构建文档列表的过程中，方法会检查搜索结果的有效性，并排除一些特殊情况（例如搜索结果为空或得分不满足阈值要求）。然后，它会将文档对象添加到列表中，并设置文档的得分。"}]},{"ID":"20230814101238-t3qtov4","Type":"NodeParagraph","Properties":{"id":"20230814101238-t3qtov4","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"最后，方法会对文档列表进行一些处理，包括合并具有相同来源的文档内容，并执行一些清理操作，然后返回最终的文档列表。"}]},{"ID":"20230814101238-0rh0yig","Type":"NodeParagraph","Properties":{"id":"20230814101238-0rh0yig","updated":"20230814101238"},"Children":[{"Type":"NodeText","Data":"需要注意的是，在这段代码中，还引用了一个名为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"seperate_list"},{"Type":"NodeText","Data":"​的函数，该函数用于分割ID列表。"}]},{"ID":"20230814091445-9dies6w","Type":"NodeParagraph","Properties":{"id":"20230814091445-9dies6w"}},{"ID":"20230814091445-ztxzige","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230814091445-ztxzige","updated":"20230814095615"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"def search_result2docs(search_results):\n    docs = []\n    for result in search_results:\n        doc = Document(page_content=result[\"snippet\"] if \"snippet\" in result.keys() else \"\",\n                       metadata={\"source\": result[\"link\"] if \"link\" in result.keys() else \"\",\n                                 \"filename\": result[\"title\"] if \"title\" in result.keys() else \"\"})\n        docs.append(doc)\n    return docs\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230814095715-g49evob","Type":"NodeParagraph","Properties":{"id":"20230814095715-g49evob","updated":"20230814095715"},"Children":[{"Type":"NodeText","Data":"这是一个名为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"search_result2docs"},{"Type":"NodeText","Data":"​的函数，函数的作用是将搜索结果转换为文档对象列表。函数接收一个"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"search_results"},{"Type":"NodeText","Data":"​参数，该参数是一个搜索结果列表。"}]},{"ID":"20230814095715-pweqiiw","Type":"NodeParagraph","Properties":{"id":"20230814095715-pweqiiw","updated":"20230814095715"},"Children":[{"Type":"NodeText","Data":"函数通过遍历搜索结果列表，在每个搜索结果中提取相关信息，并使用这些信息创建一个文档对象。其中，文档对象包括页面内容（如果存在）和元数据（来源链接和文件名）。将创建的文档对象添加到一个文档列表中。"}]},{"ID":"20230814095715-vdjqfyj","Type":"NodeParagraph","Properties":{"id":"20230814095715-vdjqfyj","updated":"20230814095715"},"Children":[{"Type":"NodeText","Data":"最后，函数返回这个文档对象列表。"}]},{"ID":"20230814095719-xhze99u","Type":"NodeParagraph","Properties":{"id":"20230814095719-xhze99u"}},{"ID":"20230814101021-v6vmlej","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230814101021-v6vmlej","updated":"20230814111645"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"cHl0aG9u"},{"Type":"NodeCodeBlockCode","Data":"class LocalDocQA:\n    llm: BaseAnswer = None\n    embeddings: object = None\n    top_k: int = VECTOR_SEARCH_TOP_K\n    chunk_size: int = CHUNK_SIZE\n    chunk_conent: bool = True\n    score_threshold: int = VECTOR_SEARCH_SCORE_THRESHOLD\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230814111648-8dgx83k","Type":"NodeParagraph","Properties":{"id":"20230814111648-8dgx83k","updated":"20230814111737"},"Children":[{"Type":"NodeText","Data":"定义了一个名为 LocalDocQA 的类，并且有一些类成员变量的初始化。"}]},{"ID":"20230814111738-nlgv7vq","Type":"NodeParagraph","Properties":{"id":"20230814111738-nlgv7vq","updated":"20230814111824"},"Children":[{"Type":"NodeText","Data":"类 LocalDocQA 有一些成员变量，包括："}]},{"ID":"20230814112922-tyem1mq","Type":"NodeList","ListData":{},"Properties":{"id":"20230814112922-tyem1mq","updated":"20230814112922"},"Children":[{"ID":"20230814112922-cnhf5ff","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814112922-cnhf5ff","updated":"20230814112922"},"Children":[{"ID":"20230814112922-p4pf2ep","Type":"NodeParagraph","Properties":{"id":"20230814112922-p4pf2ep","updated":"20230814112922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"llm"},{"Type":"NodeText","Data":"​​：类型为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"BaseAnswer"},{"Type":"NodeText","Data":"​​的成员变量，默认值为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"None"},{"Type":"NodeText","Data":"​​。"}]}]},{"ID":"20230814112922-lf4kpzg","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814112922-lf4kpzg","updated":"20230814112922"},"Children":[{"ID":"20230814112922-irm8g4o","Type":"NodeParagraph","Properties":{"id":"20230814112922-irm8g4o","updated":"20230814112922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"embeddings"},{"Type":"NodeText","Data":"​​：类型为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"object"},{"Type":"NodeText","Data":"​​的成员变量，默认值为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"None"},{"Type":"NodeText","Data":"​​。"}]}]},{"ID":"20230814112922-z6r5k5j","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814112922-z6r5k5j","updated":"20230814112922"},"Children":[{"ID":"20230814112922-ohk3sdt","Type":"NodeParagraph","Properties":{"id":"20230814112922-ohk3sdt","updated":"20230814112922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"top_k"},{"Type":"NodeText","Data":"​​：类型为整数，值为常量"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"VECTOR_SEARCH_TOP_K"},{"Type":"NodeText","Data":"​​。"}]}]},{"ID":"20230814112922-lpagl0u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814112922-lpagl0u","updated":"20230814112922"},"Children":[{"ID":"20230814112922-3xxynub","Type":"NodeParagraph","Properties":{"id":"20230814112922-3xxynub","updated":"20230814112922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"chunk_size"},{"Type":"NodeText","Data":"​​：类型为整数，值为常量"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"CHUNK_SIZE"},{"Type":"NodeText","Data":"​​。"}]}]},{"ID":"20230814112922-uad8r9u","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814112922-uad8r9u","updated":"20230814112922"},"Children":[{"ID":"20230814112922-96azmgo","Type":"NodeParagraph","Properties":{"id":"20230814112922-96azmgo","updated":"20230814112922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"chunk_content"},{"Type":"NodeText","Data":"​​：类型为布尔型，值为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"True"},{"Type":"NodeText","Data":"​​。"}]}]},{"ID":"20230814112922-mgtwnlb","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20230814112922-mgtwnlb","updated":"20230814112922"},"Children":[{"ID":"20230814112922-a0pms2q","Type":"NodeParagraph","Properties":{"id":"20230814112922-a0pms2q","updated":"20230814112922"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"score_threshold"},{"Type":"NodeText","Data":"​​：类型为整数，值为常量"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"VECTOR_SEARCH_SCORE_THRESHOLD"},{"Type":"NodeText","Data":"​​。"}]}]}]},{"ID":"20230814114136-2zwwn0j","Type":"NodeParagraph","Properties":{"id":"20230814114136-2zwwn0j"}},{"ID":"20230814114357-wbjyo7i","Type":"NodeParagraph","Properties":{"id":"20230814114357-wbjyo7i"}}]}