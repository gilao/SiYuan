{"ID":"20230724231512-fx41b13","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f41a","id":"20230724231512-fx41b13","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724231512-fx41b13\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724231513-gpqwsw6\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724231514-nrj06i6\u0026quot;,\u0026quot;scrollTop\u0026quot;:0,\u0026quot;focusId\u0026quot;:\u0026quot;20230724231513-gpqwsw6\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","title":"GO 适配器模式","updated":"20231128004352"},"Children":[{"ID":"20230724231513-gpqwsw6","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231513-gpqwsw6","updated":"20231128003747"},"Children":[{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"https://mp.weixin.qq.com/s/g1xKCmRMqxP9DmtW208A6w","TextMarkTextContent":"Go 适配器模式"}]},{"ID":"20230724231514-nrj06i6","Type":"NodeParagraph","Properties":{"id":"20230724231514-nrj06i6","updated":"20231128004352"},"Children":[{"Type":"NodeText","Data":"本期继续和大家探讨 Golang 设计模式这一主题. 今天，我们来聊一聊设计模式中的\"适配器模式\".\n适配器模式的作用是能够实现两个不兼容或弱兼容接口之间的适配桥接作用，该设计模式中会涉及到如下几个核心角色：\n• 目标 target：是一类含有指定功能的接口\n• 使用方 client：需要使用 target 的用户\n• 被适配的类 adaptee：和目标类 target 功能类似，但不完全吻合\n• 适配器类：adapter：能够将 adaptee 适配转换成 target 的功能类\n下面举个直观点的例子来说，我们作为用户（client）现在手中持有一个两孔的插头，需要匹配的目标是一个两孔的插座（target），但是现状是我们只找到了三孔的插座（adaptee），于是我们通过在三孔插座上插上一个实现三孔转两孔的适配器（adapter），最终实现了两孔插头与三孔插座之间的适配使用."}]}]}