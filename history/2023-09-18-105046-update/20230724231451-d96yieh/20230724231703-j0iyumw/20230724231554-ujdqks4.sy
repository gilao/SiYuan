{"ID":"20230724231554-ujdqks4","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3c6","id":"20230724231554-ujdqks4","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20230724231554-ujdqks4\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20230724231555-86dj53y\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20230724231622-s3rl5le\u0026quot;,\u0026quot;scrollTop\u0026quot;:2000,\u0026quot;focusId\u0026quot;:\u0026quot;20230724231555-86dj53y\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","tags":"Go 常用库","title":"Go bufio.Scanner","updated":"20230724231554"},"Children":[{"ID":"20230724231555-86dj53y","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20230724231555-86dj53y","updated":"20230724231555"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"# ","Properties":{"id":""}},{"Type":"NodeText","Data":"Golang中深入介绍bufio.Scanner"}]},{"ID":"20230724231556-hyi2rmw","Type":"NodeParagraph","Properties":{"id":"20230724231556-hyi2rmw","updated":"20230724231556"},"Children":[{"Type":"NodeText","Data":"Go 附带了帮助"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/bufio/","TextMarkTextContent":"缓冲 I/O"},{"Type":"NodeText","Data":"的包——优化读取或写入操作的技术。对于写入，它是通过在进一步传输数据（如磁盘或套接字）之前临时存储数据来完成的。数据被存储直到达到一定的大小。这样，更少的写入操作被触发，并且每个操作都归结为系统调用，这在频繁执行时可能会很昂贵。对于读取，这意味着在单个操作期间检索更多数据。它还减少了 sycalls 的数量，但也可以以更有效的方式使用底层硬件，例如读取磁盘块中的数据。这篇文章主要介绍"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a em","TextMarkAHref":"https://golang.org/pkg/bufio/","TextMarkTextContent":"bufio"},{"Type":"NodeText","Data":"包提供的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/bufio/#Scanner","TextMarkTextContent":"Scanner 。"},{"Type":"NodeText","Data":"它通过将数据拆分为标记并删除它们之间的空格来帮助处理数据流：它通过将数据拆分为标记并删除它们之间的空格来帮助处理数据流："}]},{"ID":"20230724231557-by61zmf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231557-by61zmf","updated":"20230724231557"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"“foo bar baz”\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231558-z8s5fze","Type":"NodeParagraph","Properties":{"id":"20230724231558-z8s5fze","updated":"20230724231558"},"Children":[{"Type":"NodeText","Data":"如果我们只对单词感兴趣，那么扫描器可以帮助按顺序检索“foo”、“bar”和“baz”（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/_GKmSMZmWZ","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231559-fl6nhyq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231559-fl6nhyq","updated":"20230724231559"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “fmt” \n    “字符串” \n）\nfunc main() { \n    input := \"foo bar baz\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    scanner.Split(bufio.ScanWords) \n    for scanner.Scan() { \n        fmt.Println(scanner.Text( )) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231560-9qo3nlq","Type":"NodeParagraph","Properties":{"id":"20230724231560-9qo3nlq","updated":"20230724231560"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231561-dbqrw37","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231561-dbqrw37","updated":"20230724231561"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"foo \nbar \nbaz\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231562-y7yaodl","Type":"NodeParagraph","Properties":{"id":"20230724231562-y7yaodl","updated":"20230724231562"},"Children":[{"Type":"NodeText","Data":"Scanner 在读取流时使用缓冲 I/O——它以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/io/#Reader","TextMarkTextContent":"io.Reader"},{"Type":"NodeText","Data":"作为参数。"}]},{"ID":"20230724231563-p7br2x9","Type":"NodeBlockquote","Properties":{"id":"20230724231563-p7br2x9","updated":"20230724231563"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231564-179uz70","Type":"NodeParagraph","Properties":{"id":"20230724231564-179uz70","updated":"20230724231564"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"如果您正在处理内存中的数据，如字符串或字节片，那么首先检查实用程序，如"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a em","TextMarkAHref":"https://golang.org/pkg/bytes/#Split","TextMarkTextContent":"bytes.Split"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"、"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a em","TextMarkAHref":"https://golang.org/pkg/strings/#Split","TextMarkTextContent":"strings.Split"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em strong","TextMarkTextContent":"在不使用数据流时"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"，依赖"},{"Type":"NodeText","Data":"字节"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"或"},{"Type":"NodeText","Data":"字符串包中的那些或其他好东西可能更简单。"}]}]},{"ID":"20230724231565-i1f9anc","Type":"NodeParagraph","Properties":{"id":"20230724231565-i1f9anc","updated":"20230724231565"},"Children":[{"Type":"NodeText","Data":"在引擎盖下扫描器使用缓冲区来累积读取数据。当缓冲区不为空或已达到 EOF 时，将调用拆分函数 ( "},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/bufio/#SplitFunc","TextMarkTextContent":"SplitFunc"},{"Type":"NodeText","Data":" )。到目前为止，我们已经看到了一个预定义的拆分函数，但可以使用签名设置任何东西："}]},{"ID":"20230724231566-5rxu7t0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231566-5rxu7t0","updated":"20230724231566"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func(data []byte, atEOF bool) (advance int, token []byte, err 错误)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231567-djtv17n","Type":"NodeParagraph","Properties":{"id":"20230724231567-djtv17n","updated":"20230724231567"},"Children":[{"Type":"NodeText","Data":"Split 函数是用到目前为止读取的数据调用的，基本上可以以 3 种不同的方式运行——通过返回值来区分……"}]},{"ID":"20230724231568-6ss02jp","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231568-6ss02jp","updated":"20230724231568"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"1.给我更多的数据！"}]},{"ID":"20230724231569-jnm4sx6","Type":"NodeParagraph","Properties":{"id":"20230724231569-jnm4sx6","updated":"20230724231569"},"Children":[{"Type":"NodeText","Data":"它说传递的数据不足以获得令牌。这是通过返回来完成的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"0, nil, nil"},{"Type":"NodeText","Data":"。发生这种情况时，扫描仪会尝试读取更多数据。如果缓冲区已满，则在任何读取之前将其"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/13cfb15cb18a8c0c31212c302175a4cb4c050155/src/bufio/scan.go#L190","TextMarkTextContent":"加倍。"},{"Type":"NodeText","Data":"让我们看看它是如何工作的（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/j7RDUVujNv","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231570-40rekhn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231570-40rekhn","updated":"20230724231570"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “fmt” \n    “字符串” \n）func main() { \n    input := \"abcdefghijkl\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    split := func(data []byte, atEOF bool) (advance int, token []byte, err error) { \n        fmt.Printf(\"%t\\t%d\\t%s\\n\", atEOF, len(data), data)\n        返回 0, nil, nil \n    } \n    scanner.Split(split) \n    buf := make([]byte , 2) \n    scanner.Buffer(buf, bufio.MaxScanTokenSize) \n    for scanner.Scan() { \n        fmt.Printf(\"%s\\n\", scanner.Text()) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231571-5nizbxt","Type":"NodeParagraph","Properties":{"id":"20230724231571-5nizbxt","updated":"20230724231571"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231572-6t4fhz3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231572-6t4fhz3","updated":"20230724231572"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"假 2 ab\n假 4 abcd\n假 8 abcdefgh\n假 12 abcdefghijkl\n真 12 abcdefghijkl\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231573-xw9hyze","Type":"NodeParagraph","Properties":{"id":"20230724231573-xw9hyze","updated":"20230724231573"},"Children":[{"Type":"NodeText","Data":"上面的 split 函数非常简单和贪心——总是请求更多的数据。扫描仪将尝试读取更多内容，但也会确保缓冲区有足够的空间。在我们的例子中，我们从大小为 2 的缓冲区开始："}]},{"ID":"20230724231574-v97bwjk","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231574-v97bwjk","updated":"20230724231574"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"buf := make([]byte, 2)\n扫描器.Buffer(buf, bufio.MaxScanTokenSize)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231575-meehoz1","Type":"NodeParagraph","Properties":{"id":"20230724231575-meehoz1","updated":"20230724231575"},"Children":[{"Type":"NodeText","Data":"第一次调用 split 函数后，scanner 会将缓冲区的大小加倍，读取更多数据，然后第二次调用 split 函数。第二次调用后，场景将完全相同。它在输出中可见——第一次调用 split 得到大小为 2 的切片，然后是 4、8，最后是 12，因为没有更多数据了。"}]},{"ID":"20230724231576-jfr7t2q","Type":"NodeBlockquote","Properties":{"id":"20230724231576-jfr7t2q","updated":"20230724231576"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231577-0q9jqaj","Type":"NodeParagraph","Properties":{"id":"20230724231577-0q9jqaj","updated":"20230724231577"},"Children":[{"Type":"NodeText","Data":"缓冲区的默认大小为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/13cfb15cb18a8c0c31212c302175a4cb4c050155/src/bufio/scan.go#L76","TextMarkTextContent":"4096"},{"Type":"NodeText","Data":"。"}]}]},{"ID":"20230724231578-ddg7789","Type":"NodeParagraph","Properties":{"id":"20230724231578-ddg7789","updated":"20230724231578"},"Children":[{"Type":"NodeText","Data":"值得在这里讨论"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"atEOF"},{"Type":"NodeText","Data":"参数。旨在将信息传递给没有更多数据可用的拆分函数。它可能在到达 EOF 时发生，也可能在 read 调用返回错误时发生。如果其中任何一个发生，扫描仪将永远不会再尝试读取。这样的标志可以使用 f.ex。返回错误（由于令牌不完整），这将导致"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"scanner.Split()"},{"Type":"NodeText","Data":"返回 false 并停止整个过程。稍后可以使用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Err"},{"Type":"NodeText","Data":"方法（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/oYuTW9okry","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）检查错误："}]},{"ID":"20230724231579-sxlykzt","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231579-sxlykzt","updated":"20230724231579"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “错误” \n    “fmt” \n    “字符串” \n）func main() { \n    input := \"abcdefghijkl\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    split := func(data []byte, atEOF bool) (advance int, token []byte, err error) { \n        fmt.Printf(\"%t\\t%d\\t%s\\n\", atEOF, len(data), data) \n        if atEOF { \n            return 0, nil, errors.New(\"bad luck\") \n        } \n        return 0, nil, nil \n    } \n    scanner.Split(split) \n    buf := make([]byte, 12) \n    scanner.Buffer(buf, bufio.MaxScanTokenSize) \n    for scanner.Scan() { \n        fmt.Printf(\"%s\\n\", 扫描器.Text()) \n    } \n    if scanner.Err() != nil { \n        fmt.Printf(\"error: %s\\n\", scanner.错误（）） \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231580-d1b8wop","Type":"NodeParagraph","Properties":{"id":"20230724231580-d1b8wop","updated":"20230724231580"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231581-f8kk10b","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231581-f8kk10b","updated":"20230724231581"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"false 12 abcdefghijkl \ntrue 12 abcdefghijkl\n错误：运气不好\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231582-ato8zr7","Type":"NodeParagraph","Properties":{"id":"20230724231582-ato8zr7","updated":"20230724231582"},"Children":[{"Type":"NodeText","Data":"参数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"atEOF"},{"Type":"NodeText","Data":"也可用于处理缓冲区中剩余的内容。逐行扫描输入的预定义拆分函数之一就是以"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/be943df58860e7dec008ebb8d68428d54e311b94/src/bufio/scan.go#L403","TextMarkTextContent":"这种方式"},{"Type":"NodeText","Data":"运行的。对于像这样的输入："}]},{"ID":"20230724231583-zfb1uyy","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231583-zfb1uyy","updated":"20230724231583"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"foo \nbar \nbaz\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231584-0zp451o","Type":"NodeParagraph","Properties":{"id":"20230724231584-0zp451o","updated":"20230724231584"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"\\n"},{"Type":"NodeText","Data":"最后一行的末尾没有，所以当函数"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/bufio/#ScanLines","TextMarkTextContent":"ScanLines"},{"Type":"NodeText","Data":"找不到换行符时，它将简单地返回剩余的字符作为最后一个标记（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/p7XFXM6zdR","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231585-5w631rl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231585-5w631rl","updated":"20230724231585"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “fmt” \n    “字符串” \n）func main() { \n    input := \"foo\\nbar\\nbaz\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    // 实际上不需要，因为它是默认的拆分函数。\n    scanner.Split(bufio.ScanLines) \n    for scanner.Scan() { \n        fmt.Println(scanner.Text()) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231586-w6hr37y","Type":"NodeParagraph","Properties":{"id":"20230724231586-w6hr37y","updated":"20230724231586"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231587-w64zafu","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231587-w64zafu","updated":"20230724231587"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"foo \nbar \nbaz\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231588-wrf05nf","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231588-wrf05nf","updated":"20230724231588"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"2. 找到令牌"}]},{"ID":"20230724231589-nm71ea7","Type":"NodeParagraph","Properties":{"id":"20230724231589-nm71ea7","updated":"20230724231589"},"Children":[{"Type":"NodeText","Data":"当 split 函数能够检测到标记时，就会发生这种情况。它返回缓冲区中要向前移动的字符数和令牌本身。返回两个值的原因很简单，因为 token 不必总是等于要向前移动的字节数。如果输入是“foo foo foo”并且目标是检测单词（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/bufio/#ScanWords","TextMarkTextContent":"ScanWords"},{"Type":"NodeText","Data":"），那么 split 函数也会跳过中间的空格："}]},{"ID":"20230724231590-pi840sb","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231590-pi840sb","updated":"20230724231590"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"(4, “富”) \n(4, “富”) \n(3, “富”)\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231591-sdnhyrp","Type":"NodeParagraph","Properties":{"id":"20230724231591-sdnhyrp","updated":"20230724231591"},"Children":[{"Type":"NodeText","Data":"让我们看看它的实际效果。此函数将仅查找连续的字符串"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"foo"},{"Type":"NodeText","Data":"（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/X_adw-KnUM","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231592-ggpczff","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231592-ggpczff","updated":"20230724231592"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “字节” \n    “fmt” \n    “io” \n    “字符串” \n）func main() { \n    input := \"foofoofoo\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    split := func(data []byte, atEOF bool) (advance int, token []byte, err error) { \n        if bytes.Equal(data[:3], []byte{'f', 'o', 'o'}) {\n            返回 3, []byte{'F'}, nil \n        }\n        如果 atEOF {\n            返回 0, nil, io.EOF \n        } \n        return 0, nil, nil \n    } scanner.Split \n    (split)\n    用于 scanner.Scan() { \n        fmt.Printf(\"%s\\n\", scanner.Text()) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231593-zu8zxih","Type":"NodeParagraph","Properties":{"id":"20230724231593-zu8zxih","updated":"20230724231593"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231594-znzm7h0","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231594-znzm7h0","updated":"20230724231594"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"F \nF \nF\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231595-0ovr7fr","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231595-0ovr7fr","updated":"20230724231595"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"3.错误"}]},{"ID":"20230724231596-hvmjwe1","Type":"NodeParagraph","Properties":{"id":"20230724231596-hvmjwe1","updated":"20230724231596"},"Children":[{"Type":"NodeText","Data":"如果 split 函数返回错误，则扫描器停止（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/KpiyhMFUyT","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231597-qc1cofz","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231597-qc1cofz","updated":"20230724231597"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “错误” \n    “fmt” \n    “字符串” \n）func main() { \n    input := \"abcdefghijkl\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    split := func(data []byte, atEOF bool) (advance int, token []byte, err error) { \n        return 0, nil, errors.New(\"bad luck\") \n    } scanner.Split \n    (split) \n    for scanner.Scan() { \n        fmt.Printf(\"%s\\n\", scanner.Text()) \n    }\n    如果扫描仪。 Err() != nil { \n        fmt.Printf(\"错误: %s\\n\", scanner.Err()) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231598-5p7ag2f","Type":"NodeParagraph","Properties":{"id":"20230724231598-5p7ag2f","updated":"20230724231598"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231599-jatrv84","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231599-jatrv84","updated":"20230724231599"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"错误：运气不好\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231600-jaqt1qi","Type":"NodeParagraph","Properties":{"id":"20230724231600-jaqt1qi","updated":"20230724231600"},"Children":[{"Type":"NodeText","Data":"有一个特殊错误不会立即停止扫描仪……。"}]},{"ID":"20230724231601-sxh7xbm","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231601-sxh7xbm","updated":"20230724231601"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"ErrFinalToken"}]},{"ID":"20230724231602-s1ccz29","Type":"NodeParagraph","Properties":{"id":"20230724231602-s1ccz29","updated":"20230724231602"},"Children":[{"Type":"NodeText","Data":"Scanner 提供了一个选项来发出所谓的"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a em","TextMarkAHref":"https://golang.org/pkg/bufio/#pkg-variables","TextMarkTextContent":"final token"},{"Type":"NodeText","Data":"。这是一个不会中断循环的特殊标记（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"Scan仍然返回 true），但对Scan"},{"Type":"NodeText","Data":"的后续调用将立即停止（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/be943df58860e7dec008ebb8d68428d54e311b94/src/bufio/scan.go#L129","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231603-bqqn5sv","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231603-bqqn5sv","updated":"20230724231603"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"func (s *Scanner) Scan() bool { \n    if s.done { \n  \treturn false \n    } \n    ...\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231604-c1o9ye7","Type":"NodeParagraph","Properties":{"id":"20230724231604-c1o9ye7","updated":"20230724231604"},"Children":[{"Type":"NodeText","Data":"在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/issues/11836","TextMarkTextContent":"#11836"},{"Type":"NodeText","Data":"中提出，可用于在找到特殊令牌时停止扫描（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/ArL-k-i2OV","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231605-onuk2m2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231605-onuk2m2","updated":"20230724231605"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “字节” \n    “fmt” \n    “字符串” \n）func split(data []byte, atEOF bool) (advance int, token []byte, err error) { \n    advance, token, err = bufio.ScanWords(data, atEOF) \n    if err == nil \u0026\u0026 token != nil \u0026\u0026 字节.Equal(token, []byte{'e', 'n', 'd'}) { \n        return 0, []byte{'E', 'N', 'D'}, bufio.ErrFinalToken \n    } \n    return \n}func main() { \n    input := \"foo end bar\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) scanner.Split \n    (split) \n    for scanner.Scan() { \n        fmt.Println(scanner.Text()) \n    } \n    if scanner.Err() != nil { \n        fmt.Printf(\"错误: %s\\n\", scanner.Err()) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231606-qad9646","Type":"NodeParagraph","Properties":{"id":"20230724231606-qad9646","updated":"20230724231606"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231607-jh9goqm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231607-jh9goqm","updated":"20230724231607"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"结束\n_\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231608-lgrrp25","Type":"NodeBlockquote","Properties":{"id":"20230724231608-lgrrp25","updated":"20230724231608"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e ","Properties":{"id":""}},{"ID":"20230724231609-a83nlym","Type":"NodeParagraph","Properties":{"id":"20230724231609-a83nlym","updated":"20230724231609"},"Children":[{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"io.EOF和"},{"Type":"NodeText","Data":"ErrFinalToken都不"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"被认为是“真”错误——*"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em em","TextMarkTextContent":"如果这两者中的任何一个导致扫描器停止，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":" Err"},{"Type":"NodeText","Data":"方法将返回*nil 。"}]}]},{"ID":"20230724231610-ebfu5un","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231610-ebfu5un","updated":"20230724231610"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"最大令牌大小/ErrTooLong"}]},{"ID":"20230724231611-wd3a7ul","Type":"NodeParagraph","Properties":{"id":"20230724231611-wd3a7ul","updated":"20230724231611"},"Children":[{"Type":"NodeText","Data":"默认情况下，下面使用的缓冲区的最大长度为"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/be943df58860e7dec008ebb8d68428d54e311b94/src/bufio/scan.go#L74","TextMarkTextContent":"64 * 1024"},{"Type":"NodeText","Data":"字节。这意味着找到的令牌不能超过这个限制（源代码）"}]},{"ID":"20230724231612-iwlqvam","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231612-iwlqvam","updated":"20230724231612"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “fmt” \n    “字符串” \n）func main() { \n    input := strings.Repeat(\"x\", bufio.MaxScanTokenSize) \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    for scanner.Scan() { \n        fmt.Println(scanner.Text() ) \n    } \n    if scanner.Err() != nil { \n        fmt.Println(scanner.Err()) \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231613-c0vuit9","Type":"NodeParagraph","Properties":{"id":"20230724231613-c0vuit9","updated":"20230724231613"},"Children":[{"Type":"NodeText","Data":"程序打印"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"bufio.Scanner: token too long"},{"Type":"NodeText","Data":"。这个限制可以用"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a em","TextMarkAHref":"https://golang.org/pkg/bufio/#Scanner.Buffer","TextMarkTextContent":"Buffer"},{"Type":"NodeText","Data":"方法设置，它也允许传递自定义缓冲区。我们已经在"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"strong","TextMarkTextContent":"给我更多数据"},{"Type":"NodeText","Data":"中看到了这一点！部分，但让我们看一些更小的例子（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/ZsgJzuIy4r","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231614-ai7h6ll","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231614-ai7h6ll","updated":"20230724231614"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"buf := make([]byte, 10) \ninput := strings.Repeat(\"x\", 20) \nscanner := bufio.NewScanner(strings.NewReader(input)) scanner.Buffer \n(buf, 20) \nfor scanner.Scan () { \n    fmt.Println(scanner.Text()) \n}\n如果 scanner.Err() != nil { \n    fmt.Println(scanner.Err()) \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231615-e3jjmzd","Type":"NodeParagraph","Properties":{"id":"20230724231615-e3jjmzd","updated":"20230724231615"},"Children":[{"Type":"NodeText","Data":"输出："}]},{"ID":"20230724231616-8hhsfnd","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231616-8hhsfnd","updated":"20230724231616"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"bufio.Scanner：令牌太长\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231617-sya1wdu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724231617-sya1wdu","updated":"20230724231617"},"Children":[{"Type":"NodeHeadingC8hMarker","Data":"## ","Properties":{"id":""}},{"Type":"NodeText","Data":"防止死循环"}]},{"ID":"20230724231618-hopqe36","Type":"NodeParagraph","Properties":{"id":"20230724231618-hopqe36","updated":"20230724231618"},"Children":[{"Type":"NodeText","Data":"几年前，"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/issues/8672","TextMarkTextContent":"#8672"},{"Type":"NodeText","Data":"已被报道。它的补丁增加了一种可以调用 split 函数的场景"},{"Type":"NodeEmphasis","Children":[{"Type":"NodeEmA6kOpenMarker","Data":"*"},{"Type":"NodeText","Data":"——atEOF"},{"Type":"NodeEmA6kCloseMarker","Data":"*"}]},{"Type":"NodeText","Data":"为真且缓冲区为空。现有代码可能会陷入无限循环："}]},{"ID":"20230724231619-1rktmo2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231619-1rktmo2","updated":"20230724231619"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"包主导入（\n    “bufio” \n    “字节” \n    “fmt” \n    “字符串” \n）func main() { \n    input := \"foo|bar\" \n    scanner := bufio.NewScanner(strings.NewReader(input)) \n    split := func(data []byte, atEOF bool) (advance int, token []byte, err错误）{\n        如果我 := bytes.IndexByte(data, '|'); i \u003e= 0 { \n            return i + 1, data[0:i], nil \n        }\n        如果 atEOF { \n            return len(data), data[:len(data)], nil \n        } \n        return 0, nil, nil \n    } \n    scanner.Split( split) \n    for scanner.Scan() { \n        if scanner.Text() != \"\" { \n            fmt.Println(scanner.Text()) \n        } \n    } \n}\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231620-umb1klc","Type":"NodeParagraph","Properties":{"id":"20230724231620-umb1klc","updated":"20230724231620"},"Children":[{"Type":"NodeText","Data":"Split 函数假定当"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"em","TextMarkTextContent":"atEOF"},{"Type":"NodeText","Data":"为真时，可以安全地使用缓冲区的其余部分作为标记。问题是在修复"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/issues/8672","TextMarkTextContent":"#8672"},{"Type":"NodeText","Data":"后缓冲区可能为空，因此 split 函数不会推进缓冲区 — 返回"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"code","TextMarkTextContent":"(0, [], nil)"},{"Type":"NodeText","Data":"。"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/issues/9020","TextMarkTextContent":"#9020"},{"Type":"NodeText","Data":"检测到这种情况和恐慌（"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://play.golang.org/p/HUbd-ZInAQ","TextMarkTextContent":"源代码"},{"Type":"NodeText","Data":"）："}]},{"ID":"20230724231621-vsrjto3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"CodeBlockFenceChar":96,"CodeBlockFenceLen":3,"CodeBlockOpenFence":"YGBg","CodeBlockCloseFence":"YGBg","Properties":{"id":"20230724231621-vsrjto3","updated":"20230724231621"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}},{"Type":"NodeCodeBlockFenceInfoMarker","Properties":{"id":""}},{"Type":"NodeCodeBlockCode","Data":"foo \nbar\n恐慌：bufio.Scan：100 个空令牌，没有进展\n","Properties":{"id":""}},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```","CodeBlockFenceLen":3,"Properties":{"id":""}}]},{"ID":"20230724231622-s3rl5le","Type":"NodeParagraph","Properties":{"id":"20230724231622-s3rl5le","updated":"20230724231622"},"Children":[{"Type":"NodeText","Data":"当我第一次阅读 Scanner 或"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://golang.org/pkg/bufio/#SplitFunc","TextMarkTextContent":"SplitFunc"},{"Type":"NodeText","Data":"的文档时，并不是所有关于它在我脑海中的所有情况下如何工作的都清楚。跳入源代码也无济于事，因为乍一看"},{"Type":"NodeTextMark","Properties":{"id":""},"TextMarkType":"a","TextMarkAHref":"https://github.com/golang/go/blob/be943df58860e7dec008ebb8d68428d54e311b94/src/bufio/scan.go#L128","TextMarkTextContent":"Scan相当复杂。"},{"Type":"NodeText","Data":"希望这篇文章能让其他人更清楚。"}]}]}