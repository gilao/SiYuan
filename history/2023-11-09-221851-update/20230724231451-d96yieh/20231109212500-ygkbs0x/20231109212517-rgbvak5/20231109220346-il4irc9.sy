{"ID":"20231109220346-il4irc9","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231109220346-il4irc9","title":"中间件实例","updated":"20231109221445"},"Children":[{"ID":"20231109220353-8ybp74h","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231109220353-8ybp74h","updated":"20231109220755"},"Children":[{"Type":"NodeText","Data":"捕获panic "}]},{"ID":"20231109220756-rd3kdkp","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231109220756-rd3kdkp","updated":"20231109220757"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// RecoverHandler 中间件通过 defer 来捕获 panic ，然后返回 500 状态码\nfunc RecoverHandler(next http.Handler) http.Handler {\n\tfn := func(w http.ResponseWriter, r *http.Request) {\n\t\tdefer func() {\n\t\t\tif r := recover(); r != nil {\n\t\t\t\tlog.Println(\"Recover from painc %+v\",r)\n\t\t\t\thttp.Error(w, http.StatusText(500),500)\n\t\t\t}\n\t\t}()\n\t\tnext.ServeHTTP(w,r)\n\t}\n\treturn http.HandlerFunc(fn)\n}\n\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231109220346-b4i2wgj","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231109220346-b4i2wgj","updated":"20231109221148"},"Children":[{"Type":"NodeText","Data":"记录请求耗时"}]},{"ID":"20231109221148-kic86e9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231109221148-kic86e9","updated":"20231109221149"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// LoggingHandler 中间件 记录请求耗时\nfunc  LoggingHandler(next http.Handler) http.Handler {\n\tfn := func(w http.ResponseWriter, r *http.Request) {\n\t\tstart := time.Now()\n\t\tnext.ServeHTTP(w,r)\n\t\tend := time.Now()\n\t\tlog.Printf(\"[%s] %q %v\", r.Method, r.URL.Path, end.Sub(start))\n\t}\n\treturn http.HandlerFunc(fn)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231109221200-7bavf6n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231109221200-7bavf6n","updated":"20231109221209"},"Children":[{"Type":"NodeText","Data":"中间件的使用"}]},{"ID":"20231109221210-8e4xesp","Type":"NodeParagraph","Properties":{"id":"20231109221210-8e4xesp","updated":"20231109221259"},"Children":[{"Type":"NodeText","Data":"alice 是 go 中的一个中间件库，可以通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"alice.New()"},{"Type":"NodeText","Data":"​来添加中间件，具体使用如下："}]},{"ID":"20231109221259-93uwpky","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231109221259-93uwpky","updated":"20231109221439"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"m := alice.New(middleware.LoggingHandler, middleware.RecoverHandler)\nmux.Router.HandleFunc(\"/api/v1/user\", m.ThenFunc(controller)).Methods(\"POST\")\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231109221445-lrcdkyr","Type":"NodeParagraph","Properties":{"id":"20231109221445-lrcdkyr"}}]}