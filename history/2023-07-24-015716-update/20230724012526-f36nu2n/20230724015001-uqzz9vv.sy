{"ID":"20230724015001-uqzz9vv","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f35f","id":"20230724015001-uqzz9vv","title":"9. Docker网络","updated":"20230724015014"},"Children":[{"ID":"20230724015009-qep95tv","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20230724015009-qep95tv","updated":"20230724015009"},"Children":[{"Type":"NodeText","Data":"1. 基本网络配置"}]},{"ID":"20230724015009-p5whafy","Type":"NodeParagraph","Properties":{"id":"20230724015009-p5whafy","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Linux平台下，Docker容器网络资源通过内核的Network Namespace机制实现隔离，，不同的Network Namespace有各自的网络设备、协议栈、路由表、防火墙规则等，反之，同一Network Namespace下的进程共享同一网络视图。通过对Network Namespace的灵活操纵，Docker提供了五种容器网络模式："}]},{"ID":"20230724015009-9qtilsj","Type":"NodeParagraph","Properties":{"id":"20230724015009-9qtilsj","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"1. none ：不为容器配置任何网络功能"}]},{"ID":"20230724015009-q5b8dsw","Type":"NodeParagraph","Properties":{"id":"20230724015009-q5b8dsw","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在该模式下，需要以——net=none参数启动容器："}]},{"ID":"20230724015009-6n3t5e9","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724015009-6n3t5e9","updated":"20230724015009"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"$ docker run ——net=none -ti ubuntu:latest ip addr show\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724015009-y44hskd","Type":"NodeParagraph","Properties":{"id":"20230724015009-y44hskd","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"2. container 与另一个运行中的容器共享Network Namespace，共享相同的网络视图"}]},{"ID":"20230724015009-j4nz901","Type":"NodeParagraph","Properties":{"id":"20230724015009-j4nz901","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"首先以默认网络配置（bridge模式）启动一个容器，设置hostname为dockerNet，dns为8.8.4.4。"}]},{"ID":"20230724015009-0jn58n2","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724015009-0jn58n2","updated":"20230724015009"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"$ docker run -h dockerNet ——dns 8.8.4.4 -tid ubuntu:latest bash\n\nd25864df1a3bbdd40613552197bd1a965acaf7f3dcb2673d50c875d4a303a67f\n\n$ docker exec -ti d25864df1a3b bash\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724015009-m76xtm5","Type":"NodeParagraph","Properties":{"id":"20230724015009-m76xtm5","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"然后以——net=container：d25864df1a3b方式启动另一个容器："}]},{"ID":"20230724015009-1r4rug3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20230724015009-1r4rug3","updated":"20230724015009"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"$ docker run ——net=container:d25864df1a3b -ti ubuntu:latest bash\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20230724015009-53fx447","Type":"NodeParagraph","Properties":{"id":"20230724015009-53fx447","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"使用——net=container：d25864df1a3b参数启动的容器，其IP地址、DNS、hostname都继承了容器d25864df1a3b。实质上两个容器是共享同一个Network Namespace的，自然网络配置也是完全相同的。"}]},{"ID":"20230724015009-ckqlgnm","Type":"NodeParagraph","Properties":{"id":"20230724015009-ckqlgnm","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"3）host：与主机共享Root Network Namespace，容器有完整的权限可以操纵主机的协议栈、路由表和防火墙等，所以被认为是不安全的。"}]},{"ID":"20230724015009-nb2toow","Type":"NodeParagraph","Properties":{"id":"20230724015009-nb2toow","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"相应的，host模式启动时需要指定——net=host参数。"}]},{"ID":"20230724015009-l2i66lr","Type":"NodeParagraph","Properties":{"id":"20230724015009-l2i66lr","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"docker run -ti ——net=host ubuntu:latest bash"}]},{"ID":"20230724015009-05z5b2y","Type":"NodeParagraph","Properties":{"id":"20230724015009-05z5b2y","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"host模式下，容器可以操纵主机的网络配置，这是危险的，除非万不得已，应该尽可能避免使用host模式。"}]},{"ID":"20230724015009-0xxsb1u","Type":"NodeParagraph","Properties":{"id":"20230724015009-0xxsb1u","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"4）bridge：Docker设计的NAT网络模型。"}]},{"ID":"20230724015009-mbymupg","Type":"NodeParagraph","Properties":{"id":"20230724015009-mbymupg","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Docker daemon启动时会在主机创建一个Linux网桥（默认为docker0，可通过-b参数手动指定）。容器启动时，Docker会创建一对veth pair（虚拟网络接口）设备，veth设备的特点是成对存在，从一端进入的数据会同时出现在另一端。Docker会将一端挂载到docker0网桥上，另一端放入容器的Network Namespace内，从而实现容器与主机通信的目的。"}]},{"ID":"20230724015009-rbrmg3h","Type":"NodeParagraph","Properties":{"id":"20230724015009-rbrmg3h","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"在桥接模式下，Docker容器与Internet的通信，以及不同容器之间的通信，都是通过iptables规则控制的。"}]},{"ID":"20230724015009-mjmg07g","Type":"NodeParagraph","Properties":{"id":"20230724015009-mjmg07g","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"总之，Docker网络的初始化动作包括：创建docker0网桥、为docker0网桥新建子网及路由、创建相应的iptables规则等。"}]},{"ID":"20230724015009-sjyh315","Type":"NodeParagraph","Properties":{"id":"20230724015009-sjyh315","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Bridge模式是Docker默认的容器运行模式，以bridge模式启动的容器，默认会从172.17.42.1/16子网内分配IP。"}]},{"ID":"20230724015009-4cbt0na","Type":"NodeParagraph","Properties":{"id":"20230724015009-4cbt0na","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"5）overlay：Docker原生的跨主机多子网模型。"}]},{"ID":"20230724015009-ynh1d1g","Type":"NodeParagraph","Properties":{"id":"20230724015009-ynh1d1g","updated":"20230724015009"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"overlay网络模型比较复杂，底层需要类似consul或etcd的KV存储系统进行消息同步，核心是通过Linux网桥与vxlan隧道实现跨主机划分子网。"}]},{"ID":"20230724015001-eyn2o48","Type":"NodeParagraph","Properties":{"id":"20230724015001-eyn2o48","updated":"20230724015001"}}]}