{"ID":"20231211220111-4k8dlra","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f5c4","id":"20231211220111-4k8dlra","scroll":"\u0026#123;\u0026quot;rootId\u0026quot;:\u0026quot;20231211220111-4k8dlra\u0026quot;,\u0026quot;startId\u0026quot;:\u0026quot;20231211220122-8ovplnr\u0026quot;,\u0026quot;endId\u0026quot;:\u0026quot;20231214001240-c5ij10e\u0026quot;,\u0026quot;scrollTop\u0026quot;:3618.666748046875,\u0026quot;focusId\u0026quot;:\u0026quot;20231214001240-c5ij10e\u0026quot;,\u0026quot;focusStart\u0026quot;:0,\u0026quot;focusEnd\u0026quot;:0\u0026#125;","title":"03-拦截器","updated":"20231214001240"},"Children":[{"ID":"20231211220122-8ovplnr","Type":"NodeParagraph","Properties":{"id":"20231211220122-8ovplnr","updated":"20231211220122"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​的"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"拦截器"},{"Type":"NodeText","Data":"和其他框架的拦截器（也称middleware）作用是一样的。利用拦截器我们可以在不侵入业务逻辑的前提下修改或者记录服务端或客户端的请求与响应，利用拦截器我们可以实现诸如日志记录、权限认证、限流等诸多功能"}]},{"ID":"20231211220122-u22m69w","Type":"NodeParagraph","Properties":{"id":"20231211220122-u22m69w","updated":"20231213235408"},"Children":[{"Type":"NodeText","Data":"上一篇提到"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gRPC"},{"Type":"NodeText","Data":"​的通信模式分为"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"unary"},{"Type":"NodeText","Data":"​和"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"streaming"},{"Type":"NodeText","Data":"​几种模式，"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":"拦截器也分为两种："},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"code strong text","TextMarkTextContent":"unary interceptors"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":"和"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"code strong text","TextMarkTextContent":"streaming interceptors"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"},{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","Properties":{"style":"color: var(--b3-font-color6);"},"TextMarkType":"strong text","TextMarkTextContent":" ，两种拦截器可以分别应用在服务端和客户端，所以gRPC总共为我们提供了四种拦截器。它们已经被定义成了go中的接口，我们创建的拦截器只要实现这些接口即可"},{"Type":"NodeKramdownSpanIAL","Data":"{: style=\"color: var(--b3-font-color6);\"}"}]},{"ID":"20231213235911-k4v8uyt","Type":"NodeParagraph","Properties":{"id":"20231213235911-k4v8uyt","updated":"20231213235911"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"1322492ff62efd63ca3699e0b60488f2"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/1322492ff62efd63ca3699e0b60488f2-20231213235911-swp7qjg.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231213225334-8ksheeh","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231213225334-8ksheeh","updated":"20231213235930"},"Children":[{"Type":"NodeText","Data":"服务端拦截器"}]},{"ID":"20231213235930-dcqonvi","Type":"NodeParagraph","Properties":{"id":"20231213235930-dcqonvi","updated":"20231214000004"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"服务端的拦截器从请求开始按顺序执行拦截器，在执行完对应RPC的逻辑之后，再按反向的顺序执行拦截器中对响应的处理逻辑。"}]},{"ID":"20231213235946-p03lomh","Type":"NodeParagraph","Properties":{"id":"20231213235946-p03lomh","updated":"20231213235946"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"7eb62f10fac384a56948caa922ea9a45"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/7eb62f10fac384a56948caa922ea9a45-20231213235946-kl6pza7.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231214000007-nzbcrwb","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231214000007-nzbcrwb","updated":"20231214000023"},"Children":[{"Type":"NodeText","Data":"unary interceptors"}]},{"ID":"20231214000024-5odxir0","Type":"NodeParagraph","Properties":{"id":"20231214000024-5odxir0","updated":"20231214000034"},"Children":[{"Type":"NodeText","Data":"对于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"unary"},{"Type":"NodeText","Data":"​服务的拦截器只需实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnaryServerInterceptor"},{"Type":"NodeText","Data":"​接口即可"}]},{"ID":"20231214000035-j134v5h","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231214000035-j134v5h","updated":"20231214000120"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func(ctx context.Context, req interface{}, \n     info *UnaryServerInfo, handler UnaryHandler) (resp interface{}, err error)\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231214000147-qgx7t88","Type":"NodeList","ListData":{},"Properties":{"id":"20231214000147-qgx7t88","updated":"20231214000207"},"Children":[{"ID":"20231214000147-i36go8b","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-i36go8b","updated":"20231214000155"},"Children":[{"ID":"20231214000122-mxuokbf","Type":"NodeParagraph","Properties":{"id":"20231214000122-mxuokbf","updated":"20231214000155"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ctx context.Context"},{"Type":"NodeText","Data":"​：单个请求的上下文"}]}]},{"ID":"20231214000147-opgjvs3","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-opgjvs3","updated":"20231214000200"},"Children":[{"ID":"20231214000135-lslpl2m","Type":"NodeParagraph","Properties":{"id":"20231214000135-lslpl2m","updated":"20231214000200"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"req interface{}"},{"Type":"NodeText","Data":"​：RPC服务的请求结构体"}]}]},{"ID":"20231214000147-twah05k","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-twah05k","updated":"20231214000204"},"Children":[{"ID":"20231214000136-c4dxndd","Type":"NodeParagraph","Properties":{"id":"20231214000136-c4dxndd","updated":"20231214000204"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"info *UnaryServerInfo"},{"Type":"NodeText","Data":"​：RPC的服务信息"}]}]},{"ID":"20231214000147-58azlzt","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214000147-58azlzt","updated":"20231214000207"},"Children":[{"ID":"20231214000138-38veszf","Type":"NodeParagraph","Properties":{"id":"20231214000138-38veszf","updated":"20231214000207"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handler UnaryHandler"},{"Type":"NodeText","Data":"​：它包装了服务实现，通过调用它我们可以完成RPC并获取到响应"}]}]}]},{"ID":"20231214000140-9ria88r","Type":"NodeParagraph","Properties":{"id":"20231214000140-9ria88r","updated":"20231214000140"},"Children":[{"Type":"NodeText","Data":"参数看不懂没关系，我们来看一个例子"}]},{"ID":"20231214000208-jskb1ot","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231214000208-jskb1ot","updated":"20231214000218"},"Children":[{"Type":"NodeText","Data":"示例"}]},{"ID":"20231214000219-meoiyyn","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231214000219-meoiyyn","updated":"20231214000744"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// 实现 unary interceptors\nfunc orderUnaryServerInterceptor(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n\t// Pre-processing logic\n\ts := time.Now()\n\n\t// Invoking the handler to complete the normal execution of a unary RPC.\n\tm, err := handler(ctx, req)\n\n\t// Post processing logic\n\tlog.Printf(\"Method: %s, req: %s, resp: %s, latency: %s\\n\",\n\t\tinfo.FullMethod, req, m, time.Now().Sub(s))\n\n\treturn m, err\n}\n\nfunc main() {\n\ts := grpc.NewServer(\n\t\t// 使用 unary interceptors\n\t\tgrpc.UnaryInterceptor(orderUnaryServerInterceptor),\n\t)\n\n\tpb.RegisterOrderManagementServer(s, \u0026OrderManagementImpl{})\n\n\t// ...\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231214000228-tnsqzas","Type":"NodeParagraph","Properties":{"id":"20231214000228-tnsqzas","updated":"20231214000804"},"Children":[{"Type":"NodeText","Data":"完整代码参考：https://github.com/liangwt/grpc-example/tree/main/06-interceptors/server。下同"}]},{"ID":"20231214000807-nkmj8af","Type":"NodeParagraph","Properties":{"id":"20231214000807-nkmj8af","updated":"20231214000813"},"Children":[{"Type":"NodeText","Data":"假设我们的客户端请求了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GetOrder"},{"Type":"NodeText","Data":"​，根据示例再重新看下拦截器接口的每一个参数"}]},{"ID":"20231214000814-8sw8fwy","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20231214000814-8sw8fwy","updated":"20231214000824"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"req interface{}"},{"Type":"NodeText","Data":"​​"}]},{"ID":"20231214000826-03pk3zk","Type":"NodeParagraph","Properties":{"id":"20231214000826-03pk3zk","updated":"20231214000857"},"Children":[{"Type":"NodeText","Data":"RPC服务的请求结构体，对于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"GetOrder"},{"Type":"NodeText","Data":"​来说就是"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"orderId *wrapperspb.StringValue"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231214000859-ump9qqt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20231214000859-ump9qqt","updated":"20231214000913"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"info *UnaryServerInfo"},{"Type":"NodeText","Data":"​​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"包含两个字段："}]},{"ID":"20231214000918-by1ywd7","Type":"NodeParagraph","Properties":{"id":"20231214000918-by1ywd7","updated":"20231214000918"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"FullMethod"},{"Type":"NodeText","Data":"​是请求的method名字（例如"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/ecommerce.OrderManagement/getOrder"},{"Type":"NodeText","Data":"​)；"}]},{"ID":"20231214000918-uypst2i","Type":"NodeParagraph","Properties":{"id":"20231214000918-uypst2i","updated":"20231214000918"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Server"},{"Type":"NodeText","Data":"​就是服务实现（就是示例"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RegisterOrderManagementServer"},{"Type":"NodeText","Data":"​中的"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"\u0026amp;OrderManagementImpl{}"},{"Type":"NodeText","Data":"​)"}]},{"ID":"20231214000922-iynmtdt","Type":"NodeHeading","HeadingLevel":4,"Properties":{"id":"20231214000922-iynmtdt","updated":"20231214000930"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"strong code","TextMarkTextContent":"handler"},{"Type":"NodeText","Data":"​​"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"包装了服务实现"}]},{"ID":"20231214000935-5uvxfgk","Type":"NodeParagraph","Properties":{"id":"20231214000935-5uvxfgk","updated":"20231214000935"},"Children":[{"Type":"NodeText","Data":"所以在调用它之前我们可以进行改写"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"req"},{"Type":"NodeText","Data":"​或"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ctx"},{"Type":"NodeText","Data":"​、记录逻辑开始时间等操作"}]},{"ID":"20231214000935-76qho5e","Type":"NodeParagraph","Properties":{"id":"20231214000935-76qho5e","updated":"20231214000935"},"Children":[{"Type":"NodeText","Data":"调用完"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handler"},{"Type":"NodeText","Data":"​即完成了RPC并获取到响应，我们不仅可以记录响应还可以改写响应"}]},{"ID":"20231214000937-ii237ar","Type":"NodeHeading","HeadingLevel":3,"Properties":{"id":"20231214000937-ii237ar","updated":"20231214000946"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"总结"}]},{"ID":"20231214000948-v563vv8","Type":"NodeParagraph","Properties":{"id":"20231214000948-v563vv8","updated":"20231214000953"},"Children":[{"Type":"NodeText","Data":"这张图大致展示了"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"UnaryServerInterceptor"},{"Type":"NodeText","Data":"​接口的每个参数的含义"}]},{"ID":"20231214001000-qagiot1","Type":"NodeParagraph","Properties":{"id":"20231214001000-qagiot1","updated":"20231214001000"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeImage","Data":"span","Children":[{"Type":"NodeBang"},{"Type":"NodeOpenBracket"},{"Type":"NodeLinkText","Data":"c0dbb840e8c0d0a46230583b67efb32e"},{"Type":"NodeCloseBracket"},{"Type":"NodeOpenParen"},{"Type":"NodeLinkDest","Data":"assets/c0dbb840e8c0d0a46230583b67efb32e-20231214001000-jjcy0yn.png"},{"Type":"NodeCloseParen"}]},{"Type":"NodeText","Data":"​"}]},{"ID":"20231214001125-21f7ras","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20231214001125-21f7ras","updated":"20231214001148"},"Children":[{"Type":"NodeText","Data":"streaming interceptors"}]},{"ID":"20231214001159-efu8a10","Type":"NodeParagraph","Properties":{"id":"20231214001159-efu8a10","updated":"20231214001159"},"Children":[{"Type":"NodeText","Data":"对于"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"stream"},{"Type":"NodeText","Data":"​服务的拦截器只要实现"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"StreamServerInterceptor"},{"Type":"NodeText","Data":"​接口即可。它适用于我们上一篇介绍的"}]},{"ID":"20231214001159-ql9jz5o","Type":"NodeList","ListData":{},"Properties":{"id":"20231214001159-ql9jz5o","updated":"20231214001159"},"Children":[{"ID":"20231214001159-unnesgm","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001159-unnesgm","updated":"20231214001159"},"Children":[{"ID":"20231214001159-vvwv05l","Type":"NodeParagraph","Properties":{"id":"20231214001159-vvwv05l","updated":"20231214001159"},"Children":[{"Type":"NodeText","Data":"服务器端流式 RPC"}]}]},{"ID":"20231214001159-pg1uoor","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001159-pg1uoor","updated":"20231214001159"},"Children":[{"ID":"20231214001159-69oh0kg","Type":"NodeParagraph","Properties":{"id":"20231214001159-69oh0kg","updated":"20231214001159"},"Children":[{"Type":"NodeText","Data":"客户端流式 RPC"}]}]},{"ID":"20231214001159-utosifi","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001159-utosifi","updated":"20231214001159"},"Children":[{"ID":"20231214001159-wyxue6l","Type":"NodeParagraph","Properties":{"id":"20231214001159-wyxue6l","updated":"20231214001159"},"Children":[{"Type":"NodeText","Data":"双向流式 RPC"}]}]}]},{"ID":"20231214001225-zfmnk20","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231214001225-zfmnk20","updated":"20231214001232"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func(srv interface{}, ss ServerStream, \n     info *StreamServerInfo, handler StreamHandler) error\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231214001239-jj6ea2t","Type":"NodeList","ListData":{},"Properties":{"id":"20231214001239-jj6ea2t","updated":"20231214001239"},"Children":[{"ID":"20231214001239-ehcdhbj","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001239-ehcdhbj","updated":"20231214001239"},"Children":[{"ID":"20231214001239-8dqhzws","Type":"NodeParagraph","Properties":{"id":"20231214001239-8dqhzws","updated":"20231214001239"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"srv interface{}"},{"Type":"NodeText","Data":"​：服务实现"}]}]},{"ID":"20231214001239-ju646un","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001239-ju646un","updated":"20231214001239"},"Children":[{"ID":"20231214001239-zqmheex","Type":"NodeParagraph","Properties":{"id":"20231214001239-zqmheex","updated":"20231214001239"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"ss ServerStream"},{"Type":"NodeText","Data":"​：服务端视角的流。怎么理解呢？无论是哪一种流式RPC对于服务端来说发送（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"SendMsg"},{"Type":"NodeText","Data":"​）就代表着响应数据，接收（"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"RecvMsg"},{"Type":"NodeText","Data":"​）就代表着请求数据，不同的流式RPC的区别就在于是多次发送数据（服务器端流式 RPC）还是多次接收数据（客户端流式 RPC）或者两者均有（双向流式 RPC）。因此仅使用这一个抽象就代表了所有的流式RPC场景"}]}]},{"ID":"20231214001239-c6auedo","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001239-c6auedo","updated":"20231214001239"},"Children":[{"ID":"20231214001239-qmelrbp","Type":"NodeParagraph","Properties":{"id":"20231214001239-qmelrbp","updated":"20231214001239"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"info *StreamServerInfo"},{"Type":"NodeText","Data":"​：RPC的服务信息"}]}]},{"ID":"20231214001239-ir0p6mp","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20231214001239-ir0p6mp","updated":"20231214001239"},"Children":[{"ID":"20231214001239-zwi7tsh","Type":"NodeParagraph","Properties":{"id":"20231214001239-zwi7tsh","updated":"20231214001239"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"handler StreamHandler"},{"Type":"NodeText","Data":"​：它包装了服务实现，通过调用它我们可以完成RPC"}]}]}]},{"ID":"20231214001240-c5ij10e","Type":"NodeParagraph","Properties":{"id":"20231214001240-c5ij10e"}}]}