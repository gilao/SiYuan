{"ID":"20231215000028-z4c455a","Spec":"1","Type":"NodeDocument","Properties":{"id":"20231215000028-z4c455a","tags":"Go,Go 1.21.0版本变化","title":"Go 1.21.0 新增 3 个内置函数详解","updated":"20231215005040"},"Children":[{"ID":"20231215000028-ovnhp4e","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231215000028-ovnhp4e","updated":"20231215000135"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231215000139-zmu2q4q","Type":"NodeParagraph","Properties":{"id":"20231215000139-zmu2q4q","updated":"20231215000139"},"Children":[{"Type":"NodeText","Data":"Go 1.21.0 新增 3 个内置函数，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max"},{"Type":"NodeText","Data":"​ 函数，返回 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"N"},{"Type":"NodeText","Data":"​ 个入参中最小/最大的参数，参数类型为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Ordered"},{"Type":"NodeText","Data":"​（有序类型，即支持比较运算符的类型）。"}]},{"ID":"20231215000139-njqk6e6","Type":"NodeParagraph","Properties":{"id":"20231215000139-njqk6e6","updated":"20231215000139"},"Children":[{"Type":"NodeText","Data":"​"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"clear"},{"Type":"NodeText","Data":"​ 函数，删除 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"map"},{"Type":"NodeText","Data":"​ 中的所有元素，将切片中的所有元素改为切片类型的零值。"}]},{"ID":"20231215000139-yn3cf1y","Type":"NodeParagraph","Properties":{"id":"20231215000139-yn3cf1y","updated":"20231215000139"},"Children":[{"Type":"NodeText","Data":"本文我们详细介绍 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"clear"},{"Type":"NodeText","Data":"​ 的使用方式。"}]},{"ID":"20231215000140-og94oo5","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231215000140-og94oo5","updated":"20231215000150"},"Children":[{"Type":"NodeText","Data":"Min and max"}]},{"ID":"20231215000200-rsp3mtz","Type":"NodeParagraph","Properties":{"id":"20231215000200-rsp3mtz","updated":"20231215000200"},"Children":[{"Type":"NodeText","Data":"源码"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"/usr/local/go/src/builtin/builtin.go"},{"Type":"NodeText","Data":"​"}]},{"ID":"20231215000201-zonjmnh","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215000201-zonjmnh","updated":"20231215000207"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// The max built-in function returns the largest value of a fixed number of\n// arguments of [cmp.Ordered] types. There must be at least one argument.\n// If T is a floating-point type and any of the arguments are NaNs,\n// max will return NaN.\nfunc max[T cmp.Ordered](x T, y ...T) T\n\n// The min built-in function returns the smallest value of a fixed number of\n// arguments of [cmp.Ordered] types. There must be at least one argument.\n// If T is a floating-point type and any of the arguments are NaNs,\n// min will return NaN.\nfunc min[T cmp.Ordered](x T, y ...T) T\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215000215-6zn2dn3","Type":"NodeParagraph","Properties":{"id":"20231215000215-6zn2dn3","updated":"20231215000215"},"Children":[{"Type":"NodeText","Data":"阅读源码，我们可以发现其是泛型函数，入参是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"[cmp.Ordered]"},{"Type":"NodeText","Data":"​，"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmp"},{"Type":"NodeText","Data":"​ 包也是 Go 1.21.0 新增的 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"package"},{"Type":"NodeText","Data":"​，它提供 3 个函数，分别是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Less"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"Compare"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"isNaN"},{"Type":"NodeText","Data":"​，感兴趣的读者朋友们可以阅读源码，本文将不展开介绍 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"cmp"},{"Type":"NodeText","Data":"​ 包提供的函数。"}]},{"ID":"20231215000215-vxvensq","Type":"NodeParagraph","Properties":{"id":"20231215000215-vxvensq","updated":"20231215000215"},"Children":[{"Type":"NodeText","Data":"如果读者朋友们还不熟悉泛型，建议先阅读之前的一篇介绍泛型的文章「"},{"Type":"NodeTextMark","TextMarkType":"a","TextMarkAHref":"http://mp.weixin.qq.com/s?__biz=MzA4Mjc1NTMyOQ==\u0026amp;mid=2247486861\u0026amp;idx=1\u0026amp;sn=2ceac03668f74305f376ce23fed4885b\u0026amp;chksm=9f81a7e3a8f62ef5d2dfcbcca483a7cb7d9f90349b29982cdff4c6c535e2416ad4bc8d109e7d\u0026amp;scene=21#wechat_redirect","TextMarkTextContent":"Go 1.18 新增三大功能之一“泛型”怎么使用？"},{"Type":"NodeText","Data":"」。"}]},{"ID":"20231215004041-p7huo8f","Type":"NodeParagraph","Properties":{"id":"20231215004041-p7huo8f","updated":"20231215004046"},"Children":[{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"[cmp.Ordered]"},{"Type":"NodeText","Data":"​类型源码："}]},{"ID":"20231215004047-mgigu8e","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215004047-mgigu8e","updated":"20231215004104"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"// Ordered is a constraint that permits any ordered type: any type\n// that supports the operators \u003c \u003c= \u003e= \u003e.\n// If future releases of Go add new ordered types,\n// this constraint will be modified to include them.\n//\n// Note that floating-point types may contain NaN (\"not-a-number\") values.\n// An operator such as == or \u003c will always report false when\n// comparing a NaN value with any other value, NaN or not.\n// See the [Compare] function for a consistent way to compare NaN values.\ntype Ordered interface {\n ~int | ~int8 | ~int16 | ~int32 | ~int64 |\n  ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~uintptr |\n  ~float32 | ~float64 |\n  ~string\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215004159-sse0nb9","Type":"NodeParagraph","Properties":{"id":"20231215004159-sse0nb9","updated":"20231215004159"},"Children":[{"Type":"NodeText","Data":"内置函数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max"},{"Type":"NodeText","Data":"​ 分别计算任意数量（至少有一个参数）的可比较类型参数的最小值和最大值。"}]},{"ID":"20231215004159-9f0qe6e","Type":"NodeParagraph","Properties":{"id":"20231215004159-9f0qe6e","updated":"20231215004159"},"Children":[{"Type":"NodeText","Data":"所谓可比较类型参数，即可以使用运算符比较的参数，比如整型、浮点型、字符串。"}]},{"ID":"20231215004159-fc8mhjl","Type":"NodeParagraph","Properties":{"id":"20231215004159-fc8mhjl","updated":"20231215004159"},"Children":[{"Type":"NodeText","Data":"如果泛型 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"T"},{"Type":"NodeText","Data":"​ 是浮点数类型，并且任意参数是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NaN"},{"Type":"NodeText","Data":"​(\"not-a-number\")，则函数的返回结果是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"NaN"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231215004159-kxd9kgi","Type":"NodeParagraph","Properties":{"id":"20231215004159-kxd9kgi","updated":"20231215004159"},"Children":[{"Type":"NodeText","Data":"所谓不可比较类型参数，即不可以使用运算符比较的参数，比如 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"slice"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"map"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"function"},{"Type":"NodeText","Data":"​，它们不可以作为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max"},{"Type":"NodeText","Data":"​ 的参数。"}]},{"ID":"20231215004218-stqpqdt","Type":"NodeBlockquote","Properties":{"id":"20231215004218-stqpqdt","updated":"20231215004227"},"Children":[{"Type":"NodeBlockquoteMarker","Data":"\u003e"},{"ID":"20231215004220-3rsm2u6","Type":"NodeParagraph","Properties":{"id":"20231215004220-3rsm2u6","updated":"20231215004227"},"Children":[{"Type":"NodeText","Data":"注意：虽然 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"slice"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"map"},{"Type":"NodeText","Data":"​、"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"function"},{"Type":"NodeText","Data":"​ 三种类型不可比较，但是，有个特例，即它们都可以和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"nil"},{"Type":"NodeText","Data":"​ 比较。"}]}]},{"ID":"20231215004227-nh5jozj","Type":"NodeParagraph","Properties":{"id":"20231215004227-nh5jozj","updated":"20231215004403"},"Children":[{"Type":"NodeText","Data":"接下来，我们使用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"max"},{"Type":"NodeText","Data":"​ 分别计算整型、浮点型、字符串，代码如下："}]},{"ID":"20231215004405-bbbktgi","Type":"NodeParagraph","Properties":{"id":"20231215004405-bbbktgi","updated":"20231215004411"},"Children":[{"Type":"NodeText","Data":"示例一："}]},{"ID":"20231215004411-hur6rxl","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215004411-hur6rxl","updated":"20231215004418"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    m := min()\n    fmt.Println(m) // invalid operation: not enough arguments for min() (expected 1, found 0)\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215004420-g5c6jtd","Type":"NodeParagraph","Properties":{"id":"20231215004420-g5c6jtd","updated":"20231215004845"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们没有传入参数，执行代码，返回错误信息。"}]},{"ID":"20231215004846-4iyjq7s","Type":"NodeParagraph","Properties":{"id":"20231215004846-4iyjq7s","updated":"20231215004850"},"Children":[{"Type":"NodeText","Data":"示例二："}]},{"ID":"20231215004851-c4moatw","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215004851-c4moatw","updated":"20231215004858"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    s := []int{1, 2, 3}\n    m := min(s...)\n    fmt.Println(m) // invalid operation: invalid use of ... with built-in min\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215004900-yjhgskh","Type":"NodeParagraph","Properties":{"id":"20231215004900-yjhgskh","updated":"20231215004916"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们传入切片类型参数，执行代码，返回错误信息。"}]},{"ID":"20231215004925-2qz6mkn","Type":"NodeParagraph","Properties":{"id":"20231215004925-2qz6mkn","updated":"20231215004928"},"Children":[{"Type":"NodeText","Data":"示例三："}]},{"ID":"20231215004928-9va30z3","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215004928-9va30z3","updated":"20231215004935"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    var x int\n    m := min(x)\n    fmt.Println(m) // 0\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215004944-kslj962","Type":"NodeParagraph","Properties":{"id":"20231215004944-kslj962","updated":"20231215004944"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们定义一个整型参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"x"},{"Type":"NodeText","Data":"​，并将其作为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 函数的入参，返回值赋值给参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"m"},{"Type":"NodeText","Data":"​，打印 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"m"},{"Type":"NodeText","Data":"​ 输出的值为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"0"},{"Type":"NodeText","Data":"​，即参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"x"},{"Type":"NodeText","Data":"​ 的值。"}]},{"ID":"20231215004944-31t5lfk","Type":"NodeParagraph","Properties":{"id":"20231215004944-31t5lfk","updated":"20231215004944"},"Children":[{"Type":"NodeText","Data":"根据打印输出结果，我们可以得出结论，当我们给 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 函数仅传入一个参数时，返回结果和入参的值相等，即 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"m == x"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231215004947-giq513z","Type":"NodeParagraph","Properties":{"id":"20231215004947-giq513z","updated":"20231215004952"},"Children":[{"Type":"NodeText","Data":"示例四："}]},{"ID":"20231215004952-fwlfknr","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215004952-fwlfknr","updated":"20231215005003"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    var x, y int = 1, 2\n    m := min(x, y)\n    fmt.Println(m) // 1\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215005008-pq77jby","Type":"NodeParagraph","Properties":{"id":"20231215005008-pq77jby","updated":"20231215005008"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们定义整型参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"x"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"y"},{"Type":"NodeText","Data":"​，分别赋值 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"1"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"2"},{"Type":"NodeText","Data":"​，并将 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"x"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"y"},{"Type":"NodeText","Data":"​ 作为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 函数的入参，返回值赋值给参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"m"},{"Type":"NodeText","Data":"​，打印 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"m"},{"Type":"NodeText","Data":"​ 输出的值为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"1"},{"Type":"NodeText","Data":"​，即参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"x"},{"Type":"NodeText","Data":"​ 和 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"y"},{"Type":"NodeText","Data":"​ 中值最小的参数的值。"}]},{"ID":"20231215005017-g0xbx0m","Type":"NodeParagraph","Properties":{"id":"20231215005017-g0xbx0m","updated":"20231215005021"},"Children":[{"Type":"NodeText","Data":"示例五："}]},{"ID":"20231215005022-w58zv2t","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20231215005022-w58zv2t","updated":"20231215005030"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func main() {\n    c := min(1, 2.0, 3)\n    fmt.Printf(\"%T\\t%v\\n\", c, c) // float64 1\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20231215005040-tjuisvl","Type":"NodeParagraph","Properties":{"id":"20231215005040-tjuisvl","updated":"20231215005040"},"Children":[{"Type":"NodeText","Data":"阅读上面这段代码，我们给 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 函数传入三个参数，分别是整型参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"1"},{"Type":"NodeText","Data":"​、浮点型参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"2.0"},{"Type":"NodeText","Data":"​ 和整型参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"3"},{"Type":"NodeText","Data":"​，返回值赋值给参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"c"},{"Type":"NodeText","Data":"​，打印 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"c"},{"Type":"NodeText","Data":"​ 的类型和值，输出结果为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float64 1"},{"Type":"NodeText","Data":"​，即三个参数中值最小的参数的值。"}]},{"ID":"20231215005040-gw71w48","Type":"NodeParagraph","Properties":{"id":"20231215005040-gw71w48","updated":"20231215005040"},"Children":[{"Type":"NodeText","Data":"但是，值最小的参数的类型发生了变化，由整型转换为浮点型，这是因为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"min"},{"Type":"NodeText","Data":"​ 函数中的参数，如果有浮点型参数，则所有参数都会转换为浮点型参数作比较，因为运行该示例代码的电脑是 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"64"},{"Type":"NodeText","Data":"​ 位操作系统，所以参数 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"2.0"},{"Type":"NodeText","Data":"​ 的类型为 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"float64"},{"Type":"NodeText","Data":"​。"}]},{"ID":"20231215005040-0qxngc7","Type":"NodeParagraph","Properties":{"id":"20231215005040-0qxngc7","updated":"20231215005040"},"Children":[{"Type":"NodeText","Data":"如果我们指定浮点数类型，则参数都会转换为指定的浮点数类型参数作比较。"}]}]}