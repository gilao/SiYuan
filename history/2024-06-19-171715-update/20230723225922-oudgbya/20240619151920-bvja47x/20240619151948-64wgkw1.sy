{"ID":"20240619151948-64wgkw1","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3dd-fe0f","id":"20240619151948-64wgkw1","title":"Go语言实现百万计WebSocket 连接","type":"doc","updated":"20240619170947"},"Children":[{"ID":"20240619152005-76efofb","Type":"NodeParagraph","Properties":{"id":"20240619152005-76efofb","updated":"20240619152945"},"Children":[{"Type":"NodeText","Data":"WebSocket是一种在单个TCP连接上进行全双工通信的协议。在高并发环境下，如何有效地管理和维护数百万个WebSocket连接是一个挑战，尤其是在资源有限的情况下。Go语言以其轻量级的协程和高效的网络I/O处理能力，成为实现大规模WebSocket连接的理想选择。本文将详细介绍如何在Go中构建一个能够支持百万级WebSocket连接的服务，包括系统架构设计、性能优化策略以及具体的实现步骤和代码示例。"}]},{"ID":"20240619152953-rj3wha1","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240619152953-rj3wha1","updated":"20240619152959"},"Children":[{"Type":"NodeText","Data":"架构设计"}]},{"ID":"20240619152959-gp4bgue","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619152959-gp4bgue","updated":"20240619153010"},"Children":[{"Type":"NodeText","Data":"使用 gorilla/websocket 库"}]},{"ID":"20240619153023-8ugwve5","Type":"NodeParagraph","Properties":{"id":"20240619153023-8ugwve5","updated":"20240619153010"},"Children":[{"Type":"NodeText","Data":"选择一个高效的WebSocket库是至关重要的。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gorilla/websocket"},{"Type":"NodeText","Data":"​是Go中广泛使用的WebSocket库。"}]},{"ID":"20240619153023-hhb0oix","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619153023-hhb0oix","updated":"20240619153010"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"import \"github.com/gorilla/websocket\"\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619164915-wtqge0n","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619164915-wtqge0n","updated":"20240619164929"},"Children":[{"Type":"NodeText","Data":"连接管理"}]},{"ID":"20240619164935-evsm5af","Type":"NodeParagraph","Properties":{"id":"20240619164935-evsm5af","updated":"20240619164935"},"Children":[{"Type":"NodeText","Data":"管理数百万的WebSocket连接需要一个有效的策略。使用Go的协程和通道来管理每个连接。"}]},{"ID":"20240619164935-o1m0a3o","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619164935-o1m0a3o","updated":"20240619164935"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"type ConnectionManager struct {\n    connections map[*websocket.Conn]bool\n    register   chan *websocket.Conn\n    unregister chan *websocket.Conn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619164930-lv0adln","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240619164930-lv0adln","updated":"20240619165523"},"Children":[{"Type":"NodeText","Data":"服务器优化"}]},{"ID":"20240619165523-pplni98","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619165523-pplni98","updated":"20240619165532"},"Children":[{"Type":"NodeText","Data":"调整系统限制"}]},{"ID":"20240619165537-k9ihsk4","Type":"NodeParagraph","Properties":{"id":"20240619165537-k9ihsk4","updated":"20240619165537"},"Children":[{"Type":"NodeText","Data":"提高操作系统的文件描述符限制。"}]},{"ID":"20240619165537-ymz5ad6","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619165537-ymz5ad6","updated":"20240619165537"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"ulimit -n 1000000\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619165543-axcj981","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619165543-axcj981","updated":"20240619165543"},"Children":[{"Type":"NodeText","Data":"优化TCP参数"}]},{"ID":"20240619165543-ok565f3","Type":"NodeParagraph","Properties":{"id":"20240619165543-ok565f3","updated":"20240619165543"},"Children":[{"Type":"NodeText","Data":"调整TCP参数以减少连接延迟和资源消耗。"}]},{"ID":"20240619165543-b2h9v1n","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619165543-b2h9v1n","updated":"20240619165543"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"sysctl -w net.ipv4.tcp_fin_timeout=30\nsysctl -w net.ipv4.tcp_tw_reuse=1\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619165555-kh7393t","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240619165555-kh7393t","updated":"20240619165606"},"Children":[{"Type":"NodeText","Data":"实现 WebSocket 服务器"}]},{"ID":"20240619165606-ppvzsuu","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619165606-ppvzsuu","updated":"20240619165634"},"Children":[{"Type":"NodeText","Data":"初始化WebSocket 服务"}]},{"ID":"20240619165635-dxfzycq","Type":"NodeParagraph","Properties":{"id":"20240619165635-dxfzycq","updated":"20240619165648"},"Children":[{"Type":"NodeText","Data":"创建WebSocket服务器并初始化连接管理器"}]},{"ID":"20240619165649-e4aunbf","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619165649-e4aunbf","updated":"20240619165905"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func NewServer() *Server {\n  return \u0026Server{\n    ConnectionManager: \u0026ConnectionManager{\n      connection: make(map[*websocket.Conn]bool),\n      register: make(chan *websocket.Conn),\n      unregister: make(chan *websocket.Conn),\n    }\n  }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619165724-b9dgx7a","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619165724-b9dgx7a","updated":"20240619165919"},"Children":[{"Type":"NodeText","Data":"处理新连接"}]},{"ID":"20240619165919-78fyeou","Type":"NodeParagraph","Properties":{"id":"20240619165919-78fyeou","updated":"20240619170053"},"Children":[{"Type":"NodeText","Data":"在服务器中实现处理新的Websocket连接的逻辑。"}]},{"ID":"20240619170053-76coqr8","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619170053-76coqr8","updated":"20240619170100"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (s *Server) HandleNewConnection(w http.ResponseWriter, r *http.Request) {\n    conn, err := websocket.Upgrade(w, r, nil, 1024, 1024)\n    if err != nil {\n        log.Println(err)\n        return\n    }\n    s.ConnectionManager.register \u003c- conn\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619170244-yzb4os8","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240619170244-yzb4os8","updated":"20240619170249"},"Children":[{"Type":"NodeText","Data":"性能优化"}]},{"ID":"20240619170250-36h8xup","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619170250-36h8xup","updated":"20240619170256"},"Children":[{"Type":"NodeText","Data":"无锁设计"}]},{"ID":"20240619170256-rg2ffrk","Type":"NodeParagraph","Properties":{"id":"20240619170256-rg2ffrk","updated":"20240619170317"},"Children":[{"Type":"NodeText","Data":"避免在处理连接时使用互斥锁，改用无锁设计提高性能"}]},{"ID":"20240619170318-cnljpsq","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240619170318-cnljpsq","updated":"20240619170325"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker","CodeBlockInfo":"Z28="},{"Type":"NodeCodeBlockCode","Data":"func (manager *ConnectionManager) run() {\n    for {\n        select {\n        case conn := \u003c-manager.register:\n            manager.connections[conn] = true\n        case conn := \u003c-manager.unregister:\n            if _, ok := manager.connections[conn]; ok {\n                delete(manager.connections, conn)\n                conn.Close()\n            }\n        }\n    }\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240619170355-wk5qyaw","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240619170355-wk5qyaw","updated":"20240619170401"},"Children":[{"Type":"NodeText","Data":"资源复用"}]},{"ID":"20240619170401-ra00mwp","Type":"NodeParagraph","Properties":{"id":"20240619170401-ra00mwp","updated":"20240619170407"},"Children":[{"Type":"NodeText","Data":"复用连接对象和缓冲区，减少内存分配和垃圾回收的压力。"}]},{"ID":"20240619170859-8q43es7","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20240619170859-8q43es7","updated":"20240619170903"},"Children":[{"Type":"NodeText","Data":"总结"}]},{"ID":"20240619170904-taf0r2k","Type":"NodeParagraph","Properties":{"id":"20240619170904-taf0r2k","updated":"20240619170908"},"Children":[{"Type":"NodeText","Data":"在Go语言中实现百万级WebSocket连接的服务是一个复杂但可行的任务。关键在于合理的架构设计、有效的连接管理策略以及针对性的性能优化。通过利用Go的协程和通道，结合"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"gorilla/websocket"},{"Type":"NodeText","Data":"​库的高效实现，可以构建出既稳定又高效的WebSocket服务。此外，操作系统和网络层面的调优也是确保高并发WebSocket服务稳定运行的重要因素。随着业务的不断发展和技术的不断进步，这样的服务将越来越成为高并发应用的关键组成部分。"}]},{"ID":"20240619170947-iqtods0","Type":"NodeParagraph","Properties":{"id":"20240619170947-iqtods0"}}]}