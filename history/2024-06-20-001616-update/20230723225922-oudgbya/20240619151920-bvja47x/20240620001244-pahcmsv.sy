{"ID":"20240620001244-pahcmsv","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3eb","id":"20240620001244-pahcmsv","title":"Go Gio：用Go语言编写跨平台即时模式GUI的库","type":"doc","updated":"20240620001304"},"Children":[{"ID":"20240620001304-njgsoju","Type":"NodeParagraph","Properties":{"id":"20240620001304-njgsoju","updated":"20240620001304"},"Children":[{"Type":"NodeText","Data":"在构建现代应用程序的过程中，不同平台间的兼容性是一个不容忽视的挑战。"},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"Go Gio"},{"Type":"NodeText","Data":" 是一个用 Go 编程语言开发的库，它致力于简化跨平台 GUI(Graphical User Interface，图形用户界面)的构建工作，提供一种所谓的 \"即时\" (Immediate Mode) 编程模型。这种模型与传统的 \"保留模式\" (Retained Mode) GUI库，例如 "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"GTK+"},{"Type":"NodeText","Data":" 或 Qt，有所不同。在即时模式中，界面的状态不是由库保留，而是每一帧都由应用程序重新构建。"}]},{"ID":"20240620001304-kbo7adm","Type":"NodeParagraph","Properties":{"id":"20240620001304-kbo7adm","updated":"20240620001304"},"Children":[{"Type":"NodeText","Data":"Go Gio 支持的平台包括 Linux, macOS, Windows, Android, iOS, "},{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"FreeBSD"},{"Type":"NodeText","Data":", OpenBSD 和 WebAssembly，几乎涵盖了所有主要的操作系统和运行环境。这使得使用 Go Gio 的开发人员可以编写一次代码，然后在多个平台上运行，而无需考虑各个平台的特定实现。"}]},{"ID":"20240620001304-7af9666","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240620001304-7af9666","updated":"20240620001304"},"Children":[{"Type":"NodeText","Data":"Go Gio 核心特性"}]},{"ID":"20240620001304-qqvueni","Type":"NodeList","ListData":{},"Properties":{"id":"20240620001304-qqvueni","updated":"20240620001305"},"Children":[{"ID":"20240620001304-j6nynwe","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240620001304-j6nynwe","updated":"20240620001304"},"Children":[{"ID":"20240620001304-u2vcaft","Type":"NodeParagraph","Properties":{"id":"20240620001304-u2vcaft","updated":"20240620001304"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"跨平台"},{"Type":"NodeText","Data":"：Gio 通过提供统一的API和顺畅的兼容性，实现了真正的跨平台GUI开发。"}]}]},{"ID":"20240620001304-xssxquw","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240620001304-xssxquw","updated":"20240620001304"},"Children":[{"ID":"20240620001304-rw9n50w","Type":"NodeParagraph","Properties":{"id":"20240620001304-rw9n50w","updated":"20240620001304"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"即时模式GUI设计"},{"Type":"NodeText","Data":"：Gio采用即时模式设计，每次重新绘制UI而非保留状态，从而简化了状态管理。"}]}]},{"ID":"20240620001304-iakbded","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240620001304-iakbded","updated":"20240620001304"},"Children":[{"ID":"20240620001304-0j13ie5","Type":"NodeParagraph","Properties":{"id":"20240620001304-0j13ie5","updated":"20240620001304"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"硬件加速渲染"},{"Type":"NodeText","Data":"：利用现代硬件的特性进行加速渲染，提升性能和流畅度。"}]}]},{"ID":"20240620001304-19bqev5","Type":"NodeListItem","ListData":{"BulletChar":42,"Marker":"Kg=="},"Properties":{"id":"20240620001304-19bqev5","updated":"20240620001304"},"Children":[{"ID":"20240620001304-xuirwz1","Type":"NodeParagraph","Properties":{"id":"20240620001304-xuirwz1","updated":"20240620001304"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"声明式API"},{"Type":"NodeText","Data":"：Gio 的API倾向于声明式，使得界面开发直观和模块化。"}]}]}]},{"ID":"20240620001304-sv7u9hq","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240620001304-sv7u9hq","updated":"20240620001304"},"Children":[{"Type":"NodeText","Data":"使用 Go Gio 构建一个简单的窗口"}]},{"ID":"20240620001304-nandk9w","Type":"NodeParagraph","Properties":{"id":"20240620001304-nandk9w","updated":"20240620001305"},"Children":[{"Type":"NodeText","Data":"在开始使用 Gio 之前，需要先安装 Go 语言环境，然后使用 Go的包管理工具"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"go get"},{"Type":"NodeText","Data":"​来安装 Gio。"}]},{"ID":"20240620001304-hc27751","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240620001304-hc27751","updated":"20240620001305"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"go get gioui.org\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240620001304-9kkpreu","Type":"NodeParagraph","Properties":{"id":"20240620001304-9kkpreu","updated":"20240620001305"},"Children":[{"Type":"NodeText","Data":"以下是一个使用 Go Gio 创建窗口的基本例子："}]},{"ID":"20240620001304-rk2g5cm","Type":"NodeCodeBlock","IsFencedCodeBlock":true,"Properties":{"id":"20240620001304-rk2g5cm","updated":"20240620001305"},"Children":[{"Type":"NodeCodeBlockFenceOpenMarker","Data":"```"},{"Type":"NodeCodeBlockFenceInfoMarker"},{"Type":"NodeCodeBlockCode","Data":"package main\n\nimport (\n    \"gioui.org/app\"\n    \"gioui.org/io/system\"\n    \"gioui.org/layout\"\n    \"gioui.org/op\"\n)\n\nfunc main() {\n    go func() {\n        // 创建新窗口\n        w := app.NewWindow()\n        var ops op.Ops\n        for e := range w.Events() {\n            switch e := e.(type) {\n            case system.DestroyEvent:\n                // 窗口被销毁\n                return\n            case system.FrameEvent:\n                gtx := layout.NewContext(\u0026ops, e)\n                // 在这里绘制 UI\n\n                e.Frame(gtx.Ops)\n            }\n        }\n    }()\n    app.Main()\n}\n"},{"Type":"NodeCodeBlockFenceCloseMarker","Data":"```"}]},{"ID":"20240620001304-k6nohoi","Type":"NodeParagraph","Properties":{"id":"20240620001304-k6nohoi","updated":"20240620001305"},"Children":[{"Type":"NodeText","Data":"在上述代码中，我们首先调用 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"app.NewWindow"},{"Type":"NodeText","Data":"​ 创建一个新的窗口。Gio 会为每个窗口事件（如FrameEvent用于绘制UI，DestroyEvent用于窗口关闭）提供事件循环，我们通过 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"w.Events()"},{"Type":"NodeText","Data":"​ 范围循环来处理它们。"},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"system.FrameEvent"},{"Type":"NodeText","Data":"​ 事件允许我们绘制或更新GUI，而 "},{"Type":"NodeTextMark","TextMarkType":"code","TextMarkTextContent":"system.DestroyEvent"},{"Type":"NodeText","Data":"​ 则用于清理资源并关闭窗口。"}]},{"ID":"20240620001304-n7kx6kt","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240620001304-n7kx6kt","updated":"20240620001304"},"Children":[{"Type":"NodeText","Data":"编写跨平台的GUI"}]},{"ID":"20240620001304-4xfi9q0","Type":"NodeParagraph","Properties":{"id":"20240620001304-4xfi9q0","updated":"20240620001305"},"Children":[{"Type":"NodeText","Data":"借助 Go Gio，我们可以创建各种跨平台的 GUI 应用。每个应用都可以被编译成相应平台的可执行文件。例如，如果要构建面向 MacOS、Windows 和 Linux 的GUI应用，我们可以分别在各自的环境中编译代码，Gio 会处理底层的差异，确保每个平台都能够提供一致的用户体验。"}]},{"ID":"20240620001304-eekrv3j","Type":"NodeParagraph","Properties":{"id":"20240620001304-eekrv3j","updated":"20240620001305"},"Children":[{"Type":"NodeText","Data":"可以探索 Gio 的 例子 来深入了解如何构建实际的GUI应用程序。"}]},{"ID":"20240620001304-1qo2v2h","Type":"NodeHeading","HeadingLevel":2,"Properties":{"id":"20240620001304-1qo2v2h","updated":"20240620001304"},"Children":[{"Type":"NodeText","Data":"总结与扩展"}]},{"ID":"20240620001304-v4dlig4","Type":"NodeParagraph","Properties":{"id":"20240620001304-v4dlig4","updated":"20240620001305"},"Children":[{"Type":"NodeText","Data":"Go Gio 证实了 Go 语言在现代GUI开发中的潜力。借助其跨平台性和即时模式的特性，开发者可以高效地创建美观、响应迅速的GUI应用，而且无需担心不同平台间的差异。Gio 继续成熟的同时，它可能会成为越来越多Go开发者的首选UI库。"}]}]}