{"ID":"20231202122517-zmyy6h5","Spec":"1","Type":"NodeDocument","Properties":{"icon":"1f3df","id":"20231202122517-zmyy6h5","tags":"公众号-Golang语言开发栈","title":"Golang 语言怎么使用 Painc 函数","updated":"20231202122652"},"Children":[{"ID":"20231202122517-sjy6589","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231202122517-sjy6589","updated":"20231202122550"},"Children":[{"Type":"NodeText","Data":"介绍"}]},{"ID":"20231202122550-o55kn4v","Type":"NodeParagraph","Properties":{"id":"20231202122550-o55kn4v","updated":"20231202122650"},"Children":[{"Type":"NodeTextMark","TextMarkType":"strong","TextMarkTextContent":"panic 是一个 Go 内置函数，它用来停止当前常规控制流并启动 panicking（运行时恐慌）过程。当函数 F 调用 panic 函数时，函数 F 的执行停止，函数 F 中已进行了求值的 defer 函数都将得到正常执行，然后函数 F 将控制权返还给其调用者。对于函数 F 的调用者而言，函数 F 之后的行为就如同调用者调用的函数是 panic 一样，该 panicking（运行时恐慌）过程将继续在栈上进行下去，直到当前 goroutine 中的所有函数都返回为止，此时程序将崩溃退出。"}]},{"ID":"20231202122652-r4ehgyg","Type":"NodeHeading","HeadingLevel":1,"Properties":{"id":"20231202122652-r4ehgyg"}},{"ID":"20231202122646-qjuz48q","Type":"NodeParagraph","Properties":{"id":"20231202122646-qjuz48q","updated":"20231202122647"}}]}